var amy = (function (exports) {
  'use strict';
  
  var out_of_memory = /* tuple */[
    "Out_of_memory",
    0
  ];
  
  var sys_error = /* tuple */[
    "Sys_error",
    -1
  ];
  
  var failure = /* tuple */[
    "Failure",
    -2
  ];
  
  var invalid_argument = /* tuple */[
    "Invalid_argument",
    -3
  ];
  
  var end_of_file = /* tuple */[
    "End_of_file",
    -4
  ];
  
  var division_by_zero = /* tuple */[
    "Division_by_zero",
    -5
  ];
  
  var not_found = /* tuple */[
    "Not_found",
    -6
  ];
  
  var match_failure = /* tuple */[
    "Match_failure",
    -7
  ];
  
  var stack_overflow = /* tuple */[
    "Stack_overflow",
    -8
  ];
  
  var sys_blocked_io = /* tuple */[
    "Sys_blocked_io",
    -9
  ];
  
  var assert_failure = /* tuple */[
    "Assert_failure",
    -10
  ];
  
  var undefined_recursive_module = /* tuple */[
    "Undefined_recursive_module",
    -11
  ];
  
  out_of_memory.tag = 248;
  
  sys_error.tag = 248;
  
  failure.tag = 248;
  
  invalid_argument.tag = 248;
  
  end_of_file.tag = 248;
  
  division_by_zero.tag = 248;
  
  not_found.tag = 248;
  
  match_failure.tag = 248;
  
  stack_overflow.tag = 248;
  
  sys_blocked_io.tag = 248;
  
  assert_failure.tag = 248;
  
  undefined_recursive_module.tag = 248;
  
  
  /*  Not a pure module */
  
  function caml_array_sub(x, offset, len) {
    var result = new Array(len);
    var j = 0;
    var i = offset;
    while(j < len) {
      result[j] = x[i];
      j = j + 1 | 0;
      i = i + 1 | 0;
    }
    return result;
  }
  
  function caml_array_set(xs, index, newval) {
    if (index < 0 || index >= xs.length) {
      throw [
            invalid_argument,
            "index out of bounds"
          ];
    } else {
      xs[index] = newval;
      return /* () */0;
    }
  }
  
  function caml_array_get(xs, index) {
    if (index < 0 || index >= xs.length) {
      throw [
            invalid_argument,
            "index out of bounds"
          ];
    } else {
      return xs[index];
    }
  }
  
  function caml_make_vect(len, init) {
    var b = new Array(len);
    for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
      b[i] = init;
    }
    return b;
  }
  
  function caml_array_blit(a1, i1, a2, i2, len) {
    if (i2 <= i1) {
      for(var j = 0 ,j_finish = len - 1 | 0; j <= j_finish; ++j){
        a2[j + i2 | 0] = a1[j + i1 | 0];
      }
      return /* () */0;
    } else {
      for(var j$1 = len - 1 | 0; j$1 >= 0; --j$1){
        a2[j$1 + i2 | 0] = a1[j$1 + i1 | 0];
      }
      return /* () */0;
    }
  }
  
  function caml_array_dup(prim) {
    return prim.slice(0);
  }
  
  
  /* No side effect */
  
  function app(_f, _args) {
    while(true) {
      var args = _args;
      var f = _f;
      var arity = f.length;
      var arity$1 = arity === 0 ? 1 : arity;
      var len = args.length;
      var d = arity$1 - len | 0;
      if (d === 0) {
        return f.apply(null, args);
      } else if (d < 0) {
        _args = caml_array_sub(args, arity$1, -d | 0);
        _f = f.apply(null, caml_array_sub(args, 0, arity$1));
        continue ;
      } else {
        return (function(f,args){
        return function (x) {
          return app(f, args.concat(/* array */[x]));
        }
        }(f,args));
      }
    }
  }
  
  function curry_1(o, a0, arity) {
    if (arity > 7 || arity < 0) {
      return app(o, /* array */[a0]);
    } else {
      switch (arity) {
        case 0 : 
        case 1 : 
            return o(a0);
        case 2 : 
            return (function (param) {
                return o(a0, param);
              });
        case 3 : 
            return (function (param, param$1) {
                return o(a0, param, param$1);
              });
        case 4 : 
            return (function (param, param$1, param$2) {
                return o(a0, param, param$1, param$2);
              });
        case 5 : 
            return (function (param, param$1, param$2, param$3) {
                return o(a0, param, param$1, param$2, param$3);
              });
        case 6 : 
            return (function (param, param$1, param$2, param$3, param$4) {
                return o(a0, param, param$1, param$2, param$3, param$4);
              });
        case 7 : 
            return (function (param, param$1, param$2, param$3, param$4, param$5) {
                return o(a0, param, param$1, param$2, param$3, param$4, param$5);
              });
        
      }
    }
  }
  
  function _1(o, a0) {
    var arity = o.length;
    if (arity === 1) {
      return o(a0);
    } else {
      return curry_1(o, a0, arity);
    }
  }
  
  function curry_2(o, a0, a1, arity) {
    if (arity > 7 || arity < 0) {
      return app(o, /* array */[
                  a0,
                  a1
                ]);
    } else {
      switch (arity) {
        case 0 : 
        case 1 : 
            return app(o(a0), /* array */[a1]);
        case 2 : 
            return o(a0, a1);
        case 3 : 
            return (function (param) {
                return o(a0, a1, param);
              });
        case 4 : 
            return (function (param, param$1) {
                return o(a0, a1, param, param$1);
              });
        case 5 : 
            return (function (param, param$1, param$2) {
                return o(a0, a1, param, param$1, param$2);
              });
        case 6 : 
            return (function (param, param$1, param$2, param$3) {
                return o(a0, a1, param, param$1, param$2, param$3);
              });
        case 7 : 
            return (function (param, param$1, param$2, param$3, param$4) {
                return o(a0, a1, param, param$1, param$2, param$3, param$4);
              });
        
      }
    }
  }
  
  function _2(o, a0, a1) {
    var arity = o.length;
    if (arity === 2) {
      return o(a0, a1);
    } else {
      return curry_2(o, a0, a1, arity);
    }
  }
  
  function curry_3(o, a0, a1, a2, arity) {
    var exit = 0;
    if (arity > 7 || arity < 0) {
      return app(o, /* array */[
                  a0,
                  a1,
                  a2
                ]);
    } else {
      switch (arity) {
        case 0 : 
        case 1 : 
            exit = 1;
            break;
        case 2 : 
            return app(o(a0, a1), /* array */[a2]);
        case 3 : 
            return o(a0, a1, a2);
        case 4 : 
            return (function (param) {
                return o(a0, a1, a2, param);
              });
        case 5 : 
            return (function (param, param$1) {
                return o(a0, a1, a2, param, param$1);
              });
        case 6 : 
            return (function (param, param$1, param$2) {
                return o(a0, a1, a2, param, param$1, param$2);
              });
        case 7 : 
            return (function (param, param$1, param$2, param$3) {
                return o(a0, a1, a2, param, param$1, param$2, param$3);
              });
        
      }
    }
    if (exit === 1) {
      return app(o(a0), /* array */[
                  a1,
                  a2
                ]);
    }
    
  }
  
  function _3(o, a0, a1, a2) {
    var arity = o.length;
    if (arity === 3) {
      return o(a0, a1, a2);
    } else {
      return curry_3(o, a0, a1, a2, arity);
    }
  }
  
  function curry_4(o, a0, a1, a2, a3, arity) {
    var exit = 0;
    if (arity > 7 || arity < 0) {
      return app(o, /* array */[
                  a0,
                  a1,
                  a2,
                  a3
                ]);
    } else {
      switch (arity) {
        case 0 : 
        case 1 : 
            exit = 1;
            break;
        case 2 : 
            return app(o(a0, a1), /* array */[
                        a2,
                        a3
                      ]);
        case 3 : 
            return app(o(a0, a1, a2), /* array */[a3]);
        case 4 : 
            return o(a0, a1, a2, a3);
        case 5 : 
            return (function (param) {
                return o(a0, a1, a2, a3, param);
              });
        case 6 : 
            return (function (param, param$1) {
                return o(a0, a1, a2, a3, param, param$1);
              });
        case 7 : 
            return (function (param, param$1, param$2) {
                return o(a0, a1, a2, a3, param, param$1, param$2);
              });
        
      }
    }
    if (exit === 1) {
      return app(o(a0), /* array */[
                  a1,
                  a2,
                  a3
                ]);
    }
    
  }
  
  function _4(o, a0, a1, a2, a3) {
    var arity = o.length;
    if (arity === 4) {
      return o(a0, a1, a2, a3);
    } else {
      return curry_4(o, a0, a1, a2, a3, arity);
    }
  }
  
  function curry_5(o, a0, a1, a2, a3, a4, arity) {
    var exit = 0;
    if (arity > 7 || arity < 0) {
      return app(o, /* array */[
                  a0,
                  a1,
                  a2,
                  a3,
                  a4
                ]);
    } else {
      switch (arity) {
        case 0 : 
        case 1 : 
            exit = 1;
            break;
        case 2 : 
            return app(o(a0, a1), /* array */[
                        a2,
                        a3,
                        a4
                      ]);
        case 3 : 
            return app(o(a0, a1, a2), /* array */[
                        a3,
                        a4
                      ]);
        case 4 : 
            return app(o(a0, a1, a2, a3), /* array */[a4]);
        case 5 : 
            return o(a0, a1, a2, a3, a4);
        case 6 : 
            return (function (param) {
                return o(a0, a1, a2, a3, a4, param);
              });
        case 7 : 
            return (function (param, param$1) {
                return o(a0, a1, a2, a3, a4, param, param$1);
              });
        
      }
    }
    if (exit === 1) {
      return app(o(a0), /* array */[
                  a1,
                  a2,
                  a3,
                  a4
                ]);
    }
    
  }
  
  function _5(o, a0, a1, a2, a3, a4) {
    var arity = o.length;
    if (arity === 5) {
      return o(a0, a1, a2, a3, a4);
    } else {
      return curry_5(o, a0, a1, a2, a3, a4, arity);
    }
  }
  
  
  /* No side effect */
  
  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
  
  
  
  function unwrapExports (x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }
  
  function createCommonjsModule(fn, module) {
    return module = { exports: {} }, fn(module, module.exports), module.exports;
  }
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  /**
   * Use invariant() to assert state which your program assumes to be true.
   *
   * Provide sprintf-style format (only %s is supported) and arguments
   * to provide information about what broke and what you were
   * expecting.
   *
   * The invariant message will be stripped in production, but the invariant
   * will remain to ensure logic does not differ in production.
   */
  
  var validateFormat = function validateFormat(format) {};
  
  {
    validateFormat = function validateFormat(format) {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    };
  }
  
  function invariant(condition, format, a, b, c, d, e, f) {
    validateFormat(format);
  
    if (!condition) {
      var error;
      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }
  
      error.framesToPop = 1; // we don't care about invariant's own frame
      throw error;
    }
  }
  
  var invariant_1 = invariant;
  
  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  
  /* eslint-disable no-unused-vars */
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;
  
  function toObject(val) {
    if (val === null || val === undefined) {
      throw new TypeError('Object.assign cannot be called with null or undefined');
    }
  
    return Object(val);
  }
  
  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false;
      }
  
      // Detect buggy property enumeration order in older V8 versions.
  
      // https://bugs.chromium.org/p/v8/issues/detail?id=4118
      var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
      test1[5] = 'de';
      if (Object.getOwnPropertyNames(test1)[0] === '5') {
        return false;
      }
  
      // https://bugs.chromium.org/p/v8/issues/detail?id=3056
      var test2 = {};
      for (var i = 0; i < 10; i++) {
        test2['_' + String.fromCharCode(i)] = i;
      }
      var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
        return test2[n];
      });
      if (order2.join('') !== '0123456789') {
        return false;
      }
  
      // https://bugs.chromium.org/p/v8/issues/detail?id=3056
      var test3 = {};
      'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
        test3[letter] = letter;
      });
      if (Object.keys(Object.assign({}, test3)).join('') !==
          'abcdefghijklmnopqrst') {
        return false;
      }
  
      return true;
    } catch (err) {
      // We don't expect any of the above to throw, but better to be safe.
      return false;
    }
  }
  
  var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
    var from;
    var to = toObject(target);
    var symbols;
  
    for (var s = 1; s < arguments.length; s++) {
      from = Object(arguments[s]);
  
      for (var key in from) {
        if (hasOwnProperty.call(from, key)) {
          to[key] = from[key];
        }
      }
  
      if (getOwnPropertySymbols) {
        symbols = getOwnPropertySymbols(from);
        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable.call(from, symbols[i])) {
            to[symbols[i]] = from[symbols[i]];
          }
        }
      }
    }
  
    return to;
  };
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  var emptyObject = {};
  
  {
    Object.freeze(emptyObject);
  }
  
  var emptyObject_1 = emptyObject;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  function makeEmptyFunction(arg) {
    return function () {
      return arg;
    };
  }
  
  /**
   * This function accepts and discards inputs; it has no side effects. This is
   * primarily useful idiomatically for overridable function endpoints which
   * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
   */
  var emptyFunction = function emptyFunction() {};
  
  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);
  emptyFunction.thatReturnsThis = function () {
    return this;
  };
  emptyFunction.thatReturnsArgument = function (arg) {
    return arg;
  };
  
  var emptyFunction_1 = emptyFunction;
  
  /**
   * Similar to invariant but only logs a warning if the condition is not met.
   * This can be used to log issues in development environments in critical
   * paths. Removing the logging code for production environments will keep the
   * same logic and follow the same code paths.
   */
  
  var warning = emptyFunction_1;
  
  {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
  
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };
  
    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }
  
      if (format.indexOf('Failed Composite propType: ') === 0) {
        return; // Ignore CompositeComponent proptype check.
      }
  
      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }
  
        printWarning.apply(undefined, [format].concat(args));
      }
    };
  }
  
  var warning_1 = warning;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  
  var ReactPropTypesSecret$1 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  
  var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;
  
  var printWarning$1 = function() {};
  
  {
    var ReactPropTypesSecret = ReactPropTypesSecret_1;
    var loggedTypeFailures = {};
  
    printWarning$1 = function(text) {
      var message = 'Warning: ' + text;
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };
  }
  
  /**
   * Assert that the values match with the type specs.
   * Error messages are memorized and will only be shown once.
   *
   * @param {object} typeSpecs Map of name to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @param {string} componentName Name of the component for error messages.
   * @param {?Function} getStack Returns the component stack.
   * @private
   */
  function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    {
      for (var typeSpecName in typeSpecs) {
        if (typeSpecs.hasOwnProperty(typeSpecName)) {
          var error;
          // Prop type validation may throw. In case they do, we don't want to
          // fail the render phase where it didn't fail before. So we log it.
          // After these have been cleaned up, we'll let them throw.
          try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
              var err = Error(
                (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
                'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
              );
              err.name = 'Invariant Violation';
              throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
          } catch (ex) {
            error = ex;
          }
          if (error && !(error instanceof Error)) {
            printWarning$1(
              (componentName || 'React class') + ': type specification of ' +
              location + ' `' + typeSpecName + '` is invalid; the type checker ' +
              'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
              'You may have forgotten to pass an argument to the type checker ' +
              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
              'shape all require an argument).'
            );
  
          }
          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;
  
            var stack = getStack ? getStack() : '';
  
            printWarning$1(
              'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
            );
          }
        }
      }
    }
  }
  
  var checkPropTypes_1 = checkPropTypes;
  
  var react_development = createCommonjsModule(function (module) {
  /** @license React v16.4.2
   * react.development.js
   *
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  
  {
    (function() {
  var _assign$$1 = objectAssign;
  var invariant = invariant_1;
  var emptyObject = emptyObject_1;
  var warning = warning_1;
  var emptyFunction = emptyFunction_1;
  var checkPropTypes = checkPropTypes_1;
  
  // TODO: this is special because it gets imported during build.
  
  var ReactVersion = '16.4.2';
  
  // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
  // nor polyfill, then a plain number is used for performance.
  var hasSymbol = typeof Symbol === 'function' && Symbol.for;
  
  var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
  var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
  var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
  var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
  var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
  var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
  var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
  var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
  var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
  var REACT_TIMEOUT_TYPE = hasSymbol ? Symbol.for('react.timeout') : 0xead1;
  
  var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator';
  
  function getIteratorFn(maybeIterable) {
    if (maybeIterable === null || typeof maybeIterable === 'undefined') {
      return null;
    }
    var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
    if (typeof maybeIterator === 'function') {
      return maybeIterator;
    }
    return null;
  }
  
  // Relying on the `invariant()` implementation lets us
  // have preserve the format and params in the www builds.
  
  // Exports ReactDOM.createRoot
  
  
  // Experimental error-boundary API that can recover from errors within a single
  // render phase
  
  // Suspense
  var enableSuspense = false;
  // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
  
  
  // In some cases, StrictMode should also double-render lifecycles.
  // This can be confusing for tests though,
  // And it can be bad for performance in production.
  // This feature flag can be used to control the behavior:
  
  
  // To preserve the "Pause on caught exceptions" behavior of the debugger, we
  // replay the begin phase of a failed component inside invokeGuardedCallback.
  
  
  // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
  
  
  // Warn about legacy context API
  
  
  // Gather advanced timing metrics for Profiler subtrees.
  
  
  // Only used in www builds.
  
  /**
   * Forked from fbjs/warning:
   * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
   *
   * Only change is we use console.warn instead of console.error,
   * and do nothing when 'console' is not supported.
   * This really simplifies the code.
   * ---
   * Similar to invariant but only logs a warning if the condition is not met.
   * This can be used to log issues in development environments in critical
   * paths. Removing the logging code for production environments will keep the
   * same logic and follow the same code paths.
   */
  
  var lowPriorityWarning = function () {};
  
  {
    var printWarning = function (format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
  
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.warn(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };
  
    lowPriorityWarning = function (condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }
      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }
  
        printWarning.apply(undefined, [format].concat(args));
      }
    };
  }
  
  var lowPriorityWarning$1 = lowPriorityWarning;
  
  var didWarnStateUpdateForUnmountedComponent = {};
  
  function warnNoop(publicInstance, callerName) {
    {
      var _constructor = publicInstance.constructor;
      var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
      var warningKey = componentName + '.' + callerName;
      if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
        return;
      }
      warning(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
      didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
  }
  
  /**
   * This is the abstract API for an update queue.
   */
  var ReactNoopUpdateQueue = {
    /**
     * Checks whether or not this composite component is mounted.
     * @param {ReactClass} publicInstance The instance we want to test.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function (publicInstance) {
      return false;
    },
  
    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {?function} callback Called after component is updated.
     * @param {?string} callerName name of the calling function in the public API.
     * @internal
     */
    enqueueForceUpdate: function (publicInstance, callback, callerName) {
      warnNoop(publicInstance, 'forceUpdate');
    },
  
    /**
     * Replaces all of the state. Always use this or `setState` to mutate state.
     * You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} completeState Next state.
     * @param {?function} callback Called after component is updated.
     * @param {?string} callerName name of the calling function in the public API.
     * @internal
     */
    enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
      warnNoop(publicInstance, 'replaceState');
    },
  
    /**
     * Sets a subset of the state. This only exists because _pendingState is
     * internal. This provides a merging strategy that is not available to deep
     * properties which is confusing. TODO: Expose pendingState or don't use it
     * during the merge.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} partialState Next partial state to be merged with state.
     * @param {?function} callback Called after component is updated.
     * @param {?string} Name of the calling function in the public API.
     * @internal
     */
    enqueueSetState: function (publicInstance, partialState, callback, callerName) {
      warnNoop(publicInstance, 'setState');
    }
  };
  
  /**
   * Base class helpers for the updating state of a component.
   */
  function Component(props, context, updater) {
    this.props = props;
    this.context = context;
    this.refs = emptyObject;
    // We initialize the default updater but the real one gets injected by the
    // renderer.
    this.updater = updater || ReactNoopUpdateQueue;
  }
  
  Component.prototype.isReactComponent = {};
  
  /**
   * Sets a subset of the state. Always use this to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * When a function is provided to setState, it will be called at some point in
   * the future (not synchronously). It will be called with the up to date
   * component arguments (state, props, context). These values can be different
   * from this.* because your function may be called after receiveProps but before
   * shouldComponentUpdate, and this new state, props, and context will not yet be
   * assigned to this.
   *
   * @param {object|function} partialState Next partial state or function to
   *        produce next partial state to be merged with current state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  Component.prototype.setState = function (partialState, callback) {
    !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
    this.updater.enqueueSetState(this, partialState, callback, 'setState');
  };
  
  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  Component.prototype.forceUpdate = function (callback) {
    this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
  };
  
  /**
   * Deprecated APIs. These APIs used to exist on classic React classes but since
   * we would like to deprecate them, we're not going to move them over to this
   * modern base class. Instead, we define a getter that warns if it's accessed.
   */
  {
    var deprecatedAPIs = {
      isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
      replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
    };
    var defineDeprecationWarning = function (methodName, info) {
      Object.defineProperty(Component.prototype, methodName, {
        get: function () {
          lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
          return undefined;
        }
      });
    };
    for (var fnName in deprecatedAPIs) {
      if (deprecatedAPIs.hasOwnProperty(fnName)) {
        defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
      }
    }
  }
  
  function ComponentDummy() {}
  ComponentDummy.prototype = Component.prototype;
  
  /**
   * Convenience component with default shallow equality check for sCU.
   */
  function PureComponent(props, context, updater) {
    this.props = props;
    this.context = context;
    this.refs = emptyObject;
    this.updater = updater || ReactNoopUpdateQueue;
  }
  
  var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
  pureComponentPrototype.constructor = PureComponent;
  // Avoid an extra prototype jump for these methods.
  _assign$$1(pureComponentPrototype, Component.prototype);
  pureComponentPrototype.isPureReactComponent = true;
  
  // an immutable object with a single mutable value
  function createRef() {
    var refObject = {
      current: null
    };
    {
      Object.seal(refObject);
    }
    return refObject;
  }
  
  /**
   * Keeps track of the current owner.
   *
   * The current owner is the component who should own any components that are
   * currently being constructed.
   */
  var ReactCurrentOwner = {
    /**
     * @internal
     * @type {ReactComponent}
     */
    current: null
  };
  
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  
  var RESERVED_PROPS = {
    key: true,
    ref: true,
    __self: true,
    __source: true
  };
  
  var specialPropKeyWarningShown = void 0;
  var specialPropRefWarningShown = void 0;
  
  function hasValidRef(config) {
    {
      if (hasOwnProperty.call(config, 'ref')) {
        var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
        if (getter && getter.isReactWarning) {
          return false;
        }
      }
    }
    return config.ref !== undefined;
  }
  
  function hasValidKey(config) {
    {
      if (hasOwnProperty.call(config, 'key')) {
        var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
        if (getter && getter.isReactWarning) {
          return false;
        }
      }
    }
    return config.key !== undefined;
  }
  
  function defineKeyPropWarningGetter(props, displayName) {
    var warnAboutAccessingKey = function () {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;
        warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
      }
    };
    warnAboutAccessingKey.isReactWarning = true;
    Object.defineProperty(props, 'key', {
      get: warnAboutAccessingKey,
      configurable: true
    });
  }
  
  function defineRefPropWarningGetter(props, displayName) {
    var warnAboutAccessingRef = function () {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;
        warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
      }
    };
    warnAboutAccessingRef.isReactWarning = true;
    Object.defineProperty(props, 'ref', {
      get: warnAboutAccessingRef,
      configurable: true
    });
  }
  
  /**
   * Factory method to create a new React element. This no longer adheres to
   * the class pattern, so do not use new to call it. Also, no instanceof check
   * will work. Instead test $$typeof field against Symbol.for('react.element') to check
   * if something is a React Element.
   *
   * @param {*} type
   * @param {*} key
   * @param {string|object} ref
   * @param {*} self A *temporary* helper to detect places where `this` is
   * different from the `owner` when React.createElement is called, so that we
   * can warn. We want to get rid of owner and replace string `ref`s with arrow
   * functions, and as long as `this` and owner are the same, there will be no
   * change in behavior.
   * @param {*} source An annotation object (added by a transpiler or otherwise)
   * indicating filename, line number, and/or other information.
   * @param {*} owner
   * @param {*} props
   * @internal
   */
  var ReactElement = function (type, key, ref, self, source, owner, props) {
    var element = {
      // This tag allows us to uniquely identify this as a React Element
      $$typeof: REACT_ELEMENT_TYPE,
  
      // Built-in properties that belong on the element
      type: type,
      key: key,
      ref: ref,
      props: props,
  
      // Record the component responsible for creating this element.
      _owner: owner
    };
  
    {
      // The validation flag is currently mutative. We put it on
      // an external backing store so that we can freeze the whole object.
      // This can be replaced with a WeakMap once they are implemented in
      // commonly used development environments.
      element._store = {};
  
      // To make comparing ReactElements easier for testing purposes, we make
      // the validation flag non-enumerable (where possible, which should
      // include every environment we run tests in), so the test framework
      // ignores it.
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
      if (Object.freeze) {
        Object.freeze(element.props);
        Object.freeze(element);
      }
    }
  
    return element;
  };
  
  /**
   * Create and return a new ReactElement of the given type.
   * See https://reactjs.org/docs/react-api.html#createelement
   */
  function createElement(type, config, children) {
    var propName = void 0;
  
    // Reserved names are extracted
    var props = {};
  
    var key = null;
    var ref = null;
    var self = null;
    var source = null;
  
    if (config != null) {
      if (hasValidRef(config)) {
        ref = config.ref;
      }
      if (hasValidKey(config)) {
        key = '' + config.key;
      }
  
      self = config.__self === undefined ? null : config.__self;
      source = config.__source === undefined ? null : config.__source;
      // Remaining properties are added to a new props object
      for (propName in config) {
        if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
          props[propName] = config[propName];
        }
      }
    }
  
    // Children can be more than one argument, and those are transferred onto
    // the newly allocated props object.
    var childrenLength = arguments.length - 2;
    if (childrenLength === 1) {
      props.children = children;
    } else if (childrenLength > 1) {
      var childArray = Array(childrenLength);
      for (var i = 0; i < childrenLength; i++) {
        childArray[i] = arguments[i + 2];
      }
      {
        if (Object.freeze) {
          Object.freeze(childArray);
        }
      }
      props.children = childArray;
    }
  
    // Resolve default props
    if (type && type.defaultProps) {
      var defaultProps = type.defaultProps;
      for (propName in defaultProps) {
        if (props[propName] === undefined) {
          props[propName] = defaultProps[propName];
        }
      }
    }
    {
      if (key || ref) {
        if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }
          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
      }
    }
    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
  }
  
  /**
   * Return a function that produces ReactElements of a given type.
   * See https://reactjs.org/docs/react-api.html#createfactory
   */
  
  
  function cloneAndReplaceKey(oldElement, newKey) {
    var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
  
    return newElement;
  }
  
  /**
   * Clone and return a new ReactElement using element as the starting point.
   * See https://reactjs.org/docs/react-api.html#cloneelement
   */
  function cloneElement(element, config, children) {
    !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;
  
    var propName = void 0;
  
    // Original props are copied
    var props = _assign$$1({}, element.props);
  
    // Reserved names are extracted
    var key = element.key;
    var ref = element.ref;
    // Self is preserved since the owner is preserved.
    var self = element._self;
    // Source is preserved since cloneElement is unlikely to be targeted by a
    // transpiler, and the original source is probably a better indicator of the
    // true owner.
    var source = element._source;
  
    // Owner will be preserved, unless ref is overridden
    var owner = element._owner;
  
    if (config != null) {
      if (hasValidRef(config)) {
        // Silently steal the ref from the parent.
        ref = config.ref;
        owner = ReactCurrentOwner.current;
      }
      if (hasValidKey(config)) {
        key = '' + config.key;
      }
  
      // Remaining properties override existing props
      var defaultProps = void 0;
      if (element.type && element.type.defaultProps) {
        defaultProps = element.type.defaultProps;
      }
      for (propName in config) {
        if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
          if (config[propName] === undefined && defaultProps !== undefined) {
            // Resolve default props
            props[propName] = defaultProps[propName];
          } else {
            props[propName] = config[propName];
          }
        }
      }
    }
  
    // Children can be more than one argument, and those are transferred onto
    // the newly allocated props object.
    var childrenLength = arguments.length - 2;
    if (childrenLength === 1) {
      props.children = children;
    } else if (childrenLength > 1) {
      var childArray = Array(childrenLength);
      for (var i = 0; i < childrenLength; i++) {
        childArray[i] = arguments[i + 2];
      }
      props.children = childArray;
    }
  
    return ReactElement(element.type, key, ref, self, source, owner, props);
  }
  
  /**
   * Verifies the object is a ReactElement.
   * See https://reactjs.org/docs/react-api.html#isvalidelement
   * @param {?object} object
   * @return {boolean} True if `object` is a valid component.
   * @final
   */
  function isValidElement(object) {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  }
  
  var ReactDebugCurrentFrame = {};
  
  {
    // Component that is being worked on
    ReactDebugCurrentFrame.getCurrentStack = null;
  
    ReactDebugCurrentFrame.getStackAddendum = function () {
      var impl = ReactDebugCurrentFrame.getCurrentStack;
      if (impl) {
        return impl();
      }
      return null;
    };
  }
  
  var SEPARATOR = '.';
  var SUBSEPARATOR = ':';
  
  /**
   * Escape and wrap key so it is safe to use as a reactid
   *
   * @param {string} key to be escaped.
   * @return {string} the escaped key.
   */
  function escape(key) {
    var escapeRegex = /[=:]/g;
    var escaperLookup = {
      '=': '=0',
      ':': '=2'
    };
    var escapedString = ('' + key).replace(escapeRegex, function (match) {
      return escaperLookup[match];
    });
  
    return '$' + escapedString;
  }
  
  /**
   * TODO: Test that a single child and an array with one item have the same key
   * pattern.
   */
  
  var didWarnAboutMaps = false;
  
  var userProvidedKeyEscapeRegex = /\/+/g;
  function escapeUserProvidedKey(text) {
    return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
  }
  
  var POOL_SIZE = 10;
  var traverseContextPool = [];
  function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
    if (traverseContextPool.length) {
      var traverseContext = traverseContextPool.pop();
      traverseContext.result = mapResult;
      traverseContext.keyPrefix = keyPrefix;
      traverseContext.func = mapFunction;
      traverseContext.context = mapContext;
      traverseContext.count = 0;
      return traverseContext;
    } else {
      return {
        result: mapResult,
        keyPrefix: keyPrefix,
        func: mapFunction,
        context: mapContext,
        count: 0
      };
    }
  }
  
  function releaseTraverseContext(traverseContext) {
    traverseContext.result = null;
    traverseContext.keyPrefix = null;
    traverseContext.func = null;
    traverseContext.context = null;
    traverseContext.count = 0;
    if (traverseContextPool.length < POOL_SIZE) {
      traverseContextPool.push(traverseContext);
    }
  }
  
  /**
   * @param {?*} children Children tree container.
   * @param {!string} nameSoFar Name of the key path so far.
   * @param {!function} callback Callback to invoke with each child found.
   * @param {?*} traverseContext Used to pass information throughout the traversal
   * process.
   * @return {!number} The number of children in this subtree.
   */
  function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
    var type = typeof children;
  
    if (type === 'undefined' || type === 'boolean') {
      // All of the above are perceived as null.
      children = null;
    }
  
    var invokeCallback = false;
  
    if (children === null) {
      invokeCallback = true;
    } else {
      switch (type) {
        case 'string':
        case 'number':
          invokeCallback = true;
          break;
        case 'object':
          switch (children.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_PORTAL_TYPE:
              invokeCallback = true;
          }
      }
    }
  
    if (invokeCallback) {
      callback(traverseContext, children,
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows.
      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
      return 1;
    }
  
    var child = void 0;
    var nextName = void 0;
    var subtreeCount = 0; // Count of children found in the current subtree.
    var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
  
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        child = children[i];
        nextName = nextNamePrefix + getComponentKey(child, i);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else {
      var iteratorFn = getIteratorFn(children);
      if (typeof iteratorFn === 'function') {
        {
          // Warn about using Maps as children
          if (iteratorFn === children.entries) {
            !didWarnAboutMaps ? warning(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', ReactDebugCurrentFrame.getStackAddendum()) : void 0;
            didWarnAboutMaps = true;
          }
        }
  
        var iterator = iteratorFn.call(children);
        var step = void 0;
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else if (type === 'object') {
        var addendum = '';
        {
          addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
        }
        var childrenString = '' + children;
        invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
      }
    }
  
    return subtreeCount;
  }
  
  /**
   * Traverses children that are typically specified as `props.children`, but
   * might also be specified through attributes:
   *
   * - `traverseAllChildren(this.props.children, ...)`
   * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
   *
   * The `traverseContext` is an optional argument that is passed through the
   * entire traversal. It can be used to store accumulations or anything else that
   * the callback might find relevant.
   *
   * @param {?*} children Children tree object.
   * @param {!function} callback To invoke upon traversing each child.
   * @param {?*} traverseContext Context for traversal.
   * @return {!number} The number of children in this subtree.
   */
  function traverseAllChildren(children, callback, traverseContext) {
    if (children == null) {
      return 0;
    }
  
    return traverseAllChildrenImpl(children, '', callback, traverseContext);
  }
  
  /**
   * Generate a key string that identifies a component within a set.
   *
   * @param {*} component A component that could contain a manual key.
   * @param {number} index Index that is used if a manual key is not provided.
   * @return {string}
   */
  function getComponentKey(component, index) {
    // Do some typechecking here since we call this blindly. We want to ensure
    // that we don't block potential future ES APIs.
    if (typeof component === 'object' && component !== null && component.key != null) {
      // Explicit key
      return escape(component.key);
    }
    // Implicit key determined by the index in the set
    return index.toString(36);
  }
  
  function forEachSingleChild(bookKeeping, child, name) {
    var func = bookKeeping.func,
        context = bookKeeping.context;
  
    func.call(context, child, bookKeeping.count++);
  }
  
  /**
   * Iterates through children that are typically specified as `props.children`.
   *
   * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
   *
   * The provided forEachFunc(child, index) will be called for each
   * leaf child.
   *
   * @param {?*} children Children tree container.
   * @param {function(*, int)} forEachFunc
   * @param {*} forEachContext Context for forEachContext.
   */
  function forEachChildren(children, forEachFunc, forEachContext) {
    if (children == null) {
      return children;
    }
    var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
    traverseAllChildren(children, forEachSingleChild, traverseContext);
    releaseTraverseContext(traverseContext);
  }
  
  function mapSingleChildIntoContext(bookKeeping, child, childKey) {
    var result = bookKeeping.result,
        keyPrefix = bookKeeping.keyPrefix,
        func = bookKeeping.func,
        context = bookKeeping.context;
  
  
    var mappedChild = func.call(context, child, bookKeeping.count++);
    if (Array.isArray(mappedChild)) {
      mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
    } else if (mappedChild != null) {
      if (isValidElement(mappedChild)) {
        mappedChild = cloneAndReplaceKey(mappedChild,
        // Keep both the (mapped) and old keys if they differ, just as
        // traverseAllChildren used to do for objects as children
        keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
      }
      result.push(mappedChild);
    }
  }
  
  function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
    var escapedPrefix = '';
    if (prefix != null) {
      escapedPrefix = escapeUserProvidedKey(prefix) + '/';
    }
    var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
    traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
    releaseTraverseContext(traverseContext);
  }
  
  /**
   * Maps children that are typically specified as `props.children`.
   *
   * See https://reactjs.org/docs/react-api.html#reactchildrenmap
   *
   * The provided mapFunction(child, key, index) will be called for each
   * leaf child.
   *
   * @param {?*} children Children tree container.
   * @param {function(*, int)} func The map function.
   * @param {*} context Context for mapFunction.
   * @return {object} Object containing the ordered map of results.
   */
  function mapChildren(children, func, context) {
    if (children == null) {
      return children;
    }
    var result = [];
    mapIntoWithKeyPrefixInternal(children, result, null, func, context);
    return result;
  }
  
  /**
   * Count the number of children that are typically specified as
   * `props.children`.
   *
   * See https://reactjs.org/docs/react-api.html#reactchildrencount
   *
   * @param {?*} children Children tree container.
   * @return {number} The number of children.
   */
  function countChildren(children) {
    return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);
  }
  
  /**
   * Flatten a children object (typically specified as `props.children`) and
   * return an array with appropriately re-keyed children.
   *
   * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
   */
  function toArray(children) {
    var result = [];
    mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
    return result;
  }
  
  /**
   * Returns the first child in a collection of children and verifies that there
   * is only one child in the collection.
   *
   * See https://reactjs.org/docs/react-api.html#reactchildrenonly
   *
   * The current implementation of this function assumes that a single child gets
   * passed without a wrapper, but the purpose of this helper function is to
   * abstract away the particular structure of children.
   *
   * @param {?object} children Child collection structure.
   * @return {ReactElement} The first and only `ReactElement` contained in the
   * structure.
   */
  function onlyChild(children) {
    !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
    return children;
  }
  
  function createContext(defaultValue, calculateChangedBits) {
    if (calculateChangedBits === undefined) {
      calculateChangedBits = null;
    } else {
      {
        !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warning(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
      }
    }
  
    var context = {
      $$typeof: REACT_CONTEXT_TYPE,
      _calculateChangedBits: calculateChangedBits,
      _defaultValue: defaultValue,
      _currentValue: defaultValue,
      // As a workaround to support multiple concurrent renderers, we categorize
      // some renderers as primary and others as secondary. We only expect
      // there to be two concurrent renderers at most: React Native (primary) and
      // Fabric (secondary); React DOM (primary) and React ART (secondary).
      // Secondary renderers store their context values on separate fields.
      _currentValue2: defaultValue,
      _changedBits: 0,
      _changedBits2: 0,
      // These are circular
      Provider: null,
      Consumer: null
    };
  
    context.Provider = {
      $$typeof: REACT_PROVIDER_TYPE,
      _context: context
    };
    context.Consumer = context;
  
    {
      context._currentRenderer = null;
      context._currentRenderer2 = null;
    }
  
    return context;
  }
  
  function forwardRef(render) {
    {
      !(typeof render === 'function') ? warning(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render) : void 0;
  
      if (render != null) {
        !(render.defaultProps == null && render.propTypes == null) ? warning(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
      }
    }
  
    return {
      $$typeof: REACT_FORWARD_REF_TYPE,
      render: render
    };
  }
  
  var describeComponentFrame = function (name, source, ownerName) {
    return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
  };
  
  function isValidElementType(type) {
    return typeof type === 'string' || typeof type === 'function' ||
    // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
    type === REACT_FRAGMENT_TYPE || type === REACT_ASYNC_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_TIMEOUT_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
  }
  
  function getComponentName(fiber) {
    var type = fiber.type;
  
    if (typeof type === 'function') {
      return type.displayName || type.name;
    }
    if (typeof type === 'string') {
      return type;
    }
    switch (type) {
      case REACT_ASYNC_MODE_TYPE:
        return 'AsyncMode';
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';
      case REACT_FRAGMENT_TYPE:
        return 'ReactFragment';
      case REACT_PORTAL_TYPE:
        return 'ReactPortal';
      case REACT_PROFILER_TYPE:
        return 'Profiler(' + fiber.pendingProps.id + ')';
      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';
      case REACT_STRICT_MODE_TYPE:
        return 'StrictMode';
      case REACT_TIMEOUT_TYPE:
        return 'Timeout';
    }
    if (typeof type === 'object' && type !== null) {
      switch (type.$$typeof) {
        case REACT_FORWARD_REF_TYPE:
          var functionName = type.render.displayName || type.render.name || '';
          return functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef';
      }
    }
    return null;
  }
  
  /**
   * ReactElementValidator provides a wrapper around a element factory
   * which validates the props passed to the element. This is intended to be
   * used only in DEV and could be replaced by a static type checker for languages
   * that support it.
   */
  
  var currentlyValidatingElement = void 0;
  var propTypesMisspellWarningShown = void 0;
  
  var getDisplayName = function () {};
  var getStackAddendum = function () {};
  
  {
    currentlyValidatingElement = null;
  
    propTypesMisspellWarningShown = false;
  
    getDisplayName = function (element) {
      if (element == null) {
        return '#empty';
      } else if (typeof element === 'string' || typeof element === 'number') {
        return '#text';
      } else if (typeof element.type === 'string') {
        return element.type;
      }
  
      var type = element.type;
      if (type === REACT_FRAGMENT_TYPE) {
        return 'React.Fragment';
      } else if (typeof type === 'object' && type !== null && type.$$typeof === REACT_FORWARD_REF_TYPE) {
        var functionName = type.render.displayName || type.render.name || '';
        return functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef';
      } else {
        return type.displayName || type.name || 'Unknown';
      }
    };
  
    getStackAddendum = function () {
      var stack = '';
      if (currentlyValidatingElement) {
        var name = getDisplayName(currentlyValidatingElement);
        var owner = currentlyValidatingElement._owner;
        stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner));
      }
      stack += ReactDebugCurrentFrame.getStackAddendum() || '';
      return stack;
    };
  }
  
  function getDeclarationErrorAddendum() {
    if (ReactCurrentOwner.current) {
      var name = getComponentName(ReactCurrentOwner.current);
      if (name) {
        return '\n\nCheck the render method of `' + name + '`.';
      }
    }
    return '';
  }
  
  function getSourceInfoErrorAddendum(elementProps) {
    if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
      var source = elementProps.__source;
      var fileName = source.fileName.replace(/^.*[\\\/]/, '');
      var lineNumber = source.lineNumber;
      return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
    }
    return '';
  }
  
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */
  var ownerHasKeyUseWarning = {};
  
  function getCurrentComponentErrorInfo(parentType) {
    var info = getDeclarationErrorAddendum();
  
    if (!info) {
      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
      if (parentName) {
        info = '\n\nCheck the top-level render call using <' + parentName + '>.';
      }
    }
    return info;
  }
  
  /**
   * Warn if the element doesn't have an explicit key assigned to it.
   * This element is in an array. The array could grow and shrink or be
   * reordered. All children that haven't already been validated are required to
   * have a "key" property assigned to it. Error statuses are cached so a warning
   * will only be shown once.
   *
   * @internal
   * @param {ReactElement} element Element that requires a key.
   * @param {*} parentType element's parent's type.
   */
  function validateExplicitKey(element, parentType) {
    if (!element._store || element._store.validated || element.key != null) {
      return;
    }
    element._store.validated = true;
  
    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }
    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
  
    // Usually the current owner is the offender, but if it accepts children as a
    // property, it may be the creator of the child that's responsible for
    // assigning it a key.
    var childOwner = '';
    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
      // Give the component that originally created this child.
      childOwner = ' It was passed a child from ' + getComponentName(element._owner) + '.';
    }
  
    currentlyValidatingElement = element;
    {
      warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum());
    }
    currentlyValidatingElement = null;
  }
  
  /**
   * Ensure that every element either is passed in a static location, in an
   * array with an explicit keys property defined, or in an object literal
   * with valid key property.
   *
   * @internal
   * @param {ReactNode} node Statically passed child of any type.
   * @param {*} parentType node's parent's type.
   */
  function validateChildKeys(node, parentType) {
    if (typeof node !== 'object') {
      return;
    }
    if (Array.isArray(node)) {
      for (var i = 0; i < node.length; i++) {
        var child = node[i];
        if (isValidElement(child)) {
          validateExplicitKey(child, parentType);
        }
      }
    } else if (isValidElement(node)) {
      // This element was passed in a valid location.
      if (node._store) {
        node._store.validated = true;
      }
    } else if (node) {
      var iteratorFn = getIteratorFn(node);
      if (typeof iteratorFn === 'function') {
        // Entry iterators used to provide implicit keys,
        // but now we print a separate warning for them later.
        if (iteratorFn !== node.entries) {
          var iterator = iteratorFn.call(node);
          var step = void 0;
          while (!(step = iterator.next()).done) {
            if (isValidElement(step.value)) {
              validateExplicitKey(step.value, parentType);
            }
          }
        }
      }
    }
  }
  
  /**
   * Given an element, validate that its props follow the propTypes definition,
   * provided by the type.
   *
   * @param {ReactElement} element
   */
  function validatePropTypes(element) {
    var type = element.type;
    var name = void 0,
        propTypes = void 0;
    if (typeof type === 'function') {
      // Class or functional component
      name = type.displayName || type.name;
      propTypes = type.propTypes;
    } else if (typeof type === 'object' && type !== null && type.$$typeof === REACT_FORWARD_REF_TYPE) {
      // ForwardRef
      var functionName = type.render.displayName || type.render.name || '';
      name = functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef';
      propTypes = type.propTypes;
    } else {
      return;
    }
    if (propTypes) {
      currentlyValidatingElement = element;
      checkPropTypes(propTypes, element.props, 'prop', name, getStackAddendum);
      currentlyValidatingElement = null;
    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
      propTypesMisspellWarningShown = true;
      warning(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
    }
    if (typeof type.getDefaultProps === 'function') {
      !type.getDefaultProps.isReactClassApproved ? warning(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
    }
  }
  
  /**
   * Given a fragment, validate that it can only be provided with fragment props
   * @param {ReactElement} fragment
   */
  function validateFragmentProps(fragment) {
    currentlyValidatingElement = fragment;
  
    var keys = Object.keys(fragment.props);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (key !== 'children' && key !== 'key') {
        warning(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.%s', key, getStackAddendum());
        break;
      }
    }
  
    if (fragment.ref !== null) {
      warning(false, 'Invalid attribute `ref` supplied to `React.Fragment`.%s', getStackAddendum());
    }
  
    currentlyValidatingElement = null;
  }
  
  function createElementWithValidation(type, props, children) {
    var validType = isValidElementType(type);
  
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    if (!validType) {
      var info = '';
      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
      }
  
      var sourceInfo = getSourceInfoErrorAddendum(props);
      if (sourceInfo) {
        info += sourceInfo;
      } else {
        info += getDeclarationErrorAddendum();
      }
  
      info += getStackAddendum() || '';
  
      var typeString = void 0;
      if (type === null) {
        typeString = 'null';
      } else if (Array.isArray(type)) {
        typeString = 'array';
      } else {
        typeString = typeof type;
      }
  
      warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
    }
  
    var element = createElement.apply(this, arguments);
  
    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }
  
    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }
  
    if (type === REACT_FRAGMENT_TYPE) {
      validateFragmentProps(element);
    } else {
      validatePropTypes(element);
    }
  
    return element;
  }
  
  function createFactoryWithValidation(type) {
    var validatedFactory = createElementWithValidation.bind(null, type);
    validatedFactory.type = type;
    // Legacy hook: remove it
    {
      Object.defineProperty(validatedFactory, 'type', {
        enumerable: false,
        get: function () {
          lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
          Object.defineProperty(this, 'type', {
            value: type
          });
          return type;
        }
      });
    }
  
    return validatedFactory;
  }
  
  function cloneElementWithValidation(element, props, children) {
    var newElement = cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }
  
  var React = {
    Children: {
      map: mapChildren,
      forEach: forEachChildren,
      count: countChildren,
      toArray: toArray,
      only: onlyChild
    },
  
    createRef: createRef,
    Component: Component,
    PureComponent: PureComponent,
  
    createContext: createContext,
    forwardRef: forwardRef,
  
    Fragment: REACT_FRAGMENT_TYPE,
    StrictMode: REACT_STRICT_MODE_TYPE,
    unstable_AsyncMode: REACT_ASYNC_MODE_TYPE,
    unstable_Profiler: REACT_PROFILER_TYPE,
  
    createElement: createElementWithValidation,
    cloneElement: cloneElementWithValidation,
    createFactory: createFactoryWithValidation,
    isValidElement: isValidElement,
  
    version: ReactVersion,
  
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      ReactCurrentOwner: ReactCurrentOwner,
      // Used by renderers to avoid bundling object-assign twice in UMD bundles:
      assign: _assign$$1
    }
  };
  
  if (enableSuspense) {
    React.Timeout = REACT_TIMEOUT_TYPE;
  }
  
  {
    _assign$$1(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
      // These should not be included in production.
      ReactDebugCurrentFrame: ReactDebugCurrentFrame,
      // Shim for React DOM 16.0.0 which still destructured (but not used) this.
      // TODO: remove in React 17.0.
      ReactComponentTreeHook: {}
    });
  }
  
  
  
  var React$2 = Object.freeze({
    default: React
  });
  
  var React$3 = ( React$2 && React ) || React$2;
  
  // TODO: decide on the top-level export form.
  // This is hacky but makes it work with both Rollup and Jest.
  var react = React$3.default ? React$3.default : React$3;
  
  module.exports = react;
    })();
  }
  });
  
  var react = createCommonjsModule(function (module) {
  {
    module.exports = react_development;
  }
  });
  
  var react_1 = react.Component;
  var react_2 = react.isValidElement;
  var react_3 = react.createElement;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  
  /**
   * Simple, lightweight module assisting with the detection and context of
   * Worker. Helps avoid circular dependencies and allows code to reason about
   * whether or not they are in a Worker, even if they never include the main
   * `ReactWorker` dependency.
   */
  var ExecutionEnvironment = {
  
    canUseDOM: canUseDOM,
  
    canUseWorkers: typeof Worker !== 'undefined',
  
    canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
  
    canUseViewport: canUseDOM && !!window.screen,
  
    isInWorker: !canUseDOM // For now, this is true - might change in the future.
  
  };
  
  var ExecutionEnvironment_1 = ExecutionEnvironment;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @typechecks
   */
  
  /* eslint-disable fb-www/typeof-undefined */
  
  /**
   * Same as document.activeElement but wraps in a try-catch block. In IE it is
   * not safe to call document.activeElement if there is nothing focused.
   *
   * The activeElement will be null only if the document or document body is not
   * yet defined.
   *
   * @param {?DOMDocument} doc Defaults to current document.
   * @return {?DOMElement}
   */
  function getActiveElement(doc) /*?DOMElement*/{
    doc = doc || (typeof document !== 'undefined' ? document : undefined);
    if (typeof doc === 'undefined') {
      return null;
    }
    try {
      return doc.activeElement || doc.body;
    } catch (e) {
      return doc.body;
    }
  }
  
  var getActiveElement_1 = getActiveElement;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @typechecks
   * 
   */
  
  /*eslint-disable no-self-compare */
  
  var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
  
  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      // Added the nonzero y check to make Flow happy, but it is redundant
      return x !== 0 || y !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  
  /**
   * Performs equality by iterating through keys on an object and returning false
   * when any key has values which are not strictly equal between the arguments.
   * Returns true when the values of all keys are strictly equal.
   */
  function shallowEqual(objA, objB) {
    if (is(objA, objB)) {
      return true;
    }
  
    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }
  
    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
  
    if (keysA.length !== keysB.length) {
      return false;
    }
  
    // Test for A's keys different from B.
    for (var i = 0; i < keysA.length; i++) {
      if (!hasOwnProperty$1.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }
  
    return true;
  }
  
  var shallowEqual_1 = shallowEqual;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @typechecks
   */
  
  /**
   * @param {*} object The object to check.
   * @return {boolean} Whether or not the object is a DOM node.
   */
  function isNode(object) {
    var doc = object ? object.ownerDocument || object : document;
    var defaultView = doc.defaultView || window;
    return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
  }
  
  var isNode_1 = isNode;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @typechecks
   */
  
  
  
  /**
   * @param {*} object The object to check.
   * @return {boolean} Whether or not the object is a DOM text node.
   */
  function isTextNode(object) {
    return isNode_1(object) && object.nodeType == 3;
  }
  
  var isTextNode_1 = isTextNode;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  
  
  /*eslint-disable no-bitwise */
  
  /**
   * Checks if a given DOM node contains or is another DOM node.
   */
  function containsNode(outerNode, innerNode) {
    if (!outerNode || !innerNode) {
      return false;
    } else if (outerNode === innerNode) {
      return true;
    } else if (isTextNode_1(outerNode)) {
      return false;
    } else if (isTextNode_1(innerNode)) {
      return containsNode(outerNode, innerNode.parentNode);
    } else if ('contains' in outerNode) {
      return outerNode.contains(innerNode);
    } else if (outerNode.compareDocumentPosition) {
      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
    } else {
      return false;
    }
  }
  
  var containsNode_1 = containsNode;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @typechecks
   */
  
  var _uppercasePattern = /([A-Z])/g;
  
  /**
   * Hyphenates a camelcased string, for example:
   *
   *   > hyphenate('backgroundColor')
   *   < "background-color"
   *
   * For CSS style names, use `hyphenateStyleName` instead which works properly
   * with all vendor prefixes, including `ms`.
   *
   * @param {string} string
   * @return {string}
   */
  function hyphenate(string) {
    return string.replace(_uppercasePattern, '-$1').toLowerCase();
  }
  
  var hyphenate_1 = hyphenate;
  
  var msPattern = /^ms-/;
  
  /**
   * Hyphenates a camelcased CSS property name, for example:
   *
   *   > hyphenateStyleName('backgroundColor')
   *   < "background-color"
   *   > hyphenateStyleName('MozTransition')
   *   < "-moz-transition"
   *   > hyphenateStyleName('msTransition')
   *   < "-ms-transition"
   *
   * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
   * is converted to `-ms-`.
   *
   * @param {string} string
   * @return {string}
   */
  function hyphenateStyleName(string) {
    return hyphenate_1(string).replace(msPattern, '-ms-');
  }
  
  var hyphenateStyleName_1 = hyphenateStyleName;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @typechecks
   */
  
  var _hyphenPattern = /-(.)/g;
  
  /**
   * Camelcases a hyphenated string, for example:
   *
   *   > camelize('background-color')
   *   < "backgroundColor"
   *
   * @param {string} string
   * @return {string}
   */
  function camelize(string) {
    return string.replace(_hyphenPattern, function (_, character) {
      return character.toUpperCase();
    });
  }
  
  var camelize_1 = camelize;
  
  var msPattern$1 = /^-ms-/;
  
  /**
   * Camelcases a hyphenated CSS property name, for example:
   *
   *   > camelizeStyleName('background-color')
   *   < "backgroundColor"
   *   > camelizeStyleName('-moz-transition')
   *   < "MozTransition"
   *   > camelizeStyleName('-ms-transition')
   *   < "msTransition"
   *
   * As Andi Smith suggests
   * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
   * is converted to lowercase `ms`.
   *
   * @param {string} string
   * @return {string}
   */
  function camelizeStyleName(string) {
    return camelize_1(string.replace(msPattern$1, 'ms-'));
  }
  
  var camelizeStyleName_1 = camelizeStyleName;
  
  var reactDom_development = createCommonjsModule(function (module) {
  /** @license React v16.4.2
   * react-dom.development.js
   *
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  
  {
    (function() {
  var invariant = invariant_1;
  var React = react;
  var warning = warning_1;
  var ExecutionEnvironment = ExecutionEnvironment_1;
  var _assign$$1 = objectAssign;
  var emptyFunction = emptyFunction_1;
  var checkPropTypes = checkPropTypes_1;
  var getActiveElement = getActiveElement_1;
  var shallowEqual = shallowEqual_1;
  var containsNode = containsNode_1;
  var emptyObject = emptyObject_1;
  var hyphenateStyleName = hyphenateStyleName_1;
  var camelizeStyleName = camelizeStyleName_1;
  
  // Relying on the `invariant()` implementation lets us
  // have preserve the format and params in the www builds.
  
  !React ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;
  
  var invokeGuardedCallback = function (name, func, context, a, b, c, d, e, f) {
    this._hasCaughtError = false;
    this._caughtError = null;
    var funcArgs = Array.prototype.slice.call(arguments, 3);
    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this._caughtError = error;
      this._hasCaughtError = true;
    }
  };
  
  {
    // In DEV mode, we swap out invokeGuardedCallback for a special version
    // that plays more nicely with the browser's DevTools. The idea is to preserve
    // "Pause on exceptions" behavior. Because React wraps all user-provided
    // functions in invokeGuardedCallback, and the production version of
    // invokeGuardedCallback uses a try-catch, all user exceptions are treated
    // like caught exceptions, and the DevTools won't pause unless the developer
    // takes the extra step of enabling pause on caught exceptions. This is
    // untintuitive, though, because even though React has caught the error, from
    // the developer's perspective, the error is uncaught.
    //
    // To preserve the expected "Pause on exceptions" behavior, we don't use a
    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
    // DOM node, and call the user-provided callback from inside an event handler
    // for that fake event. If the callback throws, the error is "captured" using
    // a global event handler. But because the error happens in a different
    // event loop context, it does not interrupt the normal program flow.
    // Effectively, this gives us try-catch behavior without actually using
    // try-catch. Neat!
  
    // Check that the browser supports the APIs we need to implement our special
    // DEV version of invokeGuardedCallback
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
      var fakeNode = document.createElement('react');
  
      var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
        // If document doesn't exist we know for sure we will crash in this method
        // when we call document.createEvent(). However this can cause confusing
        // errors: https://github.com/facebookincubator/create-react-app/issues/3482
        // So we preemptively throw with a better message instead.
        !(typeof document !== 'undefined') ? invariant(false, 'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.') : void 0;
        var evt = document.createEvent('Event');
  
        // Keeps track of whether the user-provided callback threw an error. We
        // set this to true at the beginning, then set it to false right after
        // calling the function. If the function errors, `didError` will never be
        // set to false. This strategy works even if the browser is flaky and
        // fails to call our global error handler, because it doesn't rely on
        // the error event at all.
        var didError = true;
  
        // Create an event handler for our fake event. We will synchronously
        // dispatch our fake event using `dispatchEvent`. Inside the handler, we
        // call the user-provided callback.
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        function callCallback() {
          // We immediately remove the callback from event listeners so that
          // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
          // nested call would trigger the fake event handlers of any call higher
          // in the stack.
          fakeNode.removeEventListener(evtType, callCallback, false);
          func.apply(context, funcArgs);
          didError = false;
        }
  
        // Create a global error event handler. We use this to capture the value
        // that was thrown. It's possible that this error handler will fire more
        // than once; for example, if non-React code also calls `dispatchEvent`
        // and a handler for that event throws. We should be resilient to most of
        // those cases. Even if our error event handler fires more than once, the
        // last error event is always used. If the callback actually does error,
        // we know that the last error event is the correct one, because it's not
        // possible for anything else to have happened in between our callback
        // erroring and the code that follows the `dispatchEvent` call below. If
        // the callback doesn't error, but the error event was fired, we know to
        // ignore it because `didError` will be false, as described above.
        var error = void 0;
        // Use this to track whether the error event is ever called.
        var didSetError = false;
        var isCrossOriginError = false;
  
        function onError(event) {
          error = event.error;
          didSetError = true;
          if (error === null && event.colno === 0 && event.lineno === 0) {
            isCrossOriginError = true;
          }
        }
  
        // Create a fake event type.
        var evtType = 'react-' + (name ? name : 'invokeguardedcallback');
  
        // Attach our event handlers
        window.addEventListener('error', onError);
        fakeNode.addEventListener(evtType, callCallback, false);
  
        // Synchronously dispatch our fake event. If the user-provided function
        // errors, it will trigger our global error handler.
        evt.initEvent(evtType, false, false);
        fakeNode.dispatchEvent(evt);
  
        if (didError) {
          if (!didSetError) {
            // The callback errored, but the error event never fired.
            error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
          } else if (isCrossOriginError) {
            error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
          }
          this._hasCaughtError = true;
          this._caughtError = error;
        } else {
          this._hasCaughtError = false;
          this._caughtError = null;
        }
  
        // Remove our event listeners
        window.removeEventListener('error', onError);
      };
  
      invokeGuardedCallback = invokeGuardedCallbackDev;
    }
  }
  
  var invokeGuardedCallback$1 = invokeGuardedCallback;
  
  var ReactErrorUtils = {
    // Used by Fiber to simulate a try-catch.
    _caughtError: null,
    _hasCaughtError: false,
  
    // Used by event system to capture/rethrow the first error.
    _rethrowError: null,
    _hasRethrowError: false,
  
    /**
     * Call a function while guarding against errors that happens within it.
     * Returns an error if it throws, otherwise null.
     *
     * In production, this is implemented using a try-catch. The reason we don't
     * use a try-catch directly is so that we can swap out a different
     * implementation in DEV mode.
     *
     * @param {String} name of the guard to use for logging or debugging
     * @param {Function} func The function to invoke
     * @param {*} context The context to use when calling the function
     * @param {...*} args Arguments for function
     */
    invokeGuardedCallback: function (name, func, context, a, b, c, d, e, f) {
      invokeGuardedCallback$1.apply(ReactErrorUtils, arguments);
    },
  
    /**
     * Same as invokeGuardedCallback, but instead of returning an error, it stores
     * it in a global so it can be rethrown by `rethrowCaughtError` later.
     * TODO: See if _caughtError and _rethrowError can be unified.
     *
     * @param {String} name of the guard to use for logging or debugging
     * @param {Function} func The function to invoke
     * @param {*} context The context to use when calling the function
     * @param {...*} args Arguments for function
     */
    invokeGuardedCallbackAndCatchFirstError: function (name, func, context, a, b, c, d, e, f) {
      ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);
      if (ReactErrorUtils.hasCaughtError()) {
        var error = ReactErrorUtils.clearCaughtError();
        if (!ReactErrorUtils._hasRethrowError) {
          ReactErrorUtils._hasRethrowError = true;
          ReactErrorUtils._rethrowError = error;
        }
      }
    },
  
    /**
     * During execution of guarded functions we will capture the first error which
     * we will rethrow to be handled by the top level error handler.
     */
    rethrowCaughtError: function () {
      return rethrowCaughtError.apply(ReactErrorUtils, arguments);
    },
  
    hasCaughtError: function () {
      return ReactErrorUtils._hasCaughtError;
    },
  
    clearCaughtError: function () {
      if (ReactErrorUtils._hasCaughtError) {
        var error = ReactErrorUtils._caughtError;
        ReactErrorUtils._caughtError = null;
        ReactErrorUtils._hasCaughtError = false;
        return error;
      } else {
        invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
      }
    }
  };
  
  var rethrowCaughtError = function () {
    if (ReactErrorUtils._hasRethrowError) {
      var error = ReactErrorUtils._rethrowError;
      ReactErrorUtils._rethrowError = null;
      ReactErrorUtils._hasRethrowError = false;
      throw error;
    }
  };
  
  /**
   * Injectable ordering of event plugins.
   */
  var eventPluginOrder = null;
  
  /**
   * Injectable mapping from names to event plugin modules.
   */
  var namesToPlugins = {};
  
  /**
   * Recomputes the plugin list using the injected plugins and plugin ordering.
   *
   * @private
   */
  function recomputePluginOrdering() {
    if (!eventPluginOrder) {
      // Wait until an `eventPluginOrder` is injected.
      return;
    }
    for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName];
      var pluginIndex = eventPluginOrder.indexOf(pluginName);
      !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
      if (plugins[pluginIndex]) {
        continue;
      }
      !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
      plugins[pluginIndex] = pluginModule;
      var publishedEvents = pluginModule.eventTypes;
      for (var eventName in publishedEvents) {
        !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
      }
    }
  }
  
  /**
   * Publishes an event so that it can be dispatched by the supplied plugin.
   *
   * @param {object} dispatchConfig Dispatch configuration for the event.
   * @param {object} PluginModule Plugin publishing the event.
   * @return {boolean} True if the event was successfully published.
   * @private
   */
  function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
    !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
    eventNameDispatchConfigs[eventName] = dispatchConfig;
  
    var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
    if (phasedRegistrationNames) {
      for (var phaseName in phasedRegistrationNames) {
        if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
          var phasedRegistrationName = phasedRegistrationNames[phaseName];
          publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
        }
      }
      return true;
    } else if (dispatchConfig.registrationName) {
      publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
      return true;
    }
    return false;
  }
  
  /**
   * Publishes a registration name that is used to identify dispatched events.
   *
   * @param {string} registrationName Registration name to add.
   * @param {object} PluginModule Plugin publishing the event.
   * @private
   */
  function publishRegistrationName(registrationName, pluginModule, eventName) {
    !!registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
    registrationNameModules[registrationName] = pluginModule;
    registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
  
    {
      var lowerCasedName = registrationName.toLowerCase();
      possibleRegistrationNames[lowerCasedName] = registrationName;
  
      if (registrationName === 'onDoubleClick') {
        possibleRegistrationNames.ondblclick = registrationName;
      }
    }
  }
  
  /**
   * Registers plugins so that they can extract and dispatch events.
   *
   * @see {EventPluginHub}
   */
  
  /**
   * Ordered list of injected plugins.
   */
  var plugins = [];
  
  /**
   * Mapping from event name to dispatch config
   */
  var eventNameDispatchConfigs = {};
  
  /**
   * Mapping from registration name to plugin module
   */
  var registrationNameModules = {};
  
  /**
   * Mapping from registration name to event name
   */
  var registrationNameDependencies = {};
  
  /**
   * Mapping from lowercase registration names to the properly cased version,
   * used to warn in the case of missing event handlers. Available
   * only in true.
   * @type {Object}
   */
  var possibleRegistrationNames = {};
  // Trust the developer to only use possibleRegistrationNames in true
  
  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  function injectEventPluginOrder(injectedEventPluginOrder) {
    !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0;
    // Clone the ordering so it cannot be dynamically mutated.
    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
    recomputePluginOrdering();
  }
  
  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  function injectEventPluginsByName(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var pluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
        !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
        namesToPlugins[pluginName] = pluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  }
  
  var EventPluginRegistry = Object.freeze({
    plugins: plugins,
    eventNameDispatchConfigs: eventNameDispatchConfigs,
    registrationNameModules: registrationNameModules,
    registrationNameDependencies: registrationNameDependencies,
    possibleRegistrationNames: possibleRegistrationNames,
    injectEventPluginOrder: injectEventPluginOrder,
    injectEventPluginsByName: injectEventPluginsByName
  });
  
  var getFiberCurrentPropsFromNode = null;
  var getInstanceFromNode = null;
  var getNodeFromInstance = null;
  
  var injection$1 = {
    injectComponentTree: function (Injected) {
      getFiberCurrentPropsFromNode = Injected.getFiberCurrentPropsFromNode;
      getInstanceFromNode = Injected.getInstanceFromNode;
      getNodeFromInstance = Injected.getNodeFromInstance;
  
      {
        !(getNodeFromInstance && getInstanceFromNode) ? warning(false, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
      }
    }
  };
  
  var validateEventDispatches = void 0;
  {
    validateEventDispatches = function (event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchInstances = event._dispatchInstances;
  
      var listenersIsArr = Array.isArray(dispatchListeners);
      var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
  
      var instancesIsArr = Array.isArray(dispatchInstances);
      var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
  
      !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) ? warning(false, 'EventPluginUtils: Invalid `event`.') : void 0;
    };
  }
  
  /**
   * Dispatch the event to the listener.
   * @param {SyntheticEvent} event SyntheticEvent to handle
   * @param {boolean} simulated If the event is simulated (changes exn behavior)
   * @param {function} listener Application-level callback
   * @param {*} inst Internal component instance
   */
  function executeDispatch(event, simulated, listener, inst) {
    var type = event.type || 'unknown-event';
    event.currentTarget = getNodeFromInstance(inst);
    ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
    event.currentTarget = null;
  }
  
  /**
   * Standard/simple iteration through an event's collected dispatches.
   */
  function executeDispatchesInOrder(event, simulated) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;
    {
      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListeners)) {
      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        // Listeners and Instances are two parallel arrays that are always in sync.
        executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
      }
    } else if (dispatchListeners) {
      executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
    }
    event._dispatchListeners = null;
    event._dispatchInstances = null;
  }
  
  /**
   * @see executeDispatchesInOrderStopAtTrueImpl
   */
  
  
  /**
   * Execution of a "direct" dispatch - there must be at most one dispatch
   * accumulated on the event or it is considered an error. It doesn't really make
   * sense for an event with multiple dispatches (bubbled) to keep track of the
   * return values at each dispatch execution, but it does tend to make sense when
   * dealing with "direct" dispatches.
   *
   * @return {*} The return value of executing the single dispatch.
   */
  
  
  /**
   * @param {SyntheticEvent} event
   * @return {boolean} True iff number of dispatches accumulated is greater than 0.
   */
  
  /**
   * Accumulates items that must not be null or undefined into the first one. This
   * is used to conserve memory by avoiding array allocations, and thus sacrifices
   * API cleanness. Since `current` can be null before being passed in and not
   * null after this function, make sure to assign it back to `current`:
   *
   * `a = accumulateInto(a, b);`
   *
   * This API should be sparingly used. Try `accumulate` for something cleaner.
   *
   * @return {*|array<*>} An accumulation of items.
   */
  
  function accumulateInto(current, next) {
    !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;
  
    if (current == null) {
      return next;
    }
  
    // Both are not empty. Warning: Never call x.concat(y) when you are not
    // certain that x is an Array (x could be a string with concat method).
    if (Array.isArray(current)) {
      if (Array.isArray(next)) {
        current.push.apply(current, next);
        return current;
      }
      current.push(next);
      return current;
    }
  
    if (Array.isArray(next)) {
      // A bit too dangerous to mutate `next`.
      return [current].concat(next);
    }
  
    return [current, next];
  }
  
  /**
   * @param {array} arr an "accumulation" of items which is either an Array or
   * a single item. Useful when paired with the `accumulate` module. This is a
   * simple utility that allows us to reason about a collection of items, but
   * handling the case when there is exactly one item (and we do not need to
   * allocate an array).
   * @param {function} cb Callback invoked with each element or a collection.
   * @param {?} [scope] Scope used as `this` in a callback.
   */
  function forEachAccumulated(arr, cb, scope) {
    if (Array.isArray(arr)) {
      arr.forEach(cb, scope);
    } else if (arr) {
      cb.call(scope, arr);
    }
  }
  
  /**
   * Internal queue of events that have accumulated their dispatches and are
   * waiting to have their dispatches executed.
   */
  var eventQueue = null;
  
  /**
   * Dispatches an event and releases it back into the pool, unless persistent.
   *
   * @param {?object} event Synthetic event to be dispatched.
   * @param {boolean} simulated If the event is simulated (changes exn behavior)
   * @private
   */
  var executeDispatchesAndRelease = function (event, simulated) {
    if (event) {
      executeDispatchesInOrder(event, simulated);
  
      if (!event.isPersistent()) {
        event.constructor.release(event);
      }
    }
  };
  var executeDispatchesAndReleaseSimulated = function (e) {
    return executeDispatchesAndRelease(e, true);
  };
  var executeDispatchesAndReleaseTopLevel = function (e) {
    return executeDispatchesAndRelease(e, false);
  };
  
  function isInteractive(tag) {
    return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
  }
  
  function shouldPreventMouseEvent(name, type, props) {
    switch (name) {
      case 'onClick':
      case 'onClickCapture':
      case 'onDoubleClick':
      case 'onDoubleClickCapture':
      case 'onMouseDown':
      case 'onMouseDownCapture':
      case 'onMouseMove':
      case 'onMouseMoveCapture':
      case 'onMouseUp':
      case 'onMouseUpCapture':
        return !!(props.disabled && isInteractive(type));
      default:
        return false;
    }
  }
  
  /**
   * This is a unified interface for event plugins to be installed and configured.
   *
   * Event plugins can implement the following properties:
   *
   *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
   *     Required. When a top-level event is fired, this method is expected to
   *     extract synthetic events that will in turn be queued and dispatched.
   *
   *   `eventTypes` {object}
   *     Optional, plugins that fire events must publish a mapping of registration
   *     names that are used to register listeners. Values of this mapping must
   *     be objects that contain `registrationName` or `phasedRegistrationNames`.
   *
   *   `executeDispatch` {function(object, function, string)}
   *     Optional, allows plugins to override how an event gets dispatched. By
   *     default, the listener is simply invoked.
   *
   * Each plugin that is injected into `EventsPluginHub` is immediately operable.
   *
   * @public
   */
  
  /**
   * Methods for injecting dependencies.
   */
  var injection = {
    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: injectEventPluginOrder,
  
    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: injectEventPluginsByName
  };
  
  /**
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  function getListener(inst, registrationName) {
    var listener = void 0;
  
    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
    // live here; needs to be moved to a better place soon
    var stateNode = inst.stateNode;
    if (!stateNode) {
      // Work in progress (ex: onload events in incremental mode).
      return null;
    }
    var props = getFiberCurrentPropsFromNode(stateNode);
    if (!props) {
      // Work in progress.
      return null;
    }
    listener = props[registrationName];
    if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
      return null;
    }
    !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
    return listener;
  }
  
  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events = null;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  }
  
  function runEventsInBatch(events, simulated) {
    if (events !== null) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
  
    if (!processingEventQueue) {
      return;
    }
  
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  }
  
  function runExtractedEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    runEventsInBatch(events, false);
  }
  
  var EventPluginHub = Object.freeze({
    injection: injection,
    getListener: getListener,
    runEventsInBatch: runEventsInBatch,
    runExtractedEventsInBatch: runExtractedEventsInBatch
  });
  
  var IndeterminateComponent = 0; // Before we know whether it is functional or class
  var FunctionalComponent = 1;
  var ClassComponent = 2;
  var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
  var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
  var HostComponent = 5;
  var HostText = 6;
  
  
  
  var Fragment = 10;
  var Mode = 11;
  var ContextConsumer = 12;
  var ContextProvider = 13;
  var ForwardRef = 14;
  var Profiler = 15;
  var TimeoutComponent = 16;
  
  var randomKey = Math.random().toString(36).slice(2);
  var internalInstanceKey = '__reactInternalInstance$' + randomKey;
  var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;
  
  function precacheFiberNode(hostInst, node) {
    node[internalInstanceKey] = hostInst;
  }
  
  /**
   * Given a DOM node, return the closest ReactDOMComponent or
   * ReactDOMTextComponent instance ancestor.
   */
  function getClosestInstanceFromNode(node) {
    if (node[internalInstanceKey]) {
      return node[internalInstanceKey];
    }
  
    while (!node[internalInstanceKey]) {
      if (node.parentNode) {
        node = node.parentNode;
      } else {
        // Top of the tree. This node must not be part of a React tree (or is
        // unmounted, potentially).
        return null;
      }
    }
  
    var inst = node[internalInstanceKey];
    if (inst.tag === HostComponent || inst.tag === HostText) {
      // In Fiber, this will always be the deepest root.
      return inst;
    }
  
    return null;
  }
  
  /**
   * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
   * instance, or null if the node was not rendered by this React.
   */
  function getInstanceFromNode$1(node) {
    var inst = node[internalInstanceKey];
    if (inst) {
      if (inst.tag === HostComponent || inst.tag === HostText) {
        return inst;
      } else {
        return null;
      }
    }
    return null;
  }
  
  /**
   * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
   * DOM node.
   */
  function getNodeFromInstance$1(inst) {
    if (inst.tag === HostComponent || inst.tag === HostText) {
      // In Fiber this, is just the state node right now. We assume it will be
      // a host component or host text.
      return inst.stateNode;
    }
  
    // Without this first invariant, passing a non-DOM-component triggers the next
    // invariant for a missing parent, which is super confusing.
    invariant(false, 'getNodeFromInstance: Invalid argument.');
  }
  
  function getFiberCurrentPropsFromNode$1(node) {
    return node[internalEventHandlersKey] || null;
  }
  
  function updateFiberProps(node, props) {
    node[internalEventHandlersKey] = props;
  }
  
  var ReactDOMComponentTree = Object.freeze({
    precacheFiberNode: precacheFiberNode,
    getClosestInstanceFromNode: getClosestInstanceFromNode,
    getInstanceFromNode: getInstanceFromNode$1,
    getNodeFromInstance: getNodeFromInstance$1,
    getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode$1,
    updateFiberProps: updateFiberProps
  });
  
  function getParent(inst) {
    do {
      inst = inst.return;
      // TODO: If this is a HostRoot we might want to bail out.
      // That is depending on if we want nested subtrees (layers) to bubble
      // events to their parent. We could also go through parentNode on the
      // host node but that wouldn't work for React Native and doesn't let us
      // do the portal feature.
    } while (inst && inst.tag !== HostComponent);
    if (inst) {
      return inst;
    }
    return null;
  }
  
  /**
   * Return the lowest common ancestor of A and B, or null if they are in
   * different trees.
   */
  function getLowestCommonAncestor(instA, instB) {
    var depthA = 0;
    for (var tempA = instA; tempA; tempA = getParent(tempA)) {
      depthA++;
    }
    var depthB = 0;
    for (var tempB = instB; tempB; tempB = getParent(tempB)) {
      depthB++;
    }
  
    // If A is deeper, crawl up.
    while (depthA - depthB > 0) {
      instA = getParent(instA);
      depthA--;
    }
  
    // If B is deeper, crawl up.
    while (depthB - depthA > 0) {
      instB = getParent(instB);
      depthB--;
    }
  
    // Walk in lockstep until we find a match.
    var depth = depthA;
    while (depth--) {
      if (instA === instB || instA === instB.alternate) {
        return instA;
      }
      instA = getParent(instA);
      instB = getParent(instB);
    }
    return null;
  }
  
  /**
   * Return if A is an ancestor of B.
   */
  
  
  /**
   * Return the parent instance of the passed-in instance.
   */
  function getParentInstance(inst) {
    return getParent(inst);
  }
  
  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   */
  function traverseTwoPhase(inst, fn, arg) {
    var path = [];
    while (inst) {
      path.push(inst);
      inst = getParent(inst);
    }
    var i = void 0;
    for (i = path.length; i-- > 0;) {
      fn(path[i], 'captured', arg);
    }
    for (i = 0; i < path.length; i++) {
      fn(path[i], 'bubbled', arg);
    }
  }
  
  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * Does not invoke the callback on the nearest common ancestor because nothing
   * "entered" or "left" that element.
   */
  function traverseEnterLeave(from, to, fn, argFrom, argTo) {
    var common = from && to ? getLowestCommonAncestor(from, to) : null;
    var pathFrom = [];
    while (true) {
      if (!from) {
        break;
      }
      if (from === common) {
        break;
      }
      var alternate = from.alternate;
      if (alternate !== null && alternate === common) {
        break;
      }
      pathFrom.push(from);
      from = getParent(from);
    }
    var pathTo = [];
    while (true) {
      if (!to) {
        break;
      }
      if (to === common) {
        break;
      }
      var _alternate = to.alternate;
      if (_alternate !== null && _alternate === common) {
        break;
      }
      pathTo.push(to);
      to = getParent(to);
    }
    for (var i = 0; i < pathFrom.length; i++) {
      fn(pathFrom[i], 'bubbled', argFrom);
    }
    for (var _i = pathTo.length; _i-- > 0;) {
      fn(pathTo[_i], 'captured', argTo);
    }
  }
  
  /**
   * Some event types have a notion of different registration names for different
   * "phases" of propagation. This finds listeners by a given phase.
   */
  function listenerAtPhase(inst, event, propagationPhase) {
    var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
    return getListener(inst, registrationName);
  }
  
  /**
   * A small set of propagation patterns, each of which will accept a small amount
   * of information, and generate a set of "dispatch ready event objects" - which
   * are sets of events that have already been annotated with a set of dispatched
   * listener functions/ids. The API is designed this way to discourage these
   * propagation strategies from actually executing the dispatches, since we
   * always want to collect the entire set of dispatches before executing even a
   * single one.
   */
  
  /**
   * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
   * here, allows us to not have to bind or create functions for each event.
   * Mutating the event's members allows us to not have to create a wrapping
   * "dispatch" object that pairs the event with the listener.
   */
  function accumulateDirectionalDispatches(inst, phase, event) {
    {
      !inst ? warning(false, 'Dispatching inst must not be null') : void 0;
    }
    var listener = listenerAtPhase(inst, event, phase);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
  
  /**
   * Collect dispatches (must be entirely collected before dispatching - see unit
   * tests). Lazily allocate the array to conserve memory.  We must loop through
   * each event and perform the traversal for each one. We cannot perform a
   * single traversal for the entire collection of events because each event may
   * have a different target.
   */
  function accumulateTwoPhaseDispatchesSingle(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
    }
  }
  
  /**
   * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
   */
  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      var parentInst = targetInst ? getParentInstance(targetInst) : null;
      traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
    }
  }
  
  /**
   * Accumulates without regard to direction, does not look for phased
   * registration names. Same as `accumulateDirectDispatchesSingle` but without
   * requiring that the `dispatchMarker` be the same as the dispatched ID.
   */
  function accumulateDispatches(inst, ignoredDirection, event) {
    if (inst && event && event.dispatchConfig.registrationName) {
      var registrationName = event.dispatchConfig.registrationName;
      var listener = getListener(inst, registrationName);
      if (listener) {
        event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
        event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
      }
    }
  }
  
  /**
   * Accumulates dispatches on an `SyntheticEvent`, but only for the
   * `dispatchMarker`.
   * @param {SyntheticEvent} event
   */
  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      accumulateDispatches(event._targetInst, null, event);
    }
  }
  
  function accumulateTwoPhaseDispatches(events) {
    forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
  }
  
  function accumulateTwoPhaseDispatchesSkipTarget(events) {
    forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
  }
  
  function accumulateEnterLeaveDispatches(leave, enter, from, to) {
    traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
  }
  
  function accumulateDirectDispatches(events) {
    forEachAccumulated(events, accumulateDirectDispatchesSingle);
  }
  
  var EventPropagators = Object.freeze({
    accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
    accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
    accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches,
    accumulateDirectDispatches: accumulateDirectDispatches
  });
  
  // Do not uses the below two methods directly!
  // Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
  // (It is the only module that is allowed to access these methods.)
  
  function unsafeCastStringToDOMTopLevelType(topLevelType) {
    return topLevelType;
  }
  
  function unsafeCastDOMTopLevelTypeToString(topLevelType) {
    return topLevelType;
  }
  
  /**
   * Generate a mapping of standard vendor prefixes using the defined style property and event name.
   *
   * @param {string} styleProp
   * @param {string} eventName
   * @returns {object}
   */
  function makePrefixMap(styleProp, eventName) {
    var prefixes = {};
  
    prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
    prefixes['Webkit' + styleProp] = 'webkit' + eventName;
    prefixes['Moz' + styleProp] = 'moz' + eventName;
    prefixes['ms' + styleProp] = 'MS' + eventName;
    prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();
  
    return prefixes;
  }
  
  /**
   * A list of event names to a configurable list of vendor prefixes.
   */
  var vendorPrefixes = {
    animationend: makePrefixMap('Animation', 'AnimationEnd'),
    animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
    animationstart: makePrefixMap('Animation', 'AnimationStart'),
    transitionend: makePrefixMap('Transition', 'TransitionEnd')
  };
  
  /**
   * Event names that have already been detected and prefixed (if applicable).
   */
  var prefixedEventNames = {};
  
  /**
   * Element to check for prefixes on.
   */
  var style = {};
  
  /**
   * Bootstrap if a DOM exists.
   */
  if (ExecutionEnvironment.canUseDOM) {
    style = document.createElement('div').style;
  
    // On some platforms, in particular some releases of Android 4.x,
    // the un-prefixed "animation" and "transition" properties are defined on the
    // style object but the events that fire will still be prefixed, so we need
    // to check if the un-prefixed events are usable, and if not remove them from the map.
    if (!('AnimationEvent' in window)) {
      delete vendorPrefixes.animationend.animation;
      delete vendorPrefixes.animationiteration.animation;
      delete vendorPrefixes.animationstart.animation;
    }
  
    // Same as above
    if (!('TransitionEvent' in window)) {
      delete vendorPrefixes.transitionend.transition;
    }
  }
  
  /**
   * Attempts to determine the correct vendor prefixed event name.
   *
   * @param {string} eventName
   * @returns {string}
   */
  function getVendorPrefixedEventName(eventName) {
    if (prefixedEventNames[eventName]) {
      return prefixedEventNames[eventName];
    } else if (!vendorPrefixes[eventName]) {
      return eventName;
    }
  
    var prefixMap = vendorPrefixes[eventName];
  
    for (var styleProp in prefixMap) {
      if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
        return prefixedEventNames[eventName] = prefixMap[styleProp];
      }
    }
  
    return eventName;
  }
  
  /**
   * To identify top level events in ReactDOM, we use constants defined by this
   * module. This is the only module that uses the unsafe* methods to express
   * that the constants actually correspond to the browser event names. This lets
   * us save some bundle size by avoiding a top level type -> event name map.
   * The rest of ReactDOM code should import top level types from this file.
   */
  var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
  var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
  var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
  var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
  var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
  var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
  var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
  var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
  var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
  var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
  var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
  var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
  var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
  var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
  var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
  var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
  var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
  var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
  var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
  var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
  var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
  var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
  var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
  var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
  var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
  var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
  var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
  var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
  var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
  var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
  var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
  var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
  var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
  var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
  var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
  var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
  var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
  var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
  var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
  var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
  var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
  var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
  var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
  var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
  var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
  var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
  var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
  var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
  var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
  var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
  var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
  var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
  var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
  var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');
  
  
  var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
  var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
  var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
  var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
  var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
  var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
  var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
  var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
  var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
  var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
  var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
  var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
  var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
  var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
  var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
  var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
  var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
  var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
  var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
  var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
  var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
  var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
  var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
  var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
  var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel');
  
  // List of events that need to be individually attached to media elements.
  // Note that events in this list will *not* be listened to at the top level
  // unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.
  var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
  
  function getRawEventName(topLevelType) {
    return unsafeCastDOMTopLevelTypeToString(topLevelType);
  }
  
  var contentKey = null;
  
  /**
   * Gets the key used to access text content on a DOM node.
   *
   * @return {?string} Key used to access text content.
   * @internal
   */
  function getTextContentAccessor() {
    if (!contentKey && ExecutionEnvironment.canUseDOM) {
      // Prefer textContent to innerText because many browsers support both but
      // SVG <text> elements don't support innerText even when <div> does.
      contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
    }
    return contentKey;
  }
  
  /**
   * This helper object stores information about text content of a target node,
   * allowing comparison of content before and after a given event.
   *
   * Identify the node where selection currently begins, then observe
   * both its text content and its current position in the DOM. Since the
   * browser may natively replace the target node during composition, we can
   * use its position to find its replacement.
   *
   *
   */
  var compositionState = {
    _root: null,
    _startText: null,
    _fallbackText: null
  };
  
  function initialize(nativeEventTarget) {
    compositionState._root = nativeEventTarget;
    compositionState._startText = getText();
    return true;
  }
  
  function reset() {
    compositionState._root = null;
    compositionState._startText = null;
    compositionState._fallbackText = null;
  }
  
  function getData() {
    if (compositionState._fallbackText) {
      return compositionState._fallbackText;
    }
  
    var start = void 0;
    var startValue = compositionState._startText;
    var startLength = startValue.length;
    var end = void 0;
    var endValue = getText();
    var endLength = endValue.length;
  
    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }
  
    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }
  
    var sliceTail = end > 1 ? 1 - end : undefined;
    compositionState._fallbackText = endValue.slice(start, sliceTail);
    return compositionState._fallbackText;
  }
  
  function getText() {
    if ('value' in compositionState._root) {
      return compositionState._root.value;
    }
    return compositionState._root[getTextContentAccessor()];
  }
  
  /* eslint valid-typeof: 0 */
  
  var didWarnForAddedNewProperty = false;
  var EVENT_POOL_SIZE = 10;
  
  var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];
  
  /**
   * @interface Event
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var EventInterface = {
    type: null,
    target: null,
    // currentTarget is set when dispatching; no use in copying it here
    currentTarget: emptyFunction.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function (event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };
  
  /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   *
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {*} targetInst Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @param {DOMEventTarget} nativeEventTarget Target node.
   */
  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    {
      // these have a getter/setter for warnings
      delete this.nativeEvent;
      delete this.preventDefault;
      delete this.stopPropagation;
    }
  
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
  
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (!Interface.hasOwnProperty(propName)) {
        continue;
      }
      {
        delete this[propName]; // this has a getter/setter for warnings
      }
      var normalize = Interface[propName];
      if (normalize) {
        this[propName] = normalize(nativeEvent);
      } else {
        if (propName === 'target') {
          this.target = nativeEventTarget;
        } else {
          this[propName] = nativeEvent[propName];
        }
      }
    }
  
    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
    if (defaultPrevented) {
      this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
    } else {
      this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
    }
    this.isPropagationStopped = emptyFunction.thatReturnsFalse;
    return this;
  }
  
  _assign$$1(SyntheticEvent.prototype, {
    preventDefault: function () {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      if (!event) {
        return;
      }
  
      if (event.preventDefault) {
        event.preventDefault();
      } else if (typeof event.returnValue !== 'unknown') {
        event.returnValue = false;
      }
      this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
    },
  
    stopPropagation: function () {
      var event = this.nativeEvent;
      if (!event) {
        return;
      }
  
      if (event.stopPropagation) {
        event.stopPropagation();
      } else if (typeof event.cancelBubble !== 'unknown') {
        // The ChangeEventPlugin registers a "propertychange" event for
        // IE. This event does not support bubbling or cancelling, and
        // any references to cancelBubble throw "Member not found".  A
        // typeof check of "unknown" circumvents this issue (and is also
        // IE specific).
        event.cancelBubble = true;
      }
  
      this.isPropagationStopped = emptyFunction.thatReturnsTrue;
    },
  
    /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */
    persist: function () {
      this.isPersistent = emptyFunction.thatReturnsTrue;
    },
  
    /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */
    isPersistent: emptyFunction.thatReturnsFalse,
  
    /**
     * `PooledClass` looks for `destructor` on each instance it releases.
     */
    destructor: function () {
      var Interface = this.constructor.Interface;
      for (var propName in Interface) {
        {
          Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
        }
      }
      for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
        this[shouldBeReleasedProperties[i]] = null;
      }
      {
        Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
        Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
        Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
      }
    }
  });
  
  SyntheticEvent.Interface = EventInterface;
  
  /**
   * Helper to reduce boilerplate when creating subclasses.
   */
  SyntheticEvent.extend = function (Interface) {
    var Super = this;
  
    var E = function () {};
    E.prototype = Super.prototype;
    var prototype = new E();
  
    function Class() {
      return Super.apply(this, arguments);
    }
    _assign$$1(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
  
    Class.Interface = _assign$$1({}, Super.Interface, Interface);
    Class.extend = Super.extend;
    addEventPoolingTo(Class);
  
    return Class;
  };
  
  /** Proxying after everything set on SyntheticEvent
   * to resolve Proxy issue on some WebKit browsers
   * in which some Event properties are set to undefined (GH#10010)
   */
  {
    var isProxySupported = typeof Proxy === 'function' &&
    // https://github.com/facebook/react/issues/12011
    !Object.isSealed(new Proxy({}, {}));
  
    if (isProxySupported) {
      /*eslint-disable no-func-assign */
      SyntheticEvent = new Proxy(SyntheticEvent, {
        construct: function (target, args) {
          return this.apply(target, Object.create(target.prototype), args);
        },
        apply: function (constructor, that, args) {
          return new Proxy(constructor.apply(that, args), {
            set: function (target, prop, value) {
              if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
                !(didWarnForAddedNewProperty || target.isPersistent()) ? warning(false, "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
                didWarnForAddedNewProperty = true;
              }
              target[prop] = value;
              return true;
            }
          });
        }
      });
      /*eslint-enable no-func-assign */
    }
  }
  
  addEventPoolingTo(SyntheticEvent);
  
  /**
   * Helper to nullify syntheticEvent instance properties when destructing
   *
   * @param {String} propName
   * @param {?object} getVal
   * @return {object} defineProperty object
   */
  function getPooledWarningPropertyDefinition(propName, getVal) {
    var isFunction = typeof getVal === 'function';
    return {
      configurable: true,
      set: set,
      get: get
    };
  
    function set(val) {
      var action = isFunction ? 'setting the method' : 'setting the property';
      warn(action, 'This is effectively a no-op');
      return val;
    }
  
    function get() {
      var action = isFunction ? 'accessing the method' : 'accessing the property';
      var result = isFunction ? 'This is a no-op function' : 'This is set to null';
      warn(action, result);
      return getVal;
    }
  
    function warn(action, result) {
      var warningCondition = false;
      !warningCondition ? warning(false, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
    }
  }
  
  function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
    var EventConstructor = this;
    if (EventConstructor.eventPool.length) {
      var instance = EventConstructor.eventPool.pop();
      EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
      return instance;
    }
    return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
  }
  
  function releasePooledEvent(event) {
    var EventConstructor = this;
    !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance  into a pool of a different type.') : void 0;
    event.destructor();
    if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
      EventConstructor.eventPool.push(event);
    }
  }
  
  function addEventPoolingTo(EventConstructor) {
    EventConstructor.eventPool = [];
    EventConstructor.getPooled = getPooledEvent;
    EventConstructor.release = releasePooledEvent;
  }
  
  var SyntheticEvent$1 = SyntheticEvent;
  
  /**
   * @interface Event
   * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
   */
  var SyntheticCompositionEvent = SyntheticEvent$1.extend({
    data: null
  });
  
  /**
   * @interface Event
   * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
   *      /#events-inputevents
   */
  var SyntheticInputEvent = SyntheticEvent$1.extend({
    data: null
  });
  
  var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
  var START_KEYCODE = 229;
  
  var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
  
  var documentMode = null;
  if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
    documentMode = document.documentMode;
  }
  
  // Webkit offers a very useful `textInput` event that can be used to
  // directly represent `beforeInput`. The IE `textinput` event is not as
  // useful, so we don't use it.
  var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode;
  
  // In IE9+, we have access to composition events, but the data supplied
  // by the native compositionend event may be incorrect. Japanese ideographic
  // spaces, for instance (\u3000) are not recorded correctly.
  var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
  
  var SPACEBAR_CODE = 32;
  var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
  
  // Events and their corresponding property names.
  var eventTypes = {
    beforeInput: {
      phasedRegistrationNames: {
        bubbled: 'onBeforeInput',
        captured: 'onBeforeInputCapture'
      },
      dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
    },
    compositionEnd: {
      phasedRegistrationNames: {
        bubbled: 'onCompositionEnd',
        captured: 'onCompositionEndCapture'
      },
      dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
    },
    compositionStart: {
      phasedRegistrationNames: {
        bubbled: 'onCompositionStart',
        captured: 'onCompositionStartCapture'
      },
      dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
    },
    compositionUpdate: {
      phasedRegistrationNames: {
        bubbled: 'onCompositionUpdate',
        captured: 'onCompositionUpdateCapture'
      },
      dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
    }
  };
  
  // Track whether we've ever handled a keypress on the space key.
  var hasSpaceKeypress = false;
  
  /**
   * Return whether a native keypress event is assumed to be a command.
   * This is required because Firefox fires `keypress` events for key commands
   * (cut, copy, select-all, etc.) even though no character is inserted.
   */
  function isKeypressCommand(nativeEvent) {
    return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey);
  }
  
  /**
   * Translate native top level events into event types.
   *
   * @param {string} topLevelType
   * @return {object}
   */
  function getCompositionEventType(topLevelType) {
    switch (topLevelType) {
      case TOP_COMPOSITION_START:
        return eventTypes.compositionStart;
      case TOP_COMPOSITION_END:
        return eventTypes.compositionEnd;
      case TOP_COMPOSITION_UPDATE:
        return eventTypes.compositionUpdate;
    }
  }
  
  /**
   * Does our fallback best-guess model think this event signifies that
   * composition has begun?
   *
   * @param {string} topLevelType
   * @param {object} nativeEvent
   * @return {boolean}
   */
  function isFallbackCompositionStart(topLevelType, nativeEvent) {
    return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
  }
  
  /**
   * Does our fallback mode think that this event is the end of composition?
   *
   * @param {string} topLevelType
   * @param {object} nativeEvent
   * @return {boolean}
   */
  function isFallbackCompositionEnd(topLevelType, nativeEvent) {
    switch (topLevelType) {
      case TOP_KEY_UP:
        // Command keys insert or clear IME input.
        return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
      case TOP_KEY_DOWN:
        // Expect IME keyCode on each keydown. If we get any other
        // code we must have exited earlier.
        return nativeEvent.keyCode !== START_KEYCODE;
      case TOP_KEY_PRESS:
      case TOP_MOUSE_DOWN:
      case TOP_BLUR:
        // Events are not possible without cancelling IME.
        return true;
      default:
        return false;
    }
  }
  
  /**
   * Google Input Tools provides composition data via a CustomEvent,
   * with the `data` property populated in the `detail` object. If this
   * is available on the event object, use it. If not, this is a plain
   * composition event and we have nothing special to extract.
   *
   * @param {object} nativeEvent
   * @return {?string}
   */
  function getDataFromCustomEvent(nativeEvent) {
    var detail = nativeEvent.detail;
    if (typeof detail === 'object' && 'data' in detail) {
      return detail.data;
    }
    return null;
  }
  
  // Track the current IME composition status, if any.
  var isComposing = false;
  
  /**
   * @return {?object} A SyntheticCompositionEvent.
   */
  function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var eventType = void 0;
    var fallbackData = void 0;
  
    if (canUseCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!isComposing) {
      if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }
  
    if (!eventType) {
      return null;
    }
  
    if (useFallbackCompositionData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!isComposing && eventType === eventTypes.compositionStart) {
        isComposing = initialize(nativeEventTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (isComposing) {
          fallbackData = getData();
        }
      }
    }
  
    var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
  
    if (fallbackData) {
      // Inject data generated from fallback path into the synthetic event.
      // This matches the property of native CompositionEventInterface.
      event.data = fallbackData;
    } else {
      var customData = getDataFromCustomEvent(nativeEvent);
      if (customData !== null) {
        event.data = customData;
      }
    }
  
    accumulateTwoPhaseDispatches(event);
    return event;
  }
  
  /**
   * @param {TopLevelType} topLevelType Number from `TopLevelType`.
   * @param {object} nativeEvent Native browser event.
   * @return {?string} The string corresponding to this `beforeInput` event.
   */
  function getNativeBeforeInputChars(topLevelType, nativeEvent) {
    switch (topLevelType) {
      case TOP_COMPOSITION_END:
        return getDataFromCustomEvent(nativeEvent);
      case TOP_KEY_PRESS:
        /**
         * If native `textInput` events are available, our goal is to make
         * use of them. However, there is a special case: the spacebar key.
         * In Webkit, preventing default on a spacebar `textInput` event
         * cancels character insertion, but it *also* causes the browser
         * to fall back to its default spacebar behavior of scrolling the
         * page.
         *
         * Tracking at:
         * https://code.google.com/p/chromium/issues/detail?id=355103
         *
         * To avoid this issue, use the keypress event as if no `textInput`
         * event is available.
         */
        var which = nativeEvent.which;
        if (which !== SPACEBAR_CODE) {
          return null;
        }
  
        hasSpaceKeypress = true;
        return SPACEBAR_CHAR;
  
      case TOP_TEXT_INPUT:
        // Record the characters to be added to the DOM.
        var chars = nativeEvent.data;
  
        // If it's a spacebar character, assume that we have already handled
        // it at the keypress level and bail immediately. Android Chrome
        // doesn't give us keycodes, so we need to blacklist it.
        if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
          return null;
        }
  
        return chars;
  
      default:
        // For other native event types, do nothing.
        return null;
    }
  }
  
  /**
   * For browsers that do not provide the `textInput` event, extract the
   * appropriate string to use for SyntheticInputEvent.
   *
   * @param {number} topLevelType Number from `TopLevelEventTypes`.
   * @param {object} nativeEvent Native browser event.
   * @return {?string} The fallback string for this `beforeInput` event.
   */
  function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
    // If we are currently composing (IME) and using a fallback to do so,
    // try to extract the composed characters from the fallback object.
    // If composition event is available, we extract a string only at
    // compositionevent, otherwise extract it at fallback events.
    if (isComposing) {
      if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
        var chars = getData();
        reset();
        isComposing = false;
        return chars;
      }
      return null;
    }
  
    switch (topLevelType) {
      case TOP_PASTE:
        // If a paste event occurs after a keypress, throw out the input
        // chars. Paste events should not lead to BeforeInput events.
        return null;
      case TOP_KEY_PRESS:
        /**
         * As of v27, Firefox may fire keypress events even when no character
         * will be inserted. A few possibilities:
         *
         * - `which` is `0`. Arrow keys, Esc key, etc.
         *
         * - `which` is the pressed key code, but no char is available.
         *   Ex: 'AltGr + d` in Polish. There is no modified character for
         *   this key combination and no character is inserted into the
         *   document, but FF fires the keypress for char code `100` anyway.
         *   No `input` event will occur.
         *
         * - `which` is the pressed key code, but a command combination is
         *   being used. Ex: `Cmd+C`. No character is inserted, and no
         *   `input` event will occur.
         */
        if (!isKeypressCommand(nativeEvent)) {
          // IE fires the `keypress` event when a user types an emoji via
          // Touch keyboard of Windows.  In such a case, the `char` property
          // holds an emoji character like `\uD83D\uDE0A`.  Because its length
          // is 2, the property `which` does not represent an emoji correctly.
          // In such a case, we directly return the `char` property instead of
          // using `which`.
          if (nativeEvent.char && nativeEvent.char.length > 1) {
            return nativeEvent.char;
          } else if (nativeEvent.which) {
            return String.fromCharCode(nativeEvent.which);
          }
        }
        return null;
      case TOP_COMPOSITION_END:
        return useFallbackCompositionData ? null : nativeEvent.data;
      default:
        return null;
    }
  }
  
  /**
   * Extract a SyntheticInputEvent for `beforeInput`, based on either native
   * `textInput` or fallback behavior.
   *
   * @return {?object} A SyntheticInputEvent.
   */
  function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var chars = void 0;
  
    if (canUseTextInputEvent) {
      chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
    } else {
      chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
    }
  
    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return null;
    }
  
    var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
  
    event.data = chars;
    accumulateTwoPhaseDispatches(event);
    return event;
  }
  
  /**
   * Create an `onBeforeInput` event to match
   * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
   *
   * This event plugin is based on the native `textInput` event
   * available in Chrome, Safari, Opera, and IE. This event fires after
   * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
   *
   * `beforeInput` is spec'd but not implemented in any browsers, and
   * the `input` event does not provide any useful information about what has
   * actually been added, contrary to the spec. Thus, `textInput` is the best
   * available event to identify the characters that have actually been inserted
   * into the target node.
   *
   * This plugin is also responsible for emitting `composition` events, thus
   * allowing us to share composition fallback code for both `beforeInput` and
   * `composition` event types.
   */
  var BeforeInputEventPlugin = {
    eventTypes: eventTypes,
  
    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
  
      var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
  
      if (composition === null) {
        return beforeInput;
      }
  
      if (beforeInput === null) {
        return composition;
      }
  
      return [composition, beforeInput];
    }
  };
  
  // Use to restore controlled state after a change event has fired.
  
  var fiberHostComponent = null;
  
  var ReactControlledComponentInjection = {
    injectFiberControlledHostComponent: function (hostComponentImpl) {
      // The fiber implementation doesn't use dynamic dispatch so we need to
      // inject the implementation.
      fiberHostComponent = hostComponentImpl;
    }
  };
  
  var restoreTarget = null;
  var restoreQueue = null;
  
  function restoreStateOfTarget(target) {
    // We perform this translation at the end of the event loop so that we
    // always receive the correct fiber here
    var internalInstance = getInstanceFromNode(target);
    if (!internalInstance) {
      // Unmounted
      return;
    }
    !(fiberHostComponent && typeof fiberHostComponent.restoreControlledState === 'function') ? invariant(false, 'Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
    fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
  }
  
  var injection$2 = ReactControlledComponentInjection;
  
  function enqueueStateRestore(target) {
    if (restoreTarget) {
      if (restoreQueue) {
        restoreQueue.push(target);
      } else {
        restoreQueue = [target];
      }
    } else {
      restoreTarget = target;
    }
  }
  
  function needsStateRestore() {
    return restoreTarget !== null || restoreQueue !== null;
  }
  
  function restoreStateIfNeeded() {
    if (!restoreTarget) {
      return;
    }
    var target = restoreTarget;
    var queuedTargets = restoreQueue;
    restoreTarget = null;
    restoreQueue = null;
  
    restoreStateOfTarget(target);
    if (queuedTargets) {
      for (var i = 0; i < queuedTargets.length; i++) {
        restoreStateOfTarget(queuedTargets[i]);
      }
    }
  }
  
  var ReactControlledComponent = Object.freeze({
    injection: injection$2,
    enqueueStateRestore: enqueueStateRestore,
    needsStateRestore: needsStateRestore,
    restoreStateIfNeeded: restoreStateIfNeeded
  });
  
  // Used as a way to call batchedUpdates when we don't have a reference to
  // the renderer. Such as when we're dispatching events or if third party
  // libraries need to call batchedUpdates. Eventually, this API will go away when
  // everything is batched by default. We'll then have a similar API to opt-out of
  // scheduled work and instead do synchronous work.
  
  // Defaults
  var _batchedUpdates = function (fn, bookkeeping) {
    return fn(bookkeeping);
  };
  var _interactiveUpdates = function (fn, a, b) {
    return fn(a, b);
  };
  var _flushInteractiveUpdates = function () {};
  
  var isBatching = false;
  function batchedUpdates(fn, bookkeeping) {
    if (isBatching) {
      // If we are currently inside another batch, we need to wait until it
      // fully completes before restoring state.
      return fn(bookkeeping);
    }
    isBatching = true;
    try {
      return _batchedUpdates(fn, bookkeeping);
    } finally {
      // Here we wait until all updates have propagated, which is important
      // when using controlled components within layers:
      // https://github.com/facebook/react/issues/1698
      // Then we restore state of any controlled component.
      isBatching = false;
      var controlledComponentsHavePendingUpdates = needsStateRestore();
      if (controlledComponentsHavePendingUpdates) {
        // If a controlled event was fired, we may need to restore the state of
        // the DOM node back to the controlled value. This is necessary when React
        // bails out of the update without touching the DOM.
        _flushInteractiveUpdates();
        restoreStateIfNeeded();
      }
    }
  }
  
  function interactiveUpdates(fn, a, b) {
    return _interactiveUpdates(fn, a, b);
  }
  
  
  
  var injection$3 = {
    injectRenderer: function (renderer) {
      _batchedUpdates = renderer.batchedUpdates;
      _interactiveUpdates = renderer.interactiveUpdates;
      _flushInteractiveUpdates = renderer.flushInteractiveUpdates;
    }
  };
  
  /**
   * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
   */
  var supportedInputTypes = {
    color: true,
    date: true,
    datetime: true,
    'datetime-local': true,
    email: true,
    month: true,
    number: true,
    password: true,
    range: true,
    search: true,
    tel: true,
    text: true,
    time: true,
    url: true,
    week: true
  };
  
  function isTextInputElement(elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  
    if (nodeName === 'input') {
      return !!supportedInputTypes[elem.type];
    }
  
    if (nodeName === 'textarea') {
      return true;
    }
  
    return false;
  }
  
  /**
   * HTML nodeType values that represent the type of the node
   */
  
  var ELEMENT_NODE = 1;
  var TEXT_NODE = 3;
  var COMMENT_NODE = 8;
  var DOCUMENT_NODE = 9;
  var DOCUMENT_FRAGMENT_NODE = 11;
  
  /**
   * Gets the target node from a native browser event by accounting for
   * inconsistencies in browser DOM APIs.
   *
   * @param {object} nativeEvent Native browser event.
   * @return {DOMEventTarget} Target node.
   */
  function getEventTarget(nativeEvent) {
    // Fallback to nativeEvent.srcElement for IE9
    // https://github.com/facebook/react/issues/12506
    var target = nativeEvent.target || nativeEvent.srcElement || window;
  
    // Normalize SVG <use> element events #4963
    if (target.correspondingUseElement) {
      target = target.correspondingUseElement;
    }
  
    // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
    // @see http://www.quirksmode.org/js/events_properties.html
    return target.nodeType === TEXT_NODE ? target.parentNode : target;
  }
  
  /**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @param {?boolean} capture Check if the capture phase is supported.
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   */
  function isEventSupported(eventNameSuffix, capture) {
    if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
      return false;
    }
  
    var eventName = 'on' + eventNameSuffix;
    var isSupported = eventName in document;
  
    if (!isSupported) {
      var element = document.createElement('div');
      element.setAttribute(eventName, 'return;');
      isSupported = typeof element[eventName] === 'function';
    }
  
    return isSupported;
  }
  
  function isCheckable(elem) {
    var type = elem.type;
    var nodeName = elem.nodeName;
    return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
  }
  
  function getTracker(node) {
    return node._valueTracker;
  }
  
  function detachTracker(node) {
    node._valueTracker = null;
  }
  
  function getValueFromNode(node) {
    var value = '';
    if (!node) {
      return value;
    }
  
    if (isCheckable(node)) {
      value = node.checked ? 'true' : 'false';
    } else {
      value = node.value;
    }
  
    return value;
  }
  
  function trackValueOnNode(node) {
    var valueField = isCheckable(node) ? 'checked' : 'value';
    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
  
    var currentValue = '' + node[valueField];
  
    // if someone has already defined a value or Safari, then bail
    // and don't track value will cause over reporting of changes,
    // but it's better then a hard failure
    // (needed for certain tests that spyOn input values and Safari)
    if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
      return;
    }
    var get = descriptor.get,
        set = descriptor.set;
  
    Object.defineProperty(node, valueField, {
      configurable: true,
      get: function () {
        return get.call(this);
      },
      set: function (value) {
        currentValue = '' + value;
        set.call(this, value);
      }
    });
    // We could've passed this the first time
    // but it triggers a bug in IE11 and Edge 14/15.
    // Calling defineProperty() again should be equivalent.
    // https://github.com/facebook/react/issues/11768
    Object.defineProperty(node, valueField, {
      enumerable: descriptor.enumerable
    });
  
    var tracker = {
      getValue: function () {
        return currentValue;
      },
      setValue: function (value) {
        currentValue = '' + value;
      },
      stopTracking: function () {
        detachTracker(node);
        delete node[valueField];
      }
    };
    return tracker;
  }
  
  function track(node) {
    if (getTracker(node)) {
      return;
    }
  
    // TODO: Once it's just Fiber we can move this to node._wrapperState
    node._valueTracker = trackValueOnNode(node);
  }
  
  function updateValueIfChanged(node) {
    if (!node) {
      return false;
    }
  
    var tracker = getTracker(node);
    // if there is no tracker at this point it's unlikely
    // that trying again will succeed
    if (!tracker) {
      return true;
    }
  
    var lastValue = tracker.getValue();
    var nextValue = getValueFromNode(node);
    if (nextValue !== lastValue) {
      tracker.setValue(nextValue);
      return true;
    }
    return false;
  }
  
  var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  
  var ReactCurrentOwner = ReactInternals.ReactCurrentOwner;
  var ReactDebugCurrentFrame = ReactInternals.ReactDebugCurrentFrame;
  
  var describeComponentFrame = function (name, source, ownerName) {
    return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
  };
  
  // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
  // nor polyfill, then a plain number is used for performance.
  var hasSymbol = typeof Symbol === 'function' && Symbol.for;
  
  var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
  var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
  var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
  var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
  var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
  var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
  var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
  var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
  var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
  var REACT_TIMEOUT_TYPE = hasSymbol ? Symbol.for('react.timeout') : 0xead1;
  
  var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator';
  
  function getIteratorFn(maybeIterable) {
    if (maybeIterable === null || typeof maybeIterable === 'undefined') {
      return null;
    }
    var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
    if (typeof maybeIterator === 'function') {
      return maybeIterator;
    }
    return null;
  }
  
  function getComponentName(fiber) {
    var type = fiber.type;
  
    if (typeof type === 'function') {
      return type.displayName || type.name;
    }
    if (typeof type === 'string') {
      return type;
    }
    switch (type) {
      case REACT_ASYNC_MODE_TYPE:
        return 'AsyncMode';
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';
      case REACT_FRAGMENT_TYPE:
        return 'ReactFragment';
      case REACT_PORTAL_TYPE:
        return 'ReactPortal';
      case REACT_PROFILER_TYPE:
        return 'Profiler(' + fiber.pendingProps.id + ')';
      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';
      case REACT_STRICT_MODE_TYPE:
        return 'StrictMode';
      case REACT_TIMEOUT_TYPE:
        return 'Timeout';
    }
    if (typeof type === 'object' && type !== null) {
      switch (type.$$typeof) {
        case REACT_FORWARD_REF_TYPE:
          var functionName = type.render.displayName || type.render.name || '';
          return functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef';
      }
    }
    return null;
  }
  
  function describeFiber(fiber) {
    switch (fiber.tag) {
      case IndeterminateComponent:
      case FunctionalComponent:
      case ClassComponent:
      case HostComponent:
        var owner = fiber._debugOwner;
        var source = fiber._debugSource;
        var name = getComponentName(fiber);
        var ownerName = null;
        if (owner) {
          ownerName = getComponentName(owner);
        }
        return describeComponentFrame(name, source, ownerName);
      default:
        return '';
    }
  }
  
  // This function can only be called with a work-in-progress fiber and
  // only during begin or complete phase. Do not call it under any other
  // circumstances.
  function getStackAddendumByWorkInProgressFiber(workInProgress) {
    var info = '';
    var node = workInProgress;
    do {
      info += describeFiber(node);
      // Otherwise this return pointer might point to the wrong tree:
      node = node.return;
    } while (node);
    return info;
  }
  
  function getCurrentFiberOwnerName$1() {
    {
      var fiber = ReactDebugCurrentFiber.current;
      if (fiber === null) {
        return null;
      }
      var owner = fiber._debugOwner;
      if (owner !== null && typeof owner !== 'undefined') {
        return getComponentName(owner);
      }
    }
    return null;
  }
  
  function getCurrentFiberStackAddendum$1() {
    {
      var fiber = ReactDebugCurrentFiber.current;
      if (fiber === null) {
        return null;
      }
      // Safe because if current fiber exists, we are reconciling,
      // and it is guaranteed to be the work-in-progress version.
      return getStackAddendumByWorkInProgressFiber(fiber);
    }
    return null;
  }
  
  function resetCurrentFiber() {
    ReactDebugCurrentFrame.getCurrentStack = null;
    ReactDebugCurrentFiber.current = null;
    ReactDebugCurrentFiber.phase = null;
  }
  
  function setCurrentFiber(fiber) {
    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum$1;
    ReactDebugCurrentFiber.current = fiber;
    ReactDebugCurrentFiber.phase = null;
  }
  
  function setCurrentPhase(phase) {
    ReactDebugCurrentFiber.phase = phase;
  }
  
  var ReactDebugCurrentFiber = {
    current: null,
    phase: null,
    resetCurrentFiber: resetCurrentFiber,
    setCurrentFiber: setCurrentFiber,
    setCurrentPhase: setCurrentPhase,
    getCurrentFiberOwnerName: getCurrentFiberOwnerName$1,
    getCurrentFiberStackAddendum: getCurrentFiberStackAddendum$1
  };
  
  // A reserved attribute.
  // It is handled by React separately and shouldn't be written to the DOM.
  var RESERVED = 0;
  
  // A simple string attribute.
  // Attributes that aren't in the whitelist are presumed to have this type.
  var STRING = 1;
  
  // A string attribute that accepts booleans in React. In HTML, these are called
  // "enumerated" attributes with "true" and "false" as possible values.
  // When true, it should be set to a "true" string.
  // When false, it should be set to a "false" string.
  var BOOLEANISH_STRING = 2;
  
  // A real boolean attribute.
  // When true, it should be present (set either to an empty string or its name).
  // When false, it should be omitted.
  var BOOLEAN = 3;
  
  // An attribute that can be used as a flag as well as with a value.
  // When true, it should be present (set either to an empty string or its name).
  // When false, it should be omitted.
  // For any other value, should be present with that value.
  var OVERLOADED_BOOLEAN = 4;
  
  // An attribute that must be numeric or parse as a numeric.
  // When falsy, it should be removed.
  var NUMERIC = 5;
  
  // An attribute that must be positive numeric or parse as a positive numeric.
  // When falsy, it should be removed.
  var POSITIVE_NUMERIC = 6;
  
  /* eslint-disable max-len */
  var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
  /* eslint-enable max-len */
  var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
  
  
  var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
  var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
  
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var illegalAttributeNameCache = {};
  var validatedAttributeNameCache = {};
  
  function isAttributeNameSafe(attributeName) {
    if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
      return true;
    }
    if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
      return false;
    }
    if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
      validatedAttributeNameCache[attributeName] = true;
      return true;
    }
    illegalAttributeNameCache[attributeName] = true;
    {
      warning(false, 'Invalid attribute name: `%s`', attributeName);
    }
    return false;
  }
  
  function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
    if (propertyInfo !== null) {
      return propertyInfo.type === RESERVED;
    }
    if (isCustomComponentTag) {
      return false;
    }
    if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
      return true;
    }
    return false;
  }
  
  function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
    if (propertyInfo !== null && propertyInfo.type === RESERVED) {
      return false;
    }
    switch (typeof value) {
      case 'function':
      // $FlowIssue symbol is perfectly valid here
      case 'symbol':
        // eslint-disable-line
        return true;
      case 'boolean':
        {
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            return !propertyInfo.acceptsBooleans;
          } else {
            var prefix = name.toLowerCase().slice(0, 5);
            return prefix !== 'data-' && prefix !== 'aria-';
          }
        }
      default:
        return false;
    }
  }
  
  function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
    if (value === null || typeof value === 'undefined') {
      return true;
    }
    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
      return true;
    }
    if (isCustomComponentTag) {
      return false;
    }
    if (propertyInfo !== null) {
      switch (propertyInfo.type) {
        case BOOLEAN:
          return !value;
        case OVERLOADED_BOOLEAN:
          return value === false;
        case NUMERIC:
          return isNaN(value);
        case POSITIVE_NUMERIC:
          return isNaN(value) || value < 1;
      }
    }
    return false;
  }
  
  function getPropertyInfo(name) {
    return properties.hasOwnProperty(name) ? properties[name] : null;
  }
  
  function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace) {
    this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
    this.attributeName = attributeName;
    this.attributeNamespace = attributeNamespace;
    this.mustUseProperty = mustUseProperty;
    this.propertyName = name;
    this.type = type;
  }
  
  // When adding attributes to this list, be sure to also add them to
  // the `possibleStandardNames` module to ensure casing and incorrect
  // name warnings.
  var properties = {};
  
  // These props are reserved by React. They shouldn't be written to the DOM.
  ['children', 'dangerouslySetInnerHTML',
  // TODO: This prevents the assignment of defaultValue to regular
  // elements (not just inputs). Now that ReactDOMInput assigns to the
  // defaultValue property -- do we need this?
  'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
    name, // attributeName
    null);
  } // attributeNamespace
  );
  
  // A few React string attributes have a different name.
  // This is a mapping from React prop names to the attribute names.
  [['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
    var name = _ref[0],
        attributeName = _ref[1];
  
    properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
    attributeName, // attributeName
    null);
  } // attributeNamespace
  );
  
  // These are "enumerated" HTML attributes that accept "true" and "false".
  // In React, we let users pass `true` and `false` even though technically
  // these aren't boolean attributes (they are coerced to strings).
  ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
    name.toLowerCase(), // attributeName
    null);
  } // attributeNamespace
  );
  
  // These are "enumerated" SVG attributes that accept "true" and "false".
  // In React, we let users pass `true` and `false` even though technically
  // these aren't boolean attributes (they are coerced to strings).
  // Since these are SVG attributes, their attribute names are case-sensitive.
  ['autoReverse', 'externalResourcesRequired', 'preserveAlpha'].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
    name, // attributeName
    null);
  } // attributeNamespace
  );
  
  // These are HTML boolean attributes.
  ['allowFullScreen', 'async',
  // Note: there is a special case that prevents it from being written to the DOM
  // on the client side because the browsers are inconsistent. Instead we call focus().
  'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless',
  // Microdata
  'itemScope'].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
    name.toLowerCase(), // attributeName
    null);
  } // attributeNamespace
  );
  
  // These are the few React props that we set as DOM properties
  // rather than attributes. These are all booleans.
  ['checked',
  // Note: `option.selected` is not updated if `select.multiple` is
  // disabled with `removeAttribute`. We have special logic for handling this.
  'multiple', 'muted', 'selected'].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
    name.toLowerCase(), // attributeName
    null);
  } // attributeNamespace
  );
  
  // These are HTML attributes that are "overloaded booleans": they behave like
  // booleans, but can also accept a string value.
  ['capture', 'download'].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
    name.toLowerCase(), // attributeName
    null);
  } // attributeNamespace
  );
  
  // These are HTML attributes that must be positive numbers.
  ['cols', 'rows', 'size', 'span'].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
    name.toLowerCase(), // attributeName
    null);
  } // attributeNamespace
  );
  
  // These are HTML attributes that must be numbers.
  ['rowSpan', 'start'].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
    name.toLowerCase(), // attributeName
    null);
  } // attributeNamespace
  );
  
  var CAMELIZE = /[\-\:]([a-z])/g;
  var capitalize = function (token) {
    return token[1].toUpperCase();
  };
  
  // This is a list of all SVG attributes that need special casing, namespacing,
  // or boolean value assignment. Regular attributes that just accept strings
  // and have the same names are omitted, just like in the HTML whitelist.
  // Some of these attributes can be hard to find. This list was created by
  // scrapping the MDN documentation.
  ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
    var name = attributeName.replace(CAMELIZE, capitalize);
    properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
    attributeName, null);
  } // attributeNamespace
  );
  
  // String SVG attributes with the xlink namespace.
  ['xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
    var name = attributeName.replace(CAMELIZE, capitalize);
    properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
    attributeName, 'http://www.w3.org/1999/xlink');
  });
  
  // String SVG attributes with the xml namespace.
  ['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
    var name = attributeName.replace(CAMELIZE, capitalize);
    properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
    attributeName, 'http://www.w3.org/XML/1998/namespace');
  });
  
  // Special case: this attribute exists both in HTML and SVG.
  // Its "tabindex" attribute name is case-sensitive in SVG so we can't just use
  // its React `tabIndex` name, like we do for attributes that exist only in HTML.
  properties.tabIndex = new PropertyInfoRecord('tabIndex', STRING, false, // mustUseProperty
  'tabindex', // attributeName
  null);
  
  /**
   * Get the value for a property on a node. Only used in DEV for SSR validation.
   * The "expected" argument is used as a hint of what the expected value is.
   * Some properties have multiple equivalent values.
   */
  function getValueForProperty(node, name, expected, propertyInfo) {
    {
      if (propertyInfo.mustUseProperty) {
        var propertyName = propertyInfo.propertyName;
  
        return node[propertyName];
      } else {
        var attributeName = propertyInfo.attributeName;
  
        var stringValue = null;
  
        if (propertyInfo.type === OVERLOADED_BOOLEAN) {
          if (node.hasAttribute(attributeName)) {
            var value = node.getAttribute(attributeName);
            if (value === '') {
              return true;
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              return value;
            }
            if (value === '' + expected) {
              return expected;
            }
            return value;
          }
        } else if (node.hasAttribute(attributeName)) {
          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            // We had an attribute but shouldn't have had one, so read it
            // for the error message.
            return node.getAttribute(attributeName);
          }
          if (propertyInfo.type === BOOLEAN) {
            // If this was a boolean, it doesn't matter what the value is
            // the fact that we have it is the same as the expected.
            return expected;
          }
          // Even if this property uses a namespace we use getAttribute
          // because we assume its namespaced name is the same as our config.
          // To use getAttributeNS we need the local name which we don't have
          // in our config atm.
          stringValue = node.getAttribute(attributeName);
        }
  
        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
          return stringValue === null ? expected : stringValue;
        } else if (stringValue === '' + expected) {
          return expected;
        } else {
          return stringValue;
        }
      }
    }
  }
  
  /**
   * Get the value for a attribute on a node. Only used in DEV for SSR validation.
   * The third argument is used as a hint of what the expected value is. Some
   * attributes have multiple equivalent values.
   */
  function getValueForAttribute(node, name, expected) {
    {
      if (!isAttributeNameSafe(name)) {
        return;
      }
      if (!node.hasAttribute(name)) {
        return expected === undefined ? undefined : null;
      }
      var value = node.getAttribute(name);
      if (value === '' + expected) {
        return expected;
      }
      return value;
    }
  }
  
  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  function setValueForProperty(node, name, value, isCustomComponentTag) {
    var propertyInfo = getPropertyInfo(name);
    if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
      return;
    }
    if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
      value = null;
    }
    // If the prop isn't in the special list, treat it as a simple attribute.
    if (isCustomComponentTag || propertyInfo === null) {
      if (isAttributeNameSafe(name)) {
        var _attributeName = name;
        if (value === null) {
          node.removeAttribute(_attributeName);
        } else {
          node.setAttribute(_attributeName, '' + value);
        }
      }
      return;
    }
    var mustUseProperty = propertyInfo.mustUseProperty;
  
    if (mustUseProperty) {
      var propertyName = propertyInfo.propertyName;
  
      if (value === null) {
        var type = propertyInfo.type;
  
        node[propertyName] = type === BOOLEAN ? false : '';
      } else {
        // Contrary to `setAttribute`, object properties are properly
        // `toString`ed by IE8/9.
        node[propertyName] = value;
      }
      return;
    }
    // The rest are treated as attributes with special cases.
    var attributeName = propertyInfo.attributeName,
        attributeNamespace = propertyInfo.attributeNamespace;
  
    if (value === null) {
      node.removeAttribute(attributeName);
    } else {
      var _type = propertyInfo.type;
  
      var attributeValue = void 0;
      if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
        attributeValue = '';
      } else {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        attributeValue = '' + value;
      }
      if (attributeNamespace) {
        node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
      } else {
        node.setAttribute(attributeName, attributeValue);
      }
    }
  }
  
  var ReactControlledValuePropTypes = {
    checkPropTypes: null
  };
  
  {
    var hasReadOnlyValue = {
      button: true,
      checkbox: true,
      image: true,
      hidden: true,
      radio: true,
      reset: true,
      submit: true
    };
  
    var propTypes = {
      value: function (props, propName, componentName) {
        if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
          return null;
        }
        return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
      },
      checked: function (props, propName, componentName) {
        if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
          return null;
        }
        return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
      }
    };
  
    /**
     * Provide a linked `value` attribute for controlled forms. You should not use
     * this outside of the ReactDOM controlled form components.
     */
    ReactControlledValuePropTypes.checkPropTypes = function (tagName, props, getStack) {
      checkPropTypes(propTypes, props, 'prop', tagName, getStack);
    };
  }
  
  // TODO: direct imports like some-package/src/* are bad. Fix me.
  var getCurrentFiberOwnerName = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
  var getCurrentFiberStackAddendum = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;
  
  var didWarnValueDefaultValue = false;
  var didWarnCheckedDefaultChecked = false;
  var didWarnControlledToUncontrolled = false;
  var didWarnUncontrolledToControlled = false;
  
  function isControlled(props) {
    var usesChecked = props.type === 'checkbox' || props.type === 'radio';
    return usesChecked ? props.checked != null : props.value != null;
  }
  
  /**
   * Implements an <input> host component that allows setting these optional
   * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
   *
   * If `checked` or `value` are not supplied (or null/undefined), user actions
   * that affect the checked state or value will trigger updates to the element.
   *
   * If they are supplied (and not null/undefined), the rendered element will not
   * trigger updates to the element. Instead, the props must change in order for
   * the rendered element to be updated.
   *
   * The rendered element will be initialized as unchecked (or `defaultChecked`)
   * with an empty value (or `defaultValue`).
   *
   * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
   */
  
  function getHostProps(element, props) {
    var node = element;
    var checked = props.checked;
  
    var hostProps = _assign$$1({}, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: undefined,
      checked: checked != null ? checked : node._wrapperState.initialChecked
    });
  
    return hostProps;
  }
  
  function initWrapperState(element, props) {
    {
      ReactControlledValuePropTypes.checkPropTypes('input', props, getCurrentFiberStackAddendum);
  
      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
        warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName() || 'A component', props.type);
        didWarnCheckedDefaultChecked = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
        warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName() || 'A component', props.type);
        didWarnValueDefaultValue = true;
      }
    }
  
    var node = element;
    var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
  
    node._wrapperState = {
      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
      initialValue: getSafeValue(props.value != null ? props.value : defaultValue),
      controlled: isControlled(props)
    };
  }
  
  function updateChecked(element, props) {
    var node = element;
    var checked = props.checked;
    if (checked != null) {
      setValueForProperty(node, 'checked', checked, false);
    }
  }
  
  function updateWrapper(element, props) {
    var node = element;
    {
      var _controlled = isControlled(props);
  
      if (!node._wrapperState.controlled && _controlled && !didWarnUncontrolledToControlled) {
        warning(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum());
        didWarnUncontrolledToControlled = true;
      }
      if (node._wrapperState.controlled && !_controlled && !didWarnControlledToUncontrolled) {
        warning(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum());
        didWarnControlledToUncontrolled = true;
      }
    }
  
    updateChecked(element, props);
  
    var value = getSafeValue(props.value);
  
    if (value != null) {
      if (props.type === 'number') {
        if (value === 0 && node.value === '' ||
        // eslint-disable-next-line
        node.value != value) {
          node.value = '' + value;
        }
      } else if (node.value !== '' + value) {
        node.value = '' + value;
      }
    }
  
    if (props.hasOwnProperty('value')) {
      setDefaultValue(node, props.type, value);
    } else if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getSafeValue(props.defaultValue));
    }
  
    if (props.checked == null && props.defaultChecked != null) {
      node.defaultChecked = !!props.defaultChecked;
    }
  }
  
  function postMountWrapper(element, props, isHydrating) {
    var node = element;
  
    if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
      var _initialValue = '' + node._wrapperState.initialValue;
      var currentValue = node.value;
  
      // Do not assign value if it is already set. This prevents user text input
      // from being lost during SSR hydration.
      if (!isHydrating) {
        // Do not re-assign the value property if there is no change. This
        // potentially avoids a DOM write and prevents Firefox (~60.0.1) from
        // prematurely marking required inputs as invalid
        if (_initialValue !== currentValue) {
          node.value = _initialValue;
        }
      }
  
      // value must be assigned before defaultValue. This fixes an issue where the
      // visually displayed value of date inputs disappears on mobile Safari and Chrome:
      // https://github.com/facebook/react/issues/7233
      node.defaultValue = _initialValue;
    }
  
    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
    // this is needed to work around a chrome bug where setting defaultChecked
    // will sometimes influence the value of checked (even after detachment).
    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
    // We need to temporarily unset name to avoid disrupting radio button groups.
    var name = node.name;
    if (name !== '') {
      node.name = '';
    }
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !node.defaultChecked;
    if (name !== '') {
      node.name = name;
    }
  }
  
  function restoreControlledState(element, props) {
    var node = element;
    updateWrapper(node, props);
    updateNamedCousins(node, props);
  }
  
  function updateNamedCousins(rootNode, props) {
    var name = props.name;
    if (props.type === 'radio' && name != null) {
      var queryRoot = rootNode;
  
      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }
  
      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form. It might not even be in the
      // document. Let's just use the local `querySelectorAll` to ensure we don't
      // miss anything.
      var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
  
      for (var i = 0; i < group.length; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode || otherNode.form !== rootNode.form) {
          continue;
        }
        // This will throw if radio buttons rendered by different copies of React
        // and the same name are rendered into the same form (same as #1939).
        // That's probably okay; we don't support it just as we don't support
        // mixing React radio buttons with non-React ones.
        var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
        !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0;
  
        // We need update the tracked value on the named cousin since the value
        // was changed but the input saw no event or value set
        updateValueIfChanged(otherNode);
  
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        updateWrapper(otherNode, otherProps);
      }
    }
  }
  
  // In Chrome, assigning defaultValue to certain input types triggers input validation.
  // For number inputs, the display value loses trailing decimal points. For email inputs,
  // Chrome raises "The specified value <x> is not a valid email address".
  //
  // Here we check to see if the defaultValue has actually changed, avoiding these problems
  // when the user is inputting text
  //
  // https://github.com/facebook/react/issues/7253
  function setDefaultValue(node, type, value) {
    if (
    // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
    type !== 'number' || node.ownerDocument.activeElement !== node) {
      if (value == null) {
        node.defaultValue = '' + node._wrapperState.initialValue;
      } else if (node.defaultValue !== '' + value) {
        node.defaultValue = '' + value;
      }
    }
  }
  
  function getSafeValue(value) {
    switch (typeof value) {
      case 'boolean':
      case 'number':
      case 'object':
      case 'string':
      case 'undefined':
        return value;
      default:
        // function, symbol are assigned as empty strings
        return '';
    }
  }
  
  var eventTypes$1 = {
    change: {
      phasedRegistrationNames: {
        bubbled: 'onChange',
        captured: 'onChangeCapture'
      },
      dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
    }
  };
  
  function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
    var event = SyntheticEvent$1.getPooled(eventTypes$1.change, inst, nativeEvent, target);
    event.type = 'change';
    // Flag this event loop as needing state restore.
    enqueueStateRestore(target);
    accumulateTwoPhaseDispatches(event);
    return event;
  }
  /**
   * For IE shims
   */
  var activeElement = null;
  var activeElementInst = null;
  
  /**
   * SECTION: handle `change` event
   */
  function shouldUseChangeEvent(elem) {
    var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
  }
  
  function manualDispatchChangeEvent(nativeEvent) {
    var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));
  
    // If change and propertychange bubbled, we'd just bind to it like all the
    // other events and have it go through ReactBrowserEventEmitter. Since it
    // doesn't, we manually listen for the events and so we have to enqueue and
    // process the abstract event manually.
    //
    // Batching is necessary here in order to ensure that all event handlers run
    // before the next rerender (including event handlers attached to ancestor
    // elements instead of directly on the input). Without this, controlled
    // components don't work properly in conjunction with event bubbling because
    // the component is rerendered and the value reverted before all the event
    // handlers can run. See https://github.com/facebook/react/issues/708.
    batchedUpdates(runEventInBatch, event);
  }
  
  function runEventInBatch(event) {
    runEventsInBatch(event, false);
  }
  
  function getInstIfValueChanged(targetInst) {
    var targetNode = getNodeFromInstance$1(targetInst);
    if (updateValueIfChanged(targetNode)) {
      return targetInst;
    }
  }
  
  function getTargetInstForChangeEvent(topLevelType, targetInst) {
    if (topLevelType === TOP_CHANGE) {
      return targetInst;
    }
  }
  
  /**
   * SECTION: handle `input` event
   */
  var isInputEventSupported = false;
  if (ExecutionEnvironment.canUseDOM) {
    // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
  }
  
  /**
   * (For IE <=9) Starts tracking propertychange events on the passed-in element
   * and override the value property so that we can distinguish user events from
   * value changes in JS.
   */
  function startWatchingForValueChange(target, targetInst) {
    activeElement = target;
    activeElementInst = targetInst;
    activeElement.attachEvent('onpropertychange', handlePropertyChange);
  }
  
  /**
   * (For IE <=9) Removes the event listeners from the currently-tracked element,
   * if any exists.
   */
  function stopWatchingForValueChange() {
    if (!activeElement) {
      return;
    }
    activeElement.detachEvent('onpropertychange', handlePropertyChange);
    activeElement = null;
    activeElementInst = null;
  }
  
  /**
   * (For IE <=9) Handles a propertychange event, sending a `change` event if
   * the value of the active element has changed.
   */
  function handlePropertyChange(nativeEvent) {
    if (nativeEvent.propertyName !== 'value') {
      return;
    }
    if (getInstIfValueChanged(activeElementInst)) {
      manualDispatchChangeEvent(nativeEvent);
    }
  }
  
  function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
    if (topLevelType === TOP_FOCUS) {
      // In IE9, propertychange fires for most input events but is buggy and
      // doesn't fire when text is deleted, but conveniently, selectionchange
      // appears to fire in all of the remaining cases so we catch those and
      // forward the event if the value has changed
      // In either case, we don't want to call the event handler if the value
      // is changed from JS so we redefine a setter for `.value` that updates
      // our activeElementValue variable, allowing us to ignore those changes
      //
      // stopWatching() should be a noop here but we call it just in case we
      // missed a blur event somehow.
      stopWatchingForValueChange();
      startWatchingForValueChange(target, targetInst);
    } else if (topLevelType === TOP_BLUR) {
      stopWatchingForValueChange();
    }
  }
  
  // For IE8 and IE9.
  function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
    if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
      // On the selectionchange event, the target is just document which isn't
      // helpful for us so just check activeElement instead.
      //
      // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
      // propertychange on the first input event after setting `value` from a
      // script and fires only keydown, keypress, keyup. Catching keyup usually
      // gets it and catching keydown lets us fire an event for the first
      // keystroke if user does a key repeat (it'll be a little delayed: right
      // before the second keystroke). Other input methods (e.g., paste) seem to
      // fire selectionchange normally.
      return getInstIfValueChanged(activeElementInst);
    }
  }
  
  /**
   * SECTION: handle `click` event
   */
  function shouldUseClickEvent(elem) {
    // Use the `click` event to detect changes to checkbox and radio inputs.
    // This approach works across all browsers, whereas `change` does not fire
    // until `blur` in IE8.
    var nodeName = elem.nodeName;
    return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
  }
  
  function getTargetInstForClickEvent(topLevelType, targetInst) {
    if (topLevelType === TOP_CLICK) {
      return getInstIfValueChanged(targetInst);
    }
  }
  
  function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
    if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
      return getInstIfValueChanged(targetInst);
    }
  }
  
  function handleControlledInputBlur(node) {
    var state = node._wrapperState;
  
    if (!state || !state.controlled || node.type !== 'number') {
      return;
    }
  
    // If controlled, assign the value attribute to the current value on blur
    setDefaultValue(node, 'number', node.value);
  }
  
  /**
   * This plugin creates an `onChange` event that normalizes change events
   * across form elements. This event fires at a time when it's possible to
   * change the element's value without seeing a flicker.
   *
   * Supported elements are:
   * - input (see `isTextInputElement`)
   * - textarea
   * - select
   */
  var ChangeEventPlugin = {
    eventTypes: eventTypes$1,
  
    _isInputEventSupported: isInputEventSupported,
  
    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
  
      var getTargetInstFunc = void 0,
          handleEventFunc = void 0;
      if (shouldUseChangeEvent(targetNode)) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else if (isTextInputElement(targetNode)) {
        if (isInputEventSupported) {
          getTargetInstFunc = getTargetInstForInputOrChangeEvent;
        } else {
          getTargetInstFunc = getTargetInstForInputEventPolyfill;
          handleEventFunc = handleEventsForInputEventPolyfill;
        }
      } else if (shouldUseClickEvent(targetNode)) {
        getTargetInstFunc = getTargetInstForClickEvent;
      }
  
      if (getTargetInstFunc) {
        var inst = getTargetInstFunc(topLevelType, targetInst);
        if (inst) {
          var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
          return event;
        }
      }
  
      if (handleEventFunc) {
        handleEventFunc(topLevelType, targetNode, targetInst);
      }
  
      // When blurring, set the value attribute for number inputs
      if (topLevelType === TOP_BLUR) {
        handleControlledInputBlur(targetNode);
      }
    }
  };
  
  /**
   * Module that is injectable into `EventPluginHub`, that specifies a
   * deterministic ordering of `EventPlugin`s. A convenient way to reason about
   * plugins, without having to package every one of them. This is better than
   * having plugins be ordered in the same order that they are injected because
   * that ordering would be influenced by the packaging order.
   * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
   * preventing default on events is convenient in `SimpleEventPlugin` handlers.
   */
  var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
  
  var SyntheticUIEvent = SyntheticEvent$1.extend({
    view: null,
    detail: null
  });
  
  /**
   * Translation from modifier key to the associated property in the event.
   * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
   */
  
  var modifierKeyToProp = {
    Alt: 'altKey',
    Control: 'ctrlKey',
    Meta: 'metaKey',
    Shift: 'shiftKey'
  };
  
  // IE8 does not implement getModifierState so we simply map it to the only
  // modifier keys exposed by the event itself, does not support Lock-keys.
  // Currently, all major browsers except Chrome seems to support Lock-keys.
  function modifierStateGetter(keyArg) {
    var syntheticEvent = this;
    var nativeEvent = syntheticEvent.nativeEvent;
    if (nativeEvent.getModifierState) {
      return nativeEvent.getModifierState(keyArg);
    }
    var keyProp = modifierKeyToProp[keyArg];
    return keyProp ? !!nativeEvent[keyProp] : false;
  }
  
  function getEventModifierState(nativeEvent) {
    return modifierStateGetter;
  }
  
  /**
   * @interface MouseEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var SyntheticMouseEvent = SyntheticUIEvent.extend({
    screenX: null,
    screenY: null,
    clientX: null,
    clientY: null,
    pageX: null,
    pageY: null,
    ctrlKey: null,
    shiftKey: null,
    altKey: null,
    metaKey: null,
    getModifierState: getEventModifierState,
    button: null,
    buttons: null,
    relatedTarget: function (event) {
      return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
    }
  });
  
  /**
   * @interface PointerEvent
   * @see http://www.w3.org/TR/pointerevents/
   */
  var SyntheticPointerEvent = SyntheticMouseEvent.extend({
    pointerId: null,
    width: null,
    height: null,
    pressure: null,
    tiltX: null,
    tiltY: null,
    pointerType: null,
    isPrimary: null
  });
  
  var eventTypes$2 = {
    mouseEnter: {
      registrationName: 'onMouseEnter',
      dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
    },
    mouseLeave: {
      registrationName: 'onMouseLeave',
      dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
    },
    pointerEnter: {
      registrationName: 'onPointerEnter',
      dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
    },
    pointerLeave: {
      registrationName: 'onPointerLeave',
      dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
    }
  };
  
  var EnterLeaveEventPlugin = {
    eventTypes: eventTypes$2,
  
    /**
     * For almost every interaction we care about, there will be both a top-level
     * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
     * we do not extract duplicate events. However, moving the mouse into the
     * browser from outside will not fire a `mouseout` event. In this case, we use
     * the `mouseover` top-level event.
     */
    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
      var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;
  
      if (isOverEvent && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
        return null;
      }
  
      if (!isOutEvent && !isOverEvent) {
        // Must not be a mouse or pointer in or out - ignoring.
        return null;
      }
  
      var win = void 0;
      if (nativeEventTarget.window === nativeEventTarget) {
        // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
      } else {
        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
        var doc = nativeEventTarget.ownerDocument;
        if (doc) {
          win = doc.defaultView || doc.parentWindow;
        } else {
          win = window;
        }
      }
  
      var from = void 0;
      var to = void 0;
      if (isOutEvent) {
        from = targetInst;
        var related = nativeEvent.relatedTarget || nativeEvent.toElement;
        to = related ? getClosestInstanceFromNode(related) : null;
      } else {
        // Moving to a node from outside the window.
        from = null;
        to = targetInst;
      }
  
      if (from === to) {
        // Nothing pertains to our managed components.
        return null;
      }
  
      var eventInterface = void 0,
          leaveEventType = void 0,
          enterEventType = void 0,
          eventTypePrefix = void 0;
  
      if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
        eventInterface = SyntheticMouseEvent;
        leaveEventType = eventTypes$2.mouseLeave;
        enterEventType = eventTypes$2.mouseEnter;
        eventTypePrefix = 'mouse';
      } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
        eventInterface = SyntheticPointerEvent;
        leaveEventType = eventTypes$2.pointerLeave;
        enterEventType = eventTypes$2.pointerEnter;
        eventTypePrefix = 'pointer';
      }
  
      var fromNode = from == null ? win : getNodeFromInstance$1(from);
      var toNode = to == null ? win : getNodeFromInstance$1(to);
  
      var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
      leave.type = eventTypePrefix + 'leave';
      leave.target = fromNode;
      leave.relatedTarget = toNode;
  
      var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
      enter.type = eventTypePrefix + 'enter';
      enter.target = toNode;
      enter.relatedTarget = fromNode;
  
      accumulateEnterLeaveDispatches(leave, enter, from, to);
  
      return [leave, enter];
    }
  };
  
  /**
   * `ReactInstanceMap` maintains a mapping from a public facing stateful
   * instance (key) and the internal representation (value). This allows public
   * methods to accept the user facing instance as an argument and map them back
   * to internal methods.
   *
   * Note that this module is currently shared and assumed to be stateless.
   * If this becomes an actual Map, that will break.
   */
  
  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  
  
  function get(key) {
    return key._reactInternalFiber;
  }
  
  function has(key) {
    return key._reactInternalFiber !== undefined;
  }
  
  function set(key, value) {
    key._reactInternalFiber = value;
  }
  
  // Don't change these two values. They're used by React Dev Tools.
  var NoEffect = /*              */0;
  var PerformedWork = /*         */1;
  
  // You can change the rest (and add more).
  var Placement = /*             */2;
  var Update = /*                */4;
  var PlacementAndUpdate = /*    */6;
  var Deletion = /*              */8;
  var ContentReset = /*          */16;
  var Callback = /*              */32;
  var DidCapture = /*            */64;
  var Ref = /*                   */128;
  var Snapshot = /*              */256;
  
  // Union of all host effects
  var HostEffectMask = /*        */511;
  
  var Incomplete = /*            */512;
  var ShouldCapture = /*         */1024;
  
  var MOUNTING = 1;
  var MOUNTED = 2;
  var UNMOUNTED = 3;
  
  function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (!fiber.alternate) {
      // If there is no alternate, this might be a new tree that isn't inserted
      // yet. If it is, then it will have a pending insertion effect on it.
      if ((node.effectTag & Placement) !== NoEffect) {
        return MOUNTING;
      }
      while (node.return) {
        node = node.return;
        if ((node.effectTag & Placement) !== NoEffect) {
          return MOUNTING;
        }
      }
    } else {
      while (node.return) {
        node = node.return;
      }
    }
    if (node.tag === HostRoot) {
      // TODO: Check if this was a nested HostRoot when used with
      // renderContainerIntoSubtree.
      return MOUNTED;
    }
    // If we didn't hit the root, that means that we're in an disconnected tree
    // that has been unmounted.
    return UNMOUNTED;
  }
  
  function isFiberMounted(fiber) {
    return isFiberMountedImpl(fiber) === MOUNTED;
  }
  
  function isMounted(component) {
    {
      var owner = ReactCurrentOwner.current;
      if (owner !== null && owner.tag === ClassComponent) {
        var ownerFiber = owner;
        var instance = ownerFiber.stateNode;
        !instance._warnedAboutRefsInRender ? warning(false, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber) || 'A component') : void 0;
        instance._warnedAboutRefsInRender = true;
      }
    }
  
    var fiber = get(component);
    if (!fiber) {
      return false;
    }
    return isFiberMountedImpl(fiber) === MOUNTED;
  }
  
  function assertIsMounted(fiber) {
    !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
  }
  
  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) {
      // If there is no alternate, then we only need to check if it is mounted.
      var state = isFiberMountedImpl(fiber);
      !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
      if (state === MOUNTING) {
        return null;
      }
      return fiber;
    }
    // If we have two possible branches, we'll walk backwards up to the root
    // to see what path the root points to. On the way we may hit one of the
    // special cases and we'll deal with them.
    var a = fiber;
    var b = alternate;
    while (true) {
      var parentA = a.return;
      var parentB = parentA ? parentA.alternate : null;
      if (!parentA || !parentB) {
        // We're at the root.
        break;
      }
  
      // If both copies of the parent fiber point to the same child, we can
      // assume that the child is current. This happens when we bailout on low
      // priority: the bailed out fiber's child reuses the current child.
      if (parentA.child === parentB.child) {
        var child = parentA.child;
        while (child) {
          if (child === a) {
            // We've determined that A is the current branch.
            assertIsMounted(parentA);
            return fiber;
          }
          if (child === b) {
            // We've determined that B is the current branch.
            assertIsMounted(parentA);
            return alternate;
          }
          child = child.sibling;
        }
        // We should never have an alternate for any mounting node. So the only
        // way this could possibly happen is if this was unmounted, if at all.
        invariant(false, 'Unable to find node on an unmounted component.');
      }
  
      if (a.return !== b.return) {
        // The return pointer of A and the return pointer of B point to different
        // fibers. We assume that return pointers never criss-cross, so A must
        // belong to the child set of A.return, and B must belong to the child
        // set of B.return.
        a = parentA;
        b = parentB;
      } else {
        // The return pointers point to the same fiber. We'll have to use the
        // default, slow path: scan the child sets of each parent alternate to see
        // which child belongs to which set.
        //
        // Search parent A's child set
        var didFindChild = false;
        var _child = parentA.child;
        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentA;
            b = parentB;
            break;
          }
          if (_child === b) {
            didFindChild = true;
            b = parentA;
            a = parentB;
            break;
          }
          _child = _child.sibling;
        }
        if (!didFindChild) {
          // Search parent B's child set
          _child = parentB.child;
          while (_child) {
            if (_child === a) {
              didFindChild = true;
              a = parentB;
              b = parentA;
              break;
            }
            if (_child === b) {
              didFindChild = true;
              b = parentB;
              a = parentA;
              break;
            }
            _child = _child.sibling;
          }
          !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
        }
      }
  
      !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    }
    // If the root is not a host container, we're in a disconnected tree. I.e.
    // unmounted.
    !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
    if (a.stateNode.current === a) {
      // We've determined that A is the current branch.
      return fiber;
    }
    // Otherwise B has to be current branch.
    return alternate;
  }
  
  function findCurrentHostFiber(parent) {
    var currentParent = findCurrentFiberUsingSlowPath(parent);
    if (!currentParent) {
      return null;
    }
  
    // Next we'll drill down this component to find the first HostComponent/Text.
    var node = currentParent;
    while (true) {
      if (node.tag === HostComponent || node.tag === HostText) {
        return node;
      } else if (node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === currentParent) {
        return null;
      }
      while (!node.sibling) {
        if (!node.return || node.return === currentParent) {
          return null;
        }
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
    // Flow needs the return null here, but ESLint complains about it.
    // eslint-disable-next-line no-unreachable
    return null;
  }
  
  function findCurrentHostFiberWithNoPortals(parent) {
    var currentParent = findCurrentFiberUsingSlowPath(parent);
    if (!currentParent) {
      return null;
    }
  
    // Next we'll drill down this component to find the first HostComponent/Text.
    var node = currentParent;
    while (true) {
      if (node.tag === HostComponent || node.tag === HostText) {
        return node;
      } else if (node.child && node.tag !== HostPortal) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === currentParent) {
        return null;
      }
      while (!node.sibling) {
        if (!node.return || node.return === currentParent) {
          return null;
        }
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
    // Flow needs the return null here, but ESLint complains about it.
    // eslint-disable-next-line no-unreachable
    return null;
  }
  
  function addEventBubbleListener(element, eventType, listener) {
    element.addEventListener(eventType, listener, false);
  }
  
  function addEventCaptureListener(element, eventType, listener) {
    element.addEventListener(eventType, listener, true);
  }
  
  /**
   * @interface Event
   * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
   */
  var SyntheticAnimationEvent = SyntheticEvent$1.extend({
    animationName: null,
    elapsedTime: null,
    pseudoElement: null
  });
  
  /**
   * @interface Event
   * @see http://www.w3.org/TR/clipboard-apis/
   */
  var SyntheticClipboardEvent = SyntheticEvent$1.extend({
    clipboardData: function (event) {
      return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
    }
  });
  
  /**
   * @interface FocusEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var SyntheticFocusEvent = SyntheticUIEvent.extend({
    relatedTarget: null
  });
  
  /**
   * `charCode` represents the actual "character code" and is safe to use with
   * `String.fromCharCode`. As such, only keys that correspond to printable
   * characters produce a valid `charCode`, the only exception to this is Enter.
   * The Tab-key is considered non-printable and does not have a `charCode`,
   * presumably because it does not produce a tab-character in browsers.
   *
   * @param {object} nativeEvent Native browser event.
   * @return {number} Normalized `charCode` property.
   */
  function getEventCharCode(nativeEvent) {
    var charCode = void 0;
    var keyCode = nativeEvent.keyCode;
  
    if ('charCode' in nativeEvent) {
      charCode = nativeEvent.charCode;
  
      // FF does not set `charCode` for the Enter-key, check against `keyCode`.
      if (charCode === 0 && keyCode === 13) {
        charCode = 13;
      }
    } else {
      // IE8 does not implement `charCode`, but `keyCode` has the correct value.
      charCode = keyCode;
    }
  
    // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
    // report Enter as charCode 10 when ctrl is pressed.
    if (charCode === 10) {
      charCode = 13;
    }
  
    // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
    // Must not discard the (non-)printable Enter-key.
    if (charCode >= 32 || charCode === 13) {
      return charCode;
    }
  
    return 0;
  }
  
  /**
   * Normalization of deprecated HTML5 `key` values
   * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
   */
  var normalizeKey = {
    Esc: 'Escape',
    Spacebar: ' ',
    Left: 'ArrowLeft',
    Up: 'ArrowUp',
    Right: 'ArrowRight',
    Down: 'ArrowDown',
    Del: 'Delete',
    Win: 'OS',
    Menu: 'ContextMenu',
    Apps: 'ContextMenu',
    Scroll: 'ScrollLock',
    MozPrintableKey: 'Unidentified'
  };
  
  /**
   * Translation from legacy `keyCode` to HTML5 `key`
   * Only special keys supported, all others depend on keyboard layout or browser
   * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
   */
  var translateToKey = {
    '8': 'Backspace',
    '9': 'Tab',
    '12': 'Clear',
    '13': 'Enter',
    '16': 'Shift',
    '17': 'Control',
    '18': 'Alt',
    '19': 'Pause',
    '20': 'CapsLock',
    '27': 'Escape',
    '32': ' ',
    '33': 'PageUp',
    '34': 'PageDown',
    '35': 'End',
    '36': 'Home',
    '37': 'ArrowLeft',
    '38': 'ArrowUp',
    '39': 'ArrowRight',
    '40': 'ArrowDown',
    '45': 'Insert',
    '46': 'Delete',
    '112': 'F1',
    '113': 'F2',
    '114': 'F3',
    '115': 'F4',
    '116': 'F5',
    '117': 'F6',
    '118': 'F7',
    '119': 'F8',
    '120': 'F9',
    '121': 'F10',
    '122': 'F11',
    '123': 'F12',
    '144': 'NumLock',
    '145': 'ScrollLock',
    '224': 'Meta'
  };
  
  /**
   * @param {object} nativeEvent Native browser event.
   * @return {string} Normalized `key` property.
   */
  function getEventKey(nativeEvent) {
    if (nativeEvent.key) {
      // Normalize inconsistent values reported by browsers due to
      // implementations of a working draft specification.
  
      // FireFox implements `key` but returns `MozPrintableKey` for all
      // printable characters (normalized to `Unidentified`), ignore it.
      var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
      if (key !== 'Unidentified') {
        return key;
      }
    }
  
    // Browser does not implement `key`, polyfill as much of it as we can.
    if (nativeEvent.type === 'keypress') {
      var charCode = getEventCharCode(nativeEvent);
  
      // The enter-key is technically both printable and non-printable and can
      // thus be captured by `keypress`, no other non-printable key should.
      return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
    }
    if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
      // While user keyboard layout determines the actual meaning of each
      // `keyCode` value, almost all function keys have a universal value.
      return translateToKey[nativeEvent.keyCode] || 'Unidentified';
    }
    return '';
  }
  
  /**
   * @interface KeyboardEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
    key: getEventKey,
    location: null,
    ctrlKey: null,
    shiftKey: null,
    altKey: null,
    metaKey: null,
    repeat: null,
    locale: null,
    getModifierState: getEventModifierState,
    // Legacy Interface
    charCode: function (event) {
      // `charCode` is the result of a KeyPress event and represents the value of
      // the actual printable character.
  
      // KeyPress is deprecated, but its replacement is not yet final and not
      // implemented in any major browser. Only KeyPress has charCode.
      if (event.type === 'keypress') {
        return getEventCharCode(event);
      }
      return 0;
    },
    keyCode: function (event) {
      // `keyCode` is the result of a KeyDown/Up event and represents the value of
      // physical keyboard key.
  
      // The actual meaning of the value depends on the users' keyboard layout
      // which cannot be detected. Assuming that it is a US keyboard layout
      // provides a surprisingly accurate mapping for US and European users.
      // Due to this, it is left to the user to implement at this time.
      if (event.type === 'keydown' || event.type === 'keyup') {
        return event.keyCode;
      }
      return 0;
    },
    which: function (event) {
      // `which` is an alias for either `keyCode` or `charCode` depending on the
      // type of the event.
      if (event.type === 'keypress') {
        return getEventCharCode(event);
      }
      if (event.type === 'keydown' || event.type === 'keyup') {
        return event.keyCode;
      }
      return 0;
    }
  });
  
  /**
   * @interface DragEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var SyntheticDragEvent = SyntheticMouseEvent.extend({
    dataTransfer: null
  });
  
  /**
   * @interface TouchEvent
   * @see http://www.w3.org/TR/touch-events/
   */
  var SyntheticTouchEvent = SyntheticUIEvent.extend({
    touches: null,
    targetTouches: null,
    changedTouches: null,
    altKey: null,
    metaKey: null,
    ctrlKey: null,
    shiftKey: null,
    getModifierState: getEventModifierState
  });
  
  /**
   * @interface Event
   * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
   * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
   */
  var SyntheticTransitionEvent = SyntheticEvent$1.extend({
    propertyName: null,
    elapsedTime: null,
    pseudoElement: null
  });
  
  /**
   * @interface WheelEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var SyntheticWheelEvent = SyntheticMouseEvent.extend({
    deltaX: function (event) {
      return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
    },
    deltaY: function (event) {
      return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0;
    },
  
    deltaZ: null,
  
    // Browsers without "deltaMode" is reporting in raw wheel delta where one
    // notch on the scroll is always +/- 120, roughly equivalent to pixels.
    // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
    // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
    deltaMode: null
  });
  
  /**
   * Turns
   * ['abort', ...]
   * into
   * eventTypes = {
   *   'abort': {
   *     phasedRegistrationNames: {
   *       bubbled: 'onAbort',
   *       captured: 'onAbortCapture',
   *     },
   *     dependencies: [TOP_ABORT],
   *   },
   *   ...
   * };
   * topLevelEventsToDispatchConfig = new Map([
   *   [TOP_ABORT, { sameConfig }],
   * ]);
   */
  
  var interactiveEventTypeNames = [[TOP_BLUR, 'blur'], [TOP_CANCEL, 'cancel'], [TOP_CLICK, 'click'], [TOP_CLOSE, 'close'], [TOP_CONTEXT_MENU, 'contextMenu'], [TOP_COPY, 'copy'], [TOP_CUT, 'cut'], [TOP_DOUBLE_CLICK, 'doubleClick'], [TOP_DRAG_END, 'dragEnd'], [TOP_DRAG_START, 'dragStart'], [TOP_DROP, 'drop'], [TOP_FOCUS, 'focus'], [TOP_INPUT, 'input'], [TOP_INVALID, 'invalid'], [TOP_KEY_DOWN, 'keyDown'], [TOP_KEY_PRESS, 'keyPress'], [TOP_KEY_UP, 'keyUp'], [TOP_MOUSE_DOWN, 'mouseDown'], [TOP_MOUSE_UP, 'mouseUp'], [TOP_PASTE, 'paste'], [TOP_PAUSE, 'pause'], [TOP_PLAY, 'play'], [TOP_POINTER_CANCEL, 'pointerCancel'], [TOP_POINTER_DOWN, 'pointerDown'], [TOP_POINTER_UP, 'pointerUp'], [TOP_RATE_CHANGE, 'rateChange'], [TOP_RESET, 'reset'], [TOP_SEEKED, 'seeked'], [TOP_SUBMIT, 'submit'], [TOP_TOUCH_CANCEL, 'touchCancel'], [TOP_TOUCH_END, 'touchEnd'], [TOP_TOUCH_START, 'touchStart'], [TOP_VOLUME_CHANGE, 'volumeChange']];
  var nonInteractiveEventTypeNames = [[TOP_ABORT, 'abort'], [TOP_ANIMATION_END, 'animationEnd'], [TOP_ANIMATION_ITERATION, 'animationIteration'], [TOP_ANIMATION_START, 'animationStart'], [TOP_CAN_PLAY, 'canPlay'], [TOP_CAN_PLAY_THROUGH, 'canPlayThrough'], [TOP_DRAG, 'drag'], [TOP_DRAG_ENTER, 'dragEnter'], [TOP_DRAG_EXIT, 'dragExit'], [TOP_DRAG_LEAVE, 'dragLeave'], [TOP_DRAG_OVER, 'dragOver'], [TOP_DURATION_CHANGE, 'durationChange'], [TOP_EMPTIED, 'emptied'], [TOP_ENCRYPTED, 'encrypted'], [TOP_ENDED, 'ended'], [TOP_ERROR, 'error'], [TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture'], [TOP_LOAD, 'load'], [TOP_LOADED_DATA, 'loadedData'], [TOP_LOADED_METADATA, 'loadedMetadata'], [TOP_LOAD_START, 'loadStart'], [TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture'], [TOP_MOUSE_MOVE, 'mouseMove'], [TOP_MOUSE_OUT, 'mouseOut'], [TOP_MOUSE_OVER, 'mouseOver'], [TOP_PLAYING, 'playing'], [TOP_POINTER_MOVE, 'pointerMove'], [TOP_POINTER_OUT, 'pointerOut'], [TOP_POINTER_OVER, 'pointerOver'], [TOP_PROGRESS, 'progress'], [TOP_SCROLL, 'scroll'], [TOP_SEEKING, 'seeking'], [TOP_STALLED, 'stalled'], [TOP_SUSPEND, 'suspend'], [TOP_TIME_UPDATE, 'timeUpdate'], [TOP_TOGGLE, 'toggle'], [TOP_TOUCH_MOVE, 'touchMove'], [TOP_TRANSITION_END, 'transitionEnd'], [TOP_WAITING, 'waiting'], [TOP_WHEEL, 'wheel']];
  
  var eventTypes$4 = {};
  var topLevelEventsToDispatchConfig = {};
  
  function addEventTypeNameToConfig(_ref, isInteractive) {
    var topEvent = _ref[0],
        event = _ref[1];
  
    var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
    var onEvent = 'on' + capitalizedEvent;
  
    var type = {
      phasedRegistrationNames: {
        bubbled: onEvent,
        captured: onEvent + 'Capture'
      },
      dependencies: [topEvent],
      isInteractive: isInteractive
    };
    eventTypes$4[event] = type;
    topLevelEventsToDispatchConfig[topEvent] = type;
  }
  
  interactiveEventTypeNames.forEach(function (eventTuple) {
    addEventTypeNameToConfig(eventTuple, true);
  });
  nonInteractiveEventTypeNames.forEach(function (eventTuple) {
    addEventTypeNameToConfig(eventTuple, false);
  });
  
  // Only used in DEV for exhaustiveness validation.
  var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
  
  var SimpleEventPlugin = {
    eventTypes: eventTypes$4,
  
    isInteractiveTopLevelEventType: function (topLevelType) {
      var config = topLevelEventsToDispatchConfig[topLevelType];
      return config !== undefined && config.isInteractive === true;
    },
  
  
    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
      if (!dispatchConfig) {
        return null;
      }
      var EventConstructor = void 0;
      switch (topLevelType) {
        case TOP_KEY_PRESS:
          // Firefox creates a keypress event for function keys too. This removes
          // the unwanted keypress events. Enter is however both printable and
          // non-printable. One would expect Tab to be as well (but it isn't).
          if (getEventCharCode(nativeEvent) === 0) {
            return null;
          }
        /* falls through */
        case TOP_KEY_DOWN:
        case TOP_KEY_UP:
          EventConstructor = SyntheticKeyboardEvent;
          break;
        case TOP_BLUR:
        case TOP_FOCUS:
          EventConstructor = SyntheticFocusEvent;
          break;
        case TOP_CLICK:
          // Firefox creates a click event on right mouse clicks. This removes the
          // unwanted click events.
          if (nativeEvent.button === 2) {
            return null;
          }
        /* falls through */
        case TOP_DOUBLE_CLICK:
        case TOP_MOUSE_DOWN:
        case TOP_MOUSE_MOVE:
        case TOP_MOUSE_UP:
        // TODO: Disabled elements should not respond to mouse events
        /* falls through */
        case TOP_MOUSE_OUT:
        case TOP_MOUSE_OVER:
        case TOP_CONTEXT_MENU:
          EventConstructor = SyntheticMouseEvent;
          break;
        case TOP_DRAG:
        case TOP_DRAG_END:
        case TOP_DRAG_ENTER:
        case TOP_DRAG_EXIT:
        case TOP_DRAG_LEAVE:
        case TOP_DRAG_OVER:
        case TOP_DRAG_START:
        case TOP_DROP:
          EventConstructor = SyntheticDragEvent;
          break;
        case TOP_TOUCH_CANCEL:
        case TOP_TOUCH_END:
        case TOP_TOUCH_MOVE:
        case TOP_TOUCH_START:
          EventConstructor = SyntheticTouchEvent;
          break;
        case TOP_ANIMATION_END:
        case TOP_ANIMATION_ITERATION:
        case TOP_ANIMATION_START:
          EventConstructor = SyntheticAnimationEvent;
          break;
        case TOP_TRANSITION_END:
          EventConstructor = SyntheticTransitionEvent;
          break;
        case TOP_SCROLL:
          EventConstructor = SyntheticUIEvent;
          break;
        case TOP_WHEEL:
          EventConstructor = SyntheticWheelEvent;
          break;
        case TOP_COPY:
        case TOP_CUT:
        case TOP_PASTE:
          EventConstructor = SyntheticClipboardEvent;
          break;
        case TOP_GOT_POINTER_CAPTURE:
        case TOP_LOST_POINTER_CAPTURE:
        case TOP_POINTER_CANCEL:
        case TOP_POINTER_DOWN:
        case TOP_POINTER_MOVE:
        case TOP_POINTER_OUT:
        case TOP_POINTER_OVER:
        case TOP_POINTER_UP:
          EventConstructor = SyntheticPointerEvent;
          break;
        default:
          {
            if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
              warning(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
            }
          }
          // HTML Events
          // @see http://www.w3.org/TR/html5/index.html#events-0
          EventConstructor = SyntheticEvent$1;
          break;
      }
      var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
      accumulateTwoPhaseDispatches(event);
      return event;
    }
  };
  
  var isInteractiveTopLevelEventType = SimpleEventPlugin.isInteractiveTopLevelEventType;
  
  
  var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
  var callbackBookkeepingPool = [];
  
  /**
   * Find the deepest React component completely containing the root of the
   * passed-in instance (for use when entire React trees are nested within each
   * other). If React trees are not nested, returns null.
   */
  function findRootContainerNode(inst) {
    // TODO: It may be a good idea to cache this to prevent unnecessary DOM
    // traversal, but caching is difficult to do correctly without using a
    // mutation observer to listen for all DOM changes.
    while (inst.return) {
      inst = inst.return;
    }
    if (inst.tag !== HostRoot) {
      // This can happen if we're in a detached tree.
      return null;
    }
    return inst.stateNode.containerInfo;
  }
  
  // Used to store ancestor hierarchy in top level callback
  function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
    if (callbackBookkeepingPool.length) {
      var instance = callbackBookkeepingPool.pop();
      instance.topLevelType = topLevelType;
      instance.nativeEvent = nativeEvent;
      instance.targetInst = targetInst;
      return instance;
    }
    return {
      topLevelType: topLevelType,
      nativeEvent: nativeEvent,
      targetInst: targetInst,
      ancestors: []
    };
  }
  
  function releaseTopLevelCallbackBookKeeping(instance) {
    instance.topLevelType = null;
    instance.nativeEvent = null;
    instance.targetInst = null;
    instance.ancestors.length = 0;
    if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
      callbackBookkeepingPool.push(instance);
    }
  }
  
  function handleTopLevel(bookKeeping) {
    var targetInst = bookKeeping.targetInst;
  
    // Loop through the hierarchy, in case there's any nested components.
    // It's important that we build the array of ancestors before calling any
    // event handlers, because event handlers can modify the DOM, leading to
    // inconsistencies with ReactMount's node cache. See #1105.
    var ancestor = targetInst;
    do {
      if (!ancestor) {
        bookKeeping.ancestors.push(ancestor);
        break;
      }
      var root = findRootContainerNode(ancestor);
      if (!root) {
        break;
      }
      bookKeeping.ancestors.push(ancestor);
      ancestor = getClosestInstanceFromNode(root);
    } while (ancestor);
  
    for (var i = 0; i < bookKeeping.ancestors.length; i++) {
      targetInst = bookKeeping.ancestors[i];
      runExtractedEventsInBatch(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
    }
  }
  
  // TODO: can we stop exporting these?
  var _enabled = true;
  
  function setEnabled(enabled) {
    _enabled = !!enabled;
  }
  
  function isEnabled() {
    return _enabled;
  }
  
  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {number} topLevelType Number from `TopLevelEventTypes`.
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  function trapBubbledEvent(topLevelType, element) {
    if (!element) {
      return null;
    }
    var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;
  
    addEventBubbleListener(element, getRawEventName(topLevelType),
    // Check if interactive and wrap in interactiveUpdates
    dispatch.bind(null, topLevelType));
  }
  
  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {number} topLevelType Number from `TopLevelEventTypes`.
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  function trapCapturedEvent(topLevelType, element) {
    if (!element) {
      return null;
    }
    var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;
  
    addEventCaptureListener(element, getRawEventName(topLevelType),
    // Check if interactive and wrap in interactiveUpdates
    dispatch.bind(null, topLevelType));
  }
  
  function dispatchInteractiveEvent(topLevelType, nativeEvent) {
    interactiveUpdates(dispatchEvent, topLevelType, nativeEvent);
  }
  
  function dispatchEvent(topLevelType, nativeEvent) {
    if (!_enabled) {
      return;
    }
  
    var nativeEventTarget = getEventTarget(nativeEvent);
    var targetInst = getClosestInstanceFromNode(nativeEventTarget);
    if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {
      // If we get an event (ex: img onload) before committing that
      // component's mount, ignore it for now (that is, treat it as if it was an
      // event on a non-React tree). We might also consider queueing events and
      // dispatching them after the mount.
      targetInst = null;
    }
  
    var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);
  
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      batchedUpdates(handleTopLevel, bookKeeping);
    } finally {
      releaseTopLevelCallbackBookKeeping(bookKeeping);
    }
  }
  
  var ReactDOMEventListener = Object.freeze({
    get _enabled () { return _enabled; },
    setEnabled: setEnabled,
    isEnabled: isEnabled,
    trapBubbledEvent: trapBubbledEvent,
    trapCapturedEvent: trapCapturedEvent,
    dispatchEvent: dispatchEvent
  });
  
  /**
   * Summary of `ReactBrowserEventEmitter` event handling:
   *
   *  - Top-level delegation is used to trap most native browser events. This
   *    may only occur in the main thread and is the responsibility of
   *    ReactDOMEventListener, which is injected and can therefore support
   *    pluggable event sources. This is the only work that occurs in the main
   *    thread.
   *
   *  - We normalize and de-duplicate events to account for browser quirks. This
   *    may be done in the worker thread.
   *
   *  - Forward these native events (with the associated top-level type used to
   *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
   *    to extract any synthetic events.
   *
   *  - The `EventPluginHub` will then process each event by annotating them with
   *    "dispatches", a sequence of listeners and IDs that care about that event.
   *
   *  - The `EventPluginHub` then dispatches the events.
   *
   * Overview of React and the event system:
   *
   * +------------+    .
   * |    DOM     |    .
   * +------------+    .
   *       |           .
   *       v           .
   * +------------+    .
   * | ReactEvent |    .
   * |  Listener  |    .
   * +------------+    .                         +-----------+
   *       |           .               +--------+|SimpleEvent|
   *       |           .               |         |Plugin     |
   * +-----|------+    .               v         +-----------+
   * |     |      |    .    +--------------+                    +------------+
   * |     +-----------.--->|EventPluginHub|                    |    Event   |
   * |            |    .    |              |     +-----------+  | Propagators|
   * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
   * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
   * |            |    .    |              |     +-----------+  |  utilities |
   * |     +-----------.--->|              |                    +------------+
   * |     |      |    .    +--------------+
   * +-----|------+    .                ^        +-----------+
   *       |           .                |        |Enter/Leave|
   *       +           .                +-------+|Plugin     |
   * +-------------+   .                         +-----------+
   * | application |   .
   * |-------------|   .
   * |             |   .
   * |             |   .
   * +-------------+   .
   *                   .
   *    React Core     .  General Purpose Event Plugin System
   */
  
  var alreadyListeningTo = {};
  var reactTopListenersCounter = 0;
  
  /**
   * To ensure no conflicts with other potential React instances on the page
   */
  var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);
  
  function getListeningForDocument(mountAt) {
    // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
    // directly.
    if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
      mountAt[topListenersIDKey] = reactTopListenersCounter++;
      alreadyListeningTo[mountAt[topListenersIDKey]] = {};
    }
    return alreadyListeningTo[mountAt[topListenersIDKey]];
  }
  
  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} mountAt Container where to mount the listener
   */
  function listenTo(registrationName, mountAt) {
    var isListening = getListeningForDocument(mountAt);
    var dependencies = registrationNameDependencies[registrationName];
  
    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        switch (dependency) {
          case TOP_SCROLL:
            trapCapturedEvent(TOP_SCROLL, mountAt);
            break;
          case TOP_FOCUS:
          case TOP_BLUR:
            trapCapturedEvent(TOP_FOCUS, mountAt);
            trapCapturedEvent(TOP_BLUR, mountAt);
            // We set the flag for a single dependency later in this function,
            // but this ensures we mark both as attached rather than just one.
            isListening[TOP_BLUR] = true;
            isListening[TOP_FOCUS] = true;
            break;
          case TOP_CANCEL:
          case TOP_CLOSE:
            if (isEventSupported(getRawEventName(dependency), true)) {
              trapCapturedEvent(dependency, mountAt);
            }
            break;
          case TOP_INVALID:
          case TOP_SUBMIT:
          case TOP_RESET:
            // We listen to them on the target DOM elements.
            // Some of them bubble so we don't want them to fire twice.
            break;
          default:
            // By default, listen on the top level to all non-media events.
            // Media events don't bubble so adding the listener wouldn't do anything.
            var isMediaEvent = mediaEventTypes.indexOf(dependency) !== -1;
            if (!isMediaEvent) {
              trapBubbledEvent(dependency, mountAt);
            }
            break;
        }
        isListening[dependency] = true;
      }
    }
  }
  
  function isListeningToAllDependencies(registrationName, mountAt) {
    var isListening = getListeningForDocument(mountAt);
    var dependencies = registrationNameDependencies[registrationName];
    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        return false;
      }
    }
    return true;
  }
  
  /**
   * Given any node return the first leaf node without children.
   *
   * @param {DOMElement|DOMTextNode} node
   * @return {DOMElement|DOMTextNode}
   */
  function getLeafNode(node) {
    while (node && node.firstChild) {
      node = node.firstChild;
    }
    return node;
  }
  
  /**
   * Get the next sibling within a container. This will walk up the
   * DOM if a node's siblings have been exhausted.
   *
   * @param {DOMElement|DOMTextNode} node
   * @return {?DOMElement|DOMTextNode}
   */
  function getSiblingNode(node) {
    while (node) {
      if (node.nextSibling) {
        return node.nextSibling;
      }
      node = node.parentNode;
    }
  }
  
  /**
   * Get object describing the nodes which contain characters at offset.
   *
   * @param {DOMElement|DOMTextNode} root
   * @param {number} offset
   * @return {?object}
   */
  function getNodeForCharacterOffset(root, offset) {
    var node = getLeafNode(root);
    var nodeStart = 0;
    var nodeEnd = 0;
  
    while (node) {
      if (node.nodeType === TEXT_NODE) {
        nodeEnd = nodeStart + node.textContent.length;
  
        if (nodeStart <= offset && nodeEnd >= offset) {
          return {
            node: node,
            offset: offset - nodeStart
          };
        }
  
        nodeStart = nodeEnd;
      }
  
      node = getLeafNode(getSiblingNode(node));
    }
  }
  
  /**
   * @param {DOMElement} outerNode
   * @return {?object}
   */
  function getOffsets(outerNode) {
    var selection = window.getSelection && window.getSelection();
  
    if (!selection || selection.rangeCount === 0) {
      return null;
    }
  
    var anchorNode = selection.anchorNode,
        anchorOffset = selection.anchorOffset,
        focusNode = selection.focusNode,
        focusOffset = selection.focusOffset;
  
    // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
    // up/down buttons on an <input type="number">. Anonymous divs do not seem to
    // expose properties, triggering a "Permission denied error" if any of its
    // properties are accessed. The only seemingly possible way to avoid erroring
    // is to access a property that typically works for non-anonymous divs and
    // catch any error that may otherwise arise. See
    // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  
    try {
      /* eslint-disable no-unused-expressions */
      anchorNode.nodeType;
      focusNode.nodeType;
      /* eslint-enable no-unused-expressions */
    } catch (e) {
      return null;
    }
  
    return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
  }
  
  /**
   * Returns {start, end} where `start` is the character/codepoint index of
   * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
   * `end` is the index of (focusNode, focusOffset).
   *
   * Returns null if you pass in garbage input but we should probably just crash.
   *
   * Exported only for testing.
   */
  function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
    var length = 0;
    var start = -1;
    var end = -1;
    var indexWithinAnchor = 0;
    var indexWithinFocus = 0;
    var node = outerNode;
    var parentNode = null;
  
    outer: while (true) {
      var next = null;
  
      while (true) {
        if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
          start = length + anchorOffset;
        }
        if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
          end = length + focusOffset;
        }
  
        if (node.nodeType === TEXT_NODE) {
          length += node.nodeValue.length;
        }
  
        if ((next = node.firstChild) === null) {
          break;
        }
        // Moving from `node` to its first child `next`.
        parentNode = node;
        node = next;
      }
  
      while (true) {
        if (node === outerNode) {
          // If `outerNode` has children, this is always the second time visiting
          // it. If it has no children, this is still the first loop, and the only
          // valid selection is anchorNode and focusNode both equal to this node
          // and both offsets 0, in which case we will have handled above.
          break outer;
        }
        if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
          start = length;
        }
        if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
          end = length;
        }
        if ((next = node.nextSibling) !== null) {
          break;
        }
        node = parentNode;
        parentNode = node.parentNode;
      }
  
      // Moving from `node` to its next sibling `next`.
      node = next;
    }
  
    if (start === -1 || end === -1) {
      // This should never happen. (Would happen if the anchor/focus nodes aren't
      // actually inside the passed-in node.)
      return null;
    }
  
    return {
      start: start,
      end: end
    };
  }
  
  /**
   * In modern non-IE browsers, we can support both forward and backward
   * selections.
   *
   * Note: IE10+ supports the Selection object, but it does not support
   * the `extend` method, which means that even in modern IE, it's not possible
   * to programmatically create a backward selection. Thus, for all IE
   * versions, we use the old IE API to create our selections.
   *
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  function setOffsets(node, offsets) {
    if (!window.getSelection) {
      return;
    }
  
    var selection = window.getSelection();
    var length = node[getTextContentAccessor()].length;
    var start = Math.min(offsets.start, length);
    var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
  
    // IE 11 uses modern selection, but doesn't support the extend method.
    // Flip backward selections, so we can set with a single range.
    if (!selection.extend && start > end) {
      var temp = end;
      end = start;
      start = temp;
    }
  
    var startMarker = getNodeForCharacterOffset(node, start);
    var endMarker = getNodeForCharacterOffset(node, end);
  
    if (startMarker && endMarker) {
      if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
        return;
      }
      var range = document.createRange();
      range.setStart(startMarker.node, startMarker.offset);
      selection.removeAllRanges();
  
      if (start > end) {
        selection.addRange(range);
        selection.extend(endMarker.node, endMarker.offset);
      } else {
        range.setEnd(endMarker.node, endMarker.offset);
        selection.addRange(range);
      }
    }
  }
  
  function isInDocument(node) {
    return containsNode(document.documentElement, node);
  }
  
  /**
   * @ReactInputSelection: React input selection module. Based on Selection.js,
   * but modified to be suitable for react and has a couple of bug fixes (doesn't
   * assume buttons have range selections allowed).
   * Input selection module for React.
   */
  
  /**
   * @hasSelectionCapabilities: we get the element types that support selection
   * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
   * and `selectionEnd` rows.
   */
  function hasSelectionCapabilities(elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
  }
  
  function getSelectionInformation() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
    };
  }
  
  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  function restoreSelection(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
        setSelection(priorFocusedElem, priorSelectionRange);
      }
  
      // Focusing a node can change the scroll position, which is undesirable
      var ancestors = [];
      var ancestor = priorFocusedElem;
      while (ancestor = ancestor.parentNode) {
        if (ancestor.nodeType === ELEMENT_NODE) {
          ancestors.push({
            element: ancestor,
            left: ancestor.scrollLeft,
            top: ancestor.scrollTop
          });
        }
      }
  
      if (typeof priorFocusedElem.focus === 'function') {
        priorFocusedElem.focus();
      }
  
      for (var i = 0; i < ancestors.length; i++) {
        var info = ancestors[i];
        info.element.scrollLeft = info.left;
        info.element.scrollTop = info.top;
      }
    }
  }
  
  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  function getSelection$1(input) {
    var selection = void 0;
  
    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else {
      // Content editable or old IE textarea.
      selection = getOffsets(input);
    }
  
    return selection || { start: 0, end: 0 };
  }
  
  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  function setSelection(input, offsets) {
    var start = offsets.start,
        end = offsets.end;
  
    if (end === undefined) {
      end = start;
    }
  
    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else {
      setOffsets(input, offsets);
    }
  }
  
  var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
  
  var eventTypes$3 = {
    select: {
      phasedRegistrationNames: {
        bubbled: 'onSelect',
        captured: 'onSelectCapture'
      },
      dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
    }
  };
  
  var activeElement$1 = null;
  var activeElementInst$1 = null;
  var lastSelection = null;
  var mouseDown = false;
  
  /**
   * Get an object which is a unique representation of the current selection.
   *
   * The return value will not be consistent across nodes or browsers, but
   * two identical selections on the same node will return identical objects.
   *
   * @param {DOMElement} node
   * @return {object}
   */
  function getSelection(node) {
    if ('selectionStart' in node && hasSelectionCapabilities(node)) {
      return {
        start: node.selectionStart,
        end: node.selectionEnd
      };
    } else if (window.getSelection) {
      var selection = window.getSelection();
      return {
        anchorNode: selection.anchorNode,
        anchorOffset: selection.anchorOffset,
        focusNode: selection.focusNode,
        focusOffset: selection.focusOffset
      };
    }
  }
  
  /**
   * Poll selection to see whether it's changed.
   *
   * @param {object} nativeEvent
   * @return {?SyntheticEvent}
   */
  function constructSelectEvent(nativeEvent, nativeEventTarget) {
    // Ensure we have the right element, and that the user is not dragging a
    // selection (this matches native `select` event behavior). In HTML5, select
    // fires only on input and textarea thus if there's no focused element we
    // won't dispatch.
    if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement()) {
      return null;
    }
  
    // Only fire when selection has actually changed.
    var currentSelection = getSelection(activeElement$1);
    if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
      lastSelection = currentSelection;
  
      var syntheticEvent = SyntheticEvent$1.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
  
      syntheticEvent.type = 'select';
      syntheticEvent.target = activeElement$1;
  
      accumulateTwoPhaseDispatches(syntheticEvent);
  
      return syntheticEvent;
    }
  
    return null;
  }
  
  /**
   * This plugin creates an `onSelect` event that normalizes select events
   * across form elements.
   *
   * Supported elements are:
   * - input (see `isTextInputElement`)
   * - textarea
   * - contentEditable
   *
   * This differs from native browser implementations in the following ways:
   * - Fires on contentEditable fields as well as inputs.
   * - Fires for collapsed selection.
   * - Fires after user input.
   */
  var SelectEventPlugin = {
    eventTypes: eventTypes$3,
  
    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : nativeEventTarget.nodeType === DOCUMENT_NODE ? nativeEventTarget : nativeEventTarget.ownerDocument;
      // Track whether all listeners exists for this plugin. If none exist, we do
      // not extract events. See #3639.
      if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
        return null;
      }
  
      var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
  
      switch (topLevelType) {
        // Track the input node that has focus.
        case TOP_FOCUS:
          if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
            activeElement$1 = targetNode;
            activeElementInst$1 = targetInst;
            lastSelection = null;
          }
          break;
        case TOP_BLUR:
          activeElement$1 = null;
          activeElementInst$1 = null;
          lastSelection = null;
          break;
        // Don't fire the event while the user is dragging. This matches the
        // semantics of the native select event.
        case TOP_MOUSE_DOWN:
          mouseDown = true;
          break;
        case TOP_CONTEXT_MENU:
        case TOP_MOUSE_UP:
          mouseDown = false;
          return constructSelectEvent(nativeEvent, nativeEventTarget);
        // Chrome and IE fire non-standard event when selection is changed (and
        // sometimes when it hasn't). IE's event fires out of order with respect
        // to key and input events on deletion, so we discard it.
        //
        // Firefox doesn't support selectionchange, so check selection status
        // after each key entry. The selection changes after keydown and before
        // keyup, but we check on keydown as well in the case of holding down a
        // key, when multiple keydown events are fired but only one keyup is.
        // This is also our approach for IE handling, for the reason above.
        case TOP_SELECTION_CHANGE:
          if (skipSelectionChangeEvent) {
            break;
          }
        // falls through
        case TOP_KEY_DOWN:
        case TOP_KEY_UP:
          return constructSelectEvent(nativeEvent, nativeEventTarget);
      }
  
      return null;
    }
  };
  
  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  injection.injectEventPluginOrder(DOMEventPluginOrder);
  injection$1.injectComponentTree(ReactDOMComponentTree);
  
  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  injection.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });
  
  // We capture a local reference to any global, in case it gets polyfilled after
  // this module is initially evaluated.
  // We want to be using a consistent implementation.
  
  var localRequestAnimationFrame$1 = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;
  
  /**
   * A scheduling library to allow scheduling work with more granular priority and
   * control than requestAnimationFrame and requestIdleCallback.
   * Current TODO items:
   * X- Pull out the scheduleWork polyfill built into React
   * X- Initial test coverage
   * X- Support for multiple callbacks
   * - Support for two priorities; serial and deferred
   * - Better test coverage
   * - Better docblock
   * - Polish documentation, API
   */
  
  // This is a built-in polyfill for requestIdleCallback. It works by scheduling
  // a requestAnimationFrame, storing the time for the start of the frame, then
  // scheduling a postMessage which gets scheduled after paint. Within the
  // postMessage handler do as much work as possible until time + frame rate.
  // By separating the idle call into a separate event tick we ensure that
  // layout, paint and other browser work is counted against the available time.
  // The frame rate is dynamically adjusted.
  
  // We capture a local reference to any global, in case it gets polyfilled after
  // this module is initially evaluated.
  // We want to be using a consistent implementation.
  var localDate = Date;
  var localSetTimeout = setTimeout;
  var localClearTimeout = clearTimeout;
  
  var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
  
  var now$1 = void 0;
  if (hasNativePerformanceNow) {
    var Performance = performance;
    now$1 = function () {
      return Performance.now();
    };
  } else {
    now$1 = function () {
      return localDate.now();
    };
  }
  
  var scheduleWork = void 0;
  var cancelScheduledWork = void 0;
  
  if (!ExecutionEnvironment.canUseDOM) {
    var timeoutIds = new Map();
  
    scheduleWork = function (callback, options) {
      // keeping return type consistent
      var callbackConfig = {
        scheduledCallback: callback,
        timeoutTime: 0,
        next: null,
        prev: null
      };
      var timeoutId = localSetTimeout(function () {
        callback({
          timeRemaining: function () {
            return Infinity;
          },
  
          didTimeout: false
        });
      });
      timeoutIds.set(callback, timeoutId);
      return callbackConfig;
    };
    cancelScheduledWork = function (callbackId) {
      var callback = callbackId.scheduledCallback;
      var timeoutId = timeoutIds.get(callback);
      timeoutIds.delete(callbackId);
      localClearTimeout(timeoutId);
    };
  } else {
    {
      if (typeof localRequestAnimationFrame$1 !== 'function') {
        warning(false, 'React depends on requestAnimationFrame. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
      }
    }
  
    var localRequestAnimationFrame = typeof localRequestAnimationFrame$1 === 'function' ? localRequestAnimationFrame$1 : function (callback) {
      invariant(false, 'React depends on requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills');
    };
  
    var headOfPendingCallbacksLinkedList = null;
    var tailOfPendingCallbacksLinkedList = null;
  
    // We track what the next soonest timeoutTime is, to be able to quickly tell
    // if none of the scheduled callbacks have timed out.
    var nextSoonestTimeoutTime = -1;
  
    var isIdleScheduled = false;
    var isAnimationFrameScheduled = false;
  
    var frameDeadline = 0;
    // We start out assuming that we run at 30fps but then the heuristic tracking
    // will adjust this value to a faster fps if we get more frequent animation
    // frames.
    var previousFrameTime = 33;
    var activeFrameTime = 33;
  
    var frameDeadlineObject = {
      didTimeout: false,
      timeRemaining: function () {
        var remaining = frameDeadline - now$1();
        return remaining > 0 ? remaining : 0;
      }
    };
  
    /**
     * Handles the case where a callback errors:
     * - don't catch the error, because this changes debugging behavior
     * - do start a new postMessage callback, to call any remaining callbacks,
     * - but only if there is an error, so there is not extra overhead.
     */
    var callUnsafely = function (callbackConfig, arg) {
      var callback = callbackConfig.scheduledCallback;
      var finishedCalling = false;
      try {
        callback(arg);
        finishedCalling = true;
      } finally {
        // always remove it from linked list
        cancelScheduledWork(callbackConfig);
  
        if (!finishedCalling) {
          // an error must have been thrown
          isIdleScheduled = true;
          window.postMessage(messageKey, '*');
        }
      }
    };
  
    /**
     * Checks for timed out callbacks, runs them, and then checks again to see if
     * any more have timed out.
     * Keeps doing this until there are none which have currently timed out.
     */
    var callTimedOutCallbacks = function () {
      if (headOfPendingCallbacksLinkedList === null) {
        return;
      }
  
      var currentTime = now$1();
      // TODO: this would be more efficient if deferred callbacks are stored in
      // min heap.
      // Or in a linked list with links for both timeoutTime order and insertion
      // order.
      // For now an easy compromise is the current approach:
      // Keep a pointer to the soonest timeoutTime, and check that first.
      // If it has not expired, we can skip traversing the whole list.
      // If it has expired, then we step through all the callbacks.
      if (nextSoonestTimeoutTime === -1 || nextSoonestTimeoutTime > currentTime) {
        // We know that none of them have timed out yet.
        return;
      }
      // NOTE: we intentionally wait to update the nextSoonestTimeoutTime until
      // after successfully calling any timed out callbacks.
      // If a timed out callback throws an error, we could get stuck in a state
      // where the nextSoonestTimeoutTime was set wrong.
      var updatedNextSoonestTimeoutTime = -1; // we will update nextSoonestTimeoutTime below
      var timedOutCallbacks = [];
  
      // iterate once to find timed out callbacks and find nextSoonestTimeoutTime
      var currentCallbackConfig = headOfPendingCallbacksLinkedList;
      while (currentCallbackConfig !== null) {
        var _timeoutTime = currentCallbackConfig.timeoutTime;
        if (_timeoutTime !== -1 && _timeoutTime <= currentTime) {
          // it has timed out!
          timedOutCallbacks.push(currentCallbackConfig);
        } else {
          if (_timeoutTime !== -1 && (updatedNextSoonestTimeoutTime === -1 || _timeoutTime < updatedNextSoonestTimeoutTime)) {
            updatedNextSoonestTimeoutTime = _timeoutTime;
          }
        }
        currentCallbackConfig = currentCallbackConfig.next;
      }
  
      if (timedOutCallbacks.length > 0) {
        frameDeadlineObject.didTimeout = true;
        for (var i = 0, len = timedOutCallbacks.length; i < len; i++) {
          callUnsafely(timedOutCallbacks[i], frameDeadlineObject);
        }
      }
  
      // NOTE: we intentionally wait to update the nextSoonestTimeoutTime until
      // after successfully calling any timed out callbacks.
      nextSoonestTimeoutTime = updatedNextSoonestTimeoutTime;
    };
  
    // We use the postMessage trick to defer idle work until after the repaint.
    var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);
    var idleTick = function (event) {
      if (event.source !== window || event.data !== messageKey) {
        return;
      }
      isIdleScheduled = false;
  
      if (headOfPendingCallbacksLinkedList === null) {
        return;
      }
  
      // First call anything which has timed out, until we have caught up.
      callTimedOutCallbacks();
  
      var currentTime = now$1();
      // Next, as long as we have idle time, try calling more callbacks.
      while (frameDeadline - currentTime > 0 && headOfPendingCallbacksLinkedList !== null) {
        var latestCallbackConfig = headOfPendingCallbacksLinkedList;
        frameDeadlineObject.didTimeout = false;
        // callUnsafely will remove it from the head of the linked list
        callUnsafely(latestCallbackConfig, frameDeadlineObject);
        currentTime = now$1();
      }
      if (headOfPendingCallbacksLinkedList !== null) {
        if (!isAnimationFrameScheduled) {
          // Schedule another animation callback so we retry later.
          isAnimationFrameScheduled = true;
          localRequestAnimationFrame(animationTick);
        }
      }
    };
    // Assumes that we have addEventListener in this environment. Might need
    // something better for old IE.
    window.addEventListener('message', idleTick, false);
  
    var animationTick = function (rafTime) {
      isAnimationFrameScheduled = false;
      var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
      if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
        if (nextFrameTime < 8) {
          // Defensive coding. We don't support higher frame rates than 120hz.
          // If we get lower than that, it is probably a bug.
          nextFrameTime = 8;
        }
        // If one frame goes long, then the next one can be short to catch up.
        // If two frames are short in a row, then that's an indication that we
        // actually have a higher frame rate than what we're currently optimizing.
        // We adjust our heuristic dynamically accordingly. For example, if we're
        // running on 120hz display or 90hz VR display.
        // Take the max of the two in case one of them was an anomaly due to
        // missed frame deadlines.
        activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
      } else {
        previousFrameTime = nextFrameTime;
      }
      frameDeadline = rafTime + activeFrameTime;
      if (!isIdleScheduled) {
        isIdleScheduled = true;
        window.postMessage(messageKey, '*');
      }
    };
  
    scheduleWork = function (callback, options) /* CallbackConfigType */{
      var timeoutTime = -1;
      if (options != null && typeof options.timeout === 'number') {
        timeoutTime = now$1() + options.timeout;
      }
      if (nextSoonestTimeoutTime === -1 || timeoutTime !== -1 && timeoutTime < nextSoonestTimeoutTime) {
        nextSoonestTimeoutTime = timeoutTime;
      }
  
      var scheduledCallbackConfig = {
        scheduledCallback: callback,
        timeoutTime: timeoutTime,
        prev: null,
        next: null
      };
      if (headOfPendingCallbacksLinkedList === null) {
        // Make this callback the head and tail of our list
        headOfPendingCallbacksLinkedList = scheduledCallbackConfig;
        tailOfPendingCallbacksLinkedList = scheduledCallbackConfig;
      } else {
        // Add latest callback as the new tail of the list
        scheduledCallbackConfig.prev = tailOfPendingCallbacksLinkedList;
        // renaming for clarity
        var oldTailOfPendingCallbacksLinkedList = tailOfPendingCallbacksLinkedList;
        if (oldTailOfPendingCallbacksLinkedList !== null) {
          oldTailOfPendingCallbacksLinkedList.next = scheduledCallbackConfig;
        }
        tailOfPendingCallbacksLinkedList = scheduledCallbackConfig;
      }
  
      if (!isAnimationFrameScheduled) {
        // If rAF didn't already schedule one, we need to schedule a frame.
        // TODO: If this rAF doesn't materialize because the browser throttles, we
        // might want to still have setTimeout trigger scheduleWork as a backup to ensure
        // that we keep performing work.
        isAnimationFrameScheduled = true;
        localRequestAnimationFrame(animationTick);
      }
      return scheduledCallbackConfig;
    };
  
    cancelScheduledWork = function (callbackConfig /* CallbackConfigType */
    ) {
      if (callbackConfig.prev === null && headOfPendingCallbacksLinkedList !== callbackConfig) {
        // this callbackConfig has already been cancelled.
        // cancelScheduledWork should be idempotent, a no-op after first call.
        return;
      }
  
      /**
       * There are four possible cases:
       * - Head/nodeToRemove/Tail -> null
       *   In this case we set Head and Tail to null.
       * - Head -> ... middle nodes... -> Tail/nodeToRemove
       *   In this case we point the middle.next to null and put middle as the new
       *   Tail.
       * - Head/nodeToRemove -> ...middle nodes... -> Tail
       *   In this case we point the middle.prev at null and move the Head to
       *   middle.
       * - Head -> ... ?some nodes ... -> nodeToRemove -> ... ?some nodes ... -> Tail
       *   In this case we point the Head.next to the Tail and the Tail.prev to
       *   the Head.
       */
      var next = callbackConfig.next;
      var prev = callbackConfig.prev;
      callbackConfig.next = null;
      callbackConfig.prev = null;
      if (next !== null) {
        // we have a next
  
        if (prev !== null) {
          // we have a prev
  
          // callbackConfig is somewhere in the middle of a list of 3 or more nodes.
          prev.next = next;
          next.prev = prev;
          return;
        } else {
          // there is a next but not a previous one;
          // callbackConfig is the head of a list of 2 or more other nodes.
          next.prev = null;
          headOfPendingCallbacksLinkedList = next;
          return;
        }
      } else {
        // there is no next callback config; this must the tail of the list
  
        if (prev !== null) {
          // we have a prev
  
          // callbackConfig is the tail of a list of 2 or more other nodes.
          prev.next = null;
          tailOfPendingCallbacksLinkedList = prev;
          return;
        } else {
          // there is no previous callback config;
          // callbackConfig is the only thing in the linked list,
          // so both head and tail point to it.
          headOfPendingCallbacksLinkedList = null;
          tailOfPendingCallbacksLinkedList = null;
          return;
        }
      }
    };
  }
  
  var didWarnSelectedSetOnOption = false;
  
  function flattenChildren(children) {
    var content = '';
  
    // Flatten children and warn if they aren't strings or numbers;
    // invalid types are ignored.
    // We can silently skip them because invalid DOM nesting warning
    // catches these cases in Fiber.
    React.Children.forEach(children, function (child) {
      if (child == null) {
        return;
      }
      if (typeof child === 'string' || typeof child === 'number') {
        content += child;
      }
    });
  
    return content;
  }
  
  /**
   * Implements an <option> host component that warns when `selected` is set.
   */
  
  function validateProps(element, props) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    {
      if (props.selected != null && !didWarnSelectedSetOnOption) {
        warning(false, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
        didWarnSelectedSetOnOption = true;
      }
    }
  }
  
  function postMountWrapper$1(element, props) {
    // value="" should make a value attribute (#6219)
    if (props.value != null) {
      element.setAttribute('value', props.value);
    }
  }
  
  function getHostProps$1(element, props) {
    var hostProps = _assign$$1({ children: undefined }, props);
    var content = flattenChildren(props.children);
  
    if (content) {
      hostProps.children = content;
    }
  
    return hostProps;
  }
  
  // TODO: direct imports like some-package/src/* are bad. Fix me.
  var getCurrentFiberOwnerName$3 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
  var getCurrentFiberStackAddendum$3 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;
  
  
  var didWarnValueDefaultValue$1 = void 0;
  
  {
    didWarnValueDefaultValue$1 = false;
  }
  
  function getDeclarationErrorAddendum() {
    var ownerName = getCurrentFiberOwnerName$3();
    if (ownerName) {
      return '\n\nCheck the render method of `' + ownerName + '`.';
    }
    return '';
  }
  
  var valuePropNames = ['value', 'defaultValue'];
  
  /**
   * Validation function for `value` and `defaultValue`.
   */
  function checkSelectPropTypes(props) {
    ReactControlledValuePropTypes.checkPropTypes('select', props, getCurrentFiberStackAddendum$3);
  
    for (var i = 0; i < valuePropNames.length; i++) {
      var propName = valuePropNames[i];
      if (props[propName] == null) {
        continue;
      }
      var isArray = Array.isArray(props[propName]);
      if (props.multiple && !isArray) {
        warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
      } else if (!props.multiple && isArray) {
        warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
      }
    }
  }
  
  function updateOptions(node, multiple, propValue, setDefaultSelected) {
    var options = node.options;
  
    if (multiple) {
      var selectedValues = propValue;
      var selectedValue = {};
      for (var i = 0; i < selectedValues.length; i++) {
        // Prefix to avoid chaos with special keys.
        selectedValue['$' + selectedValues[i]] = true;
      }
      for (var _i = 0; _i < options.length; _i++) {
        var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
        if (options[_i].selected !== selected) {
          options[_i].selected = selected;
        }
        if (selected && setDefaultSelected) {
          options[_i].defaultSelected = true;
        }
      }
    } else {
      // Do not set `select.value` as exact behavior isn't consistent across all
      // browsers for all cases.
      var _selectedValue = '' + propValue;
      var defaultSelected = null;
      for (var _i2 = 0; _i2 < options.length; _i2++) {
        if (options[_i2].value === _selectedValue) {
          options[_i2].selected = true;
          if (setDefaultSelected) {
            options[_i2].defaultSelected = true;
          }
          return;
        }
        if (defaultSelected === null && !options[_i2].disabled) {
          defaultSelected = options[_i2];
        }
      }
      if (defaultSelected !== null) {
        defaultSelected.selected = true;
      }
    }
  }
  
  /**
   * Implements a <select> host component that allows optionally setting the
   * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
   * stringable. If `multiple` is true, the prop must be an array of stringables.
   *
   * If `value` is not supplied (or null/undefined), user actions that change the
   * selected option will trigger updates to the rendered options.
   *
   * If it is supplied (and not null/undefined), the rendered options will not
   * update in response to user actions. Instead, the `value` prop must change in
   * order for the rendered options to update.
   *
   * If `defaultValue` is provided, any options with the supplied values will be
   * selected.
   */
  
  function getHostProps$2(element, props) {
    return _assign$$1({}, props, {
      value: undefined
    });
  }
  
  function initWrapperState$1(element, props) {
    var node = element;
    {
      checkSelectPropTypes(props);
    }
  
    var value = props.value;
    node._wrapperState = {
      initialValue: value != null ? value : props.defaultValue,
      wasMultiple: !!props.multiple
    };
  
    {
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
        warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
        didWarnValueDefaultValue$1 = true;
      }
    }
  }
  
  function postMountWrapper$2(element, props) {
    var node = element;
    node.multiple = !!props.multiple;
    var value = props.value;
    if (value != null) {
      updateOptions(node, !!props.multiple, value, false);
    } else if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
  }
  
  function postUpdateWrapper(element, props) {
    var node = element;
    // After the initial mount, we control selected-ness manually so don't pass
    // this value down
    node._wrapperState.initialValue = undefined;
  
    var wasMultiple = node._wrapperState.wasMultiple;
    node._wrapperState.wasMultiple = !!props.multiple;
  
    var value = props.value;
    if (value != null) {
      updateOptions(node, !!props.multiple, value, false);
    } else if (wasMultiple !== !!props.multiple) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(node, !!props.multiple, props.defaultValue, true);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
      }
    }
  }
  
  function restoreControlledState$2(element, props) {
    var node = element;
    var value = props.value;
  
    if (value != null) {
      updateOptions(node, !!props.multiple, value, false);
    }
  }
  
  // TODO: direct imports like some-package/src/* are bad. Fix me.
  var getCurrentFiberStackAddendum$4 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;
  
  var didWarnValDefaultVal = false;
  
  /**
   * Implements a <textarea> host component that allows setting `value`, and
   * `defaultValue`. This differs from the traditional DOM API because value is
   * usually set as PCDATA children.
   *
   * If `value` is not supplied (or null/undefined), user actions that affect the
   * value will trigger updates to the element.
   *
   * If `value` is supplied (and not null/undefined), the rendered element will
   * not trigger updates to the element. Instead, the `value` prop must change in
   * order for the rendered element to be updated.
   *
   * The rendered element will be initialized with an empty value, the prop
   * `defaultValue` if specified, or the children content (deprecated).
   */
  
  function getHostProps$3(element, props) {
    var node = element;
    !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0;
  
    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.  We could add a check in setTextContent
    // to only set the value if/when the value differs from the node value (which would
    // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
    // solution. The value can be a boolean or object so that's why it's forced
    // to be a string.
    var hostProps = _assign$$1({}, props, {
      value: undefined,
      defaultValue: undefined,
      children: '' + node._wrapperState.initialValue
    });
  
    return hostProps;
  }
  
  function initWrapperState$2(element, props) {
    var node = element;
    {
      ReactControlledValuePropTypes.checkPropTypes('textarea', props, getCurrentFiberStackAddendum$4);
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
        warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
        didWarnValDefaultVal = true;
      }
    }
  
    var initialValue = props.value;
  
    // Only bother fetching default value if we're going to use it
    if (initialValue == null) {
      var defaultValue = props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = props.children;
      if (children != null) {
        {
          warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
        }
        !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;
        if (Array.isArray(children)) {
          !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
          children = children[0];
        }
  
        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      initialValue = defaultValue;
    }
  
    node._wrapperState = {
      initialValue: '' + initialValue
    };
  }
  
  function updateWrapper$1(element, props) {
    var node = element;
    var value = props.value;
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;
  
      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
      if (props.defaultValue == null) {
        node.defaultValue = newValue;
      }
    }
    if (props.defaultValue != null) {
      node.defaultValue = props.defaultValue;
    }
  }
  
  function postMountWrapper$3(element, props) {
    var node = element;
    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var textContent = node.textContent;
  
    // Only set node.value if textContent is equal to the expected
    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
    // will populate textContent as well.
    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
    if (textContent === node._wrapperState.initialValue) {
      node.value = textContent;
    }
  }
  
  function restoreControlledState$3(element, props) {
    // DOM component is still mounted; update
    updateWrapper$1(element, props);
  }
  
  var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
  var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
  var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
  
  var Namespaces = {
    html: HTML_NAMESPACE$1,
    mathml: MATH_NAMESPACE,
    svg: SVG_NAMESPACE
  };
  
  // Assumes there is no parent namespace.
  function getIntrinsicNamespace(type) {
    switch (type) {
      case 'svg':
        return SVG_NAMESPACE;
      case 'math':
        return MATH_NAMESPACE;
      default:
        return HTML_NAMESPACE$1;
    }
  }
  
  function getChildNamespace(parentNamespace, type) {
    if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
      // No (or default) parent namespace: potential entry point.
      return getIntrinsicNamespace(type);
    }
    if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
      // We're leaving SVG.
      return HTML_NAMESPACE$1;
    }
    // By default, pass namespace below.
    return parentNamespace;
  }
  
  /* globals MSApp */
  
  /**
   * Create a function which has 'unsafe' privileges (required by windows8 apps)
   */
  var createMicrosoftUnsafeLocalFunction = function (func) {
    if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
      return function (arg0, arg1, arg2, arg3) {
        MSApp.execUnsafeLocalFunction(function () {
          return func(arg0, arg1, arg2, arg3);
        });
      };
    } else {
      return func;
    }
  };
  
  // SVG temp container for IE lacking innerHTML
  var reusableSVGContainer = void 0;
  
  /**
   * Set the innerHTML property of a node
   *
   * @param {DOMElement} node
   * @param {string} html
   * @internal
   */
  var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
    // IE does not have innerHTML for SVG nodes, so instead we inject the
    // new markup in a temp node and then move the child nodes across into
    // the target node
  
    if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
      reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
      var svgNode = reusableSVGContainer.firstChild;
      while (node.firstChild) {
        node.removeChild(node.firstChild);
      }
      while (svgNode.firstChild) {
        node.appendChild(svgNode.firstChild);
      }
    } else {
      node.innerHTML = html;
    }
  });
  
  /**
   * Set the textContent property of a node. For text updates, it's faster
   * to set the `nodeValue` of the Text node directly instead of using
   * `.textContent` which will remove the existing node and create a new one.
   *
   * @param {DOMElement} node
   * @param {string} text
   * @internal
   */
  var setTextContent = function (node, text) {
    if (text) {
      var firstChild = node.firstChild;
  
      if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
        firstChild.nodeValue = text;
        return;
      }
    }
    node.textContent = text;
  };
  
  /**
   * CSS properties which accept numbers but are not in units of "px".
   */
  var isUnitlessNumber = {
    animationIterationCount: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    columns: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridRow: true,
    gridRowEnd: true,
    gridRowSpan: true,
    gridRowStart: true,
    gridColumn: true,
    gridColumnEnd: true,
    gridColumnSpan: true,
    gridColumnStart: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
  
    // SVG-related properties
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
  };
  
  /**
   * @param {string} prefix vendor-specific prefix, eg: Webkit
   * @param {string} key style name, eg: transitionDuration
   * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
   * WebkitTransitionDuration
   */
  function prefixKey(prefix, key) {
    return prefix + key.charAt(0).toUpperCase() + key.substring(1);
  }
  
  /**
   * Support style names that may come passed in prefixed by adding permutations
   * of vendor prefixes.
   */
  var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
  
  // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
  // infinite loop, because it iterates over the newly added props too.
  Object.keys(isUnitlessNumber).forEach(function (prop) {
    prefixes.forEach(function (prefix) {
      isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
    });
  });
  
  /**
   * Convert a value into the proper css writable value. The style name `name`
   * should be logical (no hyphens), as specified
   * in `CSSProperty.isUnitlessNumber`.
   *
   * @param {string} name CSS property name such as `topMargin`.
   * @param {*} value CSS property value such as `10px`.
   * @return {string} Normalized style value with dimensions applied.
   */
  function dangerousStyleValue(name, value, isCustomProperty) {
    // Note that we've removed escapeTextForBrowser() calls here since the
    // whole string will be escaped when the attribute is injected into
    // the markup. If you provide unsafe user data here they can inject
    // arbitrary CSS which may be problematic (I couldn't repro this):
    // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
    // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
    // This is not an XSS hole but instead a potential CSS injection issue
    // which has lead to a greater discussion about how we're going to
    // trust URLs moving forward. See #2115901
  
    var isEmpty = value == null || typeof value === 'boolean' || value === '';
    if (isEmpty) {
      return '';
    }
  
    if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
      return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
    }
  
    return ('' + value).trim();
  }
  
  var warnValidStyle = emptyFunction;
  
  {
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
  
    // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
  
    var warnedStyleNames = {};
    var warnedStyleValues = {};
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
  
    var warnHyphenatedStyleName = function (name, getStack) {
      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
        return;
      }
  
      warnedStyleNames[name] = true;
      warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), getStack());
    };
  
    var warnBadVendoredStyleName = function (name, getStack) {
      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
        return;
      }
  
      warnedStyleNames[name] = true;
      warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), getStack());
    };
  
    var warnStyleValueWithSemicolon = function (name, value, getStack) {
      if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
        return;
      }
  
      warnedStyleValues[value] = true;
      warning(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.%s', name, value.replace(badStyleValueWithSemicolonPattern, ''), getStack());
    };
  
    var warnStyleValueIsNaN = function (name, value, getStack) {
      if (warnedForNaNValue) {
        return;
      }
  
      warnedForNaNValue = true;
      warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, getStack());
    };
  
    var warnStyleValueIsInfinity = function (name, value, getStack) {
      if (warnedForInfinityValue) {
        return;
      }
  
      warnedForInfinityValue = true;
      warning(false, '`Infinity` is an invalid value for the `%s` css style property.%s', name, getStack());
    };
  
    warnValidStyle = function (name, value, getStack) {
      if (name.indexOf('-') > -1) {
        warnHyphenatedStyleName(name, getStack);
      } else if (badVendoredStyleNamePattern.test(name)) {
        warnBadVendoredStyleName(name, getStack);
      } else if (badStyleValueWithSemicolonPattern.test(value)) {
        warnStyleValueWithSemicolon(name, value, getStack);
      }
  
      if (typeof value === 'number') {
        if (isNaN(value)) {
          warnStyleValueIsNaN(name, value, getStack);
        } else if (!isFinite(value)) {
          warnStyleValueIsInfinity(name, value, getStack);
        }
      }
    };
  }
  
  var warnValidStyle$1 = warnValidStyle;
  
  /**
   * Operations for dealing with CSS properties.
   */
  
  /**
   * This creates a string that is expected to be equivalent to the style
   * attribute generated by server-side rendering. It by-passes warnings and
   * security checks so it's not safe to use this value for anything other than
   * comparison. It is only used in DEV for SSR validation.
   */
  function createDangerousStringForStyles(styles) {
    {
      var serialized = '';
      var delimiter = '';
      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }
        var styleValue = styles[styleName];
        if (styleValue != null) {
          var isCustomProperty = styleName.indexOf('--') === 0;
          serialized += delimiter + hyphenateStyleName(styleName) + ':';
          serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
  
          delimiter = ';';
        }
      }
      return serialized || null;
    }
  }
  
  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  function setValueForStyles(node, styles, getStack) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var isCustomProperty = styleName.indexOf('--') === 0;
      {
        if (!isCustomProperty) {
          warnValidStyle$1(styleName, styles[styleName], getStack);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
      if (styleName === 'float') {
        styleName = 'cssFloat';
      }
      if (isCustomProperty) {
        style.setProperty(styleName, styleValue);
      } else {
        style[styleName] = styleValue;
      }
    }
  }
  
  // For HTML, certain tags should omit their close tag. We keep a whitelist for
  // those special-case tags.
  
  var omittedCloseTags = {
    area: true,
    base: true,
    br: true,
    col: true,
    embed: true,
    hr: true,
    img: true,
    input: true,
    keygen: true,
    link: true,
    meta: true,
    param: true,
    source: true,
    track: true,
    wbr: true
    // NOTE: menuitem's close tag should be omitted, but that causes problems.
  };
  
  // For HTML, certain tags cannot have children. This has the same purpose as
  // `omittedCloseTags` except that `menuitem` should still have its closing tag.
  
  var voidElementTags = _assign$$1({
    menuitem: true
  }, omittedCloseTags);
  
  var HTML$1 = '__html';
  
  function assertValidProps(tag, props, getStack) {
    if (!props) {
      return;
    }
    // Note the use of `==` which checks for null or undefined.
    if (voidElementTags[tag]) {
      !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, getStack()) : void 0;
    }
    if (props.dangerouslySetInnerHTML != null) {
      !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
      !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
    }
    {
      !(props.suppressContentEditableWarning || !props.contentEditable || props.children == null) ? warning(false, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.%s', getStack()) : void 0;
    }
    !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getStack()) : void 0;
  }
  
  function isCustomComponent(tagName, props) {
    if (tagName.indexOf('-') === -1) {
      return typeof props.is === 'string';
    }
    switch (tagName) {
      // These are reserved SVG and MathML elements.
      // We don't mind this whitelist too much because we expect it to never grow.
      // The alternative is to track the namespace in a few places which is convoluted.
      // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
      case 'annotation-xml':
      case 'color-profile':
      case 'font-face':
      case 'font-face-src':
      case 'font-face-uri':
      case 'font-face-format':
      case 'font-face-name':
      case 'missing-glyph':
        return false;
      default:
        return true;
    }
  }
  
  // When adding attributes to the HTML or SVG whitelist, be sure to
  // also add them to this module to ensure casing and incorrect name
  // warnings.
  var possibleStandardNames = {
    // HTML
    accept: 'accept',
    acceptcharset: 'acceptCharset',
    'accept-charset': 'acceptCharset',
    accesskey: 'accessKey',
    action: 'action',
    allowfullscreen: 'allowFullScreen',
    alt: 'alt',
    as: 'as',
    async: 'async',
    autocapitalize: 'autoCapitalize',
    autocomplete: 'autoComplete',
    autocorrect: 'autoCorrect',
    autofocus: 'autoFocus',
    autoplay: 'autoPlay',
    autosave: 'autoSave',
    capture: 'capture',
    cellpadding: 'cellPadding',
    cellspacing: 'cellSpacing',
    challenge: 'challenge',
    charset: 'charSet',
    checked: 'checked',
    children: 'children',
    cite: 'cite',
    class: 'className',
    classid: 'classID',
    classname: 'className',
    cols: 'cols',
    colspan: 'colSpan',
    content: 'content',
    contenteditable: 'contentEditable',
    contextmenu: 'contextMenu',
    controls: 'controls',
    controlslist: 'controlsList',
    coords: 'coords',
    crossorigin: 'crossOrigin',
    dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
    data: 'data',
    datetime: 'dateTime',
    default: 'default',
    defaultchecked: 'defaultChecked',
    defaultvalue: 'defaultValue',
    defer: 'defer',
    dir: 'dir',
    disabled: 'disabled',
    download: 'download',
    draggable: 'draggable',
    enctype: 'encType',
    for: 'htmlFor',
    form: 'form',
    formmethod: 'formMethod',
    formaction: 'formAction',
    formenctype: 'formEncType',
    formnovalidate: 'formNoValidate',
    formtarget: 'formTarget',
    frameborder: 'frameBorder',
    headers: 'headers',
    height: 'height',
    hidden: 'hidden',
    high: 'high',
    href: 'href',
    hreflang: 'hrefLang',
    htmlfor: 'htmlFor',
    httpequiv: 'httpEquiv',
    'http-equiv': 'httpEquiv',
    icon: 'icon',
    id: 'id',
    innerhtml: 'innerHTML',
    inputmode: 'inputMode',
    integrity: 'integrity',
    is: 'is',
    itemid: 'itemID',
    itemprop: 'itemProp',
    itemref: 'itemRef',
    itemscope: 'itemScope',
    itemtype: 'itemType',
    keyparams: 'keyParams',
    keytype: 'keyType',
    kind: 'kind',
    label: 'label',
    lang: 'lang',
    list: 'list',
    loop: 'loop',
    low: 'low',
    manifest: 'manifest',
    marginwidth: 'marginWidth',
    marginheight: 'marginHeight',
    max: 'max',
    maxlength: 'maxLength',
    media: 'media',
    mediagroup: 'mediaGroup',
    method: 'method',
    min: 'min',
    minlength: 'minLength',
    multiple: 'multiple',
    muted: 'muted',
    name: 'name',
    nomodule: 'noModule',
    nonce: 'nonce',
    novalidate: 'noValidate',
    open: 'open',
    optimum: 'optimum',
    pattern: 'pattern',
    placeholder: 'placeholder',
    playsinline: 'playsInline',
    poster: 'poster',
    preload: 'preload',
    profile: 'profile',
    radiogroup: 'radioGroup',
    readonly: 'readOnly',
    referrerpolicy: 'referrerPolicy',
    rel: 'rel',
    required: 'required',
    reversed: 'reversed',
    role: 'role',
    rows: 'rows',
    rowspan: 'rowSpan',
    sandbox: 'sandbox',
    scope: 'scope',
    scoped: 'scoped',
    scrolling: 'scrolling',
    seamless: 'seamless',
    selected: 'selected',
    shape: 'shape',
    size: 'size',
    sizes: 'sizes',
    span: 'span',
    spellcheck: 'spellCheck',
    src: 'src',
    srcdoc: 'srcDoc',
    srclang: 'srcLang',
    srcset: 'srcSet',
    start: 'start',
    step: 'step',
    style: 'style',
    summary: 'summary',
    tabindex: 'tabIndex',
    target: 'target',
    title: 'title',
    type: 'type',
    usemap: 'useMap',
    value: 'value',
    width: 'width',
    wmode: 'wmode',
    wrap: 'wrap',
  
    // SVG
    about: 'about',
    accentheight: 'accentHeight',
    'accent-height': 'accentHeight',
    accumulate: 'accumulate',
    additive: 'additive',
    alignmentbaseline: 'alignmentBaseline',
    'alignment-baseline': 'alignmentBaseline',
    allowreorder: 'allowReorder',
    alphabetic: 'alphabetic',
    amplitude: 'amplitude',
    arabicform: 'arabicForm',
    'arabic-form': 'arabicForm',
    ascent: 'ascent',
    attributename: 'attributeName',
    attributetype: 'attributeType',
    autoreverse: 'autoReverse',
    azimuth: 'azimuth',
    basefrequency: 'baseFrequency',
    baselineshift: 'baselineShift',
    'baseline-shift': 'baselineShift',
    baseprofile: 'baseProfile',
    bbox: 'bbox',
    begin: 'begin',
    bias: 'bias',
    by: 'by',
    calcmode: 'calcMode',
    capheight: 'capHeight',
    'cap-height': 'capHeight',
    clip: 'clip',
    clippath: 'clipPath',
    'clip-path': 'clipPath',
    clippathunits: 'clipPathUnits',
    cliprule: 'clipRule',
    'clip-rule': 'clipRule',
    color: 'color',
    colorinterpolation: 'colorInterpolation',
    'color-interpolation': 'colorInterpolation',
    colorinterpolationfilters: 'colorInterpolationFilters',
    'color-interpolation-filters': 'colorInterpolationFilters',
    colorprofile: 'colorProfile',
    'color-profile': 'colorProfile',
    colorrendering: 'colorRendering',
    'color-rendering': 'colorRendering',
    contentscripttype: 'contentScriptType',
    contentstyletype: 'contentStyleType',
    cursor: 'cursor',
    cx: 'cx',
    cy: 'cy',
    d: 'd',
    datatype: 'datatype',
    decelerate: 'decelerate',
    descent: 'descent',
    diffuseconstant: 'diffuseConstant',
    direction: 'direction',
    display: 'display',
    divisor: 'divisor',
    dominantbaseline: 'dominantBaseline',
    'dominant-baseline': 'dominantBaseline',
    dur: 'dur',
    dx: 'dx',
    dy: 'dy',
    edgemode: 'edgeMode',
    elevation: 'elevation',
    enablebackground: 'enableBackground',
    'enable-background': 'enableBackground',
    end: 'end',
    exponent: 'exponent',
    externalresourcesrequired: 'externalResourcesRequired',
    fill: 'fill',
    fillopacity: 'fillOpacity',
    'fill-opacity': 'fillOpacity',
    fillrule: 'fillRule',
    'fill-rule': 'fillRule',
    filter: 'filter',
    filterres: 'filterRes',
    filterunits: 'filterUnits',
    floodopacity: 'floodOpacity',
    'flood-opacity': 'floodOpacity',
    floodcolor: 'floodColor',
    'flood-color': 'floodColor',
    focusable: 'focusable',
    fontfamily: 'fontFamily',
    'font-family': 'fontFamily',
    fontsize: 'fontSize',
    'font-size': 'fontSize',
    fontsizeadjust: 'fontSizeAdjust',
    'font-size-adjust': 'fontSizeAdjust',
    fontstretch: 'fontStretch',
    'font-stretch': 'fontStretch',
    fontstyle: 'fontStyle',
    'font-style': 'fontStyle',
    fontvariant: 'fontVariant',
    'font-variant': 'fontVariant',
    fontweight: 'fontWeight',
    'font-weight': 'fontWeight',
    format: 'format',
    from: 'from',
    fx: 'fx',
    fy: 'fy',
    g1: 'g1',
    g2: 'g2',
    glyphname: 'glyphName',
    'glyph-name': 'glyphName',
    glyphorientationhorizontal: 'glyphOrientationHorizontal',
    'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
    glyphorientationvertical: 'glyphOrientationVertical',
    'glyph-orientation-vertical': 'glyphOrientationVertical',
    glyphref: 'glyphRef',
    gradienttransform: 'gradientTransform',
    gradientunits: 'gradientUnits',
    hanging: 'hanging',
    horizadvx: 'horizAdvX',
    'horiz-adv-x': 'horizAdvX',
    horizoriginx: 'horizOriginX',
    'horiz-origin-x': 'horizOriginX',
    ideographic: 'ideographic',
    imagerendering: 'imageRendering',
    'image-rendering': 'imageRendering',
    in2: 'in2',
    in: 'in',
    inlist: 'inlist',
    intercept: 'intercept',
    k1: 'k1',
    k2: 'k2',
    k3: 'k3',
    k4: 'k4',
    k: 'k',
    kernelmatrix: 'kernelMatrix',
    kernelunitlength: 'kernelUnitLength',
    kerning: 'kerning',
    keypoints: 'keyPoints',
    keysplines: 'keySplines',
    keytimes: 'keyTimes',
    lengthadjust: 'lengthAdjust',
    letterspacing: 'letterSpacing',
    'letter-spacing': 'letterSpacing',
    lightingcolor: 'lightingColor',
    'lighting-color': 'lightingColor',
    limitingconeangle: 'limitingConeAngle',
    local: 'local',
    markerend: 'markerEnd',
    'marker-end': 'markerEnd',
    markerheight: 'markerHeight',
    markermid: 'markerMid',
    'marker-mid': 'markerMid',
    markerstart: 'markerStart',
    'marker-start': 'markerStart',
    markerunits: 'markerUnits',
    markerwidth: 'markerWidth',
    mask: 'mask',
    maskcontentunits: 'maskContentUnits',
    maskunits: 'maskUnits',
    mathematical: 'mathematical',
    mode: 'mode',
    numoctaves: 'numOctaves',
    offset: 'offset',
    opacity: 'opacity',
    operator: 'operator',
    order: 'order',
    orient: 'orient',
    orientation: 'orientation',
    origin: 'origin',
    overflow: 'overflow',
    overlineposition: 'overlinePosition',
    'overline-position': 'overlinePosition',
    overlinethickness: 'overlineThickness',
    'overline-thickness': 'overlineThickness',
    paintorder: 'paintOrder',
    'paint-order': 'paintOrder',
    panose1: 'panose1',
    'panose-1': 'panose1',
    pathlength: 'pathLength',
    patterncontentunits: 'patternContentUnits',
    patterntransform: 'patternTransform',
    patternunits: 'patternUnits',
    pointerevents: 'pointerEvents',
    'pointer-events': 'pointerEvents',
    points: 'points',
    pointsatx: 'pointsAtX',
    pointsaty: 'pointsAtY',
    pointsatz: 'pointsAtZ',
    prefix: 'prefix',
    preservealpha: 'preserveAlpha',
    preserveaspectratio: 'preserveAspectRatio',
    primitiveunits: 'primitiveUnits',
    property: 'property',
    r: 'r',
    radius: 'radius',
    refx: 'refX',
    refy: 'refY',
    renderingintent: 'renderingIntent',
    'rendering-intent': 'renderingIntent',
    repeatcount: 'repeatCount',
    repeatdur: 'repeatDur',
    requiredextensions: 'requiredExtensions',
    requiredfeatures: 'requiredFeatures',
    resource: 'resource',
    restart: 'restart',
    result: 'result',
    results: 'results',
    rotate: 'rotate',
    rx: 'rx',
    ry: 'ry',
    scale: 'scale',
    security: 'security',
    seed: 'seed',
    shaperendering: 'shapeRendering',
    'shape-rendering': 'shapeRendering',
    slope: 'slope',
    spacing: 'spacing',
    specularconstant: 'specularConstant',
    specularexponent: 'specularExponent',
    speed: 'speed',
    spreadmethod: 'spreadMethod',
    startoffset: 'startOffset',
    stddeviation: 'stdDeviation',
    stemh: 'stemh',
    stemv: 'stemv',
    stitchtiles: 'stitchTiles',
    stopcolor: 'stopColor',
    'stop-color': 'stopColor',
    stopopacity: 'stopOpacity',
    'stop-opacity': 'stopOpacity',
    strikethroughposition: 'strikethroughPosition',
    'strikethrough-position': 'strikethroughPosition',
    strikethroughthickness: 'strikethroughThickness',
    'strikethrough-thickness': 'strikethroughThickness',
    string: 'string',
    stroke: 'stroke',
    strokedasharray: 'strokeDasharray',
    'stroke-dasharray': 'strokeDasharray',
    strokedashoffset: 'strokeDashoffset',
    'stroke-dashoffset': 'strokeDashoffset',
    strokelinecap: 'strokeLinecap',
    'stroke-linecap': 'strokeLinecap',
    strokelinejoin: 'strokeLinejoin',
    'stroke-linejoin': 'strokeLinejoin',
    strokemiterlimit: 'strokeMiterlimit',
    'stroke-miterlimit': 'strokeMiterlimit',
    strokewidth: 'strokeWidth',
    'stroke-width': 'strokeWidth',
    strokeopacity: 'strokeOpacity',
    'stroke-opacity': 'strokeOpacity',
    suppresscontenteditablewarning: 'suppressContentEditableWarning',
    suppresshydrationwarning: 'suppressHydrationWarning',
    surfacescale: 'surfaceScale',
    systemlanguage: 'systemLanguage',
    tablevalues: 'tableValues',
    targetx: 'targetX',
    targety: 'targetY',
    textanchor: 'textAnchor',
    'text-anchor': 'textAnchor',
    textdecoration: 'textDecoration',
    'text-decoration': 'textDecoration',
    textlength: 'textLength',
    textrendering: 'textRendering',
    'text-rendering': 'textRendering',
    to: 'to',
    transform: 'transform',
    typeof: 'typeof',
    u1: 'u1',
    u2: 'u2',
    underlineposition: 'underlinePosition',
    'underline-position': 'underlinePosition',
    underlinethickness: 'underlineThickness',
    'underline-thickness': 'underlineThickness',
    unicode: 'unicode',
    unicodebidi: 'unicodeBidi',
    'unicode-bidi': 'unicodeBidi',
    unicoderange: 'unicodeRange',
    'unicode-range': 'unicodeRange',
    unitsperem: 'unitsPerEm',
    'units-per-em': 'unitsPerEm',
    unselectable: 'unselectable',
    valphabetic: 'vAlphabetic',
    'v-alphabetic': 'vAlphabetic',
    values: 'values',
    vectoreffect: 'vectorEffect',
    'vector-effect': 'vectorEffect',
    version: 'version',
    vertadvy: 'vertAdvY',
    'vert-adv-y': 'vertAdvY',
    vertoriginx: 'vertOriginX',
    'vert-origin-x': 'vertOriginX',
    vertoriginy: 'vertOriginY',
    'vert-origin-y': 'vertOriginY',
    vhanging: 'vHanging',
    'v-hanging': 'vHanging',
    videographic: 'vIdeographic',
    'v-ideographic': 'vIdeographic',
    viewbox: 'viewBox',
    viewtarget: 'viewTarget',
    visibility: 'visibility',
    vmathematical: 'vMathematical',
    'v-mathematical': 'vMathematical',
    vocab: 'vocab',
    widths: 'widths',
    wordspacing: 'wordSpacing',
    'word-spacing': 'wordSpacing',
    writingmode: 'writingMode',
    'writing-mode': 'writingMode',
    x1: 'x1',
    x2: 'x2',
    x: 'x',
    xchannelselector: 'xChannelSelector',
    xheight: 'xHeight',
    'x-height': 'xHeight',
    xlinkactuate: 'xlinkActuate',
    'xlink:actuate': 'xlinkActuate',
    xlinkarcrole: 'xlinkArcrole',
    'xlink:arcrole': 'xlinkArcrole',
    xlinkhref: 'xlinkHref',
    'xlink:href': 'xlinkHref',
    xlinkrole: 'xlinkRole',
    'xlink:role': 'xlinkRole',
    xlinkshow: 'xlinkShow',
    'xlink:show': 'xlinkShow',
    xlinktitle: 'xlinkTitle',
    'xlink:title': 'xlinkTitle',
    xlinktype: 'xlinkType',
    'xlink:type': 'xlinkType',
    xmlbase: 'xmlBase',
    'xml:base': 'xmlBase',
    xmllang: 'xmlLang',
    'xml:lang': 'xmlLang',
    xmlns: 'xmlns',
    'xml:space': 'xmlSpace',
    xmlnsxlink: 'xmlnsXlink',
    'xmlns:xlink': 'xmlnsXlink',
    xmlspace: 'xmlSpace',
    y1: 'y1',
    y2: 'y2',
    y: 'y',
    ychannelselector: 'yChannelSelector',
    z: 'z',
    zoomandpan: 'zoomAndPan'
  };
  
  var ariaProperties = {
    'aria-current': 0, // state
    'aria-details': 0,
    'aria-disabled': 0, // state
    'aria-hidden': 0, // state
    'aria-invalid': 0, // state
    'aria-keyshortcuts': 0,
    'aria-label': 0,
    'aria-roledescription': 0,
    // Widget Attributes
    'aria-autocomplete': 0,
    'aria-checked': 0,
    'aria-expanded': 0,
    'aria-haspopup': 0,
    'aria-level': 0,
    'aria-modal': 0,
    'aria-multiline': 0,
    'aria-multiselectable': 0,
    'aria-orientation': 0,
    'aria-placeholder': 0,
    'aria-pressed': 0,
    'aria-readonly': 0,
    'aria-required': 0,
    'aria-selected': 0,
    'aria-sort': 0,
    'aria-valuemax': 0,
    'aria-valuemin': 0,
    'aria-valuenow': 0,
    'aria-valuetext': 0,
    // Live Region Attributes
    'aria-atomic': 0,
    'aria-busy': 0,
    'aria-live': 0,
    'aria-relevant': 0,
    // Drag-and-Drop Attributes
    'aria-dropeffect': 0,
    'aria-grabbed': 0,
    // Relationship Attributes
    'aria-activedescendant': 0,
    'aria-colcount': 0,
    'aria-colindex': 0,
    'aria-colspan': 0,
    'aria-controls': 0,
    'aria-describedby': 0,
    'aria-errormessage': 0,
    'aria-flowto': 0,
    'aria-labelledby': 0,
    'aria-owns': 0,
    'aria-posinset': 0,
    'aria-rowcount': 0,
    'aria-rowindex': 0,
    'aria-rowspan': 0,
    'aria-setsize': 0
  };
  
  var warnedProperties = {};
  var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
  
  var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
  
  function getStackAddendum() {
    var stack = ReactDebugCurrentFrame.getStackAddendum();
    return stack != null ? stack : '';
  }
  
  function validateProperty(tagName, name) {
    if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
      return true;
    }
  
    if (rARIACamel.test(name)) {
      var ariaName = 'aria-' + name.slice(4).toLowerCase();
      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
  
      // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.
      if (correctName == null) {
        warning(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.%s', name, getStackAddendum());
        warnedProperties[name] = true;
        return true;
      }
      // aria-* attributes should be lowercase; suggest the lowercase version.
      if (name !== correctName) {
        warning(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?%s', name, correctName, getStackAddendum());
        warnedProperties[name] = true;
        return true;
      }
    }
  
    if (rARIA.test(name)) {
      var lowerCasedName = name.toLowerCase();
      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
  
      // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.
      if (standardName == null) {
        warnedProperties[name] = true;
        return false;
      }
      // aria-* attributes should be lowercase; suggest the lowercase version.
      if (name !== standardName) {
        warning(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum());
        warnedProperties[name] = true;
        return true;
      }
    }
  
    return true;
  }
  
  function warnInvalidARIAProps(type, props) {
    var invalidProps = [];
  
    for (var key in props) {
      var isValid = validateProperty(type, key);
      if (!isValid) {
        invalidProps.push(key);
      }
    }
  
    var unknownPropString = invalidProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');
  
    if (invalidProps.length === 1) {
      warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum());
    } else if (invalidProps.length > 1) {
      warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum());
    }
  }
  
  function validateProperties(type, props) {
    if (isCustomComponent(type, props)) {
      return;
    }
    warnInvalidARIAProps(type, props);
  }
  
  var didWarnValueNull = false;
  
  function getStackAddendum$1() {
    var stack = ReactDebugCurrentFrame.getStackAddendum();
    return stack != null ? stack : '';
  }
  
  function validateProperties$1(type, props) {
    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
      return;
    }
  
    if (props != null && props.value === null && !didWarnValueNull) {
      didWarnValueNull = true;
      if (type === 'select' && props.multiple) {
        warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.%s', type, getStackAddendum$1());
      } else {
        warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', type, getStackAddendum$1());
      }
    }
  }
  
  function getStackAddendum$2() {
    var stack = ReactDebugCurrentFrame.getStackAddendum();
    return stack != null ? stack : '';
  }
  
  var validateProperty$1 = function () {};
  
  {
    var warnedProperties$1 = {};
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
  
    validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
      if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
        return true;
      }
  
      var lowerCasedName = name.toLowerCase();
      if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
        warning(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
        warnedProperties$1[name] = true;
        return true;
      }
  
      // We can't rely on the event system being injected on the server.
      if (canUseEventSystem) {
        if (registrationNameModules.hasOwnProperty(name)) {
          return true;
        }
        var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
        if (registrationName != null) {
          warning(false, 'Invalid event handler property `%s`. Did you mean `%s`?%s', name, registrationName, getStackAddendum$2());
          warnedProperties$1[name] = true;
          return true;
        }
        if (EVENT_NAME_REGEX.test(name)) {
          warning(false, 'Unknown event handler property `%s`. It will be ignored.%s', name, getStackAddendum$2());
          warnedProperties$1[name] = true;
          return true;
        }
      } else if (EVENT_NAME_REGEX.test(name)) {
        // If no event plugins have been injected, we are in a server environment.
        // So we can't tell if the event name is correct for sure, but we can filter
        // out known bad ones like `onclick`. We can't suggest a specific replacement though.
        if (INVALID_EVENT_NAME_REGEX.test(name)) {
          warning(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.%s', name, getStackAddendum$2());
        }
        warnedProperties$1[name] = true;
        return true;
      }
  
      // Let the ARIA attribute hook validate ARIA attributes
      if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
        return true;
      }
  
      if (lowerCasedName === 'innerhtml') {
        warning(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
        warnedProperties$1[name] = true;
        return true;
      }
  
      if (lowerCasedName === 'aria') {
        warning(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
        warnedProperties$1[name] = true;
        return true;
      }
  
      if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
        warning(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.%s', typeof value, getStackAddendum$2());
        warnedProperties$1[name] = true;
        return true;
      }
  
      if (typeof value === 'number' && isNaN(value)) {
        warning(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.%s', name, getStackAddendum$2());
        warnedProperties$1[name] = true;
        return true;
      }
  
      var propertyInfo = getPropertyInfo(name);
      var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
  
      // Known attributes should match the casing specified in the property config.
      if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
        var standardName = possibleStandardNames[lowerCasedName];
        if (standardName !== name) {
          warning(false, 'Invalid DOM property `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum$2());
          warnedProperties$1[name] = true;
          return true;
        }
      } else if (!isReserved && name !== lowerCasedName) {
        // Unknown attributes should have lowercase casing since that's how they
        // will be cased anyway with server rendering.
        warning(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.%s', name, lowerCasedName, getStackAddendum$2());
        warnedProperties$1[name] = true;
        return true;
      }
  
      if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
        if (value) {
          warning(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.%s', value, name, name, value, name, getStackAddendum$2());
        } else {
          warning(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.%s', value, name, name, value, name, name, name, getStackAddendum$2());
        }
        warnedProperties$1[name] = true;
        return true;
      }
  
      // Now that we've validated casing, do not validate
      // data types for reserved props
      if (isReserved) {
        return true;
      }
  
      // Warn when a known attribute is a bad type
      if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
        warnedProperties$1[name] = true;
        return false;
      }
  
      return true;
    };
  }
  
  var warnUnknownProperties = function (type, props, canUseEventSystem) {
    var unknownProps = [];
    for (var key in props) {
      var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
      if (!isValid) {
        unknownProps.push(key);
      }
    }
  
    var unknownPropString = unknownProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');
    if (unknownProps.length === 1) {
      warning(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2());
    } else if (unknownProps.length > 1) {
      warning(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2());
    }
  };
  
  function validateProperties$2(type, props, canUseEventSystem) {
    if (isCustomComponent(type, props)) {
      return;
    }
    warnUnknownProperties(type, props, canUseEventSystem);
  }
  
  // TODO: direct imports like some-package/src/* are bad. Fix me.
  var getCurrentFiberOwnerName$2 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
  var getCurrentFiberStackAddendum$2 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;
  
  var didWarnInvalidHydration = false;
  var didWarnShadyDOM = false;
  
  var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
  var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
  var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
  var AUTOFOCUS = 'autoFocus';
  var CHILDREN = 'children';
  var STYLE = 'style';
  var HTML = '__html';
  
  var HTML_NAMESPACE = Namespaces.html;
  
  
  var getStack = emptyFunction.thatReturns('');
  
  var warnedUnknownTags = void 0;
  var suppressHydrationWarning = void 0;
  
  var validatePropertiesInDevelopment = void 0;
  var warnForTextDifference = void 0;
  var warnForPropDifference = void 0;
  var warnForExtraAttributes = void 0;
  var warnForInvalidEventListener = void 0;
  
  var normalizeMarkupForTextOrAttribute = void 0;
  var normalizeHTML = void 0;
  
  {
    getStack = getCurrentFiberStackAddendum$2;
  
    warnedUnknownTags = {
      // Chrome is the only major browser not shipping <time>. But as of July
      // 2017 it intends to ship it due to widespread usage. We intentionally
      // *don't* warn for <time> even if it's unrecognized by Chrome because
      // it soon will be, and many apps have been using it anyway.
      time: true,
      // There are working polyfills for <dialog>. Let people use it.
      dialog: true
    };
  
    validatePropertiesInDevelopment = function (type, props) {
      validateProperties(type, props);
      validateProperties$1(type, props);
      validateProperties$2(type, props, /* canUseEventSystem */true);
    };
  
    // HTML parsing normalizes CR and CRLF to LF.
    // It also can turn \u0000 into \uFFFD inside attributes.
    // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
    // If we have a mismatch, it might be caused by that.
    // We will still patch up in this case but not fire the warning.
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
  
    normalizeMarkupForTextOrAttribute = function (markup) {
      var markupString = typeof markup === 'string' ? markup : '' + markup;
      return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
    };
  
    warnForTextDifference = function (serverText, clientText) {
      if (didWarnInvalidHydration) {
        return;
      }
      var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
      var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
      if (normalizedServerText === normalizedClientText) {
        return;
      }
      didWarnInvalidHydration = true;
      warning(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
    };
  
    warnForPropDifference = function (propName, serverValue, clientValue) {
      if (didWarnInvalidHydration) {
        return;
      }
      var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
      var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
      if (normalizedServerValue === normalizedClientValue) {
        return;
      }
      didWarnInvalidHydration = true;
      warning(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
  
    warnForExtraAttributes = function (attributeNames) {
      if (didWarnInvalidHydration) {
        return;
      }
      didWarnInvalidHydration = true;
      var names = [];
      attributeNames.forEach(function (name) {
        names.push(name);
      });
      warning(false, 'Extra attributes from the server: %s', names);
    };
  
    warnForInvalidEventListener = function (registrationName, listener) {
      if (listener === false) {
        warning(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.%s', registrationName, registrationName, registrationName, getCurrentFiberStackAddendum$2());
      } else {
        warning(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.%s', registrationName, typeof listener, getCurrentFiberStackAddendum$2());
      }
    };
  
    // Parse the HTML and read it back to normalize the HTML string so that it
    // can be used for comparison.
    normalizeHTML = function (parent, html) {
      // We could have created a separate document here to avoid
      // re-initializing custom elements if they exist. But this breaks
      // how <noscript> is being handled. So we use the same document.
      // See the discussion in https://github.com/facebook/react/pull/11157.
      var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
      testElement.innerHTML = html;
      return testElement.innerHTML;
    };
  }
  
  function ensureListeningTo(rootContainerElement, registrationName) {
    var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
    var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
    listenTo(registrationName, doc);
  }
  
  function getOwnerDocumentFromRootContainer(rootContainerElement) {
    return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
  }
  
  function trapClickOnNonInteractiveElement(node) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
    // Just set it using the onclick property so that we don't have to manage any
    // bookkeeping for it. Not sure if we need to clear it when the listener is
    // removed.
    // TODO: Only do this for the relevant Safaris maybe?
    node.onclick = emptyFunction;
  }
  
  function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
    for (var propKey in nextProps) {
      if (!nextProps.hasOwnProperty(propKey)) {
        continue;
      }
      var nextProp = nextProps[propKey];
      if (propKey === STYLE) {
        {
          if (nextProp) {
            // Freeze the next style object so that we can assume it won't be
            // mutated. We have already warned for this in the past.
            Object.freeze(nextProp);
          }
        }
        // Relies on `updateStylesByID` not mutating `styleUpdates`.
        setValueForStyles(domElement, nextProp, getStack);
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var nextHtml = nextProp ? nextProp[HTML] : undefined;
        if (nextHtml != null) {
          setInnerHTML(domElement, nextHtml);
        }
      } else if (propKey === CHILDREN) {
        if (typeof nextProp === 'string') {
          // Avoid setting initial textContent when the text is empty. In IE11 setting
          // textContent on a <textarea> will cause the placeholder to not
          // show within the <textarea> until it has been focused and blurred again.
          // https://github.com/facebook/react/issues/6731#issuecomment-254874553
          var canSetTextContent = tag !== 'textarea' || nextProp !== '';
          if (canSetTextContent) {
            setTextContent(domElement, nextProp);
          }
        } else if (typeof nextProp === 'number') {
          setTextContent(domElement, '' + nextProp);
        }
      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
        // Noop
      } else if (propKey === AUTOFOCUS) {
        // We polyfill it separately on the client during commit.
        // We blacklist it here rather than in the property list because we emit it in SSR.
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp != null) {
          if (true && typeof nextProp !== 'function') {
            warnForInvalidEventListener(propKey, nextProp);
          }
          ensureListeningTo(rootContainerElement, propKey);
        }
      } else if (nextProp != null) {
        setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
      }
    }
  }
  
  function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
    // TODO: Handle wasCustomComponentTag
    for (var i = 0; i < updatePayload.length; i += 2) {
      var propKey = updatePayload[i];
      var propValue = updatePayload[i + 1];
      if (propKey === STYLE) {
        setValueForStyles(domElement, propValue, getStack);
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        setInnerHTML(domElement, propValue);
      } else if (propKey === CHILDREN) {
        setTextContent(domElement, propValue);
      } else {
        setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
      }
    }
  }
  
  function createElement$1(type, props, rootContainerElement, parentNamespace) {
    var isCustomComponentTag = void 0;
  
    // We create tags in the namespace of their parent container, except HTML
    // tags get no namespace.
    var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
    var domElement = void 0;
    var namespaceURI = parentNamespace;
    if (namespaceURI === HTML_NAMESPACE) {
      namespaceURI = getIntrinsicNamespace(type);
    }
    if (namespaceURI === HTML_NAMESPACE) {
      {
        isCustomComponentTag = isCustomComponent(type, props);
        // Should this check be gated by parent namespace? Not sure we want to
        // allow <SVG> or <mATH>.
        !(isCustomComponentTag || type === type.toLowerCase()) ? warning(false, '<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type) : void 0;
      }
  
      if (type === 'script') {
        // Create the script via .innerHTML so its "parser-inserted" flag is
        // set to true and it does not execute
        var div = ownerDocument.createElement('div');
        div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
        // This is guaranteed to yield a script element.
        var firstChild = div.firstChild;
        domElement = div.removeChild(firstChild);
      } else if (typeof props.is === 'string') {
        // $FlowIssue `createElement` should be updated for Web Components
        domElement = ownerDocument.createElement(type, { is: props.is });
      } else {
        // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
        // See discussion in https://github.com/facebook/react/pull/6896
        // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
        domElement = ownerDocument.createElement(type);
      }
    } else {
      domElement = ownerDocument.createElementNS(namespaceURI, type);
    }
  
    {
      if (namespaceURI === HTML_NAMESPACE) {
        if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
          warnedUnknownTags[type] = true;
          warning(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
        }
      }
    }
  
    return domElement;
  }
  
  function createTextNode$1(text, rootContainerElement) {
    return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
  }
  
  function setInitialProperties$1(domElement, tag, rawProps, rootContainerElement) {
    var isCustomComponentTag = isCustomComponent(tag, rawProps);
    {
      validatePropertiesInDevelopment(tag, rawProps);
      if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
        warning(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName$2() || 'A component');
        didWarnShadyDOM = true;
      }
    }
  
    // TODO: Make sure that we check isMounted before firing any of these events.
    var props = void 0;
    switch (tag) {
      case 'iframe':
      case 'object':
        trapBubbledEvent(TOP_LOAD, domElement);
        props = rawProps;
        break;
      case 'video':
      case 'audio':
        // Create listener for each media event
        for (var i = 0; i < mediaEventTypes.length; i++) {
          trapBubbledEvent(mediaEventTypes[i], domElement);
        }
        props = rawProps;
        break;
      case 'source':
        trapBubbledEvent(TOP_ERROR, domElement);
        props = rawProps;
        break;
      case 'img':
      case 'image':
      case 'link':
        trapBubbledEvent(TOP_ERROR, domElement);
        trapBubbledEvent(TOP_LOAD, domElement);
        props = rawProps;
        break;
      case 'form':
        trapBubbledEvent(TOP_RESET, domElement);
        trapBubbledEvent(TOP_SUBMIT, domElement);
        props = rawProps;
        break;
      case 'details':
        trapBubbledEvent(TOP_TOGGLE, domElement);
        props = rawProps;
        break;
      case 'input':
        initWrapperState(domElement, rawProps);
        props = getHostProps(domElement, rawProps);
        trapBubbledEvent(TOP_INVALID, domElement);
        // For controlled components we always need to ensure we're listening
        // to onChange. Even if there is no listener.
        ensureListeningTo(rootContainerElement, 'onChange');
        break;
      case 'option':
        validateProps(domElement, rawProps);
        props = getHostProps$1(domElement, rawProps);
        break;
      case 'select':
        initWrapperState$1(domElement, rawProps);
        props = getHostProps$2(domElement, rawProps);
        trapBubbledEvent(TOP_INVALID, domElement);
        // For controlled components we always need to ensure we're listening
        // to onChange. Even if there is no listener.
        ensureListeningTo(rootContainerElement, 'onChange');
        break;
      case 'textarea':
        initWrapperState$2(domElement, rawProps);
        props = getHostProps$3(domElement, rawProps);
        trapBubbledEvent(TOP_INVALID, domElement);
        // For controlled components we always need to ensure we're listening
        // to onChange. Even if there is no listener.
        ensureListeningTo(rootContainerElement, 'onChange');
        break;
      default:
        props = rawProps;
    }
  
    assertValidProps(tag, props, getStack);
  
    setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
  
    switch (tag) {
      case 'input':
        // TODO: Make sure we check if this is still unmounted or do any clean
        // up necessary since we never stop tracking anymore.
        track(domElement);
        postMountWrapper(domElement, rawProps, false);
        break;
      case 'textarea':
        // TODO: Make sure we check if this is still unmounted or do any clean
        // up necessary since we never stop tracking anymore.
        track(domElement);
        postMountWrapper$3(domElement, rawProps);
        break;
      case 'option':
        postMountWrapper$1(domElement, rawProps);
        break;
      case 'select':
        postMountWrapper$2(domElement, rawProps);
        break;
      default:
        if (typeof props.onClick === 'function') {
          // TODO: This cast may not be sound for SVG, MathML or custom elements.
          trapClickOnNonInteractiveElement(domElement);
        }
        break;
    }
  }
  
  // Calculate the diff between the two objects.
  function diffProperties$1(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
    {
      validatePropertiesInDevelopment(tag, nextRawProps);
    }
  
    var updatePayload = null;
  
    var lastProps = void 0;
    var nextProps = void 0;
    switch (tag) {
      case 'input':
        lastProps = getHostProps(domElement, lastRawProps);
        nextProps = getHostProps(domElement, nextRawProps);
        updatePayload = [];
        break;
      case 'option':
        lastProps = getHostProps$1(domElement, lastRawProps);
        nextProps = getHostProps$1(domElement, nextRawProps);
        updatePayload = [];
        break;
      case 'select':
        lastProps = getHostProps$2(domElement, lastRawProps);
        nextProps = getHostProps$2(domElement, nextRawProps);
        updatePayload = [];
        break;
      case 'textarea':
        lastProps = getHostProps$3(domElement, lastRawProps);
        nextProps = getHostProps$3(domElement, nextRawProps);
        updatePayload = [];
        break;
      default:
        lastProps = lastRawProps;
        nextProps = nextRawProps;
        if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
          // TODO: This cast may not be sound for SVG, MathML or custom elements.
          trapClickOnNonInteractiveElement(domElement);
        }
        break;
    }
  
    assertValidProps(tag, nextProps, getStack);
  
    var propKey = void 0;
    var styleName = void 0;
    var styleUpdates = null;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            if (!styleUpdates) {
              styleUpdates = {};
            }
            styleUpdates[styleName] = '';
          }
        }
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {
        // Noop. This is handled by the clear text mechanism.
      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
        // Noop
      } else if (propKey === AUTOFOCUS) {
        // Noop. It doesn't work on updates anyway.
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" fiber pointer gets updated so we need a commit
        // to update this element.
        if (!updatePayload) {
          updatePayload = [];
        }
      } else {
        // For all other deleted properties we add it to the queue. We use
        // the whitelist in the commit phase instead.
        (updatePayload = updatePayload || []).push(propKey, null);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps != null ? lastProps[propKey] : undefined;
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
        continue;
      }
      if (propKey === STYLE) {
        {
          if (nextProp) {
            // Freeze the next style object so that we can assume it won't be
            // mutated. We have already warned for this in the past.
            Object.freeze(nextProp);
          }
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              if (!styleUpdates) {
                styleUpdates = {};
              }
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              if (!styleUpdates) {
                styleUpdates = {};
              }
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          if (!styleUpdates) {
            if (!updatePayload) {
              updatePayload = [];
            }
            updatePayload.push(propKey, styleUpdates);
          }
          styleUpdates = nextProp;
        }
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var nextHtml = nextProp ? nextProp[HTML] : undefined;
        var lastHtml = lastProp ? lastProp[HTML] : undefined;
        if (nextHtml != null) {
          if (lastHtml !== nextHtml) {
            (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
          }
        } else {
          // TODO: It might be too late to clear this if we have children
          // inserted already.
        }
      } else if (propKey === CHILDREN) {
        if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
          (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
        }
      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
        // Noop
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp != null) {
          // We eagerly listen to this even though we haven't committed yet.
          if (true && typeof nextProp !== 'function') {
            warnForInvalidEventListener(propKey, nextProp);
          }
          ensureListeningTo(rootContainerElement, propKey);
        }
        if (!updatePayload && lastProp !== nextProp) {
          // This is a special case. If any listener updates we need to ensure
          // that the "current" props pointer gets updated so we need a commit
          // to update this element.
          updatePayload = [];
        }
      } else {
        // For any other property we always add it to the queue and then we
        // filter it out using the whitelist during the commit.
        (updatePayload = updatePayload || []).push(propKey, nextProp);
      }
    }
    if (styleUpdates) {
      (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
    }
    return updatePayload;
  }
  
  // Apply the diff.
  function updateProperties$1(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
    // Update checked *before* name.
    // In the middle of an update, it is possible to have multiple checked.
    // When a checked radio tries to change name, browser makes another radio's checked false.
    if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
      updateChecked(domElement, nextRawProps);
    }
  
    var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
    var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
    // Apply the diff.
    updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
  
    // TODO: Ensure that an update gets scheduled if any of the special props
    // changed.
    switch (tag) {
      case 'input':
        // Update the wrapper around inputs *after* updating props. This has to
        // happen after `updateDOMProperties`. Otherwise HTML5 input validations
        // raise warnings and prevent the new value from being assigned.
        updateWrapper(domElement, nextRawProps);
        break;
      case 'textarea':
        updateWrapper$1(domElement, nextRawProps);
        break;
      case 'select':
        // <select> value update needs to occur after <option> children
        // reconciliation
        postUpdateWrapper(domElement, nextRawProps);
        break;
    }
  }
  
  function getPossibleStandardName(propName) {
    {
      var lowerCasedName = propName.toLowerCase();
      if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
        return null;
      }
      return possibleStandardNames[lowerCasedName] || null;
    }
    return null;
  }
  
  function diffHydratedProperties$1(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
    var isCustomComponentTag = void 0;
    var extraAttributeNames = void 0;
  
    {
      suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
      isCustomComponentTag = isCustomComponent(tag, rawProps);
      validatePropertiesInDevelopment(tag, rawProps);
      if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
        warning(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName$2() || 'A component');
        didWarnShadyDOM = true;
      }
    }
  
    // TODO: Make sure that we check isMounted before firing any of these events.
    switch (tag) {
      case 'iframe':
      case 'object':
        trapBubbledEvent(TOP_LOAD, domElement);
        break;
      case 'video':
      case 'audio':
        // Create listener for each media event
        for (var i = 0; i < mediaEventTypes.length; i++) {
          trapBubbledEvent(mediaEventTypes[i], domElement);
        }
        break;
      case 'source':
        trapBubbledEvent(TOP_ERROR, domElement);
        break;
      case 'img':
      case 'image':
      case 'link':
        trapBubbledEvent(TOP_ERROR, domElement);
        trapBubbledEvent(TOP_LOAD, domElement);
        break;
      case 'form':
        trapBubbledEvent(TOP_RESET, domElement);
        trapBubbledEvent(TOP_SUBMIT, domElement);
        break;
      case 'details':
        trapBubbledEvent(TOP_TOGGLE, domElement);
        break;
      case 'input':
        initWrapperState(domElement, rawProps);
        trapBubbledEvent(TOP_INVALID, domElement);
        // For controlled components we always need to ensure we're listening
        // to onChange. Even if there is no listener.
        ensureListeningTo(rootContainerElement, 'onChange');
        break;
      case 'option':
        validateProps(domElement, rawProps);
        break;
      case 'select':
        initWrapperState$1(domElement, rawProps);
        trapBubbledEvent(TOP_INVALID, domElement);
        // For controlled components we always need to ensure we're listening
        // to onChange. Even if there is no listener.
        ensureListeningTo(rootContainerElement, 'onChange');
        break;
      case 'textarea':
        initWrapperState$2(domElement, rawProps);
        trapBubbledEvent(TOP_INVALID, domElement);
        // For controlled components we always need to ensure we're listening
        // to onChange. Even if there is no listener.
        ensureListeningTo(rootContainerElement, 'onChange');
        break;
    }
  
    assertValidProps(tag, rawProps, getStack);
  
    {
      extraAttributeNames = new Set();
      var attributes = domElement.attributes;
      for (var _i = 0; _i < attributes.length; _i++) {
        var name = attributes[_i].name.toLowerCase();
        switch (name) {
          // Built-in SSR attribute is whitelisted
          case 'data-reactroot':
            break;
          // Controlled attributes are not validated
          // TODO: Only ignore them on controlled tags.
          case 'value':
            break;
          case 'checked':
            break;
          case 'selected':
            break;
          default:
            // Intentionally use the original name.
            // See discussion in https://github.com/facebook/react/pull/10676.
            extraAttributeNames.add(attributes[_i].name);
        }
      }
    }
  
    var updatePayload = null;
    for (var propKey in rawProps) {
      if (!rawProps.hasOwnProperty(propKey)) {
        continue;
      }
      var nextProp = rawProps[propKey];
      if (propKey === CHILDREN) {
        // For text content children we compare against textContent. This
        // might match additional HTML that is hidden when we read it using
        // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
        // satisfies our requirement. Our requirement is not to produce perfect
        // HTML and attributes. Ideally we should preserve structure but it's
        // ok not to if the visible content is still enough to indicate what
        // even listeners these nodes might be wired up to.
        // TODO: Warn if there is more than a single textNode as a child.
        // TODO: Should we use domElement.firstChild.nodeValue to compare?
        if (typeof nextProp === 'string') {
          if (domElement.textContent !== nextProp) {
            if (true && !suppressHydrationWarning) {
              warnForTextDifference(domElement.textContent, nextProp);
            }
            updatePayload = [CHILDREN, nextProp];
          }
        } else if (typeof nextProp === 'number') {
          if (domElement.textContent !== '' + nextProp) {
            if (true && !suppressHydrationWarning) {
              warnForTextDifference(domElement.textContent, nextProp);
            }
            updatePayload = [CHILDREN, '' + nextProp];
          }
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp != null) {
          if (true && typeof nextProp !== 'function') {
            warnForInvalidEventListener(propKey, nextProp);
          }
          ensureListeningTo(rootContainerElement, propKey);
        }
      } else if (true &&
      // Convince Flow we've calculated it (it's DEV-only in this method.)
      typeof isCustomComponentTag === 'boolean') {
        // Validate that the properties correspond to their expected values.
        var serverValue = void 0;
        var propertyInfo = getPropertyInfo(propKey);
        if (suppressHydrationWarning) {
          // Don't bother comparing. We're ignoring all these warnings.
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 ||
        // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.
        propKey === 'value' || propKey === 'checked' || propKey === 'selected') {
          // Noop
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var rawHtml = nextProp ? nextProp[HTML] || '' : '';
          var serverHTML = domElement.innerHTML;
          var expectedHTML = normalizeHTML(domElement, rawHtml);
          if (expectedHTML !== serverHTML) {
            warnForPropDifference(propKey, serverHTML, expectedHTML);
          }
        } else if (propKey === STYLE) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames.delete(propKey);
          var expectedStyle = createDangerousStringForStyles(nextProp);
          serverValue = domElement.getAttribute('style');
          if (expectedStyle !== serverValue) {
            warnForPropDifference(propKey, serverValue, expectedStyle);
          }
        } else if (isCustomComponentTag) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames.delete(propKey.toLowerCase());
          serverValue = getValueForAttribute(domElement, propKey, nextProp);
  
          if (nextProp !== serverValue) {
            warnForPropDifference(propKey, serverValue, nextProp);
          }
        } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
          var isMismatchDueToBadCasing = false;
          if (propertyInfo !== null) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propertyInfo.attributeName);
            serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
          } else {
            var ownNamespace = parentNamespace;
            if (ownNamespace === HTML_NAMESPACE) {
              ownNamespace = getIntrinsicNamespace(tag);
            }
            if (ownNamespace === HTML_NAMESPACE) {
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames.delete(propKey.toLowerCase());
            } else {
              var standardName = getPossibleStandardName(propKey);
              if (standardName !== null && standardName !== propKey) {
                // If an SVG prop is supplied with bad casing, it will
                // be successfully parsed from HTML, but will produce a mismatch
                // (and would be incorrectly rendered on the client).
                // However, we already warn about bad casing elsewhere.
                // So we'll skip the misleading extra mismatch warning in this case.
                isMismatchDueToBadCasing = true;
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.delete(standardName);
              }
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames.delete(propKey);
            }
            serverValue = getValueForAttribute(domElement, propKey, nextProp);
          }
  
          if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
            warnForPropDifference(propKey, serverValue, nextProp);
          }
        }
      }
    }
  
    {
      // $FlowFixMe - Should be inferred as not undefined.
      if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
        // $FlowFixMe - Should be inferred as not undefined.
        warnForExtraAttributes(extraAttributeNames);
      }
    }
  
    switch (tag) {
      case 'input':
        // TODO: Make sure we check if this is still unmounted or do any clean
        // up necessary since we never stop tracking anymore.
        track(domElement);
        postMountWrapper(domElement, rawProps, true);
        break;
      case 'textarea':
        // TODO: Make sure we check if this is still unmounted or do any clean
        // up necessary since we never stop tracking anymore.
        track(domElement);
        postMountWrapper$3(domElement, rawProps);
        break;
      case 'select':
      case 'option':
        // For input and textarea we current always set the value property at
        // post mount to force it to diverge from attributes. However, for
        // option and select we don't quite do the same thing and select
        // is not resilient to the DOM state changing so we don't do that here.
        // TODO: Consider not doing this for input and textarea.
        break;
      default:
        if (typeof rawProps.onClick === 'function') {
          // TODO: This cast may not be sound for SVG, MathML or custom elements.
          trapClickOnNonInteractiveElement(domElement);
        }
        break;
    }
  
    return updatePayload;
  }
  
  function diffHydratedText$1(textNode, text) {
    var isDifferent = textNode.nodeValue !== text;
    return isDifferent;
  }
  
  function warnForUnmatchedText$1(textNode, text) {
    {
      warnForTextDifference(textNode.nodeValue, text);
    }
  }
  
  function warnForDeletedHydratableElement$1(parentNode, child) {
    {
      if (didWarnInvalidHydration) {
        return;
      }
      didWarnInvalidHydration = true;
      warning(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
  }
  
  function warnForDeletedHydratableText$1(parentNode, child) {
    {
      if (didWarnInvalidHydration) {
        return;
      }
      didWarnInvalidHydration = true;
      warning(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
  }
  
  function warnForInsertedHydratedElement$1(parentNode, tag, props) {
    {
      if (didWarnInvalidHydration) {
        return;
      }
      didWarnInvalidHydration = true;
      warning(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
    }
  }
  
  function warnForInsertedHydratedText$1(parentNode, text) {
    {
      if (text === '') {
        // We expect to insert empty text nodes since they're not represented in
        // the HTML.
        // TODO: Remove this special case if we can just avoid inserting empty
        // text nodes.
        return;
      }
      if (didWarnInvalidHydration) {
        return;
      }
      didWarnInvalidHydration = true;
      warning(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
  }
  
  function restoreControlledState$1(domElement, tag, props) {
    switch (tag) {
      case 'input':
        restoreControlledState(domElement, props);
        return;
      case 'textarea':
        restoreControlledState$3(domElement, props);
        return;
      case 'select':
        restoreControlledState$2(domElement, props);
        return;
    }
  }
  
  var ReactDOMFiberComponent = Object.freeze({
    createElement: createElement$1,
    createTextNode: createTextNode$1,
    setInitialProperties: setInitialProperties$1,
    diffProperties: diffProperties$1,
    updateProperties: updateProperties$1,
    diffHydratedProperties: diffHydratedProperties$1,
    diffHydratedText: diffHydratedText$1,
    warnForUnmatchedText: warnForUnmatchedText$1,
    warnForDeletedHydratableElement: warnForDeletedHydratableElement$1,
    warnForDeletedHydratableText: warnForDeletedHydratableText$1,
    warnForInsertedHydratedElement: warnForInsertedHydratedElement$1,
    warnForInsertedHydratedText: warnForInsertedHydratedText$1,
    restoreControlledState: restoreControlledState$1
  });
  
  // TODO: direct imports like some-package/src/* are bad. Fix me.
  var getCurrentFiberStackAddendum$5 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;
  
  var validateDOMNesting = emptyFunction;
  
  {
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
  
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
  
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
  
    // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
    // TODO: Distinguish by namespace here -- for <title>, including it here
    // errs on the side of fewer warnings
    'foreignObject', 'desc', 'title'];
  
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat(['button']);
  
    // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
  
    var emptyAncestorInfo = {
      current: null,
  
      formTag: null,
      aTagInScope: null,
      buttonTagInScope: null,
      nobrTagInScope: null,
      pTagInButtonScope: null,
  
      listItemTagAutoclosing: null,
      dlItemTagAutoclosing: null
    };
  
    var updatedAncestorInfo$1 = function (oldInfo, tag, instance) {
      var ancestorInfo = _assign$$1({}, oldInfo || emptyAncestorInfo);
      var info = { tag: tag, instance: instance };
  
      if (inScopeTags.indexOf(tag) !== -1) {
        ancestorInfo.aTagInScope = null;
        ancestorInfo.buttonTagInScope = null;
        ancestorInfo.nobrTagInScope = null;
      }
      if (buttonScopeTags.indexOf(tag) !== -1) {
        ancestorInfo.pTagInButtonScope = null;
      }
  
      // See rules for 'li', 'dd', 'dt' start tags in
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
      if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
        ancestorInfo.listItemTagAutoclosing = null;
        ancestorInfo.dlItemTagAutoclosing = null;
      }
  
      ancestorInfo.current = info;
  
      if (tag === 'form') {
        ancestorInfo.formTag = info;
      }
      if (tag === 'a') {
        ancestorInfo.aTagInScope = info;
      }
      if (tag === 'button') {
        ancestorInfo.buttonTagInScope = info;
      }
      if (tag === 'nobr') {
        ancestorInfo.nobrTagInScope = info;
      }
      if (tag === 'p') {
        ancestorInfo.pTagInButtonScope = info;
      }
      if (tag === 'li') {
        ancestorInfo.listItemTagAutoclosing = info;
      }
      if (tag === 'dd' || tag === 'dt') {
        ancestorInfo.dlItemTagAutoclosing = info;
      }
  
      return ancestorInfo;
    };
  
    /**
     * Returns whether
     */
    var isTagValidWithParent = function (tag, parentTag) {
      // First, let's check if we're in an unusual parsing mode...
      switch (parentTag) {
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
        case 'select':
          return tag === 'option' || tag === 'optgroup' || tag === '#text';
        case 'optgroup':
          return tag === 'option' || tag === '#text';
        // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
        // but
        case 'option':
          return tag === '#text';
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
        // No special behavior since these rules fall back to "in body" mode for
        // all except special table nodes which cause bad parsing behavior anyway.
  
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
        case 'tr':
          return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
        case 'tbody':
        case 'thead':
        case 'tfoot':
          return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
        case 'colgroup':
          return tag === 'col' || tag === 'template';
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
        case 'table':
          return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
        case 'head':
          return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
        // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
        case 'html':
          return tag === 'head' || tag === 'body';
        case '#document':
          return tag === 'html';
      }
  
      // Probably in the "in body" parsing mode, so we outlaw only tag combos
      // where the parsing rules cause implicit opens or closes to be added.
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
      switch (tag) {
        case 'h1':
        case 'h2':
        case 'h3':
        case 'h4':
        case 'h5':
        case 'h6':
          return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
  
        case 'rp':
        case 'rt':
          return impliedEndTags.indexOf(parentTag) === -1;
  
        case 'body':
        case 'caption':
        case 'col':
        case 'colgroup':
        case 'frame':
        case 'head':
        case 'html':
        case 'tbody':
        case 'td':
        case 'tfoot':
        case 'th':
        case 'thead':
        case 'tr':
          // These tags are only valid with a few parents that have special child
          // parsing rules -- if we're down here, then none of those matched and
          // so we allow it only if we don't know what the parent is, as all other
          // cases are invalid.
          return parentTag == null;
      }
  
      return true;
    };
  
    /**
     * Returns whether
     */
    var findInvalidAncestorForTag = function (tag, ancestorInfo) {
      switch (tag) {
        case 'address':
        case 'article':
        case 'aside':
        case 'blockquote':
        case 'center':
        case 'details':
        case 'dialog':
        case 'dir':
        case 'div':
        case 'dl':
        case 'fieldset':
        case 'figcaption':
        case 'figure':
        case 'footer':
        case 'header':
        case 'hgroup':
        case 'main':
        case 'menu':
        case 'nav':
        case 'ol':
        case 'p':
        case 'section':
        case 'summary':
        case 'ul':
        case 'pre':
        case 'listing':
        case 'table':
        case 'hr':
        case 'xmp':
        case 'h1':
        case 'h2':
        case 'h3':
        case 'h4':
        case 'h5':
        case 'h6':
          return ancestorInfo.pTagInButtonScope;
  
        case 'form':
          return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
  
        case 'li':
          return ancestorInfo.listItemTagAutoclosing;
  
        case 'dd':
        case 'dt':
          return ancestorInfo.dlItemTagAutoclosing;
  
        case 'button':
          return ancestorInfo.buttonTagInScope;
  
        case 'a':
          // Spec says something about storing a list of markers, but it sounds
          // equivalent to this check.
          return ancestorInfo.aTagInScope;
  
        case 'nobr':
          return ancestorInfo.nobrTagInScope;
      }
  
      return null;
    };
  
    var didWarn = {};
  
    validateDOMNesting = function (childTag, childText, ancestorInfo) {
      ancestorInfo = ancestorInfo || emptyAncestorInfo;
      var parentInfo = ancestorInfo.current;
      var parentTag = parentInfo && parentInfo.tag;
  
      if (childText != null) {
        !(childTag == null) ? warning(false, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
        childTag = '#text';
      }
  
      var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
      var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
      var invalidParentOrAncestor = invalidParent || invalidAncestor;
      if (!invalidParentOrAncestor) {
        return;
      }
  
      var ancestorTag = invalidParentOrAncestor.tag;
      var addendum = getCurrentFiberStackAddendum$5();
  
      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;
  
      var tagDisplayName = childTag;
      var whitespaceInfo = '';
      if (childTag === '#text') {
        if (/\S/.test(childText)) {
          tagDisplayName = 'Text nodes';
        } else {
          tagDisplayName = 'Whitespace text nodes';
          whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
        }
      } else {
        tagDisplayName = '<' + childTag + '>';
      }
  
      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
      } else {
        warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
      }
    };
  
    // TODO: turn this into a named export
    validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo$1;
  }
  
  var validateDOMNesting$1 = validateDOMNesting;
  
  // Renderers that don't support persistence
  // can re-export everything from this module.
  
  function shim() {
    invariant(false, 'The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.');
  }
  
  // Persistence (when unsupported)
  var supportsPersistence = false;
  var cloneInstance = shim;
  var createContainerChildSet = shim;
  var appendChildToContainerChildSet = shim;
  var finalizeContainerChildren = shim;
  var replaceContainerChildren = shim;
  
  // Unused
  
  var createElement = createElement$1;
  var createTextNode = createTextNode$1;
  var setInitialProperties = setInitialProperties$1;
  var diffProperties = diffProperties$1;
  var updateProperties = updateProperties$1;
  var diffHydratedProperties = diffHydratedProperties$1;
  var diffHydratedText = diffHydratedText$1;
  var warnForUnmatchedText = warnForUnmatchedText$1;
  var warnForDeletedHydratableElement = warnForDeletedHydratableElement$1;
  var warnForDeletedHydratableText = warnForDeletedHydratableText$1;
  var warnForInsertedHydratedElement = warnForInsertedHydratedElement$1;
  var warnForInsertedHydratedText = warnForInsertedHydratedText$1;
  var updatedAncestorInfo = validateDOMNesting$1.updatedAncestorInfo;
  var precacheFiberNode$1 = precacheFiberNode;
  var updateFiberProps$1 = updateFiberProps;
  
  
  var SUPPRESS_HYDRATION_WARNING = void 0;
  {
    SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
  }
  
  var eventsEnabled = null;
  var selectionInformation = null;
  
  function shouldAutoFocusHostComponent(type, props) {
    switch (type) {
      case 'button':
      case 'input':
      case 'select':
      case 'textarea':
        return !!props.autoFocus;
    }
    return false;
  }
  
  function getRootHostContext(rootContainerInstance) {
    var type = void 0;
    var namespace = void 0;
    var nodeType = rootContainerInstance.nodeType;
    switch (nodeType) {
      case DOCUMENT_NODE:
      case DOCUMENT_FRAGMENT_NODE:
        {
          type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
          var root = rootContainerInstance.documentElement;
          namespace = root ? root.namespaceURI : getChildNamespace(null, '');
          break;
        }
      default:
        {
          var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
          var ownNamespace = container.namespaceURI || null;
          type = container.tagName;
          namespace = getChildNamespace(ownNamespace, type);
          break;
        }
    }
    {
      var validatedTag = type.toLowerCase();
      var _ancestorInfo = updatedAncestorInfo(null, validatedTag, null);
      return { namespace: namespace, ancestorInfo: _ancestorInfo };
    }
    return namespace;
  }
  
  function getChildHostContext(parentHostContext, type, rootContainerInstance) {
    {
      var parentHostContextDev = parentHostContext;
      var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
      var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type, null);
      return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };
    }
    var parentNamespace = parentHostContext;
    return getChildNamespace(parentNamespace, type);
  }
  
  function getPublicInstance(instance) {
    return instance;
  }
  
  function prepareForCommit(containerInfo) {
    eventsEnabled = isEnabled();
    selectionInformation = getSelectionInformation();
    setEnabled(false);
  }
  
  function resetAfterCommit(containerInfo) {
    restoreSelection(selectionInformation);
    selectionInformation = null;
    setEnabled(eventsEnabled);
    eventsEnabled = null;
  }
  
  function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
    var parentNamespace = void 0;
    {
      // TODO: take namespace into account when validating.
      var hostContextDev = hostContext;
      validateDOMNesting$1(type, null, hostContextDev.ancestorInfo);
      if (typeof props.children === 'string' || typeof props.children === 'number') {
        var string = '' + props.children;
        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
        validateDOMNesting$1(null, string, ownAncestorInfo);
      }
      parentNamespace = hostContextDev.namespace;
    }
    var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
    precacheFiberNode$1(internalInstanceHandle, domElement);
    updateFiberProps$1(domElement, props);
    return domElement;
  }
  
  function appendInitialChild(parentInstance, child) {
    parentInstance.appendChild(child);
  }
  
  function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
    setInitialProperties(domElement, type, props, rootContainerInstance);
    return shouldAutoFocusHostComponent(type, props);
  }
  
  function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
    {
      var hostContextDev = hostContext;
      if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
        var string = '' + newProps.children;
        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
        validateDOMNesting$1(null, string, ownAncestorInfo);
      }
    }
    return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
  }
  
  function shouldSetTextContent(type, props) {
    return type === 'textarea' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && typeof props.dangerouslySetInnerHTML.__html === 'string';
  }
  
  function shouldDeprioritizeSubtree(type, props) {
    return !!props.hidden;
  }
  
  function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
    {
      var hostContextDev = hostContext;
      validateDOMNesting$1(null, text, hostContextDev.ancestorInfo);
    }
    var textNode = createTextNode(text, rootContainerInstance);
    precacheFiberNode$1(internalInstanceHandle, textNode);
    return textNode;
  }
  
  var now = now$1;
  var isPrimaryRenderer = true;
  var scheduleDeferredCallback = scheduleWork;
  var cancelDeferredCallback = cancelScheduledWork;
  
  // -------------------
  //     Mutation
  // -------------------
  
  var supportsMutation = true;
  
  function commitMount(domElement, type, newProps, internalInstanceHandle) {
    // Despite the naming that might imply otherwise, this method only
    // fires if there is an `Update` effect scheduled during mounting.
    // This happens if `finalizeInitialChildren` returns `true` (which it
    // does to implement the `autoFocus` attribute on the client). But
    // there are also other cases when this might happen (such as patching
    // up text content during hydration mismatch). So we'll check this again.
    if (shouldAutoFocusHostComponent(type, newProps)) {
      domElement.focus();
    }
  }
  
  function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
    // Update the props handle so that we know which props are the ones with
    // with current event handlers.
    updateFiberProps$1(domElement, newProps);
    // Apply the diff to the DOM node.
    updateProperties(domElement, updatePayload, type, oldProps, newProps);
  }
  
  function resetTextContent(domElement) {
    setTextContent(domElement, '');
  }
  
  function commitTextUpdate(textInstance, oldText, newText) {
    textInstance.nodeValue = newText;
  }
  
  function appendChild(parentInstance, child) {
    parentInstance.appendChild(child);
  }
  
  function appendChildToContainer(container, child) {
    if (container.nodeType === COMMENT_NODE) {
      container.parentNode.insertBefore(child, container);
    } else {
      container.appendChild(child);
    }
  }
  
  function insertBefore(parentInstance, child, beforeChild) {
    parentInstance.insertBefore(child, beforeChild);
  }
  
  function insertInContainerBefore(container, child, beforeChild) {
    if (container.nodeType === COMMENT_NODE) {
      container.parentNode.insertBefore(child, beforeChild);
    } else {
      container.insertBefore(child, beforeChild);
    }
  }
  
  function removeChild(parentInstance, child) {
    parentInstance.removeChild(child);
  }
  
  function removeChildFromContainer(container, child) {
    if (container.nodeType === COMMENT_NODE) {
      container.parentNode.removeChild(child);
    } else {
      container.removeChild(child);
    }
  }
  
  // -------------------
  //     Hydration
  // -------------------
  
  var supportsHydration = true;
  
  function canHydrateInstance(instance, type, props) {
    if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
      return null;
    }
    // This has now been refined to an element node.
    return instance;
  }
  
  function canHydrateTextInstance(instance, text) {
    if (text === '' || instance.nodeType !== TEXT_NODE) {
      // Empty strings are not parsed by HTML so there won't be a correct match here.
      return null;
    }
    // This has now been refined to a text node.
    return instance;
  }
  
  function getNextHydratableSibling(instance) {
    var node = instance.nextSibling;
    // Skip non-hydratable nodes.
    while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE) {
      node = node.nextSibling;
    }
    return node;
  }
  
  function getFirstHydratableChild(parentInstance) {
    var next = parentInstance.firstChild;
    // Skip non-hydratable nodes.
    while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE) {
      next = next.nextSibling;
    }
    return next;
  }
  
  function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
    precacheFiberNode$1(internalInstanceHandle, instance);
    // TODO: Possibly defer this until the commit phase where all the events
    // get attached.
    updateFiberProps$1(instance, props);
    var parentNamespace = void 0;
    {
      var hostContextDev = hostContext;
      parentNamespace = hostContextDev.namespace;
    }
    return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
  }
  
  function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
    precacheFiberNode$1(internalInstanceHandle, textInstance);
    return diffHydratedText(textInstance, text);
  }
  
  function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
    {
      warnForUnmatchedText(textInstance, text);
    }
  }
  
  function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
    if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
      warnForUnmatchedText(textInstance, text);
    }
  }
  
  function didNotHydrateContainerInstance(parentContainer, instance) {
    {
      if (instance.nodeType === 1) {
        warnForDeletedHydratableElement(parentContainer, instance);
      } else {
        warnForDeletedHydratableText(parentContainer, instance);
      }
    }
  }
  
  function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
    if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
      if (instance.nodeType === 1) {
        warnForDeletedHydratableElement(parentInstance, instance);
      } else {
        warnForDeletedHydratableText(parentInstance, instance);
      }
    }
  }
  
  function didNotFindHydratableContainerInstance(parentContainer, type, props) {
    {
      warnForInsertedHydratedElement(parentContainer, type, props);
    }
  }
  
  function didNotFindHydratableContainerTextInstance(parentContainer, text) {
    {
      warnForInsertedHydratedText(parentContainer, text);
    }
  }
  
  function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
    if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
      warnForInsertedHydratedElement(parentInstance, type, props);
    }
  }
  
  function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
    if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
      warnForInsertedHydratedText(parentInstance, text);
    }
  }
  
  // Exports ReactDOM.createRoot
  var enableUserTimingAPI = true;
  
  // Experimental error-boundary API that can recover from errors within a single
  // render phase
  var enableGetDerivedStateFromCatch = false;
  // Suspense
  var enableSuspense = false;
  // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
  var debugRenderPhaseSideEffects = false;
  
  // In some cases, StrictMode should also double-render lifecycles.
  // This can be confusing for tests though,
  // And it can be bad for performance in production.
  // This feature flag can be used to control the behavior:
  var debugRenderPhaseSideEffectsForStrictMode = true;
  
  // To preserve the "Pause on caught exceptions" behavior of the debugger, we
  // replay the begin phase of a failed component inside invokeGuardedCallback.
  var replayFailedUnitOfWorkWithInvokeGuardedCallback = true;
  
  // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
  var warnAboutDeprecatedLifecycles = false;
  
  // Warn about legacy context API
  var warnAboutLegacyContextAPI = false;
  
  // Gather advanced timing metrics for Profiler subtrees.
  var enableProfilerTimer = true;
  
  // Only used in www builds.
  
  // Prefix measurements so that it's possible to filter them.
  // Longer prefixes are hard to read in DevTools.
  var reactEmoji = '\u269B';
  var warningEmoji = '\u26D4';
  var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';
  
  // Keep track of current fiber so that we know the path to unwind on pause.
  // TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
  var currentFiber = null;
  // If we're in the middle of user code, which fiber and method is it?
  // Reusing `currentFiber` would be confusing for this because user code fiber
  // can change during commit phase too, but we don't need to unwind it (since
  // lifecycles in the commit phase don't resemble a tree).
  var currentPhase = null;
  var currentPhaseFiber = null;
  // Did lifecycle hook schedule an update? This is often a performance problem,
  // so we will keep track of it, and include it in the report.
  // Track commits caused by cascading updates.
  var isCommitting = false;
  var hasScheduledUpdateInCurrentCommit = false;
  var hasScheduledUpdateInCurrentPhase = false;
  var commitCountInCurrentWorkLoop = 0;
  var effectCountInCurrentCommit = 0;
  var isWaitingForCallback = false;
  // During commits, we only show a measurement once per method name
  // to avoid stretch the commit phase with measurement overhead.
  var labelsInCurrentCommit = new Set();
  
  var formatMarkName = function (markName) {
    return reactEmoji + ' ' + markName;
  };
  
  var formatLabel = function (label, warning$$1) {
    var prefix = warning$$1 ? warningEmoji + ' ' : reactEmoji + ' ';
    var suffix = warning$$1 ? ' Warning: ' + warning$$1 : '';
    return '' + prefix + label + suffix;
  };
  
  var beginMark = function (markName) {
    performance.mark(formatMarkName(markName));
  };
  
  var clearMark = function (markName) {
    performance.clearMarks(formatMarkName(markName));
  };
  
  var endMark = function (label, markName, warning$$1) {
    var formattedMarkName = formatMarkName(markName);
    var formattedLabel = formatLabel(label, warning$$1);
    try {
      performance.measure(formattedLabel, formattedMarkName);
    } catch (err) {}
    // If previous mark was missing for some reason, this will throw.
    // This could only happen if React crashed in an unexpected place earlier.
    // Don't pile on with more errors.
  
    // Clear marks immediately to avoid growing buffer.
    performance.clearMarks(formattedMarkName);
    performance.clearMeasures(formattedLabel);
  };
  
  var getFiberMarkName = function (label, debugID) {
    return label + ' (#' + debugID + ')';
  };
  
  var getFiberLabel = function (componentName, isMounted, phase) {
    if (phase === null) {
      // These are composite component total time measurements.
      return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
    } else {
      // Composite component methods.
      return componentName + '.' + phase;
    }
  };
  
  var beginFiberMark = function (fiber, phase) {
    var componentName = getComponentName(fiber) || 'Unknown';
    var debugID = fiber._debugID;
    var isMounted = fiber.alternate !== null;
    var label = getFiberLabel(componentName, isMounted, phase);
  
    if (isCommitting && labelsInCurrentCommit.has(label)) {
      // During the commit phase, we don't show duplicate labels because
      // there is a fixed overhead for every measurement, and we don't
      // want to stretch the commit phase beyond necessary.
      return false;
    }
    labelsInCurrentCommit.add(label);
  
    var markName = getFiberMarkName(label, debugID);
    beginMark(markName);
    return true;
  };
  
  var clearFiberMark = function (fiber, phase) {
    var componentName = getComponentName(fiber) || 'Unknown';
    var debugID = fiber._debugID;
    var isMounted = fiber.alternate !== null;
    var label = getFiberLabel(componentName, isMounted, phase);
    var markName = getFiberMarkName(label, debugID);
    clearMark(markName);
  };
  
  var endFiberMark = function (fiber, phase, warning$$1) {
    var componentName = getComponentName(fiber) || 'Unknown';
    var debugID = fiber._debugID;
    var isMounted = fiber.alternate !== null;
    var label = getFiberLabel(componentName, isMounted, phase);
    var markName = getFiberMarkName(label, debugID);
    endMark(label, markName, warning$$1);
  };
  
  var shouldIgnoreFiber = function (fiber) {
    // Host components should be skipped in the timeline.
    // We could check typeof fiber.type, but does this work with RN?
    switch (fiber.tag) {
      case HostRoot:
      case HostComponent:
      case HostText:
      case HostPortal:
      case Fragment:
      case ContextProvider:
      case ContextConsumer:
      case Mode:
        return true;
      default:
        return false;
    }
  };
  
  var clearPendingPhaseMeasurement = function () {
    if (currentPhase !== null && currentPhaseFiber !== null) {
      clearFiberMark(currentPhaseFiber, currentPhase);
    }
    currentPhaseFiber = null;
    currentPhase = null;
    hasScheduledUpdateInCurrentPhase = false;
  };
  
  var pauseTimers = function () {
    // Stops all currently active measurements so that they can be resumed
    // if we continue in a later deferred loop from the same unit of work.
    var fiber = currentFiber;
    while (fiber) {
      if (fiber._debugIsCurrentlyTiming) {
        endFiberMark(fiber, null, null);
      }
      fiber = fiber.return;
    }
  };
  
  var resumeTimersRecursively = function (fiber) {
    if (fiber.return !== null) {
      resumeTimersRecursively(fiber.return);
    }
    if (fiber._debugIsCurrentlyTiming) {
      beginFiberMark(fiber, null);
    }
  };
  
  var resumeTimers = function () {
    // Resumes all measurements that were active during the last deferred loop.
    if (currentFiber !== null) {
      resumeTimersRecursively(currentFiber);
    }
  };
  
  function recordEffect() {
    if (enableUserTimingAPI) {
      effectCountInCurrentCommit++;
    }
  }
  
  function recordScheduleUpdate() {
    if (enableUserTimingAPI) {
      if (isCommitting) {
        hasScheduledUpdateInCurrentCommit = true;
      }
      if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
        hasScheduledUpdateInCurrentPhase = true;
      }
    }
  }
  
  function startRequestCallbackTimer() {
    if (enableUserTimingAPI) {
      if (supportsUserTiming && !isWaitingForCallback) {
        isWaitingForCallback = true;
        beginMark('(Waiting for async callback...)');
      }
    }
  }
  
  function stopRequestCallbackTimer(didExpire, expirationTime) {
    if (enableUserTimingAPI) {
      if (supportsUserTiming) {
        isWaitingForCallback = false;
        var warning$$1 = didExpire ? 'React was blocked by main thread' : null;
        endMark('(Waiting for async callback... will force flush in ' + expirationTime + ' ms)', '(Waiting for async callback...)', warning$$1);
      }
    }
  }
  
  function startWorkTimer(fiber) {
    if (enableUserTimingAPI) {
      if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
        return;
      }
      // If we pause, this is the fiber to unwind from.
      currentFiber = fiber;
      if (!beginFiberMark(fiber, null)) {
        return;
      }
      fiber._debugIsCurrentlyTiming = true;
    }
  }
  
  function cancelWorkTimer(fiber) {
    if (enableUserTimingAPI) {
      if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
        return;
      }
      // Remember we shouldn't complete measurement for this fiber.
      // Otherwise flamechart will be deep even for small updates.
      fiber._debugIsCurrentlyTiming = false;
      clearFiberMark(fiber, null);
    }
  }
  
  function stopWorkTimer(fiber) {
    if (enableUserTimingAPI) {
      if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
        return;
      }
      // If we pause, its parent is the fiber to unwind from.
      currentFiber = fiber.return;
      if (!fiber._debugIsCurrentlyTiming) {
        return;
      }
      fiber._debugIsCurrentlyTiming = false;
      endFiberMark(fiber, null, null);
    }
  }
  
  function stopFailedWorkTimer(fiber) {
    if (enableUserTimingAPI) {
      if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
        return;
      }
      // If we pause, its parent is the fiber to unwind from.
      currentFiber = fiber.return;
      if (!fiber._debugIsCurrentlyTiming) {
        return;
      }
      fiber._debugIsCurrentlyTiming = false;
      var warning$$1 = 'An error was thrown inside this error boundary';
      endFiberMark(fiber, null, warning$$1);
    }
  }
  
  function startPhaseTimer(fiber, phase) {
    if (enableUserTimingAPI) {
      if (!supportsUserTiming) {
        return;
      }
      clearPendingPhaseMeasurement();
      if (!beginFiberMark(fiber, phase)) {
        return;
      }
      currentPhaseFiber = fiber;
      currentPhase = phase;
    }
  }
  
  function stopPhaseTimer() {
    if (enableUserTimingAPI) {
      if (!supportsUserTiming) {
        return;
      }
      if (currentPhase !== null && currentPhaseFiber !== null) {
        var warning$$1 = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
        endFiberMark(currentPhaseFiber, currentPhase, warning$$1);
      }
      currentPhase = null;
      currentPhaseFiber = null;
    }
  }
  
  function startWorkLoopTimer(nextUnitOfWork) {
    if (enableUserTimingAPI) {
      currentFiber = nextUnitOfWork;
      if (!supportsUserTiming) {
        return;
      }
      commitCountInCurrentWorkLoop = 0;
      // This is top level call.
      // Any other measurements are performed within.
      beginMark('(React Tree Reconciliation)');
      // Resume any measurements that were in progress during the last loop.
      resumeTimers();
    }
  }
  
  function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
    if (enableUserTimingAPI) {
      if (!supportsUserTiming) {
        return;
      }
      var warning$$1 = null;
      if (interruptedBy !== null) {
        if (interruptedBy.tag === HostRoot) {
          warning$$1 = 'A top-level update interrupted the previous render';
        } else {
          var componentName = getComponentName(interruptedBy) || 'Unknown';
          warning$$1 = 'An update to ' + componentName + ' interrupted the previous render';
        }
      } else if (commitCountInCurrentWorkLoop > 1) {
        warning$$1 = 'There were cascading updates';
      }
      commitCountInCurrentWorkLoop = 0;
      var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)';
      // Pause any measurements until the next loop.
      pauseTimers();
      endMark(label, '(React Tree Reconciliation)', warning$$1);
    }
  }
  
  function startCommitTimer() {
    if (enableUserTimingAPI) {
      if (!supportsUserTiming) {
        return;
      }
      isCommitting = true;
      hasScheduledUpdateInCurrentCommit = false;
      labelsInCurrentCommit.clear();
      beginMark('(Committing Changes)');
    }
  }
  
  function stopCommitTimer() {
    if (enableUserTimingAPI) {
      if (!supportsUserTiming) {
        return;
      }
  
      var warning$$1 = null;
      if (hasScheduledUpdateInCurrentCommit) {
        warning$$1 = 'Lifecycle hook scheduled a cascading update';
      } else if (commitCountInCurrentWorkLoop > 0) {
        warning$$1 = 'Caused by a cascading update in earlier commit';
      }
      hasScheduledUpdateInCurrentCommit = false;
      commitCountInCurrentWorkLoop++;
      isCommitting = false;
      labelsInCurrentCommit.clear();
  
      endMark('(Committing Changes)', '(Committing Changes)', warning$$1);
    }
  }
  
  function startCommitSnapshotEffectsTimer() {
    if (enableUserTimingAPI) {
      if (!supportsUserTiming) {
        return;
      }
      effectCountInCurrentCommit = 0;
      beginMark('(Committing Snapshot Effects)');
    }
  }
  
  function stopCommitSnapshotEffectsTimer() {
    if (enableUserTimingAPI) {
      if (!supportsUserTiming) {
        return;
      }
      var count = effectCountInCurrentCommit;
      effectCountInCurrentCommit = 0;
      endMark('(Committing Snapshot Effects: ' + count + ' Total)', '(Committing Snapshot Effects)', null);
    }
  }
  
  function startCommitHostEffectsTimer() {
    if (enableUserTimingAPI) {
      if (!supportsUserTiming) {
        return;
      }
      effectCountInCurrentCommit = 0;
      beginMark('(Committing Host Effects)');
    }
  }
  
  function stopCommitHostEffectsTimer() {
    if (enableUserTimingAPI) {
      if (!supportsUserTiming) {
        return;
      }
      var count = effectCountInCurrentCommit;
      effectCountInCurrentCommit = 0;
      endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
    }
  }
  
  function startCommitLifeCyclesTimer() {
    if (enableUserTimingAPI) {
      if (!supportsUserTiming) {
        return;
      }
      effectCountInCurrentCommit = 0;
      beginMark('(Calling Lifecycle Methods)');
    }
  }
  
  function stopCommitLifeCyclesTimer() {
    if (enableUserTimingAPI) {
      if (!supportsUserTiming) {
        return;
      }
      var count = effectCountInCurrentCommit;
      effectCountInCurrentCommit = 0;
      endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
    }
  }
  
  var valueStack = [];
  
  var fiberStack = void 0;
  
  {
    fiberStack = [];
  }
  
  var index = -1;
  
  function createCursor(defaultValue) {
    return {
      current: defaultValue
    };
  }
  
  function pop(cursor, fiber) {
    if (index < 0) {
      {
        warning(false, 'Unexpected pop.');
      }
      return;
    }
  
    {
      if (fiber !== fiberStack[index]) {
        warning(false, 'Unexpected Fiber popped.');
      }
    }
  
    cursor.current = valueStack[index];
  
    valueStack[index] = null;
  
    {
      fiberStack[index] = null;
    }
  
    index--;
  }
  
  function push(cursor, value, fiber) {
    index++;
  
    valueStack[index] = cursor.current;
  
    {
      fiberStack[index] = fiber;
    }
  
    cursor.current = value;
  }
  
  function checkThatStackIsEmpty() {
    {
      if (index !== -1) {
        warning(false, 'Expected an empty stack. Something was not reset properly.');
      }
    }
  }
  
  function resetStackAfterFatalErrorInDev() {
    {
      index = -1;
      valueStack.length = 0;
      fiberStack.length = 0;
    }
  }
  
  var warnedAboutMissingGetChildContext = void 0;
  
  {
    warnedAboutMissingGetChildContext = {};
  }
  
  // A cursor to the current merged context object on the stack.
  var contextStackCursor = createCursor(emptyObject);
  // A cursor to a boolean indicating whether the context has changed.
  var didPerformWorkStackCursor = createCursor(false);
  // Keep track of the previous context object that was on the stack.
  // We use this to get access to the parent context after we have already
  // pushed the next context provider, and now need to merge their contexts.
  var previousContext = emptyObject;
  
  function getUnmaskedContext(workInProgress) {
    var hasOwnContext = isContextProvider(workInProgress);
    if (hasOwnContext) {
      // If the fiber is a context provider itself, when we read its context
      // we have already pushed its own child context on the stack. A context
      // provider should not "see" its own child context. Therefore we read the
      // previous (parent) context instead for a context provider.
      return previousContext;
    }
    return contextStackCursor.current;
  }
  
  function cacheContext(workInProgress, unmaskedContext, maskedContext) {
    var instance = workInProgress.stateNode;
    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
  }
  
  function getMaskedContext(workInProgress, unmaskedContext) {
    var type = workInProgress.type;
    var contextTypes = type.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
  
    // Avoid recreating masked context unless unmasked context has changed.
    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
    // This may trigger infinite loops if componentWillReceiveProps calls setState.
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
      return instance.__reactInternalMemoizedMaskedChildContext;
    }
  
    var context = {};
    for (var key in contextTypes) {
      context[key] = unmaskedContext[key];
    }
  
    {
      var name = getComponentName(workInProgress) || 'Unknown';
      checkPropTypes(contextTypes, context, 'context', name, ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
    }
  
    // Cache unmasked context so we can avoid recreating masked context unless necessary.
    // Context is created before the class component is instantiated so check for instance.
    if (instance) {
      cacheContext(workInProgress, unmaskedContext, context);
    }
  
    return context;
  }
  
  function hasContextChanged() {
    return didPerformWorkStackCursor.current;
  }
  
  function isContextConsumer(fiber) {
    return fiber.tag === ClassComponent && fiber.type.contextTypes != null;
  }
  
  function isContextProvider(fiber) {
    return fiber.tag === ClassComponent && fiber.type.childContextTypes != null;
  }
  
  function popContextProvider(fiber) {
    if (!isContextProvider(fiber)) {
      return;
    }
  
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
  
  function popTopLevelContextObject(fiber) {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
  
  function pushTopLevelContextObject(fiber, context, didChange) {
    !(contextStackCursor.current === emptyObject) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  
    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }
  
  function processChildContext(fiber, parentContext) {
    var instance = fiber.stateNode;
    var childContextTypes = fiber.type.childContextTypes;
  
    // TODO (bvaughn) Replace this behavior with an invariant() in the future.
    // It has only been added in Fiber to match the (unintentional) behavior in Stack.
    if (typeof instance.getChildContext !== 'function') {
      {
        var componentName = getComponentName(fiber) || 'Unknown';
  
        if (!warnedAboutMissingGetChildContext[componentName]) {
          warnedAboutMissingGetChildContext[componentName] = true;
          warning(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
        }
      }
      return parentContext;
    }
  
    var childContext = void 0;
    {
      ReactDebugCurrentFiber.setCurrentPhase('getChildContext');
    }
    startPhaseTimer(fiber, 'getChildContext');
    childContext = instance.getChildContext();
    stopPhaseTimer();
    {
      ReactDebugCurrentFiber.setCurrentPhase(null);
    }
    for (var contextKey in childContext) {
      !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(fiber) || 'Unknown', contextKey) : void 0;
    }
    {
      var name = getComponentName(fiber) || 'Unknown';
      checkPropTypes(childContextTypes, childContext, 'child context', name,
      // In practice, there is one case in which we won't get a stack. It's when
      // somebody calls unstable_renderSubtreeIntoContainer() and we process
      // context from the parent component instance. The stack will be missing
      // because it's outside of the reconciliation, and so the pointer has not
      // been set. This is rare and doesn't matter. We'll also remove that API.
      ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
    }
  
    return _assign$$1({}, parentContext, childContext);
  }
  
  function pushContextProvider(workInProgress) {
    if (!isContextProvider(workInProgress)) {
      return false;
    }
  
    var instance = workInProgress.stateNode;
    // We push the context as early as possible to ensure stack integrity.
    // If the instance does not exist yet, we will push null at first,
    // and replace it on the stack later when invalidating the context.
    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;
  
    // Remember the parent context so we can merge with it later.
    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
    previousContext = contextStackCursor.current;
    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
  
    return true;
  }
  
  function invalidateContextProvider(workInProgress, didChange) {
    var instance = workInProgress.stateNode;
    !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  
    if (didChange) {
      // Merge parent and own context.
      // Skip this if we're not updating due to sCU.
      // This avoids unnecessarily recomputing memoized values.
      var mergedContext = processChildContext(workInProgress, previousContext);
      instance.__reactInternalMemoizedMergedChildContext = mergedContext;
  
      // Replace the old (or empty) context with the new one.
      // It is important to unwind the context in the reverse order.
      pop(didPerformWorkStackCursor, workInProgress);
      pop(contextStackCursor, workInProgress);
      // Now push the new context and mark that it has changed.
      push(contextStackCursor, mergedContext, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    } else {
      pop(didPerformWorkStackCursor, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    }
  }
  
  function findCurrentUnmaskedContext(fiber) {
    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
    // makes sense elsewhere
    !(isFiberMounted(fiber) && fiber.tag === ClassComponent) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  
    var node = fiber;
    while (node.tag !== HostRoot) {
      if (isContextProvider(node)) {
        return node.stateNode.__reactInternalMemoizedMergedChildContext;
      }
      var parent = node.return;
      !parent ? invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      node = parent;
    }
    return node.stateNode.context;
  }
  
  // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
  // Math.pow(2, 30) - 1
  // 0b111111111111111111111111111111
  var MAX_SIGNED_31_BIT_INT = 1073741823;
  
  // TODO: Use an opaque type once ESLint et al support the syntax
  
  
  var NoWork = 0;
  var Sync = 1;
  var Never = MAX_SIGNED_31_BIT_INT;
  
  var UNIT_SIZE = 10;
  var MAGIC_NUMBER_OFFSET = 2;
  
  // 1 unit of expiration time represents 10ms.
  function msToExpirationTime(ms) {
    // Always add an offset so that we don't clash with the magic number for NoWork.
    return (ms / UNIT_SIZE | 0) + MAGIC_NUMBER_OFFSET;
  }
  
  function expirationTimeToMs(expirationTime) {
    return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE;
  }
  
  function ceiling(num, precision) {
    return ((num / precision | 0) + 1) * precision;
  }
  
  function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
    return MAGIC_NUMBER_OFFSET + ceiling(currentTime - MAGIC_NUMBER_OFFSET + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
  }
  
  var NoContext = 0;
  var AsyncMode = 1;
  var StrictMode = 2;
  var ProfileMode = 4;
  
  var hasBadMapPolyfill = void 0;
  
  {
    hasBadMapPolyfill = false;
    try {
      var nonExtensibleObject = Object.preventExtensions({});
      var testMap = new Map([[nonExtensibleObject, null]]);
      var testSet = new Set([nonExtensibleObject]);
      // This is necessary for Rollup to not consider these unused.
      // https://github.com/rollup/rollup/issues/1771
      // TODO: we can remove these if Rollup fixes the bug.
      testMap.set(0, 0);
      testSet.add(0);
    } catch (e) {
      // TODO: Consider warning about bad polyfills
      hasBadMapPolyfill = true;
    }
  }
  
  // A Fiber is work on a Component that needs to be done or was done. There can
  // be more than one per component.
  
  
  var debugCounter = void 0;
  
  {
    debugCounter = 1;
  }
  
  function FiberNode(tag, pendingProps, key, mode) {
    // Instance
    this.tag = tag;
    this.key = key;
    this.type = null;
    this.stateNode = null;
  
    // Fiber
    this.return = null;
    this.child = null;
    this.sibling = null;
    this.index = 0;
  
    this.ref = null;
  
    this.pendingProps = pendingProps;
    this.memoizedProps = null;
    this.updateQueue = null;
    this.memoizedState = null;
  
    this.mode = mode;
  
    // Effects
    this.effectTag = NoEffect;
    this.nextEffect = null;
  
    this.firstEffect = null;
    this.lastEffect = null;
  
    this.expirationTime = NoWork;
  
    this.alternate = null;
  
    if (enableProfilerTimer) {
      this.actualDuration = 0;
      this.actualStartTime = 0;
      this.selfBaseTime = 0;
      this.treeBaseTime = 0;
    }
  
    {
      this._debugID = debugCounter++;
      this._debugSource = null;
      this._debugOwner = null;
      this._debugIsCurrentlyTiming = false;
      if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
        Object.preventExtensions(this);
      }
    }
  }
  
  // This is a constructor function, rather than a POJO constructor, still
  // please ensure we do the following:
  // 1) Nobody should add any instance methods on this. Instance methods can be
  //    more difficult to predict when they get optimized and they are almost
  //    never inlined properly in static compilers.
  // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
  //    always know when it is a fiber.
  // 3) We might want to experiment with using numeric keys since they are easier
  //    to optimize in a non-JIT environment.
  // 4) We can easily go from a constructor to a createFiber object literal if that
  //    is faster.
  // 5) It should be easy to port this to a C struct and keep a C implementation
  //    compatible.
  var createFiber = function (tag, pendingProps, key, mode) {
    // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
    return new FiberNode(tag, pendingProps, key, mode);
  };
  
  function shouldConstruct(Component) {
    return !!(Component.prototype && Component.prototype.isReactComponent);
  }
  
  // This is used to create an alternate fiber to do work on.
  function createWorkInProgress(current, pendingProps, expirationTime) {
    var workInProgress = current.alternate;
    if (workInProgress === null) {
      // We use a double buffering pooling technique because we know that we'll
      // only ever need at most two versions of a tree. We pool the "other" unused
      // node that we're free to reuse. This is lazily created to avoid allocating
      // extra objects for things that are never updated. It also allow us to
      // reclaim the extra memory if needed.
      workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
      workInProgress.type = current.type;
      workInProgress.stateNode = current.stateNode;
  
      {
        // DEV-only fields
        workInProgress._debugID = current._debugID;
        workInProgress._debugSource = current._debugSource;
        workInProgress._debugOwner = current._debugOwner;
      }
  
      workInProgress.alternate = current;
      current.alternate = workInProgress;
    } else {
      workInProgress.pendingProps = pendingProps;
  
      // We already have an alternate.
      // Reset the effect tag.
      workInProgress.effectTag = NoEffect;
  
      // The effect list is no longer valid.
      workInProgress.nextEffect = null;
      workInProgress.firstEffect = null;
      workInProgress.lastEffect = null;
  
      if (enableProfilerTimer) {
        // We intentionally reset, rather than copy, actualDuration & actualStartTime.
        // This prevents time from endlessly accumulating in new commits.
        // This has the downside of resetting values for different priority renders,
        // But works for yielding (the common case) and should support resuming.
        workInProgress.actualDuration = 0;
        workInProgress.actualStartTime = 0;
      }
    }
  
    workInProgress.expirationTime = expirationTime;
  
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue;
  
    // These will be overridden during the parent's reconciliation
    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;
  
    if (enableProfilerTimer) {
      workInProgress.selfBaseTime = current.selfBaseTime;
      workInProgress.treeBaseTime = current.treeBaseTime;
    }
  
    return workInProgress;
  }
  
  function createHostRootFiber(isAsync) {
    var mode = isAsync ? AsyncMode | StrictMode : NoContext;
    return createFiber(HostRoot, null, null, mode);
  }
  
  function createFiberFromElement(element, mode, expirationTime) {
    var owner = null;
    {
      owner = element._owner;
    }
  
    var fiber = void 0;
    var type = element.type;
    var key = element.key;
    var pendingProps = element.props;
  
    var fiberTag = void 0;
    if (typeof type === 'function') {
      fiberTag = shouldConstruct(type) ? ClassComponent : IndeterminateComponent;
    } else if (typeof type === 'string') {
      fiberTag = HostComponent;
    } else {
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
        case REACT_ASYNC_MODE_TYPE:
          fiberTag = Mode;
          mode |= AsyncMode | StrictMode;
          break;
        case REACT_STRICT_MODE_TYPE:
          fiberTag = Mode;
          mode |= StrictMode;
          break;
        case REACT_PROFILER_TYPE:
          return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
        case REACT_TIMEOUT_TYPE:
          fiberTag = TimeoutComponent;
          // Suspense does not require async, but its children should be strict
          // mode compatible.
          mode |= StrictMode;
          break;
        default:
          fiberTag = getFiberTagFromObjectType(type, owner);
          break;
      }
    }
  
    fiber = createFiber(fiberTag, pendingProps, key, mode);
    fiber.type = type;
    fiber.expirationTime = expirationTime;
  
    {
      fiber._debugSource = element._source;
      fiber._debugOwner = element._owner;
    }
  
    return fiber;
  }
  
  function getFiberTagFromObjectType(type, owner) {
    var $$typeof = typeof type === 'object' && type !== null ? type.$$typeof : null;
  
    switch ($$typeof) {
      case REACT_PROVIDER_TYPE:
        return ContextProvider;
      case REACT_CONTEXT_TYPE:
        // This is a consumer
        return ContextConsumer;
      case REACT_FORWARD_REF_TYPE:
        return ForwardRef;
      default:
        {
          var info = '';
          {
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
            }
            var ownerName = owner ? getComponentName(owner) : null;
            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }
          }
          invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
        }
    }
  }
  
  function createFiberFromFragment(elements, mode, expirationTime, key) {
    var fiber = createFiber(Fragment, elements, key, mode);
    fiber.expirationTime = expirationTime;
    return fiber;
  }
  
  function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
    {
      if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
        invariant(false, 'Profiler must specify an "id" string and "onRender" function as props');
      }
    }
  
    var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
    fiber.type = REACT_PROFILER_TYPE;
    fiber.expirationTime = expirationTime;
  
    return fiber;
  }
  
  function createFiberFromText(content, mode, expirationTime) {
    var fiber = createFiber(HostText, content, null, mode);
    fiber.expirationTime = expirationTime;
    return fiber;
  }
  
  function createFiberFromHostInstanceForDeletion() {
    var fiber = createFiber(HostComponent, null, null, NoContext);
    fiber.type = 'DELETED';
    return fiber;
  }
  
  function createFiberFromPortal(portal, mode, expirationTime) {
    var pendingProps = portal.children !== null ? portal.children : [];
    var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
    fiber.expirationTime = expirationTime;
    fiber.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null, // Used by persistent updates
      implementation: portal.implementation
    };
    return fiber;
  }
  
  // Used for stashing WIP properties to replay failed work in DEV.
  function assignFiberPropertiesInDEV(target, source) {
    if (target === null) {
      // This Fiber's initial properties will always be overwritten.
      // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
      target = createFiber(IndeterminateComponent, null, null, NoContext);
    }
  
    // This is intentionally written as a list of all properties.
    // We tried to use Object.assign() instead but this is called in
    // the hottest path, and Object.assign() was too slow:
    // https://github.com/facebook/react/issues/12502
    // This code is DEV-only so size is not a concern.
  
    target.tag = source.tag;
    target.key = source.key;
    target.type = source.type;
    target.stateNode = source.stateNode;
    target.return = source.return;
    target.child = source.child;
    target.sibling = source.sibling;
    target.index = source.index;
    target.ref = source.ref;
    target.pendingProps = source.pendingProps;
    target.memoizedProps = source.memoizedProps;
    target.updateQueue = source.updateQueue;
    target.memoizedState = source.memoizedState;
    target.mode = source.mode;
    target.effectTag = source.effectTag;
    target.nextEffect = source.nextEffect;
    target.firstEffect = source.firstEffect;
    target.lastEffect = source.lastEffect;
    target.expirationTime = source.expirationTime;
    target.alternate = source.alternate;
    if (enableProfilerTimer) {
      target.actualDuration = source.actualDuration;
      target.actualStartTime = source.actualStartTime;
      target.selfBaseTime = source.selfBaseTime;
      target.treeBaseTime = source.treeBaseTime;
    }
    target._debugID = source._debugID;
    target._debugSource = source._debugSource;
    target._debugOwner = source._debugOwner;
    target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
    return target;
  }
  
  // TODO: This should be lifted into the renderer.
  
  
  function createFiberRoot(containerInfo, isAsync, hydrate) {
    // Cyclic construction. This cheats the type system right now because
    // stateNode is any.
    var uninitializedFiber = createHostRootFiber(isAsync);
    var root = {
      current: uninitializedFiber,
      containerInfo: containerInfo,
      pendingChildren: null,
  
      earliestPendingTime: NoWork,
      latestPendingTime: NoWork,
      earliestSuspendedTime: NoWork,
      latestSuspendedTime: NoWork,
      latestPingedTime: NoWork,
  
      pendingCommitExpirationTime: NoWork,
      finishedWork: null,
      context: null,
      pendingContext: null,
      hydrate: hydrate,
      remainingExpirationTime: NoWork,
      firstBatch: null,
      nextScheduledRoot: null
    };
    uninitializedFiber.stateNode = root;
    return root;
  }
  
  var onCommitFiberRoot = null;
  var onCommitFiberUnmount = null;
  var hasLoggedError = false;
  
  function catchErrors(fn) {
    return function (arg) {
      try {
        return fn(arg);
      } catch (err) {
        if (true && !hasLoggedError) {
          hasLoggedError = true;
          warning(false, 'React DevTools encountered an error: %s', err);
        }
      }
    };
  }
  
  function injectInternals(internals) {
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // No DevTools
      return false;
    }
    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (hook.isDisabled) {
      // This isn't a real property on the hook, but it can be set to opt out
      // of DevTools integration and associated warnings and logs.
      // https://github.com/facebook/react/issues/3877
      return true;
    }
    if (!hook.supportsFiber) {
      {
        warning(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
      }
      // DevTools exists, even though it doesn't support Fiber.
      return true;
    }
    try {
      var rendererID = hook.inject(internals);
      // We have successfully injected, so now it is safe to set up hooks.
      onCommitFiberRoot = catchErrors(function (root) {
        return hook.onCommitFiberRoot(rendererID, root);
      });
      onCommitFiberUnmount = catchErrors(function (fiber) {
        return hook.onCommitFiberUnmount(rendererID, fiber);
      });
    } catch (err) {
      // Catch all errors because it is unsafe to throw during initialization.
      {
        warning(false, 'React DevTools encountered an error: %s.', err);
      }
    }
    // DevTools exists
    return true;
  }
  
  function onCommitRoot(root) {
    if (typeof onCommitFiberRoot === 'function') {
      onCommitFiberRoot(root);
    }
  }
  
  function onCommitUnmount(fiber) {
    if (typeof onCommitFiberUnmount === 'function') {
      onCommitFiberUnmount(fiber);
    }
  }
  
  /**
   * Forked from fbjs/warning:
   * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
   *
   * Only change is we use console.warn instead of console.error,
   * and do nothing when 'console' is not supported.
   * This really simplifies the code.
   * ---
   * Similar to invariant but only logs a warning if the condition is not met.
   * This can be used to log issues in development environments in critical
   * paths. Removing the logging code for production environments will keep the
   * same logic and follow the same code paths.
   */
  
  var lowPriorityWarning = function () {};
  
  {
    var printWarning = function (format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
  
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.warn(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };
  
    lowPriorityWarning = function (condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }
      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }
  
        printWarning.apply(undefined, [format].concat(args));
      }
    };
  }
  
  var lowPriorityWarning$1 = lowPriorityWarning;
  
  var ReactStrictModeWarnings = {
    discardPendingWarnings: function () {},
    flushPendingDeprecationWarnings: function () {},
    flushPendingUnsafeLifecycleWarnings: function () {},
    recordDeprecationWarnings: function (fiber, instance) {},
    recordUnsafeLifecycleWarnings: function (fiber, instance) {},
    recordLegacyContextWarning: function (fiber, instance) {},
    flushLegacyContextWarning: function () {}
  };
  
  {
    var LIFECYCLE_SUGGESTIONS = {
      UNSAFE_componentWillMount: 'componentDidMount',
      UNSAFE_componentWillReceiveProps: 'static getDerivedStateFromProps',
      UNSAFE_componentWillUpdate: 'componentDidUpdate'
    };
  
    var pendingComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUnsafeLifecycleWarnings = new Map();
    var pendingLegacyContextWarning = new Map();
  
    // Tracks components we have already warned about.
    var didWarnAboutDeprecatedLifecycles = new Set();
    var didWarnAboutUnsafeLifecycles = new Set();
    var didWarnAboutLegacyContext = new Set();
  
    var setToSortedString = function (set) {
      var array = [];
      set.forEach(function (value) {
        array.push(value);
      });
      return array.sort().join(', ');
    };
  
    ReactStrictModeWarnings.discardPendingWarnings = function () {
      pendingComponentWillMountWarnings = [];
      pendingComponentWillReceivePropsWarnings = [];
      pendingComponentWillUpdateWarnings = [];
      pendingUnsafeLifecycleWarnings = new Map();
      pendingLegacyContextWarning = new Map();
    };
  
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
      pendingUnsafeLifecycleWarnings.forEach(function (lifecycleWarningsMap, strictRoot) {
        var lifecyclesWarningMesages = [];
  
        Object.keys(lifecycleWarningsMap).forEach(function (lifecycle) {
          var lifecycleWarnings = lifecycleWarningsMap[lifecycle];
          if (lifecycleWarnings.length > 0) {
            var componentNames = new Set();
            lifecycleWarnings.forEach(function (fiber) {
              componentNames.add(getComponentName(fiber) || 'Component');
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
  
            var formatted = lifecycle.replace('UNSAFE_', '');
            var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];
            var sortedComponentNames = setToSortedString(componentNames);
  
            lifecyclesWarningMesages.push(formatted + ': Please update the following components to use ' + (suggestion + ' instead: ' + sortedComponentNames));
          }
        });
  
        if (lifecyclesWarningMesages.length > 0) {
          var strictRootComponentStack = getStackAddendumByWorkInProgressFiber(strictRoot);
  
          warning(false, 'Unsafe lifecycle methods were found within a strict-mode tree:%s' + '\n\n%s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, lifecyclesWarningMesages.join('\n\n'));
        }
      });
  
      pendingUnsafeLifecycleWarnings = new Map();
    };
  
    var findStrictRoot = function (fiber) {
      var maybeStrictRoot = null;
  
      var node = fiber;
      while (node !== null) {
        if (node.mode & StrictMode) {
          maybeStrictRoot = node;
        }
        node = node.return;
      }
  
      return maybeStrictRoot;
    };
  
    ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {
      if (pendingComponentWillMountWarnings.length > 0) {
        var uniqueNames = new Set();
        pendingComponentWillMountWarnings.forEach(function (fiber) {
          uniqueNames.add(getComponentName(fiber) || 'Component');
          didWarnAboutDeprecatedLifecycles.add(fiber.type);
        });
  
        var sortedNames = setToSortedString(uniqueNames);
  
        lowPriorityWarning$1(false, 'componentWillMount is deprecated and will be removed in the next major version. ' + 'Use componentDidMount instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillMount.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', sortedNames);
  
        pendingComponentWillMountWarnings = [];
      }
  
      if (pendingComponentWillReceivePropsWarnings.length > 0) {
        var _uniqueNames = new Set();
        pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
          _uniqueNames.add(getComponentName(fiber) || 'Component');
          didWarnAboutDeprecatedLifecycles.add(fiber.type);
        });
  
        var _sortedNames = setToSortedString(_uniqueNames);
  
        lowPriorityWarning$1(false, 'componentWillReceiveProps is deprecated and will be removed in the next major version. ' + 'Use static getDerivedStateFromProps instead.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames);
  
        pendingComponentWillReceivePropsWarnings = [];
      }
  
      if (pendingComponentWillUpdateWarnings.length > 0) {
        var _uniqueNames2 = new Set();
        pendingComponentWillUpdateWarnings.forEach(function (fiber) {
          _uniqueNames2.add(getComponentName(fiber) || 'Component');
          didWarnAboutDeprecatedLifecycles.add(fiber.type);
        });
  
        var _sortedNames2 = setToSortedString(_uniqueNames2);
  
        lowPriorityWarning$1(false, 'componentWillUpdate is deprecated and will be removed in the next major version. ' + 'Use componentDidUpdate instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillUpdate.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames2);
  
        pendingComponentWillUpdateWarnings = [];
      }
    };
  
    ReactStrictModeWarnings.recordDeprecationWarnings = function (fiber, instance) {
      // Dedup strategy: Warn once per component.
      if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {
        return;
      }
  
      // Don't warn about react-lifecycles-compat polyfilled components.
      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
        pendingComponentWillMountWarnings.push(fiber);
      }
      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        pendingComponentWillReceivePropsWarnings.push(fiber);
      }
      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        pendingComponentWillUpdateWarnings.push(fiber);
      }
    };
  
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
      var strictRoot = findStrictRoot(fiber);
      if (strictRoot === null) {
        warning(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
        return;
      }
  
      // Dedup strategy: Warn once per component.
      // This is difficult to track any other way since component names
      // are often vague and are likely to collide between 3rd party libraries.
      // An expand property is probably okay to use here since it's DEV-only,
      // and will only be set in the event of serious warnings.
      if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
        return;
      }
  
      var warningsForRoot = void 0;
      if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
        warningsForRoot = {
          UNSAFE_componentWillMount: [],
          UNSAFE_componentWillReceiveProps: [],
          UNSAFE_componentWillUpdate: []
        };
  
        pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);
      } else {
        warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);
      }
  
      var unsafeLifecycles = [];
      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillMount === 'function') {
        unsafeLifecycles.push('UNSAFE_componentWillMount');
      }
      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');
      }
      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillUpdate === 'function') {
        unsafeLifecycles.push('UNSAFE_componentWillUpdate');
      }
  
      if (unsafeLifecycles.length > 0) {
        unsafeLifecycles.forEach(function (lifecycle) {
          warningsForRoot[lifecycle].push(fiber);
        });
      }
    };
  
    ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
      var strictRoot = findStrictRoot(fiber);
      if (strictRoot === null) {
        warning(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
        return;
      }
  
      // Dedup strategy: Warn once per component.
      if (didWarnAboutLegacyContext.has(fiber.type)) {
        return;
      }
  
      var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
  
      if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
        if (warningsForRoot === undefined) {
          warningsForRoot = [];
          pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
        }
        warningsForRoot.push(fiber);
      }
    };
  
    ReactStrictModeWarnings.flushLegacyContextWarning = function () {
      pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
        var uniqueNames = new Set();
        fiberArray.forEach(function (fiber) {
          uniqueNames.add(getComponentName(fiber) || 'Component');
          didWarnAboutLegacyContext.add(fiber.type);
        });
  
        var sortedNames = setToSortedString(uniqueNames);
        var strictRootComponentStack = getStackAddendumByWorkInProgressFiber(strictRoot);
  
        warning(false, 'Legacy context API has been detected within a strict-mode tree: %s' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, sortedNames);
      });
    };
  }
  
  // This lets us hook into Fiber to debug what it's doing.
  // See https://github.com/facebook/react/pull/8033.
  // This is not part of the public API, not even for React DevTools.
  // You may only inject a debugTool if you work on React Fiber itself.
  var ReactFiberInstrumentation = {
    debugTool: null
  };
  
  var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;
  
  // TODO: Offscreen updates
  
  function markPendingPriorityLevel(root, expirationTime) {
    if (enableSuspense) {
      // Update the latest and earliest pending times
      var earliestPendingTime = root.earliestPendingTime;
      if (earliestPendingTime === NoWork) {
        // No other pending updates.
        root.earliestPendingTime = root.latestPendingTime = expirationTime;
      } else {
        if (earliestPendingTime > expirationTime) {
          // This is the earliest pending update.
          root.earliestPendingTime = expirationTime;
        } else {
          var latestPendingTime = root.latestPendingTime;
          if (latestPendingTime < expirationTime) {
            // This is the latest pending update
            root.latestPendingTime = expirationTime;
          }
        }
      }
    }
  }
  
  function markCommittedPriorityLevels(root, currentTime, earliestRemainingTime) {
    if (enableSuspense) {
      if (earliestRemainingTime === NoWork) {
        // Fast path. There's no remaining work. Clear everything.
        root.earliestPendingTime = NoWork;
        root.latestPendingTime = NoWork;
        root.earliestSuspendedTime = NoWork;
        root.latestSuspendedTime = NoWork;
        root.latestPingedTime = NoWork;
        return;
      }
  
      // Let's see if the previous latest known pending level was just flushed.
      var latestPendingTime = root.latestPendingTime;
      if (latestPendingTime !== NoWork) {
        if (latestPendingTime < earliestRemainingTime) {
          // We've flushed all the known pending levels.
          root.earliestPendingTime = root.latestPendingTime = NoWork;
        } else {
          var earliestPendingTime = root.earliestPendingTime;
          if (earliestPendingTime < earliestRemainingTime) {
            // We've flushed the earliest known pending level. Set this to the
            // latest pending time.
            root.earliestPendingTime = root.latestPendingTime;
          }
        }
      }
  
      // Now let's handle the earliest remaining level in the whole tree. We need to
      // decide whether to treat it as a pending level or as suspended. Check
      // it falls within the range of known suspended levels.
  
      var earliestSuspendedTime = root.earliestSuspendedTime;
      if (earliestSuspendedTime === NoWork) {
        // There's no suspended work. Treat the earliest remaining level as a
        // pending level.
        markPendingPriorityLevel(root, earliestRemainingTime);
        return;
      }
  
      var latestSuspendedTime = root.latestSuspendedTime;
      if (earliestRemainingTime > latestSuspendedTime) {
        // The earliest remaining level is later than all the suspended work. That
        // means we've flushed all the suspended work.
        root.earliestSuspendedTime = NoWork;
        root.latestSuspendedTime = NoWork;
        root.latestPingedTime = NoWork;
  
        // There's no suspended work. Treat the earliest remaining level as a
        // pending level.
        markPendingPriorityLevel(root, earliestRemainingTime);
        return;
      }
  
      if (earliestRemainingTime < earliestSuspendedTime) {
        // The earliest remaining time is earlier than all the suspended work.
        // Treat it as a pending update.
        markPendingPriorityLevel(root, earliestRemainingTime);
        return;
      }
  
      // The earliest remaining time falls within the range of known suspended
      // levels. We should treat this as suspended work.
    }
  }
  
  function markSuspendedPriorityLevel(root, suspendedTime) {
    if (enableSuspense) {
      // First, check the known pending levels and update them if needed.
      var earliestPendingTime = root.earliestPendingTime;
      var latestPendingTime = root.latestPendingTime;
      if (earliestPendingTime === suspendedTime) {
        if (latestPendingTime === suspendedTime) {
          // Both known pending levels were suspended. Clear them.
          root.earliestPendingTime = root.latestPendingTime = NoWork;
        } else {
          // The earliest pending level was suspended. Clear by setting it to the
          // latest pending level.
          root.earliestPendingTime = latestPendingTime;
        }
      } else if (latestPendingTime === suspendedTime) {
        // The latest pending level was suspended. Clear by setting it to the
        // latest pending level.
        root.latestPendingTime = earliestPendingTime;
      }
  
      // Next, if we're working on the lowest known suspended level, clear the ping.
      // TODO: What if a promise suspends and pings before the root completes?
      var latestSuspendedTime = root.latestSuspendedTime;
      if (latestSuspendedTime === suspendedTime) {
        root.latestPingedTime = NoWork;
      }
  
      // Finally, update the known suspended levels.
      var earliestSuspendedTime = root.earliestSuspendedTime;
      if (earliestSuspendedTime === NoWork) {
        // No other suspended levels.
        root.earliestSuspendedTime = root.latestSuspendedTime = suspendedTime;
      } else {
        if (earliestSuspendedTime > suspendedTime) {
          // This is the earliest suspended level.
          root.earliestSuspendedTime = suspendedTime;
        } else if (latestSuspendedTime < suspendedTime) {
          // This is the latest suspended level
          root.latestSuspendedTime = suspendedTime;
        }
      }
    }
  }
  
  function markPingedPriorityLevel(root, pingedTime) {
    if (enableSuspense) {
      var latestSuspendedTime = root.latestSuspendedTime;
      if (latestSuspendedTime !== NoWork && latestSuspendedTime <= pingedTime) {
        var latestPingedTime = root.latestPingedTime;
        if (latestPingedTime === NoWork || latestPingedTime < pingedTime) {
          root.latestPingedTime = pingedTime;
        }
      }
    }
  }
  
  function findNextPendingPriorityLevel(root) {
    if (enableSuspense) {
      var earliestSuspendedTime = root.earliestSuspendedTime;
      var earliestPendingTime = root.earliestPendingTime;
      if (earliestSuspendedTime === NoWork) {
        // Fast path. There's no suspended work.
        return earliestPendingTime;
      }
  
      // First, check if there's known pending work.
      if (earliestPendingTime !== NoWork) {
        return earliestPendingTime;
      }
  
      // Finally, if a suspended level was pinged, work on that. Otherwise there's
      // nothing to work on.
      return root.latestPingedTime;
    } else {
      return root.current.expirationTime;
    }
  }
  
  // UpdateQueue is a linked list of prioritized updates.
  //
  // Like fibers, update queues come in pairs: a current queue, which represents
  // the visible state of the screen, and a work-in-progress queue, which is
  // can be mutated and processed asynchronously before it is committed — a form
  // of double buffering. If a work-in-progress render is discarded before
  // finishing, we create a new work-in-progress by cloning the current queue.
  //
  // Both queues share a persistent, singly-linked list structure. To schedule an
  // update, we append it to the end of both queues. Each queue maintains a
  // pointer to first update in the persistent list that hasn't been processed.
  // The work-in-progress pointer always has a position equal to or greater than
  // the current queue, since we always work on that one. The current queue's
  // pointer is only updated during the commit phase, when we swap in the
  // work-in-progress.
  //
  // For example:
  //
  //   Current pointer:           A - B - C - D - E - F
  //   Work-in-progress pointer:              D - E - F
  //                                          ^
  //                                          The work-in-progress queue has
  //                                          processed more updates than current.
  //
  // The reason we append to both queues is because otherwise we might drop
  // updates without ever processing them. For example, if we only add updates to
  // the work-in-progress queue, some updates could be lost whenever a work-in
  // -progress render restarts by cloning from current. Similarly, if we only add
  // updates to the current queue, the updates will be lost whenever an already
  // in-progress queue commits and swaps with the current queue. However, by
  // adding to both queues, we guarantee that the update will be part of the next
  // work-in-progress. (And because the work-in-progress queue becomes the
  // current queue once it commits, there's no danger of applying the same
  // update twice.)
  //
  // Prioritization
  // --------------
  //
  // Updates are not sorted by priority, but by insertion; new updates are always
  // appended to the end of the list.
  //
  // The priority is still important, though. When processing the update queue
  // during the render phase, only the updates with sufficient priority are
  // included in the result. If we skip an update because it has insufficient
  // priority, it remains in the queue to be processed later, during a lower
  // priority render. Crucially, all updates subsequent to a skipped update also
  // remain in the queue *regardless of their priority*. That means high priority
  // updates are sometimes processed twice, at two separate priorities. We also
  // keep track of a base state, that represents the state before the first
  // update in the queue is applied.
  //
  // For example:
  //
  //   Given a base state of '', and the following queue of updates
  //
  //     A1 - B2 - C1 - D2
  //
  //   where the number indicates the priority, and the update is applied to the
  //   previous state by appending a letter, React will process these updates as
  //   two separate renders, one per distinct priority level:
  //
  //   First render, at priority 1:
  //     Base state: ''
  //     Updates: [A1, C1]
  //     Result state: 'AC'
  //
  //   Second render, at priority 2:
  //     Base state: 'A'            <-  The base state does not include C1,
  //                                    because B2 was skipped.
  //     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
  //     Result state: 'ABCD'
  //
  // Because we process updates in insertion order, and rebase high priority
  // updates when preceding updates are skipped, the final result is deterministic
  // regardless of priority. Intermediate state may vary according to system
  // resources, but the final state is always the same.
  
  var UpdateState = 0;
  var ReplaceState = 1;
  var ForceUpdate = 2;
  var CaptureUpdate = 3;
  
  // Global state that is reset at the beginning of calling `processUpdateQueue`.
  // It should only be read right after calling `processUpdateQueue`, via
  // `checkHasForceUpdateAfterProcessing`.
  var hasForceUpdate = false;
  
  var didWarnUpdateInsideUpdate = void 0;
  var currentlyProcessingQueue = void 0;
  var resetCurrentlyProcessingQueue = void 0;
  {
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
    resetCurrentlyProcessingQueue = function () {
      currentlyProcessingQueue = null;
    };
  }
  
  function createUpdateQueue(baseState) {
    var queue = {
      expirationTime: NoWork,
      baseState: baseState,
      firstUpdate: null,
      lastUpdate: null,
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
      firstEffect: null,
      lastEffect: null,
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
    return queue;
  }
  
  function cloneUpdateQueue(currentQueue) {
    var queue = {
      expirationTime: currentQueue.expirationTime,
      baseState: currentQueue.baseState,
      firstUpdate: currentQueue.firstUpdate,
      lastUpdate: currentQueue.lastUpdate,
  
      // TODO: With resuming, if we bail out and resuse the child tree, we should
      // keep these effects.
      firstCapturedUpdate: null,
      lastCapturedUpdate: null,
  
      firstEffect: null,
      lastEffect: null,
  
      firstCapturedEffect: null,
      lastCapturedEffect: null
    };
    return queue;
  }
  
  function createUpdate(expirationTime) {
    return {
      expirationTime: expirationTime,
  
      tag: UpdateState,
      payload: null,
      callback: null,
  
      next: null,
      nextEffect: null
    };
  }
  
  function appendUpdateToQueue(queue, update, expirationTime) {
    // Append the update to the end of the list.
    if (queue.lastUpdate === null) {
      // Queue is empty
      queue.firstUpdate = queue.lastUpdate = update;
    } else {
      queue.lastUpdate.next = update;
      queue.lastUpdate = update;
    }
    if (queue.expirationTime === NoWork || queue.expirationTime > expirationTime) {
      // The incoming update has the earliest expiration of any update in the
      // queue. Update the queue's expiration time.
      queue.expirationTime = expirationTime;
    }
  }
  
  function enqueueUpdate(fiber, update, expirationTime) {
    // Update queues are created lazily.
    var alternate = fiber.alternate;
    var queue1 = void 0;
    var queue2 = void 0;
    if (alternate === null) {
      // There's only one fiber.
      queue1 = fiber.updateQueue;
      queue2 = null;
      if (queue1 === null) {
        queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
      }
    } else {
      // There are two owners.
      queue1 = fiber.updateQueue;
      queue2 = alternate.updateQueue;
      if (queue1 === null) {
        if (queue2 === null) {
          // Neither fiber has an update queue. Create new ones.
          queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
          queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
        } else {
          // Only one fiber has an update queue. Clone to create a new one.
          queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
        }
      } else {
        if (queue2 === null) {
          // Only one fiber has an update queue. Clone to create a new one.
          queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
        } else {
          // Both owners have an update queue.
        }
      }
    }
    if (queue2 === null || queue1 === queue2) {
      // There's only a single queue.
      appendUpdateToQueue(queue1, update, expirationTime);
    } else {
      // There are two queues. We need to append the update to both queues,
      // while accounting for the persistent structure of the list — we don't
      // want the same update to be added multiple times.
      if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
        // One of the queues is not empty. We must add the update to both queues.
        appendUpdateToQueue(queue1, update, expirationTime);
        appendUpdateToQueue(queue2, update, expirationTime);
      } else {
        // Both queues are non-empty. The last update is the same in both lists,
        // because of structural sharing. So, only append to one of the lists.
        appendUpdateToQueue(queue1, update, expirationTime);
        // But we still need to update the `lastUpdate` pointer of queue2.
        queue2.lastUpdate = update;
      }
    }
  
    {
      if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
        warning(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
        didWarnUpdateInsideUpdate = true;
      }
    }
  }
  
  function enqueueCapturedUpdate(workInProgress, update, renderExpirationTime) {
    // Captured updates go into a separate list, and only on the work-in-
    // progress queue.
    var workInProgressQueue = workInProgress.updateQueue;
    if (workInProgressQueue === null) {
      workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
    } else {
      // TODO: I put this here rather than createWorkInProgress so that we don't
      // clone the queue unnecessarily. There's probably a better way to
      // structure this.
      workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
    }
  
    // Append the update to the end of the list.
    if (workInProgressQueue.lastCapturedUpdate === null) {
      // This is the first render phase update
      workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
    } else {
      workInProgressQueue.lastCapturedUpdate.next = update;
      workInProgressQueue.lastCapturedUpdate = update;
    }
    if (workInProgressQueue.expirationTime === NoWork || workInProgressQueue.expirationTime > renderExpirationTime) {
      // The incoming update has the earliest expiration of any update in the
      // queue. Update the queue's expiration time.
      workInProgressQueue.expirationTime = renderExpirationTime;
    }
  }
  
  function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
    var current = workInProgress.alternate;
    if (current !== null) {
      // If the work-in-progress queue is equal to the current queue,
      // we need to clone it first.
      if (queue === current.updateQueue) {
        queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
      }
    }
    return queue;
  }
  
  function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
    switch (update.tag) {
      case ReplaceState:
        {
          var _payload = update.payload;
          if (typeof _payload === 'function') {
            // Updater function
            {
              if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                _payload.call(instance, prevState, nextProps);
              }
            }
            return _payload.call(instance, prevState, nextProps);
          }
          // State object
          return _payload;
        }
      case CaptureUpdate:
        {
          workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
        }
      // Intentional fallthrough
      case UpdateState:
        {
          var _payload2 = update.payload;
          var partialState = void 0;
          if (typeof _payload2 === 'function') {
            // Updater function
            {
              if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                _payload2.call(instance, prevState, nextProps);
              }
            }
            partialState = _payload2.call(instance, prevState, nextProps);
          } else {
            // Partial state object
            partialState = _payload2;
          }
          if (partialState === null || partialState === undefined) {
            // Null and undefined are treated as no-ops.
            return prevState;
          }
          // Merge the partial state and the previous state.
          return _assign$$1({}, prevState, partialState);
        }
      case ForceUpdate:
        {
          hasForceUpdate = true;
          return prevState;
        }
    }
    return prevState;
  }
  
  function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
    hasForceUpdate = false;
  
    if (queue.expirationTime === NoWork || queue.expirationTime > renderExpirationTime) {
      // Insufficient priority. Bailout.
      return;
    }
  
    queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);
  
    {
      currentlyProcessingQueue = queue;
    }
  
    // These values may change as we process the queue.
    var newBaseState = queue.baseState;
    var newFirstUpdate = null;
    var newExpirationTime = NoWork;
  
    // Iterate through the list of updates to compute the result.
    var update = queue.firstUpdate;
    var resultState = newBaseState;
    while (update !== null) {
      var updateExpirationTime = update.expirationTime;
      if (updateExpirationTime > renderExpirationTime) {
        // This update does not have sufficient priority. Skip it.
        if (newFirstUpdate === null) {
          // This is the first skipped update. It will be the first update in
          // the new list.
          newFirstUpdate = update;
          // Since this is the first update that was skipped, the current result
          // is the new base state.
          newBaseState = resultState;
        }
        // Since this update will remain in the list, update the remaining
        // expiration time.
        if (newExpirationTime === NoWork || newExpirationTime > updateExpirationTime) {
          newExpirationTime = updateExpirationTime;
        }
      } else {
        // This update does have sufficient priority. Process it and compute
        // a new result.
        resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
        var _callback = update.callback;
        if (_callback !== null) {
          workInProgress.effectTag |= Callback;
          // Set this to null, in case it was mutated during an aborted render.
          update.nextEffect = null;
          if (queue.lastEffect === null) {
            queue.firstEffect = queue.lastEffect = update;
          } else {
            queue.lastEffect.nextEffect = update;
            queue.lastEffect = update;
          }
        }
      }
      // Continue to the next update.
      update = update.next;
    }
  
    // Separately, iterate though the list of captured updates.
    var newFirstCapturedUpdate = null;
    update = queue.firstCapturedUpdate;
    while (update !== null) {
      var _updateExpirationTime = update.expirationTime;
      if (_updateExpirationTime > renderExpirationTime) {
        // This update does not have sufficient priority. Skip it.
        if (newFirstCapturedUpdate === null) {
          // This is the first skipped captured update. It will be the first
          // update in the new list.
          newFirstCapturedUpdate = update;
          // If this is the first update that was skipped, the current result is
          // the new base state.
          if (newFirstUpdate === null) {
            newBaseState = resultState;
          }
        }
        // Since this update will remain in the list, update the remaining
        // expiration time.
        if (newExpirationTime === NoWork || newExpirationTime > _updateExpirationTime) {
          newExpirationTime = _updateExpirationTime;
        }
      } else {
        // This update does have sufficient priority. Process it and compute
        // a new result.
        resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
        var _callback2 = update.callback;
        if (_callback2 !== null) {
          workInProgress.effectTag |= Callback;
          // Set this to null, in case it was mutated during an aborted render.
          update.nextEffect = null;
          if (queue.lastCapturedEffect === null) {
            queue.firstCapturedEffect = queue.lastCapturedEffect = update;
          } else {
            queue.lastCapturedEffect.nextEffect = update;
            queue.lastCapturedEffect = update;
          }
        }
      }
      update = update.next;
    }
  
    if (newFirstUpdate === null) {
      queue.lastUpdate = null;
    }
    if (newFirstCapturedUpdate === null) {
      queue.lastCapturedUpdate = null;
    } else {
      workInProgress.effectTag |= Callback;
    }
    if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
      // We processed every update, without skipping. That means the new base
      // state is the same as the result state.
      newBaseState = resultState;
    }
  
    queue.baseState = newBaseState;
    queue.firstUpdate = newFirstUpdate;
    queue.firstCapturedUpdate = newFirstCapturedUpdate;
    queue.expirationTime = newExpirationTime;
  
    workInProgress.memoizedState = resultState;
  
    {
      currentlyProcessingQueue = null;
    }
  }
  
  function callCallback(callback, context) {
    !(typeof callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', callback) : void 0;
    callback.call(context);
  }
  
  function resetHasForceUpdateBeforeProcessing() {
    hasForceUpdate = false;
  }
  
  function checkHasForceUpdateAfterProcessing() {
    return hasForceUpdate;
  }
  
  function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
    // If the finished render included captured updates, and there are still
    // lower priority updates left over, we need to keep the captured updates
    // in the queue so that they are rebased and not dropped once we process the
    // queue again at the lower priority.
    if (finishedQueue.firstCapturedUpdate !== null) {
      // Join the captured update list to the end of the normal list.
      if (finishedQueue.lastUpdate !== null) {
        finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
        finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
      }
      // Clear the list of captured updates.
      finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
    }
  
    // Commit the effects
    var effect = finishedQueue.firstEffect;
    finishedQueue.firstEffect = finishedQueue.lastEffect = null;
    while (effect !== null) {
      var _callback3 = effect.callback;
      if (_callback3 !== null) {
        effect.callback = null;
        callCallback(_callback3, instance);
      }
      effect = effect.nextEffect;
    }
  
    effect = finishedQueue.firstCapturedEffect;
    finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
    while (effect !== null) {
      var _callback4 = effect.callback;
      if (_callback4 !== null) {
        effect.callback = null;
        callCallback(_callback4, instance);
      }
      effect = effect.nextEffect;
    }
  }
  
  function createCapturedValue(value, source) {
    // If the value is an error, call this function immediately after it is thrown
    // so the stack is accurate.
    return {
      value: value,
      source: source,
      stack: getStackAddendumByWorkInProgressFiber(source)
    };
  }
  
  var providerCursor = createCursor(null);
  var valueCursor = createCursor(null);
  var changedBitsCursor = createCursor(0);
  
  var rendererSigil = void 0;
  {
    // Use this to detect multiple renderers using the same context
    rendererSigil = {};
  }
  
  function pushProvider(providerFiber) {
    var context = providerFiber.type._context;
  
    if (isPrimaryRenderer) {
      push(changedBitsCursor, context._changedBits, providerFiber);
      push(valueCursor, context._currentValue, providerFiber);
      push(providerCursor, providerFiber, providerFiber);
  
      context._currentValue = providerFiber.pendingProps.value;
      context._changedBits = providerFiber.stateNode;
      {
        !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warning(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
        context._currentRenderer = rendererSigil;
      }
    } else {
      push(changedBitsCursor, context._changedBits2, providerFiber);
      push(valueCursor, context._currentValue2, providerFiber);
      push(providerCursor, providerFiber, providerFiber);
  
      context._currentValue2 = providerFiber.pendingProps.value;
      context._changedBits2 = providerFiber.stateNode;
      {
        !(context._currentRenderer2 === undefined || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) ? warning(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
        context._currentRenderer2 = rendererSigil;
      }
    }
  }
  
  function popProvider(providerFiber) {
    var changedBits = changedBitsCursor.current;
    var currentValue = valueCursor.current;
  
    pop(providerCursor, providerFiber);
    pop(valueCursor, providerFiber);
    pop(changedBitsCursor, providerFiber);
  
    var context = providerFiber.type._context;
    if (isPrimaryRenderer) {
      context._currentValue = currentValue;
      context._changedBits = changedBits;
    } else {
      context._currentValue2 = currentValue;
      context._changedBits2 = changedBits;
    }
  }
  
  function getContextCurrentValue(context) {
    return isPrimaryRenderer ? context._currentValue : context._currentValue2;
  }
  
  function getContextChangedBits(context) {
    return isPrimaryRenderer ? context._changedBits : context._changedBits2;
  }
  
  var NO_CONTEXT = {};
  
  var contextStackCursor$1 = createCursor(NO_CONTEXT);
  var contextFiberStackCursor = createCursor(NO_CONTEXT);
  var rootInstanceStackCursor = createCursor(NO_CONTEXT);
  
  function requiredContext(c) {
    !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    return c;
  }
  
  function getRootHostContainer() {
    var rootInstance = requiredContext(rootInstanceStackCursor.current);
    return rootInstance;
  }
  
  function pushHostContainer(fiber, nextRootInstance) {
    // Push current root instance onto the stack;
    // This allows us to reset root when portals are popped.
    push(rootInstanceStackCursor, nextRootInstance, fiber);
    // Track the context and the Fiber that provided it.
    // This enables us to pop only Fibers that provide unique contexts.
    push(contextFiberStackCursor, fiber, fiber);
  
    // Finally, we need to push the host context to the stack.
    // However, we can't just call getRootHostContext() and push it because
    // we'd have a different number of entries on the stack depending on
    // whether getRootHostContext() throws somewhere in renderer code or not.
    // So we push an empty value first. This lets us safely unwind on errors.
    push(contextStackCursor$1, NO_CONTEXT, fiber);
    var nextRootContext = getRootHostContext(nextRootInstance);
    // Now that we know this function doesn't throw, replace it.
    pop(contextStackCursor$1, fiber);
    push(contextStackCursor$1, nextRootContext, fiber);
  }
  
  function popHostContainer(fiber) {
    pop(contextStackCursor$1, fiber);
    pop(contextFiberStackCursor, fiber);
    pop(rootInstanceStackCursor, fiber);
  }
  
  function getHostContext() {
    var context = requiredContext(contextStackCursor$1.current);
    return context;
  }
  
  function pushHostContext(fiber) {
    var rootInstance = requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor$1.current);
    var nextContext = getChildHostContext(context, fiber.type, rootInstance);
  
    // Don't push this Fiber's context unless it's unique.
    if (context === nextContext) {
      return;
    }
  
    // Track the context and the Fiber that provided it.
    // This enables us to pop only Fibers that provide unique contexts.
    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor$1, nextContext, fiber);
  }
  
  function popHostContext(fiber) {
    // Do not pop unless this Fiber provided the current context.
    // pushHostContext() only pushes Fibers that provide unique contexts.
    if (contextFiberStackCursor.current !== fiber) {
      return;
    }
  
    pop(contextStackCursor$1, fiber);
    pop(contextFiberStackCursor, fiber);
  }
  
  var commitTime = 0;
  
  function getCommitTime() {
    return commitTime;
  }
  
  function recordCommitTime() {
    if (!enableProfilerTimer) {
      return;
    }
    commitTime = now();
  }
  
  /**
   * The "actual" render time is total time required to render the descendants of a Profiler component.
   * This time is stored as a stack, since Profilers can be nested.
   * This time is started during the "begin" phase and stopped during the "complete" phase.
   * It is paused (and accumulated) in the event of an interruption or an aborted render.
   */
  
  var fiberStack$1 = void 0;
  
  {
    fiberStack$1 = [];
  }
  
  var timerPausedAt = 0;
  var totalElapsedPauseTime = 0;
  
  function checkActualRenderTimeStackEmpty() {
    if (!enableProfilerTimer) {
      return;
    }
    {
      !(fiberStack$1.length === 0) ? warning(false, 'Expected an empty stack. Something was not reset properly.') : void 0;
    }
  }
  
  function markActualRenderTimeStarted(fiber) {
    if (!enableProfilerTimer) {
      return;
    }
    {
      fiberStack$1.push(fiber);
    }
  
    fiber.actualDuration = now() - fiber.actualDuration - totalElapsedPauseTime;
    fiber.actualStartTime = now();
  }
  
  function pauseActualRenderTimerIfRunning() {
    if (!enableProfilerTimer) {
      return;
    }
    if (timerPausedAt === 0) {
      timerPausedAt = now();
    }
  }
  
  function recordElapsedActualRenderTime(fiber) {
    if (!enableProfilerTimer) {
      return;
    }
    {
      !(fiber === fiberStack$1.pop()) ? warning(false, 'Unexpected Fiber (%s) popped.', getComponentName(fiber)) : void 0;
    }
  
    fiber.actualDuration = now() - totalElapsedPauseTime - fiber.actualDuration;
  }
  
  function resetActualRenderTimer() {
    if (!enableProfilerTimer) {
      return;
    }
    totalElapsedPauseTime = 0;
  }
  
  function resumeActualRenderTimerIfPaused() {
    if (!enableProfilerTimer) {
      return;
    }
    if (timerPausedAt > 0) {
      totalElapsedPauseTime += now() - timerPausedAt;
      timerPausedAt = 0;
    }
  }
  
  /**
   * The "base" render time is the duration of the “begin” phase of work for a particular fiber.
   * This time is measured and stored on each fiber.
   * The time for all sibling fibers are accumulated and stored on their parent during the "complete" phase.
   * If a fiber bails out (sCU false) then its "base" timer is cancelled and the fiber is not updated.
   */
  
  var baseStartTime = -1;
  
  function recordElapsedBaseRenderTimeIfRunning(fiber) {
    if (!enableProfilerTimer) {
      return;
    }
    if (baseStartTime !== -1) {
      fiber.selfBaseTime = now() - baseStartTime;
    }
  }
  
  function startBaseRenderTimer() {
    if (!enableProfilerTimer) {
      return;
    }
    {
      if (baseStartTime !== -1) {
        warning(false, 'Cannot start base timer that is already running. ' + 'This error is likely caused by a bug in React. ' + 'Please file an issue.');
      }
    }
    baseStartTime = now();
  }
  
  function stopBaseRenderTimerIfRunning() {
    if (!enableProfilerTimer) {
      return;
    }
    baseStartTime = -1;
  }
  
  var fakeInternalInstance = {};
  var isArray = Array.isArray;
  
  var didWarnAboutStateAssignmentForComponent = void 0;
  var didWarnAboutUninitializedState = void 0;
  var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;
  var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;
  var didWarnAboutUndefinedDerivedState = void 0;
  var warnOnUndefinedDerivedState = void 0;
  var warnOnInvalidCallback$1 = void 0;
  
  {
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
  
    var didWarnOnInvalidCallback = new Set();
  
    warnOnInvalidCallback$1 = function (callback, callerName) {
      if (callback === null || typeof callback === 'function') {
        return;
      }
      var key = callerName + '_' + callback;
      if (!didWarnOnInvalidCallback.has(key)) {
        didWarnOnInvalidCallback.add(key);
        warning(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
      }
    };
  
    warnOnUndefinedDerivedState = function (workInProgress, partialState) {
      if (partialState === undefined) {
        var componentName = getComponentName(workInProgress) || 'Component';
        if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
          didWarnAboutUndefinedDerivedState.add(componentName);
          warning(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
        }
      }
    };
  
    // This is so gross but it's at least non-critical and can be removed if
    // it causes problems. This is meant to give a nicer error message for
    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
    // ...)) which otherwise throws a "_processChildContext is not a function"
    // exception.
    Object.defineProperty(fakeInternalInstance, '_processChildContext', {
      enumerable: false,
      value: function () {
        invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
      }
    });
    Object.freeze(fakeInternalInstance);
  }
  
  function applyDerivedStateFromProps(workInProgress, getDerivedStateFromProps, nextProps) {
    var prevState = workInProgress.memoizedState;
  
    {
      if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
        // Invoke the function an extra time to help detect side-effects.
        getDerivedStateFromProps(nextProps, prevState);
      }
    }
  
    var partialState = getDerivedStateFromProps(nextProps, prevState);
  
    {
      warnOnUndefinedDerivedState(workInProgress, partialState);
    }
    // Merge the partial state and the previous state.
    var memoizedState = partialState === null || partialState === undefined ? prevState : _assign$$1({}, prevState, partialState);
    workInProgress.memoizedState = memoizedState;
  
    // Once the update queue is empty, persist the derived state onto the
    // base state.
    var updateQueue = workInProgress.updateQueue;
    if (updateQueue !== null && updateQueue.expirationTime === NoWork) {
      updateQueue.baseState = memoizedState;
    }
  }
  
  var classComponentUpdater = {
    isMounted: isMounted,
    enqueueSetState: function (inst, payload, callback) {
      var fiber = get(inst);
      var currentTime = recalculateCurrentTime();
      var expirationTime = computeExpirationForFiber(currentTime, fiber);
  
      var update = createUpdate(expirationTime);
      update.payload = payload;
      if (callback !== undefined && callback !== null) {
        {
          warnOnInvalidCallback$1(callback, 'setState');
        }
        update.callback = callback;
      }
  
      enqueueUpdate(fiber, update, expirationTime);
      scheduleWork$1(fiber, expirationTime);
    },
    enqueueReplaceState: function (inst, payload, callback) {
      var fiber = get(inst);
      var currentTime = recalculateCurrentTime();
      var expirationTime = computeExpirationForFiber(currentTime, fiber);
  
      var update = createUpdate(expirationTime);
      update.tag = ReplaceState;
      update.payload = payload;
  
      if (callback !== undefined && callback !== null) {
        {
          warnOnInvalidCallback$1(callback, 'replaceState');
        }
        update.callback = callback;
      }
  
      enqueueUpdate(fiber, update, expirationTime);
      scheduleWork$1(fiber, expirationTime);
    },
    enqueueForceUpdate: function (inst, callback) {
      var fiber = get(inst);
      var currentTime = recalculateCurrentTime();
      var expirationTime = computeExpirationForFiber(currentTime, fiber);
  
      var update = createUpdate(expirationTime);
      update.tag = ForceUpdate;
  
      if (callback !== undefined && callback !== null) {
        {
          warnOnInvalidCallback$1(callback, 'forceUpdate');
        }
        update.callback = callback;
      }
  
      enqueueUpdate(fiber, update, expirationTime);
      scheduleWork$1(fiber, expirationTime);
    }
  };
  
  function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
    var instance = workInProgress.stateNode;
    var ctor = workInProgress.type;
    if (typeof instance.shouldComponentUpdate === 'function') {
      startPhaseTimer(workInProgress, 'shouldComponentUpdate');
      var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);
      stopPhaseTimer();
  
      {
        !(shouldUpdate !== undefined) ? warning(false, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(workInProgress) || 'Component') : void 0;
      }
  
      return shouldUpdate;
    }
  
    if (ctor.prototype && ctor.prototype.isPureReactComponent) {
      return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
    }
  
    return true;
  }
  
  function checkClassInstance(workInProgress) {
    var instance = workInProgress.stateNode;
    var type = workInProgress.type;
    {
      var name = getComponentName(workInProgress) || 'Component';
      var renderPresent = instance.render;
  
      if (!renderPresent) {
        if (type.prototype && typeof type.prototype.render === 'function') {
          warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
        } else {
          warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
        }
      }
  
      var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
      !noGetInitialStateOnES6 ? warning(false, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name) : void 0;
      var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
      !noGetDefaultPropsOnES6 ? warning(false, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name) : void 0;
      var noInstancePropTypes = !instance.propTypes;
      !noInstancePropTypes ? warning(false, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name) : void 0;
      var noInstanceContextTypes = !instance.contextTypes;
      !noInstanceContextTypes ? warning(false, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name) : void 0;
      var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
      !noComponentShouldUpdate ? warning(false, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name) : void 0;
      if (type.prototype && type.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
        warning(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(workInProgress) || 'A pure component');
      }
      var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
      !noComponentDidUnmount ? warning(false, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name) : void 0;
      var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
      !noComponentDidReceiveProps ? warning(false, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name) : void 0;
      var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
      !noComponentWillRecieveProps ? warning(false, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name) : void 0;
      var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
      !noUnsafeComponentWillRecieveProps ? warning(false, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name) : void 0;
      var hasMutatedProps = instance.props !== workInProgress.pendingProps;
      !(instance.props === undefined || !hasMutatedProps) ? warning(false, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name) : void 0;
      var noInstanceDefaultProps = !instance.defaultProps;
      !noInstanceDefaultProps ? warning(false, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name) : void 0;
  
      if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(type)) {
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(type);
        warning(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(workInProgress));
      }
  
      var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
      !noInstanceGetDerivedStateFromProps ? warning(false, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
      var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromCatch !== 'function';
      !noInstanceGetDerivedStateFromCatch ? warning(false, '%s: getDerivedStateFromCatch() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
      var noStaticGetSnapshotBeforeUpdate = typeof type.getSnapshotBeforeUpdate !== 'function';
      !noStaticGetSnapshotBeforeUpdate ? warning(false, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name) : void 0;
      var _state = instance.state;
      if (_state && (typeof _state !== 'object' || isArray(_state))) {
        warning(false, '%s.state: must be set to an object or null', name);
      }
      if (typeof instance.getChildContext === 'function') {
        !(typeof type.childContextTypes === 'object') ? warning(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name) : void 0;
      }
    }
  }
  
  function adoptClassInstance(workInProgress, instance) {
    instance.updater = classComponentUpdater;
    workInProgress.stateNode = instance;
    // The instance needs access to the fiber so that it can schedule updates
    set(instance, workInProgress);
    {
      instance._reactInternalInstance = fakeInternalInstance;
    }
  }
  
  function constructClassInstance(workInProgress, props, renderExpirationTime) {
    var ctor = workInProgress.type;
    var unmaskedContext = getUnmaskedContext(workInProgress);
    var needsContext = isContextConsumer(workInProgress);
    var context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject;
  
    // Instantiate twice to help detect side-effects.
    {
      if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
        new ctor(props, context); // eslint-disable-line no-new
      }
    }
  
    var instance = new ctor(props, context);
    var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
    adoptClassInstance(workInProgress, instance);
  
    {
      if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
        var componentName = getComponentName(workInProgress) || 'Component';
        if (!didWarnAboutUninitializedState.has(componentName)) {
          didWarnAboutUninitializedState.add(componentName);
          warning(false, '%s: Did not properly initialize state during construction. ' + 'Expected state to be an object, but it was %s.', componentName, instance.state === null ? 'null' : 'undefined');
        }
      }
  
      // If new component APIs are defined, "unsafe" lifecycles won't be called.
      // Warn about these lifecycles if they are present.
      // Don't warn about react-lifecycles-compat polyfilled methods though.
      if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
        var foundWillMountName = null;
        var foundWillReceivePropsName = null;
        var foundWillUpdateName = null;
        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
          foundWillMountName = 'componentWillMount';
        } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
          foundWillMountName = 'UNSAFE_componentWillMount';
        }
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
          foundWillReceivePropsName = 'componentWillReceiveProps';
        } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
          foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
        }
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
          foundWillUpdateName = 'componentWillUpdate';
        } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
          foundWillUpdateName = 'UNSAFE_componentWillUpdate';
        }
        if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
          var _componentName = getComponentName(workInProgress) || 'Component';
          var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
          if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
            didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
            warning(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks', _componentName, newApiName, foundWillMountName !== null ? '\n  ' + foundWillMountName : '', foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '', foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '');
          }
        }
      }
    }
  
    // Cache unmasked context so we can avoid recreating masked context unless necessary.
    // ReactFiberContext usually updates this cache but can't for newly-created instances.
    if (needsContext) {
      cacheContext(workInProgress, unmaskedContext, context);
    }
  
    return instance;
  }
  
  function callComponentWillMount(workInProgress, instance) {
    startPhaseTimer(workInProgress, 'componentWillMount');
    var oldState = instance.state;
  
    if (typeof instance.componentWillMount === 'function') {
      instance.componentWillMount();
    }
    if (typeof instance.UNSAFE_componentWillMount === 'function') {
      instance.UNSAFE_componentWillMount();
    }
  
    stopPhaseTimer();
  
    if (oldState !== instance.state) {
      {
        warning(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress) || 'Component');
      }
      classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
    }
  }
  
  function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
    var oldState = instance.state;
    startPhaseTimer(workInProgress, 'componentWillReceiveProps');
    if (typeof instance.componentWillReceiveProps === 'function') {
      instance.componentWillReceiveProps(newProps, newContext);
    }
    if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      instance.UNSAFE_componentWillReceiveProps(newProps, newContext);
    }
    stopPhaseTimer();
  
    if (instance.state !== oldState) {
      {
        var componentName = getComponentName(workInProgress) || 'Component';
        if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
          didWarnAboutStateAssignmentForComponent.add(componentName);
          warning(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
        }
      }
      classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
    }
  }
  
  // Invokes the mount life-cycles on a previously never rendered instance.
  function mountClassInstance(workInProgress, renderExpirationTime) {
    var ctor = workInProgress.type;
  
    {
      checkClassInstance(workInProgress);
    }
  
    var instance = workInProgress.stateNode;
    var props = workInProgress.pendingProps;
    var unmaskedContext = getUnmaskedContext(workInProgress);
  
    instance.props = props;
    instance.state = workInProgress.memoizedState;
    instance.refs = emptyObject;
    instance.context = getMaskedContext(workInProgress, unmaskedContext);
  
    {
      if (workInProgress.mode & StrictMode) {
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
  
        ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
      }
  
      if (warnAboutDeprecatedLifecycles) {
        ReactStrictModeWarnings.recordDeprecationWarnings(workInProgress, instance);
      }
    }
  
    var updateQueue = workInProgress.updateQueue;
    if (updateQueue !== null) {
      processUpdateQueue(workInProgress, updateQueue, props, instance, renderExpirationTime);
      instance.state = workInProgress.memoizedState;
    }
  
    var getDerivedStateFromProps = workInProgress.type.getDerivedStateFromProps;
    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, getDerivedStateFromProps, props);
      instance.state = workInProgress.memoizedState;
    }
  
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      callComponentWillMount(workInProgress, instance);
      // If we had additional state updates during this life-cycle, let's
      // process them now.
      updateQueue = workInProgress.updateQueue;
      if (updateQueue !== null) {
        processUpdateQueue(workInProgress, updateQueue, props, instance, renderExpirationTime);
        instance.state = workInProgress.memoizedState;
      }
    }
  
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
  }
  
  function resumeMountClassInstance(workInProgress, renderExpirationTime) {
    var ctor = workInProgress.type;
    var instance = workInProgress.stateNode;
  
    var oldProps = workInProgress.memoizedProps;
    var newProps = workInProgress.pendingProps;
    instance.props = oldProps;
  
    var oldContext = instance.context;
    var newUnmaskedContext = getUnmaskedContext(workInProgress);
    var newContext = getMaskedContext(workInProgress, newUnmaskedContext);
  
    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
    var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
  
    // Note: During these life-cycles, instance.props/instance.state are what
    // ever the previously attempted to render - not the "current". However,
    // during componentDidUpdate we pass the "current" props.
  
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
      if (oldProps !== newProps || oldContext !== newContext) {
        callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
      }
    }
  
    resetHasForceUpdateBeforeProcessing();
  
    var oldState = workInProgress.memoizedState;
    var newState = instance.state = oldState;
    var updateQueue = workInProgress.updateQueue;
    if (updateQueue !== null) {
      processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
      newState = workInProgress.memoizedState;
    }
    if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
      // If an update was already in progress, we should schedule an Update
      // effect even though we're bailing out, so that cWU/cDU are called.
      if (typeof instance.componentDidMount === 'function') {
        workInProgress.effectTag |= Update;
      }
      return false;
    }
  
    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, getDerivedStateFromProps, newProps);
      newState = workInProgress.memoizedState;
    }
  
    var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);
  
    if (shouldUpdate) {
      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.
      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
        startPhaseTimer(workInProgress, 'componentWillMount');
        if (typeof instance.componentWillMount === 'function') {
          instance.componentWillMount();
        }
        if (typeof instance.UNSAFE_componentWillMount === 'function') {
          instance.UNSAFE_componentWillMount();
        }
        stopPhaseTimer();
      }
      if (typeof instance.componentDidMount === 'function') {
        workInProgress.effectTag |= Update;
      }
    } else {
      // If an update was already in progress, we should schedule an Update
      // effect even though we're bailing out, so that cWU/cDU are called.
      if (typeof instance.componentDidMount === 'function') {
        workInProgress.effectTag |= Update;
      }
  
      // If shouldComponentUpdate returned false, we should still update the
      // memoized state to indicate that this work can be reused.
      workInProgress.memoizedProps = newProps;
      workInProgress.memoizedState = newState;
    }
  
    // Update the existing instance's state, props, and context pointers even
    // if shouldComponentUpdate returns false.
    instance.props = newProps;
    instance.state = newState;
    instance.context = newContext;
  
    return shouldUpdate;
  }
  
  // Invokes the update life-cycles and returns false if it shouldn't rerender.
  function updateClassInstance(current, workInProgress, renderExpirationTime) {
    var ctor = workInProgress.type;
    var instance = workInProgress.stateNode;
  
    var oldProps = workInProgress.memoizedProps;
    var newProps = workInProgress.pendingProps;
    instance.props = oldProps;
  
    var oldContext = instance.context;
    var newUnmaskedContext = getUnmaskedContext(workInProgress);
    var newContext = getMaskedContext(workInProgress, newUnmaskedContext);
  
    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
    var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
  
    // Note: During these life-cycles, instance.props/instance.state are what
    // ever the previously attempted to render - not the "current". However,
    // during componentDidUpdate we pass the "current" props.
  
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
      if (oldProps !== newProps || oldContext !== newContext) {
        callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
      }
    }
  
    resetHasForceUpdateBeforeProcessing();
  
    var oldState = workInProgress.memoizedState;
    var newState = instance.state = oldState;
    var updateQueue = workInProgress.updateQueue;
    if (updateQueue !== null) {
      processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
      newState = workInProgress.memoizedState;
    }
  
    if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
      // If an update was already in progress, we should schedule an Update
      // effect even though we're bailing out, so that cWU/cDU are called.
      if (typeof instance.componentDidUpdate === 'function') {
        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
          workInProgress.effectTag |= Update;
        }
      }
      if (typeof instance.getSnapshotBeforeUpdate === 'function') {
        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
          workInProgress.effectTag |= Snapshot;
        }
      }
      return false;
    }
  
    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, getDerivedStateFromProps, newProps);
      newState = workInProgress.memoizedState;
    }
  
    var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);
  
    if (shouldUpdate) {
      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.
      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
        startPhaseTimer(workInProgress, 'componentWillUpdate');
        if (typeof instance.componentWillUpdate === 'function') {
          instance.componentWillUpdate(newProps, newState, newContext);
        }
        if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
          instance.UNSAFE_componentWillUpdate(newProps, newState, newContext);
        }
        stopPhaseTimer();
      }
      if (typeof instance.componentDidUpdate === 'function') {
        workInProgress.effectTag |= Update;
      }
      if (typeof instance.getSnapshotBeforeUpdate === 'function') {
        workInProgress.effectTag |= Snapshot;
      }
    } else {
      // If an update was already in progress, we should schedule an Update
      // effect even though we're bailing out, so that cWU/cDU are called.
      if (typeof instance.componentDidUpdate === 'function') {
        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
          workInProgress.effectTag |= Update;
        }
      }
      if (typeof instance.getSnapshotBeforeUpdate === 'function') {
        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
          workInProgress.effectTag |= Snapshot;
        }
      }
  
      // If shouldComponentUpdate returned false, we should still update the
      // memoized props/state to indicate that this work can be reused.
      workInProgress.memoizedProps = newProps;
      workInProgress.memoizedState = newState;
    }
  
    // Update the existing instance's state, props, and context pointers even
    // if shouldComponentUpdate returns false.
    instance.props = newProps;
    instance.state = newState;
    instance.context = newContext;
  
    return shouldUpdate;
  }
  
  var getCurrentFiberStackAddendum$7 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;
  
  
  var didWarnAboutMaps = void 0;
  var didWarnAboutStringRefInStrictMode = void 0;
  var ownerHasKeyUseWarning = void 0;
  var ownerHasFunctionTypeWarning = void 0;
  var warnForMissingKey = function (child) {};
  
  {
    didWarnAboutMaps = false;
    didWarnAboutStringRefInStrictMode = {};
  
    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */
    ownerHasKeyUseWarning = {};
    ownerHasFunctionTypeWarning = {};
  
    warnForMissingKey = function (child) {
      if (child === null || typeof child !== 'object') {
        return;
      }
      if (!child._store || child._store.validated || child.key != null) {
        return;
      }
      !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      child._store.validated = true;
  
      var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + (getCurrentFiberStackAddendum$7() || '');
      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
        return;
      }
      ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
  
      warning(false, 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.%s', getCurrentFiberStackAddendum$7());
    };
  }
  
  var isArray$1 = Array.isArray;
  
  function coerceRef(returnFiber, current, element) {
    var mixedRef = element.ref;
    if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
      {
        if (returnFiber.mode & StrictMode) {
          var componentName = getComponentName(returnFiber) || 'Component';
          if (!didWarnAboutStringRefInStrictMode[componentName]) {
            warning(false, 'A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using createRef() instead.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-string-ref', mixedRef, getStackAddendumByWorkInProgressFiber(returnFiber));
            didWarnAboutStringRefInStrictMode[componentName] = true;
          }
        }
      }
  
      if (element._owner) {
        var owner = element._owner;
        var inst = void 0;
        if (owner) {
          var ownerFiber = owner;
          !(ownerFiber.tag === ClassComponent) ? invariant(false, 'Stateless function components cannot have refs.') : void 0;
          inst = ownerFiber.stateNode;
        }
        !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
        var stringRef = '' + mixedRef;
        // Check if previous string ref matches new string ref
        if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
          return current.ref;
        }
        var ref = function (value) {
          var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
          if (value === null) {
            delete refs[stringRef];
          } else {
            refs[stringRef] = value;
          }
        };
        ref._stringRef = stringRef;
        return ref;
      } else {
        !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function or a string.') : void 0;
        !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a functional component\n2. You may be adding a ref to a component that was not created inside a component\'s render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.', mixedRef) : void 0;
      }
    }
    return mixedRef;
  }
  
  function throwOnInvalidObjectType(returnFiber, newChild) {
    if (returnFiber.type !== 'textarea') {
      var addendum = '';
      {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + (getCurrentFiberStackAddendum$7() || '');
      }
      invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
    }
  }
  
  function warnOnFunctionType() {
    var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + (getCurrentFiberStackAddendum$7() || '');
  
    if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
      return;
    }
    ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
  
    warning(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.%s', getCurrentFiberStackAddendum$7() || '');
  }
  
  // This wrapper function exists because I expect to clone the code in each path
  // to be able to optimize each path individually by branching early. This needs
  // a compiler or we can do it manually. Helpers that don't need this branching
  // live outside of this function.
  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (!shouldTrackSideEffects) {
        // Noop.
        return;
      }
      // Deletions are added in reversed order so we add it to the front.
      // At this point, the return fiber's effect list is empty except for
      // deletions, so we can just append the deletion to the list. The remaining
      // effects aren't added until the complete phase. Once we implement
      // resuming, this may not be true.
      var last = returnFiber.lastEffect;
      if (last !== null) {
        last.nextEffect = childToDelete;
        returnFiber.lastEffect = childToDelete;
      } else {
        returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
      }
      childToDelete.nextEffect = null;
      childToDelete.effectTag = Deletion;
    }
  
    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) {
        // Noop.
        return null;
      }
  
      // TODO: For the shouldClone case, this could be micro-optimized a bit by
      // assuming that after the first child we've already added everything.
      var childToDelete = currentFirstChild;
      while (childToDelete !== null) {
        deleteChild(returnFiber, childToDelete);
        childToDelete = childToDelete.sibling;
      }
      return null;
    }
  
    function mapRemainingChildren(returnFiber, currentFirstChild) {
      // Add the remaining children to a temporary map so that we can find them by
      // keys quickly. Implicit (null) keys get added to this set with their index
      var existingChildren = new Map();
  
      var existingChild = currentFirstChild;
      while (existingChild !== null) {
        if (existingChild.key !== null) {
          existingChildren.set(existingChild.key, existingChild);
        } else {
          existingChildren.set(existingChild.index, existingChild);
        }
        existingChild = existingChild.sibling;
      }
      return existingChildren;
    }
  
    function useFiber(fiber, pendingProps, expirationTime) {
      // We currently set sibling to null and index to 0 here because it is easy
      // to forget to do before returning it. E.g. for the single child case.
      var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
      clone.index = 0;
      clone.sibling = null;
      return clone;
    }
  
    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;
      if (!shouldTrackSideEffects) {
        // Noop.
        return lastPlacedIndex;
      }
      var current = newFiber.alternate;
      if (current !== null) {
        var oldIndex = current.index;
        if (oldIndex < lastPlacedIndex) {
          // This is a move.
          newFiber.effectTag = Placement;
          return lastPlacedIndex;
        } else {
          // This item can stay in place.
          return oldIndex;
        }
      } else {
        // This is an insertion.
        newFiber.effectTag = Placement;
        return lastPlacedIndex;
      }
    }
  
    function placeSingleChild(newFiber) {
      // This is simpler for the single child case. We only need to do a
      // placement for inserting new children.
      if (shouldTrackSideEffects && newFiber.alternate === null) {
        newFiber.effectTag = Placement;
      }
      return newFiber;
    }
  
    function updateTextNode(returnFiber, current, textContent, expirationTime) {
      if (current === null || current.tag !== HostText) {
        // Insert
        var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
        created.return = returnFiber;
        return created;
      } else {
        // Update
        var existing = useFiber(current, textContent, expirationTime);
        existing.return = returnFiber;
        return existing;
      }
    }
  
    function updateElement(returnFiber, current, element, expirationTime) {
      if (current !== null && current.type === element.type) {
        // Move based on index
        var existing = useFiber(current, element.props, expirationTime);
        existing.ref = coerceRef(returnFiber, current, element);
        existing.return = returnFiber;
        {
          existing._debugSource = element._source;
          existing._debugOwner = element._owner;
        }
        return existing;
      } else {
        // Insert
        var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
        created.ref = coerceRef(returnFiber, current, element);
        created.return = returnFiber;
        return created;
      }
    }
  
    function updatePortal(returnFiber, current, portal, expirationTime) {
      if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
        // Insert
        var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
        created.return = returnFiber;
        return created;
      } else {
        // Update
        var existing = useFiber(current, portal.children || [], expirationTime);
        existing.return = returnFiber;
        return existing;
      }
    }
  
    function updateFragment(returnFiber, current, fragment, expirationTime, key) {
      if (current === null || current.tag !== Fragment) {
        // Insert
        var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
        created.return = returnFiber;
        return created;
      } else {
        // Update
        var existing = useFiber(current, fragment, expirationTime);
        existing.return = returnFiber;
        return existing;
      }
    }
  
    function createChild(returnFiber, newChild, expirationTime) {
      if (typeof newChild === 'string' || typeof newChild === 'number') {
        // Text nodes don't have keys. If the previous node is implicitly keyed
        // we can continue to replace it without aborting even if it is not a text
        // node.
        var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
        created.return = returnFiber;
        return created;
      }
  
      if (typeof newChild === 'object' && newChild !== null) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            {
              var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
              _created.ref = coerceRef(returnFiber, null, newChild);
              _created.return = returnFiber;
              return _created;
            }
          case REACT_PORTAL_TYPE:
            {
              var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
              _created2.return = returnFiber;
              return _created2;
            }
        }
  
        if (isArray$1(newChild) || getIteratorFn(newChild)) {
          var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
          _created3.return = returnFiber;
          return _created3;
        }
  
        throwOnInvalidObjectType(returnFiber, newChild);
      }
  
      {
        if (typeof newChild === 'function') {
          warnOnFunctionType();
        }
      }
  
      return null;
    }
  
    function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
      // Update the fiber if the keys match, otherwise return null.
  
      var key = oldFiber !== null ? oldFiber.key : null;
  
      if (typeof newChild === 'string' || typeof newChild === 'number') {
        // Text nodes don't have keys. If the previous node is implicitly keyed
        // we can continue to replace it without aborting even if it is not a text
        // node.
        if (key !== null) {
          return null;
        }
        return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
      }
  
      if (typeof newChild === 'object' && newChild !== null) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            {
              if (newChild.key === key) {
                if (newChild.type === REACT_FRAGMENT_TYPE) {
                  return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                }
                return updateElement(returnFiber, oldFiber, newChild, expirationTime);
              } else {
                return null;
              }
            }
          case REACT_PORTAL_TYPE:
            {
              if (newChild.key === key) {
                return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
              } else {
                return null;
              }
            }
        }
  
        if (isArray$1(newChild) || getIteratorFn(newChild)) {
          if (key !== null) {
            return null;
          }
  
          return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
        }
  
        throwOnInvalidObjectType(returnFiber, newChild);
      }
  
      {
        if (typeof newChild === 'function') {
          warnOnFunctionType();
        }
      }
  
      return null;
    }
  
    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
      if (typeof newChild === 'string' || typeof newChild === 'number') {
        // Text nodes don't have keys, so we neither have to check the old nor
        // new node for the key. If both are text nodes, they match.
        var matchedFiber = existingChildren.get(newIdx) || null;
        return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
      }
  
      if (typeof newChild === 'object' && newChild !== null) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            {
              var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
              }
              return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
            }
          case REACT_PORTAL_TYPE:
            {
              var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
              return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
            }
        }
  
        if (isArray$1(newChild) || getIteratorFn(newChild)) {
          var _matchedFiber3 = existingChildren.get(newIdx) || null;
          return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
        }
  
        throwOnInvalidObjectType(returnFiber, newChild);
      }
  
      {
        if (typeof newChild === 'function') {
          warnOnFunctionType();
        }
      }
  
      return null;
    }
  
    /**
     * Warns if there is a duplicate or missing key
     */
    function warnOnInvalidKey(child, knownKeys) {
      {
        if (typeof child !== 'object' || child === null) {
          return knownKeys;
        }
        switch (child.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            warnForMissingKey(child);
            var key = child.key;
            if (typeof key !== 'string') {
              break;
            }
            if (knownKeys === null) {
              knownKeys = new Set();
              knownKeys.add(key);
              break;
            }
            if (!knownKeys.has(key)) {
              knownKeys.add(key);
              break;
            }
            warning(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.%s', key, getCurrentFiberStackAddendum$7());
            break;
          default:
            break;
        }
      }
      return knownKeys;
    }
  
    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
      // This algorithm can't optimize by searching from boths ends since we
      // don't have backpointers on fibers. I'm trying to see how far we can get
      // with that model. If it ends up not being worth the tradeoffs, we can
      // add it later.
  
      // Even with a two ended optimization, we'd want to optimize for the case
      // where there are few changes and brute force the comparison instead of
      // going for the Map. It'd like to explore hitting that path first in
      // forward-only mode and only go for the Map once we notice that we need
      // lots of look ahead. This doesn't handle reversal as well as two ended
      // search but that's unusual. Besides, for the two ended optimization to
      // work on Iterables, we'd need to copy the whole set.
  
      // In this first iteration, we'll just live with hitting the bad case
      // (adding everything to a Map) in for every insert/move.
  
      // If you change this code, also update reconcileChildrenIterator() which
      // uses the same algorithm.
  
      {
        // First, validate keys.
        var knownKeys = null;
        for (var i = 0; i < newChildren.length; i++) {
          var child = newChildren[i];
          knownKeys = warnOnInvalidKey(child, knownKeys);
        }
      }
  
      var resultingFirstChild = null;
      var previousNewFiber = null;
  
      var oldFiber = currentFirstChild;
      var lastPlacedIndex = 0;
      var newIdx = 0;
      var nextOldFiber = null;
      for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
        if (oldFiber.index > newIdx) {
          nextOldFiber = oldFiber;
          oldFiber = null;
        } else {
          nextOldFiber = oldFiber.sibling;
        }
        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
        if (newFiber === null) {
          // TODO: This breaks on empty slots like null children. That's
          // unfortunate because it triggers the slow path all the time. We need
          // a better way to communicate whether this was a miss or null,
          // boolean, undefined, etc.
          if (oldFiber === null) {
            oldFiber = nextOldFiber;
          }
          break;
        }
        if (shouldTrackSideEffects) {
          if (oldFiber && newFiber.alternate === null) {
            // We matched the slot, but we didn't reuse the existing fiber, so we
            // need to delete the existing child.
            deleteChild(returnFiber, oldFiber);
          }
        }
        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = newFiber;
        } else {
          // TODO: Defer siblings if we're not at the right index for this slot.
          // I.e. if we had null values before, then we want to defer this
          // for each null value. However, we also don't want to call updateSlot
          // with the previous one.
          previousNewFiber.sibling = newFiber;
        }
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }
  
      if (newIdx === newChildren.length) {
        // We've reached the end of the new children. We can delete the rest.
        deleteRemainingChildren(returnFiber, oldFiber);
        return resultingFirstChild;
      }
  
      if (oldFiber === null) {
        // If we don't have any more existing children we can choose a fast path
        // since the rest will all be insertions.
        for (; newIdx < newChildren.length; newIdx++) {
          var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
          if (!_newFiber) {
            continue;
          }
          lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = _newFiber;
          } else {
            previousNewFiber.sibling = _newFiber;
          }
          previousNewFiber = _newFiber;
        }
        return resultingFirstChild;
      }
  
      // Add all children to a key map for quick lookups.
      var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
  
      // Keep scanning and use the map to restore deleted items as moves.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
        if (_newFiber2) {
          if (shouldTrackSideEffects) {
            if (_newFiber2.alternate !== null) {
              // The new fiber is a work in progress, but if there exists a
              // current, that means that we reused the fiber. We need to delete
              // it from the child list so that we don't add it to the deletion
              // list.
              existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
            }
          }
          lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            resultingFirstChild = _newFiber2;
          } else {
            previousNewFiber.sibling = _newFiber2;
          }
          previousNewFiber = _newFiber2;
        }
      }
  
      if (shouldTrackSideEffects) {
        // Any existing children that weren't consumed above were deleted. We need
        // to add them to the deletion list.
        existingChildren.forEach(function (child) {
          return deleteChild(returnFiber, child);
        });
      }
  
      return resultingFirstChild;
    }
  
    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
      // This is the same implementation as reconcileChildrenArray(),
      // but using the iterator instead.
  
      var iteratorFn = getIteratorFn(newChildrenIterable);
      !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  
      {
        // Warn about using Maps as children
        if (newChildrenIterable.entries === iteratorFn) {
          !didWarnAboutMaps ? warning(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', getCurrentFiberStackAddendum$7()) : void 0;
          didWarnAboutMaps = true;
        }
  
        // First, validate keys.
        // We'll get a different iterator later for the main pass.
        var _newChildren = iteratorFn.call(newChildrenIterable);
        if (_newChildren) {
          var knownKeys = null;
          var _step = _newChildren.next();
          for (; !_step.done; _step = _newChildren.next()) {
            var child = _step.value;
            knownKeys = warnOnInvalidKey(child, knownKeys);
          }
        }
      }
  
      var newChildren = iteratorFn.call(newChildrenIterable);
      !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;
  
      var resultingFirstChild = null;
      var previousNewFiber = null;
  
      var oldFiber = currentFirstChild;
      var lastPlacedIndex = 0;
      var newIdx = 0;
      var nextOldFiber = null;
  
      var step = newChildren.next();
      for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
        if (oldFiber.index > newIdx) {
          nextOldFiber = oldFiber;
          oldFiber = null;
        } else {
          nextOldFiber = oldFiber.sibling;
        }
        var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
        if (newFiber === null) {
          // TODO: This breaks on empty slots like null children. That's
          // unfortunate because it triggers the slow path all the time. We need
          // a better way to communicate whether this was a miss or null,
          // boolean, undefined, etc.
          if (!oldFiber) {
            oldFiber = nextOldFiber;
          }
          break;
        }
        if (shouldTrackSideEffects) {
          if (oldFiber && newFiber.alternate === null) {
            // We matched the slot, but we didn't reuse the existing fiber, so we
            // need to delete the existing child.
            deleteChild(returnFiber, oldFiber);
          }
        }
        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = newFiber;
        } else {
          // TODO: Defer siblings if we're not at the right index for this slot.
          // I.e. if we had null values before, then we want to defer this
          // for each null value. However, we also don't want to call updateSlot
          // with the previous one.
          previousNewFiber.sibling = newFiber;
        }
        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }
  
      if (step.done) {
        // We've reached the end of the new children. We can delete the rest.
        deleteRemainingChildren(returnFiber, oldFiber);
        return resultingFirstChild;
      }
  
      if (oldFiber === null) {
        // If we don't have any more existing children we can choose a fast path
        // since the rest will all be insertions.
        for (; !step.done; newIdx++, step = newChildren.next()) {
          var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
          if (_newFiber3 === null) {
            continue;
          }
          lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = _newFiber3;
          } else {
            previousNewFiber.sibling = _newFiber3;
          }
          previousNewFiber = _newFiber3;
        }
        return resultingFirstChild;
      }
  
      // Add all children to a key map for quick lookups.
      var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
  
      // Keep scanning and use the map to restore deleted items as moves.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
        if (_newFiber4 !== null) {
          if (shouldTrackSideEffects) {
            if (_newFiber4.alternate !== null) {
              // The new fiber is a work in progress, but if there exists a
              // current, that means that we reused the fiber. We need to delete
              // it from the child list so that we don't add it to the deletion
              // list.
              existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
            }
          }
          lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            resultingFirstChild = _newFiber4;
          } else {
            previousNewFiber.sibling = _newFiber4;
          }
          previousNewFiber = _newFiber4;
        }
      }
  
      if (shouldTrackSideEffects) {
        // Any existing children that weren't consumed above were deleted. We need
        // to add them to the deletion list.
        existingChildren.forEach(function (child) {
          return deleteChild(returnFiber, child);
        });
      }
  
      return resultingFirstChild;
    }
  
    function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
      // There's no need to check for keys on text nodes since we don't have a
      // way to define them.
      if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
        // We already have an existing node so let's just update it and delete
        // the rest.
        deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
        var existing = useFiber(currentFirstChild, textContent, expirationTime);
        existing.return = returnFiber;
        return existing;
      }
      // The existing first child is not a text node so we need to create one
      // and delete the existing ones.
      deleteRemainingChildren(returnFiber, currentFirstChild);
      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    }
  
    function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
      var key = element.key;
      var child = currentFirstChild;
      while (child !== null) {
        // TODO: If key === null and child.key === null, then this only applies to
        // the first item in the list.
        if (child.key === key) {
          if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.type === element.type) {
            deleteRemainingChildren(returnFiber, child.sibling);
            var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
            existing.ref = coerceRef(returnFiber, child, element);
            existing.return = returnFiber;
            {
              existing._debugSource = element._source;
              existing._debugOwner = element._owner;
            }
            return existing;
          } else {
            deleteRemainingChildren(returnFiber, child);
            break;
          }
        } else {
          deleteChild(returnFiber, child);
        }
        child = child.sibling;
      }
  
      if (element.type === REACT_FRAGMENT_TYPE) {
        var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
        created.return = returnFiber;
        return created;
      } else {
        var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
        _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
        _created4.return = returnFiber;
        return _created4;
      }
    }
  
    function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
      var key = portal.key;
      var child = currentFirstChild;
      while (child !== null) {
        // TODO: If key === null and child.key === null, then this only applies to
        // the first item in the list.
        if (child.key === key) {
          if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
            deleteRemainingChildren(returnFiber, child.sibling);
            var existing = useFiber(child, portal.children || [], expirationTime);
            existing.return = returnFiber;
            return existing;
          } else {
            deleteRemainingChildren(returnFiber, child);
            break;
          }
        } else {
          deleteChild(returnFiber, child);
        }
        child = child.sibling;
      }
  
      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    }
  
    // This API will tag the children with the side-effect of the reconciliation
    // itself. They will be added to the side-effect list as we pass through the
    // children and the parent.
    function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
      // This function is not recursive.
      // If the top level item is an array, we treat it as a set of children,
      // not as a fragment. Nested arrays on the other hand will be treated as
      // fragment nodes. Recursion happens at the normal flow.
  
      // Handle top level unkeyed fragments as if they were arrays.
      // This leads to an ambiguity between <>{[...]}</> and <>...</>.
      // We treat the ambiguous cases above the same.
      var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
      if (isUnkeyedTopLevelFragment) {
        newChild = newChild.props.children;
      }
  
      // Handle object types
      var isObject = typeof newChild === 'object' && newChild !== null;
  
      if (isObject) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
          case REACT_PORTAL_TYPE:
            return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
        }
      }
  
      if (typeof newChild === 'string' || typeof newChild === 'number') {
        return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
      }
  
      if (isArray$1(newChild)) {
        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
      }
  
      if (getIteratorFn(newChild)) {
        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
      }
  
      if (isObject) {
        throwOnInvalidObjectType(returnFiber, newChild);
      }
  
      {
        if (typeof newChild === 'function') {
          warnOnFunctionType();
        }
      }
      if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
        // If the new child is undefined, and the return fiber is a composite
        // component, throw an error. If Fiber return types are disabled,
        // we already threw above.
        switch (returnFiber.tag) {
          case ClassComponent:
            {
              {
                var instance = returnFiber.stateNode;
                if (instance.render._isMockFunction) {
                  // We allow auto-mocks to proceed as if they're returning null.
                  break;
                }
              }
            }
          // Intentionally fall through to the next case, which handles both
          // functions and classes
          // eslint-disable-next-lined no-fallthrough
          case FunctionalComponent:
            {
              var Component = returnFiber.type;
              invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
            }
        }
      }
  
      // Remaining cases are all treated as empty.
      return deleteRemainingChildren(returnFiber, currentFirstChild);
    }
  
    return reconcileChildFibers;
  }
  
  var reconcileChildFibers = ChildReconciler(true);
  var mountChildFibers = ChildReconciler(false);
  
  function cloneChildFibers(current, workInProgress) {
    !(current === null || workInProgress.child === current.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;
  
    if (workInProgress.child === null) {
      return;
    }
  
    var currentChild = workInProgress.child;
    var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
    workInProgress.child = newChild;
  
    newChild.return = workInProgress;
    while (currentChild.sibling !== null) {
      currentChild = currentChild.sibling;
      newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
      newChild.return = workInProgress;
    }
    newChild.sibling = null;
  }
  
  // The deepest Fiber on the stack involved in a hydration context.
  // This may have been an insertion or a hydration.
  var hydrationParentFiber = null;
  var nextHydratableInstance = null;
  var isHydrating = false;
  
  function enterHydrationState(fiber) {
    if (!supportsHydration) {
      return false;
    }
  
    var parentInstance = fiber.stateNode.containerInfo;
    nextHydratableInstance = getFirstHydratableChild(parentInstance);
    hydrationParentFiber = fiber;
    isHydrating = true;
    return true;
  }
  
  function deleteHydratableInstance(returnFiber, instance) {
    {
      switch (returnFiber.tag) {
        case HostRoot:
          didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
          break;
        case HostComponent:
          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
          break;
      }
    }
  
    var childToDelete = createFiberFromHostInstanceForDeletion();
    childToDelete.stateNode = instance;
    childToDelete.return = returnFiber;
    childToDelete.effectTag = Deletion;
  
    // This might seem like it belongs on progressedFirstDeletion. However,
    // these children are not part of the reconciliation list of children.
    // Even if we abort and rereconcile the children, that will try to hydrate
    // again and the nodes are still in the host tree so these will be
    // recreated.
    if (returnFiber.lastEffect !== null) {
      returnFiber.lastEffect.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
  }
  
  function insertNonHydratedInstance(returnFiber, fiber) {
    fiber.effectTag |= Placement;
    {
      switch (returnFiber.tag) {
        case HostRoot:
          {
            var parentContainer = returnFiber.stateNode.containerInfo;
            switch (fiber.tag) {
              case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                didNotFindHydratableContainerInstance(parentContainer, type, props);
                break;
              case HostText:
                var text = fiber.pendingProps;
                didNotFindHydratableContainerTextInstance(parentContainer, text);
                break;
            }
            break;
          }
        case HostComponent:
          {
            var parentType = returnFiber.type;
            var parentProps = returnFiber.memoizedProps;
            var parentInstance = returnFiber.stateNode;
            switch (fiber.tag) {
              case HostComponent:
                var _type = fiber.type;
                var _props = fiber.pendingProps;
                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                break;
              case HostText:
                var _text = fiber.pendingProps;
                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                break;
            }
            break;
          }
        default:
          return;
      }
    }
  }
  
  function tryHydrate(fiber, nextInstance) {
    switch (fiber.tag) {
      case HostComponent:
        {
          var type = fiber.type;
          var props = fiber.pendingProps;
          var instance = canHydrateInstance(nextInstance, type, props);
          if (instance !== null) {
            fiber.stateNode = instance;
            return true;
          }
          return false;
        }
      case HostText:
        {
          var text = fiber.pendingProps;
          var textInstance = canHydrateTextInstance(nextInstance, text);
          if (textInstance !== null) {
            fiber.stateNode = textInstance;
            return true;
          }
          return false;
        }
      default:
        return false;
    }
  }
  
  function tryToClaimNextHydratableInstance(fiber) {
    if (!isHydrating) {
      return;
    }
    var nextInstance = nextHydratableInstance;
    if (!nextInstance) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    }
    var firstAttemptedInstance = nextInstance;
    if (!tryHydrate(fiber, nextInstance)) {
      // If we can't hydrate this instance let's try the next one.
      // We use this as a heuristic. It's based on intuition and not data so it
      // might be flawed or unnecessary.
      nextInstance = getNextHydratableSibling(firstAttemptedInstance);
      if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
        // Nothing to hydrate. Make it an insertion.
        insertNonHydratedInstance(hydrationParentFiber, fiber);
        isHydrating = false;
        hydrationParentFiber = fiber;
        return;
      }
      // We matched the next one, we'll now assume that the first one was
      // superfluous and we'll delete it. Since we can't eagerly delete it
      // we'll have to schedule a deletion. To do that, this node needs a dummy
      // fiber associated with it.
      deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
    }
    hydrationParentFiber = fiber;
    nextHydratableInstance = getFirstHydratableChild(nextInstance);
  }
  
  function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
    if (!supportsHydration) {
      invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
    }
  
    var instance = fiber.stateNode;
    var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
    // TODO: Type this specific to this type of component.
    fiber.updateQueue = updatePayload;
    // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update.
    if (updatePayload !== null) {
      return true;
    }
    return false;
  }
  
  function prepareToHydrateHostTextInstance(fiber) {
    if (!supportsHydration) {
      invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
    }
  
    var textInstance = fiber.stateNode;
    var textContent = fiber.memoizedProps;
    var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
    {
      if (shouldUpdate) {
        // We assume that prepareToHydrateHostTextInstance is called in a context where the
        // hydration parent is the parent host component of this host text.
        var returnFiber = hydrationParentFiber;
        if (returnFiber !== null) {
          switch (returnFiber.tag) {
            case HostRoot:
              {
                var parentContainer = returnFiber.stateNode.containerInfo;
                didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                break;
              }
            case HostComponent:
              {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                break;
              }
          }
        }
      }
    }
    return shouldUpdate;
  }
  
  function popToNextHostParent(fiber) {
    var parent = fiber.return;
    while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {
      parent = parent.return;
    }
    hydrationParentFiber = parent;
  }
  
  function popHydrationState(fiber) {
    if (!supportsHydration) {
      return false;
    }
    if (fiber !== hydrationParentFiber) {
      // We're deeper than the current hydration context, inside an inserted
      // tree.
      return false;
    }
    if (!isHydrating) {
      // If we're not currently hydrating but we're in a hydration context, then
      // we were an insertion and now need to pop up reenter hydration of our
      // siblings.
      popToNextHostParent(fiber);
      isHydrating = true;
      return false;
    }
  
    var type = fiber.type;
  
    // If we have any remaining hydratable nodes, we need to delete them now.
    // We only do this deeper than head and body since they tend to have random
    // other nodes in them. We also ignore components with pure text content in
    // side of them.
    // TODO: Better heuristic.
    if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
      var nextInstance = nextHydratableInstance;
      while (nextInstance) {
        deleteHydratableInstance(fiber, nextInstance);
        nextInstance = getNextHydratableSibling(nextInstance);
      }
    }
  
    popToNextHostParent(fiber);
    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
    return true;
  }
  
  function resetHydrationState() {
    if (!supportsHydration) {
      return;
    }
  
    hydrationParentFiber = null;
    nextHydratableInstance = null;
    isHydrating = false;
  }
  
  var getCurrentFiberStackAddendum$6 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;
  
  
  var didWarnAboutBadClass = void 0;
  var didWarnAboutGetDerivedStateOnFunctionalComponent = void 0;
  var didWarnAboutStatelessRefs = void 0;
  
  {
    didWarnAboutBadClass = {};
    didWarnAboutGetDerivedStateOnFunctionalComponent = {};
    didWarnAboutStatelessRefs = {};
  }
  
  // TODO: Remove this and use reconcileChildrenAtExpirationTime directly.
  function reconcileChildren(current, workInProgress, nextChildren) {
    reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, workInProgress.expirationTime);
  }
  
  function reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime) {
    if (current === null) {
      // If this is a fresh new component that hasn't been rendered yet, we
      // won't update its child set by applying minimal side-effects. Instead,
      // we will add them all to the child before it gets rendered. That means
      // we can optimize this reconciliation pass by not tracking side-effects.
      workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    } else {
      // If the current child is the same as the work in progress, it means that
      // we haven't yet started any work on these children. Therefore, we use
      // the clone algorithm to create a copy of all the current children.
  
      // If we had any progressed work already, that is invalid at this point so
      // let's throw it out.
      workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
    }
  }
  
  function updateForwardRef(current, workInProgress) {
    var render = workInProgress.type.render;
    var nextProps = workInProgress.pendingProps;
    var ref = workInProgress.ref;
    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
    } else if (workInProgress.memoizedProps === nextProps) {
      var currentRef = current !== null ? current.ref : null;
      if (ref === currentRef) {
        return bailoutOnAlreadyFinishedWork(current, workInProgress);
      }
    }
  
    var nextChildren = void 0;
    {
      ReactCurrentOwner.current = workInProgress;
      ReactDebugCurrentFiber.setCurrentPhase('render');
      nextChildren = render(nextProps, ref);
      ReactDebugCurrentFiber.setCurrentPhase(null);
    }
  
    reconcileChildren(current, workInProgress, nextChildren);
    memoizeProps(workInProgress, nextProps);
    return workInProgress.child;
  }
  
  function updateFragment(current, workInProgress) {
    var nextChildren = workInProgress.pendingProps;
    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
    } else if (workInProgress.memoizedProps === nextChildren) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }
    reconcileChildren(current, workInProgress, nextChildren);
    memoizeProps(workInProgress, nextChildren);
    return workInProgress.child;
  }
  
  function updateMode(current, workInProgress) {
    var nextChildren = workInProgress.pendingProps.children;
    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
    } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }
    reconcileChildren(current, workInProgress, nextChildren);
    memoizeProps(workInProgress, nextChildren);
    return workInProgress.child;
  }
  
  function updateProfiler(current, workInProgress) {
    var nextProps = workInProgress.pendingProps;
    if (enableProfilerTimer) {
      workInProgress.effectTag |= Update;
    }
    if (workInProgress.memoizedProps === nextProps) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }
    var nextChildren = nextProps.children;
    reconcileChildren(current, workInProgress, nextChildren);
    memoizeProps(workInProgress, nextProps);
    return workInProgress.child;
  }
  
  function markRef(current, workInProgress) {
    var ref = workInProgress.ref;
    if (current === null && ref !== null || current !== null && current.ref !== ref) {
      // Schedule a Ref effect
      workInProgress.effectTag |= Ref;
    }
  }
  
  function updateFunctionalComponent(current, workInProgress) {
    var fn = workInProgress.type;
    var nextProps = workInProgress.pendingProps;
  
    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
    } else {
      if (workInProgress.memoizedProps === nextProps) {
        return bailoutOnAlreadyFinishedWork(current, workInProgress);
      }
      // TODO: consider bringing fn.shouldComponentUpdate() back.
      // It used to be here.
    }
  
    var unmaskedContext = getUnmaskedContext(workInProgress);
    var context = getMaskedContext(workInProgress, unmaskedContext);
  
    var nextChildren = void 0;
  
    {
      ReactCurrentOwner.current = workInProgress;
      ReactDebugCurrentFiber.setCurrentPhase('render');
      nextChildren = fn(nextProps, context);
      ReactDebugCurrentFiber.setCurrentPhase(null);
    }
    // React DevTools reads this flag.
    workInProgress.effectTag |= PerformedWork;
    reconcileChildren(current, workInProgress, nextChildren);
    memoizeProps(workInProgress, nextProps);
    return workInProgress.child;
  }
  
  function updateClassComponent(current, workInProgress, renderExpirationTime) {
    // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.
    var hasContext = pushContextProvider(workInProgress);
    var shouldUpdate = void 0;
    if (current === null) {
      if (workInProgress.stateNode === null) {
        // In the initial pass we might need to construct the instance.
        constructClassInstance(workInProgress, workInProgress.pendingProps, renderExpirationTime);
        mountClassInstance(workInProgress, renderExpirationTime);
  
        shouldUpdate = true;
      } else {
        // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, renderExpirationTime);
      }
    } else {
      shouldUpdate = updateClassInstance(current, workInProgress, renderExpirationTime);
    }
    return finishClassComponent(current, workInProgress, shouldUpdate, hasContext, renderExpirationTime);
  }
  
  function finishClassComponent(current, workInProgress, shouldUpdate, hasContext, renderExpirationTime) {
    // Refs should update even if shouldComponentUpdate returns false
    markRef(current, workInProgress);
  
    var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;
  
    if (!shouldUpdate && !didCaptureError) {
      // Context providers should defer to sCU for rendering
      if (hasContext) {
        invalidateContextProvider(workInProgress, false);
      }
  
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }
  
    var ctor = workInProgress.type;
    var instance = workInProgress.stateNode;
  
    // Rerender
    ReactCurrentOwner.current = workInProgress;
    var nextChildren = void 0;
    if (didCaptureError && (!enableGetDerivedStateFromCatch || typeof ctor.getDerivedStateFromCatch !== 'function')) {
      // If we captured an error, but getDerivedStateFrom catch is not defined,
      // unmount all the children. componentDidCatch will schedule an update to
      // re-render a fallback. This is temporary until we migrate everyone to
      // the new API.
      // TODO: Warn in a future release.
      nextChildren = null;
  
      if (enableProfilerTimer) {
        stopBaseRenderTimerIfRunning();
      }
    } else {
      {
        ReactDebugCurrentFiber.setCurrentPhase('render');
        nextChildren = instance.render();
        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
          instance.render();
        }
        ReactDebugCurrentFiber.setCurrentPhase(null);
      }
    }
  
    // React DevTools reads this flag.
    workInProgress.effectTag |= PerformedWork;
    if (didCaptureError) {
      // If we're recovering from an error, reconcile twice: first to delete
      // all the existing children.
      reconcileChildrenAtExpirationTime(current, workInProgress, null, renderExpirationTime);
      workInProgress.child = null;
      // Now we can continue reconciling like normal. This has the effect of
      // remounting all children regardless of whether their their
      // identity matches.
    }
    reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime);
    // Memoize props and state using the values we just used to render.
    // TODO: Restructure so we never read values from the instance.
    memoizeState(workInProgress, instance.state);
    memoizeProps(workInProgress, instance.props);
  
    // The context might have changed so we need to recalculate it.
    if (hasContext) {
      invalidateContextProvider(workInProgress, true);
    }
  
    return workInProgress.child;
  }
  
  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;
    if (root.pendingContext) {
      pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
    } else if (root.context) {
      // Should always be set
      pushTopLevelContextObject(workInProgress, root.context, false);
    }
    pushHostContainer(workInProgress, root.containerInfo);
  }
  
  function updateHostRoot(current, workInProgress, renderExpirationTime) {
    pushHostRootContext(workInProgress);
    var updateQueue = workInProgress.updateQueue;
    if (updateQueue !== null) {
      var nextProps = workInProgress.pendingProps;
      var prevState = workInProgress.memoizedState;
      var prevChildren = prevState !== null ? prevState.element : null;
      processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
      var nextState = workInProgress.memoizedState;
      // Caution: React DevTools currently depends on this property
      // being called "element".
      var nextChildren = nextState.element;
  
      if (nextChildren === prevChildren) {
        // If the state is the same as before, that's a bailout because we had
        // no work that expires at this time.
        resetHydrationState();
        return bailoutOnAlreadyFinishedWork(current, workInProgress);
      }
      var root = workInProgress.stateNode;
      if ((current === null || current.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
        // If we don't have any current children this might be the first pass.
        // We always try to hydrate. If this isn't a hydration pass there won't
        // be any children to hydrate which is effectively the same thing as
        // not hydrating.
  
        // This is a bit of a hack. We track the host root as a placement to
        // know that we're currently in a mounting state. That way isMounted
        // works as expected. We must reset this before committing.
        // TODO: Delete this when we delete isMounted and findDOMNode.
        workInProgress.effectTag |= Placement;
  
        // Ensure that children mount into this root without tracking
        // side-effects. This ensures that we don't store Placement effects on
        // nodes that will be hydrated.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      } else {
        // Otherwise reset hydration state in case we aborted and resumed another
        // root.
        resetHydrationState();
        reconcileChildren(current, workInProgress, nextChildren);
      }
      return workInProgress.child;
    }
    resetHydrationState();
    // If there is no update queue, that's a bailout because the root has no props.
    return bailoutOnAlreadyFinishedWork(current, workInProgress);
  }
  
  function updateHostComponent(current, workInProgress, renderExpirationTime) {
    pushHostContext(workInProgress);
  
    if (current === null) {
      tryToClaimNextHydratableInstance(workInProgress);
    }
  
    var type = workInProgress.type;
    var memoizedProps = workInProgress.memoizedProps;
    var nextProps = workInProgress.pendingProps;
    var prevProps = current !== null ? current.memoizedProps : null;
  
    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
    } else if (memoizedProps === nextProps) {
      var isHidden = workInProgress.mode & AsyncMode && shouldDeprioritizeSubtree(type, nextProps);
      if (isHidden) {
        // Before bailing out, make sure we've deprioritized a hidden component.
        workInProgress.expirationTime = Never;
      }
      if (!isHidden || renderExpirationTime !== Never) {
        return bailoutOnAlreadyFinishedWork(current, workInProgress);
      }
      // If we're rendering a hidden node at hidden priority, don't bailout. The
      // parent is complete, but the children may not be.
    }
  
    var nextChildren = nextProps.children;
    var isDirectTextChild = shouldSetTextContent(type, nextProps);
  
    if (isDirectTextChild) {
      // We special case a direct text child of a host node. This is a common
      // case. We won't handle it as a reified child. We will instead handle
      // this in the host environment that also have access to this prop. That
      // avoids allocating another HostText fiber and traversing it.
      nextChildren = null;
    } else if (prevProps && shouldSetTextContent(type, prevProps)) {
      // If we're switching from a direct text child to a normal child, or to
      // empty, we need to schedule the text content to be reset.
      workInProgress.effectTag |= ContentReset;
    }
  
    markRef(current, workInProgress);
  
    // Check the host config to see if the children are offscreen/hidden.
    if (renderExpirationTime !== Never && workInProgress.mode & AsyncMode && shouldDeprioritizeSubtree(type, nextProps)) {
      // Down-prioritize the children.
      workInProgress.expirationTime = Never;
      // Bailout and come back to this fiber later.
      workInProgress.memoizedProps = nextProps;
      return null;
    }
  
    reconcileChildren(current, workInProgress, nextChildren);
    memoizeProps(workInProgress, nextProps);
    return workInProgress.child;
  }
  
  function updateHostText(current, workInProgress) {
    if (current === null) {
      tryToClaimNextHydratableInstance(workInProgress);
    }
    var nextProps = workInProgress.pendingProps;
    memoizeProps(workInProgress, nextProps);
    // Nothing to do here. This is terminal. We'll do the completion step
    // immediately after.
    return null;
  }
  
  function mountIndeterminateComponent(current, workInProgress, renderExpirationTime) {
    !(current === null) ? invariant(false, 'An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    var fn = workInProgress.type;
    var props = workInProgress.pendingProps;
    var unmaskedContext = getUnmaskedContext(workInProgress);
    var context = getMaskedContext(workInProgress, unmaskedContext);
  
    var value = void 0;
  
    {
      if (fn.prototype && typeof fn.prototype.render === 'function') {
        var componentName = getComponentName(workInProgress) || 'Unknown';
  
        if (!didWarnAboutBadClass[componentName]) {
          warning(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
          didWarnAboutBadClass[componentName] = true;
        }
      }
  
      if (workInProgress.mode & StrictMode) {
        ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
      }
  
      ReactCurrentOwner.current = workInProgress;
      value = fn(props, context);
    }
    // React DevTools reads this flag.
    workInProgress.effectTag |= PerformedWork;
  
    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
      var Component = workInProgress.type;
  
      // Proceed under the assumption that this is a class instance
      workInProgress.tag = ClassComponent;
  
      workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
  
      var getDerivedStateFromProps = Component.getDerivedStateFromProps;
      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, getDerivedStateFromProps, props);
      }
  
      // Push context providers early to prevent context stack mismatches.
      // During mounting we don't know the child context yet as the instance doesn't exist.
      // We will invalidate the child context in finishClassComponent() right after rendering.
      var hasContext = pushContextProvider(workInProgress);
      adoptClassInstance(workInProgress, value);
      mountClassInstance(workInProgress, renderExpirationTime);
      return finishClassComponent(current, workInProgress, true, hasContext, renderExpirationTime);
    } else {
      // Proceed under the assumption that this is a functional component
      workInProgress.tag = FunctionalComponent;
      {
        var _Component = workInProgress.type;
  
        if (_Component) {
          !!_Component.childContextTypes ? warning(false, '%s(...): childContextTypes cannot be defined on a functional component.', _Component.displayName || _Component.name || 'Component') : void 0;
        }
        if (workInProgress.ref !== null) {
          var info = '';
          var ownerName = ReactDebugCurrentFiber.getCurrentFiberOwnerName();
          if (ownerName) {
            info += '\n\nCheck the render method of `' + ownerName + '`.';
          }
  
          var warningKey = ownerName || workInProgress._debugID || '';
          var debugSource = workInProgress._debugSource;
          if (debugSource) {
            warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
          }
          if (!didWarnAboutStatelessRefs[warningKey]) {
            didWarnAboutStatelessRefs[warningKey] = true;
            warning(false, 'Stateless function components cannot be given refs. ' + 'Attempts to access this ref will fail.%s%s', info, ReactDebugCurrentFiber.getCurrentFiberStackAddendum());
          }
        }
  
        if (typeof fn.getDerivedStateFromProps === 'function') {
          var _componentName = getComponentName(workInProgress) || 'Unknown';
  
          if (!didWarnAboutGetDerivedStateOnFunctionalComponent[_componentName]) {
            warning(false, '%s: Stateless functional components do not support getDerivedStateFromProps.', _componentName);
            didWarnAboutGetDerivedStateOnFunctionalComponent[_componentName] = true;
          }
        }
      }
      reconcileChildren(current, workInProgress, value);
      memoizeProps(workInProgress, props);
      return workInProgress.child;
    }
  }
  
  function updateTimeoutComponent(current, workInProgress, renderExpirationTime) {
    if (enableSuspense) {
      var nextProps = workInProgress.pendingProps;
      var prevProps = workInProgress.memoizedProps;
  
      var prevDidTimeout = workInProgress.memoizedState;
  
      // Check if we already attempted to render the normal state. If we did,
      // and we timed out, render the placeholder state.
      var alreadyCaptured = (workInProgress.effectTag & DidCapture) === NoEffect;
      var nextDidTimeout = !alreadyCaptured;
  
      if (hasContextChanged()) {
        // Normally we can bail out on props equality but if context has changed
        // we don't do the bailout and we have to reuse existing props instead.
      } else if (nextProps === prevProps && nextDidTimeout === prevDidTimeout) {
        return bailoutOnAlreadyFinishedWork(current, workInProgress);
      }
  
      var render = nextProps.children;
      var nextChildren = render(nextDidTimeout);
      workInProgress.memoizedProps = nextProps;
      workInProgress.memoizedState = nextDidTimeout;
      reconcileChildren(current, workInProgress, nextChildren);
      return workInProgress.child;
    } else {
      return null;
    }
  }
  
  function updatePortalComponent(current, workInProgress, renderExpirationTime) {
    pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
    var nextChildren = workInProgress.pendingProps;
    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
    } else if (workInProgress.memoizedProps === nextChildren) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }
  
    if (current === null) {
      // Portals are special because we don't append the children during mount
      // but at commit. Therefore we need to track insertions which the normal
      // flow doesn't do during mount. This doesn't happen at the root because
      // the root always starts with a "current" with a null child.
      // TODO: Consider unifying this with how the root works.
      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      memoizeProps(workInProgress, nextChildren);
    } else {
      reconcileChildren(current, workInProgress, nextChildren);
      memoizeProps(workInProgress, nextChildren);
    }
    return workInProgress.child;
  }
  
  function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
    var fiber = workInProgress.child;
    if (fiber !== null) {
      // Set the return pointer of the child to the work-in-progress fiber.
      fiber.return = workInProgress;
    }
    while (fiber !== null) {
      var nextFiber = void 0;
      // Visit this fiber.
      switch (fiber.tag) {
        case ContextConsumer:
          // Check if the context matches.
          var observedBits = fiber.stateNode | 0;
          if (fiber.type === context && (observedBits & changedBits) !== 0) {
            // Update the expiration time of all the ancestors, including
            // the alternates.
            var node = fiber;
            while (node !== null) {
              var alternate = node.alternate;
              if (node.expirationTime === NoWork || node.expirationTime > renderExpirationTime) {
                node.expirationTime = renderExpirationTime;
                if (alternate !== null && (alternate.expirationTime === NoWork || alternate.expirationTime > renderExpirationTime)) {
                  alternate.expirationTime = renderExpirationTime;
                }
              } else if (alternate !== null && (alternate.expirationTime === NoWork || alternate.expirationTime > renderExpirationTime)) {
                alternate.expirationTime = renderExpirationTime;
              } else {
                // Neither alternate was updated, which means the rest of the
                // ancestor path already has sufficient priority.
                break;
              }
              node = node.return;
            }
            // Don't scan deeper than a matching consumer. When we render the
            // consumer, we'll continue scanning from that point. This way the
            // scanning work is time-sliced.
            nextFiber = null;
          } else {
            // Traverse down.
            nextFiber = fiber.child;
          }
          break;
        case ContextProvider:
          // Don't scan deeper if this is a matching provider
          nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
          break;
        default:
          // Traverse down.
          nextFiber = fiber.child;
          break;
      }
      if (nextFiber !== null) {
        // Set the return pointer of the child to the work-in-progress fiber.
        nextFiber.return = fiber;
      } else {
        // No child. Traverse to next sibling.
        nextFiber = fiber;
        while (nextFiber !== null) {
          if (nextFiber === workInProgress) {
            // We're back to the root of this subtree. Exit.
            nextFiber = null;
            break;
          }
          var sibling = nextFiber.sibling;
          if (sibling !== null) {
            // Set the return pointer of the sibling to the work-in-progress fiber.
            sibling.return = nextFiber.return;
            nextFiber = sibling;
            break;
          }
          // No more siblings. Traverse up.
          nextFiber = nextFiber.return;
        }
      }
      fiber = nextFiber;
    }
  }
  
  function updateContextProvider(current, workInProgress, renderExpirationTime) {
    var providerType = workInProgress.type;
    var context = providerType._context;
  
    var newProps = workInProgress.pendingProps;
    var oldProps = workInProgress.memoizedProps;
    var canBailOnProps = true;
  
    if (hasContextChanged()) {
      canBailOnProps = false;
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
    } else if (oldProps === newProps) {
      workInProgress.stateNode = 0;
      pushProvider(workInProgress);
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }
  
    var newValue = newProps.value;
    workInProgress.memoizedProps = newProps;
  
    {
      var providerPropTypes = workInProgress.type.propTypes;
  
      if (providerPropTypes) {
        checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackAddendum$6);
      }
    }
  
    var changedBits = void 0;
    if (oldProps === null) {
      // Initial render
      changedBits = MAX_SIGNED_31_BIT_INT;
    } else {
      if (oldProps.value === newProps.value) {
        // No change. Bailout early if children are the same.
        if (oldProps.children === newProps.children && canBailOnProps) {
          workInProgress.stateNode = 0;
          pushProvider(workInProgress);
          return bailoutOnAlreadyFinishedWork(current, workInProgress);
        }
        changedBits = 0;
      } else {
        var oldValue = oldProps.value;
        // Use Object.is to compare the new context value to the old value.
        // Inlined Object.is polyfill.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
        if (oldValue === newValue && (oldValue !== 0 || 1 / oldValue === 1 / newValue) || oldValue !== oldValue && newValue !== newValue // eslint-disable-line no-self-compare
        ) {
            // No change. Bailout early if children are the same.
            if (oldProps.children === newProps.children && canBailOnProps) {
              workInProgress.stateNode = 0;
              pushProvider(workInProgress);
              return bailoutOnAlreadyFinishedWork(current, workInProgress);
            }
            changedBits = 0;
          } else {
          changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
          {
            !((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits) ? warning(false, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits) : void 0;
          }
          changedBits |= 0;
  
          if (changedBits === 0) {
            // No change. Bailout early if children are the same.
            if (oldProps.children === newProps.children && canBailOnProps) {
              workInProgress.stateNode = 0;
              pushProvider(workInProgress);
              return bailoutOnAlreadyFinishedWork(current, workInProgress);
            }
          } else {
            propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
          }
        }
      }
    }
  
    workInProgress.stateNode = changedBits;
    pushProvider(workInProgress);
  
    var newChildren = newProps.children;
    reconcileChildren(current, workInProgress, newChildren);
    return workInProgress.child;
  }
  
  function updateContextConsumer(current, workInProgress, renderExpirationTime) {
    var context = workInProgress.type;
    var newProps = workInProgress.pendingProps;
    var oldProps = workInProgress.memoizedProps;
  
    var newValue = getContextCurrentValue(context);
    var changedBits = getContextChangedBits(context);
  
    if (hasContextChanged()) {
      // Normally we can bail out on props equality but if context has changed
      // we don't do the bailout and we have to reuse existing props instead.
    } else if (changedBits === 0 && oldProps === newProps) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }
    workInProgress.memoizedProps = newProps;
  
    var observedBits = newProps.unstable_observedBits;
    if (observedBits === undefined || observedBits === null) {
      // Subscribe to all changes by default
      observedBits = MAX_SIGNED_31_BIT_INT;
    }
    // Store the observedBits on the fiber's stateNode for quick access.
    workInProgress.stateNode = observedBits;
  
    if ((changedBits & observedBits) !== 0) {
      // Context change propagation stops at matching consumers, for time-
      // slicing. Continue the propagation here.
      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
    } else if (oldProps === newProps) {
      // Skip over a memoized parent with a bitmask bailout even
      // if we began working on it because of a deeper matching child.
      return bailoutOnAlreadyFinishedWork(current, workInProgress);
    }
    // There is no bailout on `children` equality because we expect people
    // to often pass a bound method as a child, but it may reference
    // `this.state` or `this.props` (and thus needs to re-render on `setState`).
  
    var render = newProps.children;
  
    {
      !(typeof render === 'function') ? warning(false, 'A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.') : void 0;
    }
  
    var newChildren = void 0;
    {
      ReactCurrentOwner.current = workInProgress;
      ReactDebugCurrentFiber.setCurrentPhase('render');
      newChildren = render(newValue);
      ReactDebugCurrentFiber.setCurrentPhase(null);
    }
  
    // React DevTools reads this flag.
    workInProgress.effectTag |= PerformedWork;
    reconcileChildren(current, workInProgress, newChildren);
    return workInProgress.child;
  }
  
  /*
    function reuseChildrenEffects(returnFiber : Fiber, firstChild : Fiber) {
      let child = firstChild;
      do {
        // Ensure that the first and last effect of the parent corresponds
        // to the children's first and last effect.
        if (!returnFiber.firstEffect) {
          returnFiber.firstEffect = child.firstEffect;
        }
        if (child.lastEffect) {
          if (returnFiber.lastEffect) {
            returnFiber.lastEffect.nextEffect = child.firstEffect;
          }
          returnFiber.lastEffect = child.lastEffect;
        }
      } while (child = child.sibling);
    }
    */
  
  function bailoutOnAlreadyFinishedWork(current, workInProgress) {
    cancelWorkTimer(workInProgress);
  
    if (enableProfilerTimer) {
      // Don't update "base" render times for bailouts.
      stopBaseRenderTimerIfRunning();
    }
  
    // TODO: We should ideally be able to bail out early if the children have no
    // more work to do. However, since we don't have a separation of this
    // Fiber's priority and its children yet - we don't know without doing lots
    // of the same work we do anyway. Once we have that separation we can just
    // bail out here if the children has no more work at this priority level.
    // if (workInProgress.priorityOfChildren <= priorityLevel) {
    //   // If there are side-effects in these children that have not yet been
    //   // committed we need to ensure that they get properly transferred up.
    //   if (current && current.child !== workInProgress.child) {
    //     reuseChildrenEffects(workInProgress, child);
    //   }
    //   return null;
    // }
  
    cloneChildFibers(current, workInProgress);
    return workInProgress.child;
  }
  
  function bailoutOnLowPriority(current, workInProgress) {
    cancelWorkTimer(workInProgress);
  
    if (enableProfilerTimer) {
      // Don't update "base" render times for bailouts.
      stopBaseRenderTimerIfRunning();
    }
  
    // TODO: Handle HostComponent tags here as well and call pushHostContext()?
    // See PR 8590 discussion for context
    switch (workInProgress.tag) {
      case HostRoot:
        pushHostRootContext(workInProgress);
        break;
      case ClassComponent:
        pushContextProvider(workInProgress);
        break;
      case HostPortal:
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        break;
      case ContextProvider:
        pushProvider(workInProgress);
        break;
    }
    // TODO: What if this is currently in progress?
    // How can that happen? How is this not being cloned?
    return null;
  }
  
  // TODO: Delete memoizeProps/State and move to reconcile/bailout instead
  function memoizeProps(workInProgress, nextProps) {
    workInProgress.memoizedProps = nextProps;
  }
  
  function memoizeState(workInProgress, nextState) {
    workInProgress.memoizedState = nextState;
    // Don't reset the updateQueue, in case there are pending updates. Resetting
    // is handled by processUpdateQueue.
  }
  
  function beginWork(current, workInProgress, renderExpirationTime) {
    if (enableProfilerTimer) {
      if (workInProgress.mode & ProfileMode) {
        markActualRenderTimeStarted(workInProgress);
      }
    }
  
    if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
      return bailoutOnLowPriority(current, workInProgress);
    }
  
    switch (workInProgress.tag) {
      case IndeterminateComponent:
        return mountIndeterminateComponent(current, workInProgress, renderExpirationTime);
      case FunctionalComponent:
        return updateFunctionalComponent(current, workInProgress);
      case ClassComponent:
        return updateClassComponent(current, workInProgress, renderExpirationTime);
      case HostRoot:
        return updateHostRoot(current, workInProgress, renderExpirationTime);
      case HostComponent:
        return updateHostComponent(current, workInProgress, renderExpirationTime);
      case HostText:
        return updateHostText(current, workInProgress);
      case TimeoutComponent:
        return updateTimeoutComponent(current, workInProgress, renderExpirationTime);
      case HostPortal:
        return updatePortalComponent(current, workInProgress, renderExpirationTime);
      case ForwardRef:
        return updateForwardRef(current, workInProgress);
      case Fragment:
        return updateFragment(current, workInProgress);
      case Mode:
        return updateMode(current, workInProgress);
      case Profiler:
        return updateProfiler(current, workInProgress);
      case ContextProvider:
        return updateContextProvider(current, workInProgress, renderExpirationTime);
      case ContextConsumer:
        return updateContextConsumer(current, workInProgress, renderExpirationTime);
      default:
        invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
    }
  }
  
  function markUpdate(workInProgress) {
    // Tag the fiber with an update effect. This turns a Placement into
    // a PlacementAndUpdate.
    workInProgress.effectTag |= Update;
  }
  
  function markRef$1(workInProgress) {
    workInProgress.effectTag |= Ref;
  }
  
  function appendAllChildren(parent, workInProgress) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;
    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendInitialChild(parent, node.stateNode);
      } else if (node.tag === HostPortal) {
        // If we have a portal child, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) {
        return;
      }
      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
  
  var updateHostContainer = void 0;
  var updateHostComponent$1 = void 0;
  var updateHostText$1 = void 0;
  if (supportsMutation) {
    // Mutation mode
  
    updateHostContainer = function (workInProgress) {
      // Noop
    };
    updateHostComponent$1 = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext) {
      // TODO: Type this specific to this type of component.
      workInProgress.updateQueue = updatePayload;
      // If the update payload indicates that there is a change or if there
      // is a new ref we mark this as an update. All the work is done in commitWork.
      if (updatePayload) {
        markUpdate(workInProgress);
      }
    };
    updateHostText$1 = function (current, workInProgress, oldText, newText) {
      // If the text differs, mark it as an update. All the work in done in commitWork.
      if (oldText !== newText) {
        markUpdate(workInProgress);
      }
    };
  } else if (supportsPersistence) {
    // Persistent host tree mode
  
    // An unfortunate fork of appendAllChildren because we have two different parent types.
    var appendAllChildrenToContainer = function (containerChildSet, workInProgress) {
      // We only have the top Fiber that was created but we need recurse down its
      // children to find all the terminal nodes.
      var node = workInProgress.child;
      while (node !== null) {
        if (node.tag === HostComponent || node.tag === HostText) {
          appendChildToContainerChildSet(containerChildSet, node.stateNode);
        } else if (node.tag === HostPortal) {
          // If we have a portal child, then we don't want to traverse
          // down its children. Instead, we'll get insertions from each child in
          // the portal directly.
        } else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === workInProgress) {
          return;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === workInProgress) {
            return;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    };
    updateHostContainer = function (workInProgress) {
      var portalOrRoot = workInProgress.stateNode;
      var childrenUnchanged = workInProgress.firstEffect === null;
      if (childrenUnchanged) {
        // No changes, just reuse the existing instance.
      } else {
        var container = portalOrRoot.containerInfo;
        var newChildSet = createContainerChildSet(container);
        // If children might have changed, we have to add them all to the set.
        appendAllChildrenToContainer(newChildSet, workInProgress);
        portalOrRoot.pendingChildren = newChildSet;
        // Schedule an update on the container to swap out the container.
        markUpdate(workInProgress);
        finalizeContainerChildren(container, newChildSet);
      }
    };
    updateHostComponent$1 = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext) {
      // If there are no effects associated with this node, then none of our children had any updates.
      // This guarantees that we can reuse all of them.
      var childrenUnchanged = workInProgress.firstEffect === null;
      var currentInstance = current.stateNode;
      if (childrenUnchanged && updatePayload === null) {
        // No changes, just reuse the existing instance.
        // Note that this might release a previous clone.
        workInProgress.stateNode = currentInstance;
      } else {
        var recyclableInstance = workInProgress.stateNode;
        var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);
        if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
          markUpdate(workInProgress);
        }
        workInProgress.stateNode = newInstance;
        if (childrenUnchanged) {
          // If there are no other effects in this tree, we need to flag this node as having one.
          // Even though we're not going to use it for anything.
          // Otherwise parents won't know that there are new children to propagate upwards.
          markUpdate(workInProgress);
        } else {
          // If children might have changed, we have to add them all to the set.
          appendAllChildren(newInstance, workInProgress);
        }
      }
    };
    updateHostText$1 = function (current, workInProgress, oldText, newText) {
      if (oldText !== newText) {
        // If the text content differs, we'll create a new text instance for it.
        var rootContainerInstance = getRootHostContainer();
        var currentHostContext = getHostContext();
        workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
        // We'll have to mark it as having an effect, even though we won't use the effect for anything.
        // This lets the parents know that at least one of their children has changed.
        markUpdate(workInProgress);
      }
    };
  } else {
    // No host operations
    updateHostContainer = function (workInProgress) {
      // Noop
    };
    updateHostComponent$1 = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext) {
      // Noop
    };
    updateHostText$1 = function (current, workInProgress, oldText, newText) {
      // Noop
    };
  }
  
  function completeWork(current, workInProgress, renderExpirationTime) {
    var newProps = workInProgress.pendingProps;
  
    if (enableProfilerTimer) {
      if (workInProgress.mode & ProfileMode) {
        recordElapsedActualRenderTime(workInProgress);
      }
    }
  
    switch (workInProgress.tag) {
      case FunctionalComponent:
        return null;
      case ClassComponent:
        {
          // We are leaving this subtree, so pop context if any.
          popContextProvider(workInProgress);
          return null;
        }
      case HostRoot:
        {
          popHostContainer(workInProgress);
          popTopLevelContextObject(workInProgress);
          var fiberRoot = workInProgress.stateNode;
          if (fiberRoot.pendingContext) {
            fiberRoot.context = fiberRoot.pendingContext;
            fiberRoot.pendingContext = null;
          }
          if (current === null || current.child === null) {
            // If we hydrated, pop so that we can delete any remaining children
            // that weren't hydrated.
            popHydrationState(workInProgress);
            // This resets the hacky state to fix isMounted before committing.
            // TODO: Delete this when we delete isMounted and findDOMNode.
            workInProgress.effectTag &= ~Placement;
          }
          updateHostContainer(workInProgress);
          return null;
        }
      case HostComponent:
        {
          popHostContext(workInProgress);
          var rootContainerInstance = getRootHostContainer();
          var type = workInProgress.type;
          if (current !== null && workInProgress.stateNode != null) {
            // If we have an alternate, that means this is an update and we need to
            // schedule a side-effect to do the updates.
            var oldProps = current.memoizedProps;
            // If we get updated because one of our children updated, we don't
            // have newProps so we'll have to reuse them.
            // TODO: Split the update API as separate for the props vs. children.
            // Even better would be if children weren't special cased at all tho.
            var instance = workInProgress.stateNode;
            var currentHostContext = getHostContext();
            // TODO: Experiencing an error where oldProps is null. Suggests a host
            // component is hitting the resume path. Figure out why. Possibly
            // related to `hidden`.
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
  
            updateHostComponent$1(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext);
  
            if (current.ref !== workInProgress.ref) {
              markRef$1(workInProgress);
            }
          } else {
            if (!newProps) {
              !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
              // This can happen when we abort work.
              return null;
            }
  
            var _currentHostContext = getHostContext();
            // TODO: Move createInstance to beginWork and keep it on a context
            // "stack" as the parent. Then append children as we go in beginWork
            // or completeWork depending on we want to add then top->down or
            // bottom->up. Top->down is faster in IE11.
            var wasHydrated = popHydrationState(workInProgress);
            if (wasHydrated) {
              // TODO: Move this and createInstance step into the beginPhase
              // to consolidate.
              if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, _currentHostContext)) {
                // If changes to the hydrated node needs to be applied at the
                // commit-phase we mark this as such.
                markUpdate(workInProgress);
              }
            } else {
              var _instance = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);
  
              appendAllChildren(_instance, workInProgress);
  
              // Certain renderers require commit-time effects for initial mount.
              // (eg DOM renderer supports auto-focus for certain elements).
              // Make sure such renderers get scheduled for later work.
              if (finalizeInitialChildren(_instance, type, newProps, rootContainerInstance, _currentHostContext)) {
                markUpdate(workInProgress);
              }
              workInProgress.stateNode = _instance;
            }
  
            if (workInProgress.ref !== null) {
              // If there is a ref on a host node we need to schedule a callback
              markRef$1(workInProgress);
            }
          }
          return null;
        }
      case HostText:
        {
          var newText = newProps;
          if (current && workInProgress.stateNode != null) {
            var oldText = current.memoizedProps;
            // If we have an alternate, that means this is an update and we need
            // to schedule a side-effect to do the updates.
            updateHostText$1(current, workInProgress, oldText, newText);
          } else {
            if (typeof newText !== 'string') {
              !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
              // This can happen when we abort work.
              return null;
            }
            var _rootContainerInstance = getRootHostContainer();
            var _currentHostContext2 = getHostContext();
            var _wasHydrated = popHydrationState(workInProgress);
            if (_wasHydrated) {
              if (prepareToHydrateHostTextInstance(workInProgress)) {
                markUpdate(workInProgress);
              }
            } else {
              workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
            }
          }
          return null;
        }
      case ForwardRef:
        return null;
      case TimeoutComponent:
        return null;
      case Fragment:
        return null;
      case Mode:
        return null;
      case Profiler:
        return null;
      case HostPortal:
        popHostContainer(workInProgress);
        updateHostContainer(workInProgress);
        return null;
      case ContextProvider:
        // Pop provider fiber
        popProvider(workInProgress);
        return null;
      case ContextConsumer:
        return null;
      // Error cases
      case IndeterminateComponent:
        invariant(false, 'An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.');
      // eslint-disable-next-line no-fallthrough
      default:
        invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
    }
  }
  
  // This module is forked in different environments.
  // By default, return `true` to log errors to the console.
  // Forks can return `false` if this isn't desirable.
  function showErrorDialog(capturedError) {
    return true;
  }
  
  function logCapturedError(capturedError) {
    var logError = showErrorDialog(capturedError);
  
    // Allow injected showErrorDialog() to prevent default console.error logging.
    // This enables renderers like ReactNative to better manage redbox behavior.
    if (logError === false) {
      return;
    }
  
    var error = capturedError.error;
    var suppressLogging = error && error.suppressReactErrorLogging;
    if (suppressLogging) {
      return;
    }
  
    {
      var componentName = capturedError.componentName,
          componentStack = capturedError.componentStack,
          errorBoundaryName = capturedError.errorBoundaryName,
          errorBoundaryFound = capturedError.errorBoundaryFound,
          willRetry = capturedError.willRetry;
  
  
      var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';
  
      var errorBoundaryMessage = void 0;
      // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
      if (errorBoundaryFound && errorBoundaryName) {
        if (willRetry) {
          errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
        } else {
          errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
        }
      } else {
        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
      }
      var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);
  
      // In development, we provide our own message with just the component stack.
      // We don't include the original error message and JS stack because the browser
      // has already printed it. Even if the application swallows the error, it is still
      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
      console.error(combinedMessage);
    }
  }
  
  var invokeGuardedCallback$3 = ReactErrorUtils.invokeGuardedCallback;
  var hasCaughtError$1 = ReactErrorUtils.hasCaughtError;
  var clearCaughtError$1 = ReactErrorUtils.clearCaughtError;
  
  
  var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
  {
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
  }
  
  function logError(boundary, errorInfo) {
    var source = errorInfo.source;
    var stack = errorInfo.stack;
    if (stack === null && source !== null) {
      stack = getStackAddendumByWorkInProgressFiber(source);
    }
  
    var capturedError = {
      componentName: source !== null ? getComponentName(source) : null,
      componentStack: stack !== null ? stack : '',
      error: errorInfo.value,
      errorBoundary: null,
      errorBoundaryName: null,
      errorBoundaryFound: false,
      willRetry: false
    };
  
    if (boundary !== null && boundary.tag === ClassComponent) {
      capturedError.errorBoundary = boundary.stateNode;
      capturedError.errorBoundaryName = getComponentName(boundary);
      capturedError.errorBoundaryFound = true;
      capturedError.willRetry = true;
    }
  
    try {
      logCapturedError(capturedError);
    } catch (e) {
      // Prevent cycle if logCapturedError() throws.
      // A cycle may still occur if logCapturedError renders a component that throws.
      var suppressLogging = e && e.suppressReactErrorLogging;
      if (!suppressLogging) {
        console.error(e);
      }
    }
  }
  
  var callComponentWillUnmountWithTimer = function (current, instance) {
    startPhaseTimer(current, 'componentWillUnmount');
    instance.props = current.memoizedProps;
    instance.state = current.memoizedState;
    instance.componentWillUnmount();
    stopPhaseTimer();
  };
  
  // Capture errors so they don't interrupt unmounting.
  function safelyCallComponentWillUnmount(current, instance) {
    {
      invokeGuardedCallback$3(null, callComponentWillUnmountWithTimer, null, current, instance);
      if (hasCaughtError$1()) {
        var unmountError = clearCaughtError$1();
        captureCommitPhaseError(current, unmountError);
      }
    }
  }
  
  function safelyDetachRef(current) {
    var ref = current.ref;
    if (ref !== null) {
      if (typeof ref === 'function') {
        {
          invokeGuardedCallback$3(null, ref, null, null);
          if (hasCaughtError$1()) {
            var refError = clearCaughtError$1();
            captureCommitPhaseError(current, refError);
          }
        }
      } else {
        ref.current = null;
      }
    }
  }
  
  function commitBeforeMutationLifeCycles(current, finishedWork) {
    switch (finishedWork.tag) {
      case ClassComponent:
        {
          if (finishedWork.effectTag & Snapshot) {
            if (current !== null) {
              var prevProps = current.memoizedProps;
              var prevState = current.memoizedState;
              startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
              var instance = finishedWork.stateNode;
              instance.props = finishedWork.memoizedProps;
              instance.state = finishedWork.memoizedState;
              var snapshot = instance.getSnapshotBeforeUpdate(prevProps, prevState);
              {
                var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                  didWarnSet.add(finishedWork.type);
                  warning(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork));
                }
              }
              instance.__reactInternalSnapshotBeforeUpdate = snapshot;
              stopPhaseTimer();
            }
          }
          return;
        }
      case HostRoot:
      case HostComponent:
      case HostText:
      case HostPortal:
        // Nothing to do for these component types
        return;
      default:
        {
          invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
        }
    }
  }
  
  function commitLifeCycles(finishedRoot, current, finishedWork, currentTime, committedExpirationTime) {
    switch (finishedWork.tag) {
      case ClassComponent:
        {
          var instance = finishedWork.stateNode;
          if (finishedWork.effectTag & Update) {
            if (current === null) {
              startPhaseTimer(finishedWork, 'componentDidMount');
              instance.props = finishedWork.memoizedProps;
              instance.state = finishedWork.memoizedState;
              instance.componentDidMount();
              stopPhaseTimer();
            } else {
              var prevProps = current.memoizedProps;
              var prevState = current.memoizedState;
              startPhaseTimer(finishedWork, 'componentDidUpdate');
              instance.props = finishedWork.memoizedProps;
              instance.state = finishedWork.memoizedState;
              instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
              stopPhaseTimer();
            }
          }
          var updateQueue = finishedWork.updateQueue;
          if (updateQueue !== null) {
            instance.props = finishedWork.memoizedProps;
            instance.state = finishedWork.memoizedState;
            commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
          }
          return;
        }
      case HostRoot:
        {
          var _updateQueue = finishedWork.updateQueue;
          if (_updateQueue !== null) {
            var _instance = null;
            if (finishedWork.child !== null) {
              switch (finishedWork.child.tag) {
                case HostComponent:
                  _instance = getPublicInstance(finishedWork.child.stateNode);
                  break;
                case ClassComponent:
                  _instance = finishedWork.child.stateNode;
                  break;
              }
            }
            commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
          }
          return;
        }
      case HostComponent:
        {
          var _instance2 = finishedWork.stateNode;
  
          // Renderers may schedule work to be done after host components are mounted
          // (eg DOM renderer may schedule auto-focus for inputs and form controls).
          // These effects should only be committed when components are first mounted,
          // aka when there is no current/alternate.
          if (current === null && finishedWork.effectTag & Update) {
            var type = finishedWork.type;
            var props = finishedWork.memoizedProps;
            commitMount(_instance2, type, props, finishedWork);
          }
  
          return;
        }
      case HostText:
        {
          // We have no life-cycles associated with text.
          return;
        }
      case HostPortal:
        {
          // We have no life-cycles associated with portals.
          return;
        }
      case Profiler:
        {
          // We have no life-cycles associated with Profiler.
          return;
        }
      case TimeoutComponent:
        {
          // We have no life-cycles associated with Timeouts.
          return;
        }
      default:
        {
          invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
        }
    }
  }
  
  function commitAttachRef(finishedWork) {
    var ref = finishedWork.ref;
    if (ref !== null) {
      var instance = finishedWork.stateNode;
      var instanceToUse = void 0;
      switch (finishedWork.tag) {
        case HostComponent:
          instanceToUse = getPublicInstance(instance);
          break;
        default:
          instanceToUse = instance;
      }
      if (typeof ref === 'function') {
        ref(instanceToUse);
      } else {
        {
          if (!ref.hasOwnProperty('current')) {
            warning(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork), getStackAddendumByWorkInProgressFiber(finishedWork));
          }
        }
  
        ref.current = instanceToUse;
      }
    }
  }
  
  function commitDetachRef(current) {
    var currentRef = current.ref;
    if (currentRef !== null) {
      if (typeof currentRef === 'function') {
        currentRef(null);
      } else {
        currentRef.current = null;
      }
    }
  }
  
  // User-originating errors (lifecycles and refs) should not interrupt
  // deletion, so don't let them throw. Host-originating errors should
  // interrupt deletion, so it's okay
  function commitUnmount(current) {
    if (typeof onCommitUnmount === 'function') {
      onCommitUnmount(current);
    }
  
    switch (current.tag) {
      case ClassComponent:
        {
          safelyDetachRef(current);
          var instance = current.stateNode;
          if (typeof instance.componentWillUnmount === 'function') {
            safelyCallComponentWillUnmount(current, instance);
          }
          return;
        }
      case HostComponent:
        {
          safelyDetachRef(current);
          return;
        }
      case HostPortal:
        {
          // TODO: this is recursive.
          // We are also not using this parent because
          // the portal will get pushed immediately.
          if (supportsMutation) {
            unmountHostComponents(current);
          } else if (supportsPersistence) {
            emptyPortalContainer(current);
          }
          return;
        }
    }
  }
  
  function commitNestedUnmounts(root) {
    // While we're inside a removed host node we don't want to call
    // removeChild on the inner nodes because they're removed by the top
    // call anyway. We also want to call componentWillUnmount on all
    // composites before this host node is removed from the tree. Therefore
    var node = root;
    while (true) {
      commitUnmount(node);
      // Visit children because they may contain more composite or host nodes.
      // Skip portals because commitUnmount() currently visits them recursively.
      if (node.child !== null && (
      // If we use mutation we drill down into portals using commitUnmount above.
      // If we don't use mutation we drill down into portals here instead.
      !supportsMutation || node.tag !== HostPortal)) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === root) {
        return;
      }
      while (node.sibling === null) {
        if (node.return === null || node.return === root) {
          return;
        }
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
  
  function detachFiber(current) {
    // Cut off the return pointers to disconnect it from the tree. Ideally, we
    // should clear the child pointer of the parent alternate to let this
    // get GC:ed but we don't know which for sure which parent is the current
    // one so we'll settle for GC:ing the subtree of this child. This child
    // itself will be GC:ed when the parent updates the next time.
    current.return = null;
    current.child = null;
    if (current.alternate) {
      current.alternate.child = null;
      current.alternate.return = null;
    }
  }
  
  function emptyPortalContainer(current) {
    if (!supportsPersistence) {
      return;
    }
  
    var portal = current.stateNode;
    var containerInfo = portal.containerInfo;
  
    var emptyChildSet = createContainerChildSet(containerInfo);
    replaceContainerChildren(containerInfo, emptyChildSet);
  }
  
  function commitContainer(finishedWork) {
    if (!supportsPersistence) {
      return;
    }
  
    switch (finishedWork.tag) {
      case ClassComponent:
        {
          return;
        }
      case HostComponent:
        {
          return;
        }
      case HostText:
        {
          return;
        }
      case HostRoot:
      case HostPortal:
        {
          var portalOrRoot = finishedWork.stateNode;
          var containerInfo = portalOrRoot.containerInfo,
              _pendingChildren = portalOrRoot.pendingChildren;
  
          replaceContainerChildren(containerInfo, _pendingChildren);
          return;
        }
      default:
        {
          invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
        }
    }
  }
  
  function getHostParentFiber(fiber) {
    var parent = fiber.return;
    while (parent !== null) {
      if (isHostParent(parent)) {
        return parent;
      }
      parent = parent.return;
    }
    invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
  }
  
  function isHostParent(fiber) {
    return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
  }
  
  function getHostSibling(fiber) {
    // We're going to search forward into the tree until we find a sibling host
    // node. Unfortunately, if multiple insertions are done in a row we have to
    // search past them. This leads to exponential search for the next sibling.
    var node = fiber;
    siblings: while (true) {
      // If we didn't find anything, let's try the next sibling.
      while (node.sibling === null) {
        if (node.return === null || isHostParent(node.return)) {
          // If we pop out of the root or hit the parent the fiber we are the
          // last sibling.
          return null;
        }
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
      while (node.tag !== HostComponent && node.tag !== HostText) {
        // If it is not host node and, we might have a host node inside it.
        // Try to search down until we find one.
        if (node.effectTag & Placement) {
          // If we don't have a child, try the siblings instead.
          continue siblings;
        }
        // If we don't have a child, try the siblings instead.
        // We also skip portals because they are not part of this host tree.
        if (node.child === null || node.tag === HostPortal) {
          continue siblings;
        } else {
          node.child.return = node;
          node = node.child;
        }
      }
      // Check if this host node is stable or about to be placed.
      if (!(node.effectTag & Placement)) {
        // Found it!
        return node.stateNode;
      }
    }
  }
  
  function commitPlacement(finishedWork) {
    if (!supportsMutation) {
      return;
    }
  
    // Recursively insert all host nodes into the parent.
    var parentFiber = getHostParentFiber(finishedWork);
    var parent = void 0;
    var isContainer = void 0;
    switch (parentFiber.tag) {
      case HostComponent:
        parent = parentFiber.stateNode;
        isContainer = false;
        break;
      case HostRoot:
        parent = parentFiber.stateNode.containerInfo;
        isContainer = true;
        break;
      case HostPortal:
        parent = parentFiber.stateNode.containerInfo;
        isContainer = true;
        break;
      default:
        invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
    }
    if (parentFiber.effectTag & ContentReset) {
      // Reset the text content of the parent before doing any insertions
      resetTextContent(parent);
      // Clear ContentReset from the effect tag
      parentFiber.effectTag &= ~ContentReset;
    }
  
    var before = getHostSibling(finishedWork);
    // We only have the top Fiber that was inserted but we need recurse down its
    // children to find all the terminal nodes.
    var node = finishedWork;
    while (true) {
      if (node.tag === HostComponent || node.tag === HostText) {
        if (before) {
          if (isContainer) {
            insertInContainerBefore(parent, node.stateNode, before);
          } else {
            insertBefore(parent, node.stateNode, before);
          }
        } else {
          if (isContainer) {
            appendChildToContainer(parent, node.stateNode);
          } else {
            appendChild(parent, node.stateNode);
          }
        }
      } else if (node.tag === HostPortal) {
        // If the insertion itself is a portal, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === finishedWork) {
        return;
      }
      while (node.sibling === null) {
        if (node.return === null || node.return === finishedWork) {
          return;
        }
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
  
  function unmountHostComponents(current) {
    // We only have the top Fiber that was inserted but we need recurse down its
    var node = current;
  
    // Each iteration, currentParent is populated with node's host parent if not
    // currentParentIsValid.
    var currentParentIsValid = false;
    var currentParent = void 0;
    var currentParentIsContainer = void 0;
  
    while (true) {
      if (!currentParentIsValid) {
        var parent = node.return;
        findParent: while (true) {
          !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          switch (parent.tag) {
            case HostComponent:
              currentParent = parent.stateNode;
              currentParentIsContainer = false;
              break findParent;
            case HostRoot:
              currentParent = parent.stateNode.containerInfo;
              currentParentIsContainer = true;
              break findParent;
            case HostPortal:
              currentParent = parent.stateNode.containerInfo;
              currentParentIsContainer = true;
              break findParent;
          }
          parent = parent.return;
        }
        currentParentIsValid = true;
      }
  
      if (node.tag === HostComponent || node.tag === HostText) {
        commitNestedUnmounts(node);
        // After all the children have unmounted, it is now safe to remove the
        // node from the tree.
        if (currentParentIsContainer) {
          removeChildFromContainer(currentParent, node.stateNode);
        } else {
          removeChild(currentParent, node.stateNode);
        }
        // Don't visit children because we already visited them.
      } else if (node.tag === HostPortal) {
        // When we go into a portal, it becomes the parent to remove from.
        // We will reassign it back when we pop the portal on the way up.
        currentParent = node.stateNode.containerInfo;
        // Visit children because portals might contain host components.
        if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }
      } else {
        commitUnmount(node);
        // Visit children because we may find more host components below.
        if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }
      }
      if (node === current) {
        return;
      }
      while (node.sibling === null) {
        if (node.return === null || node.return === current) {
          return;
        }
        node = node.return;
        if (node.tag === HostPortal) {
          // When we go out of the portal, we need to restore the parent.
          // Since we don't keep a stack of them, we will search for it.
          currentParentIsValid = false;
        }
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
  
  function commitDeletion(current) {
    if (supportsMutation) {
      // Recursively delete all host nodes from the parent.
      // Detach refs and call componentWillUnmount() on the whole subtree.
      unmountHostComponents(current);
    } else {
      // Detach refs and call componentWillUnmount() on the whole subtree.
      commitNestedUnmounts(current);
    }
    detachFiber(current);
  }
  
  function commitWork(current, finishedWork) {
    if (!supportsMutation) {
      commitContainer(finishedWork);
      return;
    }
  
    switch (finishedWork.tag) {
      case ClassComponent:
        {
          return;
        }
      case HostComponent:
        {
          var instance = finishedWork.stateNode;
          if (instance != null) {
            // Commit the work prepared earlier.
            var newProps = finishedWork.memoizedProps;
            // For hydration we reuse the update path but we treat the oldProps
            // as the newProps. The updatePayload will contain the real change in
            // this case.
            var oldProps = current !== null ? current.memoizedProps : newProps;
            var type = finishedWork.type;
            // TODO: Type the updateQueue to be specific to host components.
            var updatePayload = finishedWork.updateQueue;
            finishedWork.updateQueue = null;
            if (updatePayload !== null) {
              commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
            }
          }
          return;
        }
      case HostText:
        {
          !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          var textInstance = finishedWork.stateNode;
          var newText = finishedWork.memoizedProps;
          // For hydration we reuse the update path but we treat the oldProps
          // as the newProps. The updatePayload will contain the real change in
          // this case.
          var oldText = current !== null ? current.memoizedProps : newText;
          commitTextUpdate(textInstance, oldText, newText);
          return;
        }
      case HostRoot:
        {
          return;
        }
      case Profiler:
        {
          if (enableProfilerTimer) {
            var onRender = finishedWork.memoizedProps.onRender;
            onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseTime, finishedWork.actualStartTime, getCommitTime());
          }
          return;
        }
      case TimeoutComponent:
        {
          return;
        }
      default:
        {
          invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
        }
    }
  }
  
  function commitResetTextContent(current) {
    if (!supportsMutation) {
      return;
    }
    resetTextContent(current.stateNode);
  }
  
  function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
    var update = createUpdate(expirationTime);
    // Unmount the root by rendering null.
    update.tag = CaptureUpdate;
    // Caution: React DevTools currently depends on this property
    // being called "element".
    update.payload = { element: null };
    var error = errorInfo.value;
    update.callback = function () {
      onUncaughtError(error);
      logError(fiber, errorInfo);
    };
    return update;
  }
  
  function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
    var update = createUpdate(expirationTime);
    update.tag = CaptureUpdate;
    var getDerivedStateFromCatch = fiber.type.getDerivedStateFromCatch;
    if (enableGetDerivedStateFromCatch && typeof getDerivedStateFromCatch === 'function') {
      var error = errorInfo.value;
      update.payload = function () {
        return getDerivedStateFromCatch(error);
      };
    }
  
    var inst = fiber.stateNode;
    if (inst !== null && typeof inst.componentDidCatch === 'function') {
      update.callback = function callback() {
        if (!enableGetDerivedStateFromCatch || getDerivedStateFromCatch !== 'function') {
          // To preserve the preexisting retry behavior of error boundaries,
          // we keep track of which ones already failed during this batch.
          // This gets reset before we yield back to the browser.
          // TODO: Warn in strict mode if getDerivedStateFromCatch is
          // not defined.
          markLegacyErrorBoundaryAsFailed(this);
        }
        var error = errorInfo.value;
        var stack = errorInfo.stack;
        logError(fiber, errorInfo);
        this.componentDidCatch(error, {
          componentStack: stack !== null ? stack : ''
        });
      };
    }
    return update;
  }
  
  function schedulePing(finishedWork) {
    // Once the promise resolves, we should try rendering the non-
    // placeholder state again.
    var currentTime = recalculateCurrentTime();
    var expirationTime = computeExpirationForFiber(currentTime, finishedWork);
    var recoveryUpdate = createUpdate(expirationTime);
    enqueueUpdate(finishedWork, recoveryUpdate, expirationTime);
    scheduleWork$1(finishedWork, expirationTime);
  }
  
  function throwException(root, returnFiber, sourceFiber, value, renderIsExpired, renderExpirationTime, currentTimeMs) {
    // The source fiber did not complete.
    sourceFiber.effectTag |= Incomplete;
    // Its effect list is no longer valid.
    sourceFiber.firstEffect = sourceFiber.lastEffect = null;
  
    if (enableSuspense && value !== null && typeof value === 'object' && typeof value.then === 'function') {
      // This is a thenable.
      var thenable = value;
  
      var expirationTimeMs = expirationTimeToMs(renderExpirationTime);
      var startTimeMs = expirationTimeMs - 5000;
      var elapsedMs = currentTimeMs - startTimeMs;
      if (elapsedMs < 0) {
        elapsedMs = 0;
      }
      var remainingTimeMs = expirationTimeMs - currentTimeMs;
  
      // Find the earliest timeout of all the timeouts in the ancestor path.
      // TODO: Alternatively, we could store the earliest timeout on the context
      // stack, rather than searching on every suspend.
      var _workInProgress = returnFiber;
      var earliestTimeoutMs = -1;
      searchForEarliestTimeout: do {
        if (_workInProgress.tag === TimeoutComponent) {
          var current = _workInProgress.alternate;
          if (current !== null && current.memoizedState === true) {
            // A parent Timeout already committed in a placeholder state. We
            // need to handle this promise immediately. In other words, we
            // should never suspend inside a tree that already expired.
            earliestTimeoutMs = 0;
            break searchForEarliestTimeout;
          }
          var timeoutPropMs = _workInProgress.pendingProps.ms;
          if (typeof timeoutPropMs === 'number') {
            if (timeoutPropMs <= 0) {
              earliestTimeoutMs = 0;
              break searchForEarliestTimeout;
            } else if (earliestTimeoutMs === -1 || timeoutPropMs < earliestTimeoutMs) {
              earliestTimeoutMs = timeoutPropMs;
            }
          } else if (earliestTimeoutMs === -1) {
            earliestTimeoutMs = remainingTimeMs;
          }
        }
        _workInProgress = _workInProgress.return;
      } while (_workInProgress !== null);
  
      // Compute the remaining time until the timeout.
      var msUntilTimeout = earliestTimeoutMs - elapsedMs;
  
      if (renderExpirationTime === Never || msUntilTimeout > 0) {
        // There's still time remaining.
        suspendRoot(root, thenable, msUntilTimeout, renderExpirationTime);
        var onResolveOrReject = function () {
          retrySuspendedRoot(root, renderExpirationTime);
        };
        thenable.then(onResolveOrReject, onResolveOrReject);
        return;
      } else {
        // No time remaining. Need to fallback to placeholder.
        // Find the nearest timeout that can be retried.
        _workInProgress = returnFiber;
        do {
          switch (_workInProgress.tag) {
            case HostRoot:
              {
                // The root expired, but no fallback was provided. Throw a
                // helpful error.
                var message = renderExpirationTime === Sync ? 'A synchronous update was suspended, but no fallback UI ' + 'was provided.' : 'An update was suspended for longer than the timeout, ' + 'but no fallback UI was provided.';
                value = new Error(message);
                break;
              }
            case TimeoutComponent:
              {
                if ((_workInProgress.effectTag & DidCapture) === NoEffect) {
                  _workInProgress.effectTag |= ShouldCapture;
                  var _onResolveOrReject = schedulePing.bind(null, _workInProgress);
                  thenable.then(_onResolveOrReject, _onResolveOrReject);
                  return;
                }
                // Already captured during this render. Continue to the next
                // Timeout ancestor.
                break;
              }
          }
          _workInProgress = _workInProgress.return;
        } while (_workInProgress !== null);
      }
    }
  
    // We didn't find a boundary that could handle this type of exception. Start
    // over and traverse parent path again, this time treating the exception
    // as an error.
    value = createCapturedValue(value, sourceFiber);
    var workInProgress = returnFiber;
    do {
      switch (workInProgress.tag) {
        case HostRoot:
          {
            var _errorInfo = value;
            workInProgress.effectTag |= ShouldCapture;
            var update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);
            enqueueCapturedUpdate(workInProgress, update, renderExpirationTime);
            return;
          }
        case ClassComponent:
          // Capture and retry
          var errorInfo = value;
          var ctor = workInProgress.type;
          var instance = workInProgress.stateNode;
          if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromCatch === 'function' && enableGetDerivedStateFromCatch || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
            workInProgress.effectTag |= ShouldCapture;
            // Schedule the error boundary to re-render using updated state
            var _update = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);
            enqueueCapturedUpdate(workInProgress, _update, renderExpirationTime);
            return;
          }
          break;
        default:
          break;
      }
      workInProgress = workInProgress.return;
    } while (workInProgress !== null);
  }
  
  function unwindWork(workInProgress, renderIsExpired, renderExpirationTime) {
    if (enableProfilerTimer) {
      if (workInProgress.mode & ProfileMode) {
        recordElapsedActualRenderTime(workInProgress);
      }
    }
  
    switch (workInProgress.tag) {
      case ClassComponent:
        {
          popContextProvider(workInProgress);
          var effectTag = workInProgress.effectTag;
          if (effectTag & ShouldCapture) {
            workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
            return workInProgress;
          }
          return null;
        }
      case HostRoot:
        {
          popHostContainer(workInProgress);
          popTopLevelContextObject(workInProgress);
          var _effectTag = workInProgress.effectTag;
          if (_effectTag & ShouldCapture) {
            workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
            return workInProgress;
          }
          return null;
        }
      case HostComponent:
        {
          popHostContext(workInProgress);
          return null;
        }
      case TimeoutComponent:
        {
          var _effectTag2 = workInProgress.effectTag;
          if (_effectTag2 & ShouldCapture) {
            workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
            return workInProgress;
          }
          return null;
        }
      case HostPortal:
        popHostContainer(workInProgress);
        return null;
      case ContextProvider:
        popProvider(workInProgress);
        return null;
      default:
        return null;
    }
  }
  
  function unwindInterruptedWork(interruptedWork) {
    if (enableProfilerTimer) {
      if (interruptedWork.mode & ProfileMode) {
        // Resume in case we're picking up on work that was paused.
        resumeActualRenderTimerIfPaused();
        recordElapsedActualRenderTime(interruptedWork);
      }
    }
  
    switch (interruptedWork.tag) {
      case ClassComponent:
        {
          popContextProvider(interruptedWork);
          break;
        }
      case HostRoot:
        {
          popHostContainer(interruptedWork);
          popTopLevelContextObject(interruptedWork);
          break;
        }
      case HostComponent:
        {
          popHostContext(interruptedWork);
          break;
        }
      case HostPortal:
        popHostContainer(interruptedWork);
        break;
      case ContextProvider:
        popProvider(interruptedWork);
        break;
      default:
        break;
    }
  }
  
  var invokeGuardedCallback$2 = ReactErrorUtils.invokeGuardedCallback;
  var hasCaughtError = ReactErrorUtils.hasCaughtError;
  var clearCaughtError = ReactErrorUtils.clearCaughtError;
  
  
  var didWarnAboutStateTransition = void 0;
  var didWarnSetStateChildContext = void 0;
  var warnAboutUpdateOnUnmounted = void 0;
  var warnAboutInvalidUpdates = void 0;
  
  {
    didWarnAboutStateTransition = false;
    didWarnSetStateChildContext = false;
    var didWarnStateUpdateForUnmountedComponent = {};
  
    warnAboutUpdateOnUnmounted = function (fiber) {
      // We show the whole stack but dedupe on the top component's name because
      // the problematic code almost always lies inside that component.
      var componentName = getComponentName(fiber) || 'ReactClass';
      if (didWarnStateUpdateForUnmountedComponent[componentName]) {
        return;
      }
      warning(false, "Can't call setState (or forceUpdate) on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in the ' + 'componentWillUnmount method.%s', getStackAddendumByWorkInProgressFiber(fiber));
      didWarnStateUpdateForUnmountedComponent[componentName] = true;
    };
  
    warnAboutInvalidUpdates = function (instance) {
      switch (ReactDebugCurrentFiber.phase) {
        case 'getChildContext':
          if (didWarnSetStateChildContext) {
            return;
          }
          warning(false, 'setState(...): Cannot call setState() inside getChildContext()');
          didWarnSetStateChildContext = true;
          break;
        case 'render':
          if (didWarnAboutStateTransition) {
            return;
          }
          warning(false, 'Cannot update during an existing state transition (such as within ' + "`render` or another component's constructor). Render methods should " + 'be a pure function of props and state; constructor side-effects are ' + 'an anti-pattern, but can be moved to `componentWillMount`.');
          didWarnAboutStateTransition = true;
          break;
      }
    };
  }
  
  // Represents the current time in ms.
  var originalStartTimeMs = now();
  var mostRecentCurrentTime = msToExpirationTime(0);
  var mostRecentCurrentTimeMs = originalStartTimeMs;
  
  // Used to ensure computeUniqueAsyncExpiration is monotonically increases.
  var lastUniqueAsyncExpiration = 0;
  
  // Represents the expiration time that incoming updates should use. (If this
  // is NoWork, use the default strategy: async updates in async mode, sync
  // updates in sync mode.)
  var expirationContext = NoWork;
  
  var isWorking = false;
  
  // The next work in progress fiber that we're currently working on.
  var nextUnitOfWork = null;
  var nextRoot = null;
  // The time at which we're currently rendering work.
  var nextRenderExpirationTime = NoWork;
  var nextLatestTimeoutMs = -1;
  var nextRenderIsExpired = false;
  
  // The next fiber with an effect that we're currently committing.
  var nextEffect = null;
  
  var isCommitting$1 = false;
  
  var isRootReadyForCommit = false;
  
  var legacyErrorBoundariesThatAlreadyFailed = null;
  
  // Used for performance tracking.
  var interruptedBy = null;
  
  var stashedWorkInProgressProperties = void 0;
  var replayUnitOfWork = void 0;
  var isReplayingFailedUnitOfWork = void 0;
  var originalReplayError = void 0;
  var rethrowOriginalError = void 0;
  if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
    stashedWorkInProgressProperties = null;
    isReplayingFailedUnitOfWork = false;
    originalReplayError = null;
    replayUnitOfWork = function (failedUnitOfWork, thrownValue, isAsync) {
      if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
        // Don't replay promises. Treat everything else like an error.
        // TODO: Need to figure out a different strategy if/when we add
        // support for catching other types.
        return;
      }
  
      // Restore the original state of the work-in-progress
      if (stashedWorkInProgressProperties === null) {
        // This should never happen. Don't throw because this code is DEV-only.
        warning(false, 'Could not replay rendering after an error. This is likely a bug in React. ' + 'Please file an issue.');
        return;
      }
      assignFiberPropertiesInDEV(failedUnitOfWork, stashedWorkInProgressProperties);
  
      switch (failedUnitOfWork.tag) {
        case HostRoot:
          popHostContainer(failedUnitOfWork);
          popTopLevelContextObject(failedUnitOfWork);
          break;
        case HostComponent:
          popHostContext(failedUnitOfWork);
          break;
        case ClassComponent:
          popContextProvider(failedUnitOfWork);
          break;
        case HostPortal:
          popHostContainer(failedUnitOfWork);
          break;
        case ContextProvider:
          popProvider(failedUnitOfWork);
          break;
      }
      // Replay the begin phase.
      isReplayingFailedUnitOfWork = true;
      originalReplayError = thrownValue;
      invokeGuardedCallback$2(null, workLoop, null, isAsync);
      isReplayingFailedUnitOfWork = false;
      originalReplayError = null;
      if (hasCaughtError()) {
        clearCaughtError();
  
        if (enableProfilerTimer) {
          if (failedUnitOfWork.mode & ProfileMode) {
            recordElapsedActualRenderTime(failedUnitOfWork);
          }
  
          // Stop "base" render timer again (after the re-thrown error).
          stopBaseRenderTimerIfRunning();
        }
      } else {
        // If the begin phase did not fail the second time, set this pointer
        // back to the original value.
        nextUnitOfWork = failedUnitOfWork;
      }
    };
    rethrowOriginalError = function () {
      throw originalReplayError;
    };
  }
  
  function resetStack() {
    if (nextUnitOfWork !== null) {
      var interruptedWork = nextUnitOfWork.return;
      while (interruptedWork !== null) {
        unwindInterruptedWork(interruptedWork);
        interruptedWork = interruptedWork.return;
      }
    }
  
    {
      ReactStrictModeWarnings.discardPendingWarnings();
      checkThatStackIsEmpty();
    }
  
    nextRoot = null;
    nextRenderExpirationTime = NoWork;
    nextLatestTimeoutMs = -1;
    nextRenderIsExpired = false;
    nextUnitOfWork = null;
  
    isRootReadyForCommit = false;
  }
  
  function commitAllHostEffects() {
    while (nextEffect !== null) {
      {
        ReactDebugCurrentFiber.setCurrentFiber(nextEffect);
      }
      recordEffect();
  
      var effectTag = nextEffect.effectTag;
  
      if (effectTag & ContentReset) {
        commitResetTextContent(nextEffect);
      }
  
      if (effectTag & Ref) {
        var current = nextEffect.alternate;
        if (current !== null) {
          commitDetachRef(current);
        }
      }
  
      // The following switch statement is only concerned about placement,
      // updates, and deletions. To avoid needing to add a case for every
      // possible bitmap value, we remove the secondary effects from the
      // effect tag and switch on that value.
      var primaryEffectTag = effectTag & (Placement | Update | Deletion);
      switch (primaryEffectTag) {
        case Placement:
          {
            commitPlacement(nextEffect);
            // Clear the "placement" from effect tag so that we know that this is inserted, before
            // any life-cycles like componentDidMount gets called.
            // TODO: findDOMNode doesn't rely on this any more but isMounted
            // does and isMounted is deprecated anyway so we should be able
            // to kill this.
            nextEffect.effectTag &= ~Placement;
            break;
          }
        case PlacementAndUpdate:
          {
            // Placement
            commitPlacement(nextEffect);
            // Clear the "placement" from effect tag so that we know that this is inserted, before
            // any life-cycles like componentDidMount gets called.
            nextEffect.effectTag &= ~Placement;
  
            // Update
            var _current = nextEffect.alternate;
            commitWork(_current, nextEffect);
            break;
          }
        case Update:
          {
            var _current2 = nextEffect.alternate;
            commitWork(_current2, nextEffect);
            break;
          }
        case Deletion:
          {
            commitDeletion(nextEffect);
            break;
          }
      }
      nextEffect = nextEffect.nextEffect;
    }
  
    {
      ReactDebugCurrentFiber.resetCurrentFiber();
    }
  }
  
  function commitBeforeMutationLifecycles() {
    while (nextEffect !== null) {
      var effectTag = nextEffect.effectTag;
  
      if (effectTag & Snapshot) {
        recordEffect();
        var current = nextEffect.alternate;
        commitBeforeMutationLifeCycles(current, nextEffect);
      }
  
      // Don't cleanup effects yet;
      // This will be done by commitAllLifeCycles()
      nextEffect = nextEffect.nextEffect;
    }
  }
  
  function commitAllLifeCycles(finishedRoot, currentTime, committedExpirationTime) {
    {
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
  
      if (warnAboutDeprecatedLifecycles) {
        ReactStrictModeWarnings.flushPendingDeprecationWarnings();
      }
  
      if (warnAboutLegacyContextAPI) {
        ReactStrictModeWarnings.flushLegacyContextWarning();
      }
    }
    while (nextEffect !== null) {
      var effectTag = nextEffect.effectTag;
  
      if (effectTag & (Update | Callback)) {
        recordEffect();
        var current = nextEffect.alternate;
        commitLifeCycles(finishedRoot, current, nextEffect, currentTime, committedExpirationTime);
      }
  
      if (effectTag & Ref) {
        recordEffect();
        commitAttachRef(nextEffect);
      }
  
      var next = nextEffect.nextEffect;
      // Ensure that we clean these up so that we don't accidentally keep them.
      // I'm not actually sure this matters because we can't reset firstEffect
      // and lastEffect since they're on every node, not just the effectful
      // ones. So we have to clean everything as we reuse nodes anyway.
      nextEffect.nextEffect = null;
      // Ensure that we reset the effectTag here so that we can rely on effect
      // tags to reason about the current life-cycle.
      nextEffect = next;
    }
  }
  
  function isAlreadyFailedLegacyErrorBoundary(instance) {
    return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
  }
  
  function markLegacyErrorBoundaryAsFailed(instance) {
    if (legacyErrorBoundariesThatAlreadyFailed === null) {
      legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
    } else {
      legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
  }
  
  function commitRoot(finishedWork) {
    isWorking = true;
    isCommitting$1 = true;
    startCommitTimer();
  
    var root = finishedWork.stateNode;
    !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    var committedExpirationTime = root.pendingCommitExpirationTime;
    !(committedExpirationTime !== NoWork) ? invariant(false, 'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    root.pendingCommitExpirationTime = NoWork;
  
    var currentTime = recalculateCurrentTime();
  
    // Reset this to null before calling lifecycles
    ReactCurrentOwner.current = null;
  
    var firstEffect = void 0;
    if (finishedWork.effectTag > PerformedWork) {
      // A fiber's effect list consists only of its children, not itself. So if
      // the root has an effect, we need to add it to the end of the list. The
      // resulting list is the set that would belong to the root's parent, if
      // it had one; that is, all the effects in the tree including the root.
      if (finishedWork.lastEffect !== null) {
        finishedWork.lastEffect.nextEffect = finishedWork;
        firstEffect = finishedWork.firstEffect;
      } else {
        firstEffect = finishedWork;
      }
    } else {
      // There is no effect on the root.
      firstEffect = finishedWork.firstEffect;
    }
  
    prepareForCommit(root.containerInfo);
  
    // Invoke instances of getSnapshotBeforeUpdate before mutation.
    nextEffect = firstEffect;
    startCommitSnapshotEffectsTimer();
    while (nextEffect !== null) {
      var didError = false;
      var error = void 0;
      {
        invokeGuardedCallback$2(null, commitBeforeMutationLifecycles, null);
        if (hasCaughtError()) {
          didError = true;
          error = clearCaughtError();
        }
      }
      if (didError) {
        !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        captureCommitPhaseError(nextEffect, error);
        // Clean-up
        if (nextEffect !== null) {
          nextEffect = nextEffect.nextEffect;
        }
      }
    }
    stopCommitSnapshotEffectsTimer();
  
    if (enableProfilerTimer) {
      // Mark the current commit time to be shared by all Profilers in this batch.
      // This enables them to be grouped later.
      recordCommitTime();
    }
  
    // Commit all the side-effects within a tree. We'll do this in two passes.
    // The first pass performs all the host insertions, updates, deletions and
    // ref unmounts.
    nextEffect = firstEffect;
    startCommitHostEffectsTimer();
    while (nextEffect !== null) {
      var _didError = false;
      var _error = void 0;
      {
        invokeGuardedCallback$2(null, commitAllHostEffects, null);
        if (hasCaughtError()) {
          _didError = true;
          _error = clearCaughtError();
        }
      }
      if (_didError) {
        !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        captureCommitPhaseError(nextEffect, _error);
        // Clean-up
        if (nextEffect !== null) {
          nextEffect = nextEffect.nextEffect;
        }
      }
    }
    stopCommitHostEffectsTimer();
  
    resetAfterCommit(root.containerInfo);
  
    // The work-in-progress tree is now the current tree. This must come after
    // the first pass of the commit phase, so that the previous tree is still
    // current during componentWillUnmount, but before the second pass, so that
    // the finished work is current during componentDidMount/Update.
    root.current = finishedWork;
  
    // In the second pass we'll perform all life-cycles and ref callbacks.
    // Life-cycles happen as a separate pass so that all placements, updates,
    // and deletions in the entire tree have already been invoked.
    // This pass also triggers any renderer-specific initial effects.
    nextEffect = firstEffect;
    startCommitLifeCyclesTimer();
    while (nextEffect !== null) {
      var _didError2 = false;
      var _error2 = void 0;
      {
        invokeGuardedCallback$2(null, commitAllLifeCycles, null, root, currentTime, committedExpirationTime);
        if (hasCaughtError()) {
          _didError2 = true;
          _error2 = clearCaughtError();
        }
      }
      if (_didError2) {
        !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        captureCommitPhaseError(nextEffect, _error2);
        if (nextEffect !== null) {
          nextEffect = nextEffect.nextEffect;
        }
      }
    }
  
    if (enableProfilerTimer) {
      {
        checkActualRenderTimeStackEmpty();
      }
      resetActualRenderTimer();
    }
  
    isCommitting$1 = false;
    isWorking = false;
    stopCommitLifeCyclesTimer();
    stopCommitTimer();
    if (typeof onCommitRoot === 'function') {
      onCommitRoot(finishedWork.stateNode);
    }
    if (true && ReactFiberInstrumentation_1.debugTool) {
      ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
    }
  
    markCommittedPriorityLevels(root, currentTime, root.current.expirationTime);
    var remainingTime = findNextPendingPriorityLevel(root);
    if (remainingTime === NoWork) {
      // If there's no remaining work, we can clear the set of already failed
      // error boundaries.
      legacyErrorBoundariesThatAlreadyFailed = null;
    }
    return remainingTime;
  }
  
  function resetExpirationTime(workInProgress, renderTime) {
    if (renderTime !== Never && workInProgress.expirationTime === Never) {
      // The children of this component are hidden. Don't bubble their
      // expiration times.
      return;
    }
  
    // Check for pending updates.
    var newExpirationTime = NoWork;
    switch (workInProgress.tag) {
      case HostRoot:
      case ClassComponent:
        {
          var updateQueue = workInProgress.updateQueue;
          if (updateQueue !== null) {
            newExpirationTime = updateQueue.expirationTime;
          }
        }
    }
  
    // TODO: Calls need to visit stateNode
  
    // Bubble up the earliest expiration time.
    // (And "base" render timers if that feature flag is enabled)
    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
      var treeBaseTime = workInProgress.selfBaseTime;
      var child = workInProgress.child;
      while (child !== null) {
        treeBaseTime += child.treeBaseTime;
        if (child.expirationTime !== NoWork && (newExpirationTime === NoWork || newExpirationTime > child.expirationTime)) {
          newExpirationTime = child.expirationTime;
        }
        child = child.sibling;
      }
      workInProgress.treeBaseTime = treeBaseTime;
    } else {
      var _child = workInProgress.child;
      while (_child !== null) {
        if (_child.expirationTime !== NoWork && (newExpirationTime === NoWork || newExpirationTime > _child.expirationTime)) {
          newExpirationTime = _child.expirationTime;
        }
        _child = _child.sibling;
      }
    }
  
    workInProgress.expirationTime = newExpirationTime;
  }
  
  function completeUnitOfWork(workInProgress) {
    // Attempt to complete the current unit of work, then move to the
    // next sibling. If there are no more siblings, return to the
    // parent fiber.
    while (true) {
      // The current, flushed, state of this fiber is the alternate.
      // Ideally nothing should rely on this, but relying on it here
      // means that we don't need an additional field on the work in
      // progress.
      var current = workInProgress.alternate;
      {
        ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
      }
  
      var returnFiber = workInProgress.return;
      var siblingFiber = workInProgress.sibling;
  
      if ((workInProgress.effectTag & Incomplete) === NoEffect) {
        // This fiber completed.
        var next = completeWork(current, workInProgress, nextRenderExpirationTime);
        stopWorkTimer(workInProgress);
        resetExpirationTime(workInProgress, nextRenderExpirationTime);
        {
          ReactDebugCurrentFiber.resetCurrentFiber();
        }
  
        if (next !== null) {
          stopWorkTimer(workInProgress);
          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
          }
          // If completing this work spawned new work, do that next. We'll come
          // back here again.
          return next;
        }
  
        if (returnFiber !== null &&
        // Do not append effects to parents if a sibling failed to complete
        (returnFiber.effectTag & Incomplete) === NoEffect) {
          // Append all the effects of the subtree and this fiber onto the effect
          // list of the parent. The completion order of the children affects the
          // side-effect order.
          if (returnFiber.firstEffect === null) {
            returnFiber.firstEffect = workInProgress.firstEffect;
          }
          if (workInProgress.lastEffect !== null) {
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
            }
            returnFiber.lastEffect = workInProgress.lastEffect;
          }
  
          // If this fiber had side-effects, we append it AFTER the children's
          // side-effects. We can perform certain side-effects earlier if
          // needed, by doing multiple passes over the effect list. We don't want
          // to schedule our own side-effect on our own list because if end up
          // reusing children we'll schedule this effect onto itself since we're
          // at the end.
          var effectTag = workInProgress.effectTag;
          // Skip both NoWork and PerformedWork tags when creating the effect list.
          // PerformedWork effect is read by React DevTools but shouldn't be committed.
          if (effectTag > PerformedWork) {
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = workInProgress;
            } else {
              returnFiber.firstEffect = workInProgress;
            }
            returnFiber.lastEffect = workInProgress;
          }
        }
  
        if (true && ReactFiberInstrumentation_1.debugTool) {
          ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
        }
  
        if (siblingFiber !== null) {
          // If there is more work to do in this returnFiber, do that next.
          return siblingFiber;
        } else if (returnFiber !== null) {
          // If there's no more work in this returnFiber. Complete the returnFiber.
          workInProgress = returnFiber;
          continue;
        } else {
          // We've reached the root.
          isRootReadyForCommit = true;
          return null;
        }
      } else {
        // This fiber did not complete because something threw. Pop values off
        // the stack without entering the complete phase. If this is a boundary,
        // capture values if possible.
        var _next = unwindWork(workInProgress, nextRenderIsExpired, nextRenderExpirationTime);
        // Because this fiber did not complete, don't reset its expiration time.
        if (workInProgress.effectTag & DidCapture) {
          // Restarting an error boundary
          stopFailedWorkTimer(workInProgress);
        } else {
          stopWorkTimer(workInProgress);
        }
  
        {
          ReactDebugCurrentFiber.resetCurrentFiber();
        }
  
        if (_next !== null) {
          stopWorkTimer(workInProgress);
          if (true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
          }
          // If completing this work spawned new work, do that next. We'll come
          // back here again.
          // Since we're restarting, remove anything that is not a host effect
          // from the effect tag.
          _next.effectTag &= HostEffectMask;
          return _next;
        }
  
        if (returnFiber !== null) {
          // Mark the parent fiber as incomplete and clear its effect list.
          returnFiber.firstEffect = returnFiber.lastEffect = null;
          returnFiber.effectTag |= Incomplete;
        }
  
        if (true && ReactFiberInstrumentation_1.debugTool) {
          ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
        }
  
        if (siblingFiber !== null) {
          // If there is more work to do in this returnFiber, do that next.
          return siblingFiber;
        } else if (returnFiber !== null) {
          // If there's no more work in this returnFiber. Complete the returnFiber.
          workInProgress = returnFiber;
          continue;
        } else {
          return null;
        }
      }
    }
  
    // Without this explicit null return Flow complains of invalid return type
    // TODO Remove the above while(true) loop
    // eslint-disable-next-line no-unreachable
    return null;
  }
  
  function performUnitOfWork(workInProgress) {
    // The current, flushed, state of this fiber is the alternate.
    // Ideally nothing should rely on this, but relying on it here
    // means that we don't need an additional field on the work in
    // progress.
    var current = workInProgress.alternate;
  
    // See if beginning this work spawns more work.
    startWorkTimer(workInProgress);
    {
      ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
    }
  
    if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
      stashedWorkInProgressProperties = assignFiberPropertiesInDEV(stashedWorkInProgressProperties, workInProgress);
    }
  
    var next = void 0;
    if (enableProfilerTimer) {
      if (workInProgress.mode & ProfileMode) {
        startBaseRenderTimer();
      }
  
      next = beginWork(current, workInProgress, nextRenderExpirationTime);
  
      if (workInProgress.mode & ProfileMode) {
        // Update "base" time if the render wasn't bailed out on.
        recordElapsedBaseRenderTimeIfRunning(workInProgress);
        stopBaseRenderTimerIfRunning();
      }
    } else {
      next = beginWork(current, workInProgress, nextRenderExpirationTime);
    }
  
    {
      ReactDebugCurrentFiber.resetCurrentFiber();
      if (isReplayingFailedUnitOfWork) {
        // Currently replaying a failed unit of work. This should be unreachable,
        // because the render phase is meant to be idempotent, and it should
        // have thrown again. Since it didn't, rethrow the original error, so
        // React's internal stack is not misaligned.
        rethrowOriginalError();
      }
    }
    if (true && ReactFiberInstrumentation_1.debugTool) {
      ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
    }
  
    if (next === null) {
      // If this doesn't spawn new work, complete the current work.
      next = completeUnitOfWork(workInProgress);
    }
  
    ReactCurrentOwner.current = null;
  
    return next;
  }
  
  function workLoop(isAsync) {
    if (!isAsync) {
      // Flush all expired work.
      while (nextUnitOfWork !== null) {
        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
      }
    } else {
      // Flush asynchronous work until the deadline runs out of time.
      while (nextUnitOfWork !== null && !shouldYield()) {
        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
      }
  
      if (enableProfilerTimer) {
        // If we didn't finish, pause the "actual" render timer.
        // We'll restart it when we resume work.
        pauseActualRenderTimerIfRunning();
      }
    }
  }
  
  function renderRoot(root, expirationTime, isAsync) {
    !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    isWorking = true;
  
    // Check if we're starting from a fresh stack, or if we're resuming from
    // previously yielded work.
    if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || nextUnitOfWork === null) {
      // Reset the stack and start working from the root.
      resetStack();
      nextRoot = root;
      nextRenderExpirationTime = expirationTime;
      nextLatestTimeoutMs = -1;
      nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);
      root.pendingCommitExpirationTime = NoWork;
    }
  
    var didFatal = false;
  
    nextRenderIsExpired = !isAsync || nextRenderExpirationTime <= mostRecentCurrentTime;
  
    startWorkLoopTimer(nextUnitOfWork);
  
    do {
      try {
        workLoop(isAsync);
      } catch (thrownValue) {
        if (enableProfilerTimer) {
          // Stop "base" render timer in the event of an error.
          stopBaseRenderTimerIfRunning();
        }
  
        if (nextUnitOfWork === null) {
          // This is a fatal error.
          didFatal = true;
          onUncaughtError(thrownValue);
        } else {
          {
            // Reset global debug state
            // We assume this is defined in DEV
            resetCurrentlyProcessingQueue();
          }
  
          var failedUnitOfWork = nextUnitOfWork;
          if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
            replayUnitOfWork(failedUnitOfWork, thrownValue, isAsync);
          }
  
          // TODO: we already know this isn't true in some cases.
          // At least this shows a nicer error message until we figure out the cause.
          // https://github.com/facebook/react/issues/12449#issuecomment-386727431
          !(nextUnitOfWork !== null) ? invariant(false, 'Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.') : void 0;
  
          var sourceFiber = nextUnitOfWork;
          var returnFiber = sourceFiber.return;
          if (returnFiber === null) {
            // This is the root. The root could capture its own errors. However,
            // we don't know if it errors before or after we pushed the host
            // context. This information is needed to avoid a stack mismatch.
            // Because we're not sure, treat this as a fatal error. We could track
            // which phase it fails in, but doesn't seem worth it. At least
            // for now.
            didFatal = true;
            onUncaughtError(thrownValue);
            break;
          }
          throwException(root, returnFiber, sourceFiber, thrownValue, nextRenderIsExpired, nextRenderExpirationTime, mostRecentCurrentTimeMs);
          nextUnitOfWork = completeUnitOfWork(sourceFiber);
        }
      }
      break;
    } while (true);
  
    // We're done performing work. Time to clean up.
    var didCompleteRoot = false;
    isWorking = false;
  
    // Yield back to main thread.
    if (didFatal) {
      stopWorkLoopTimer(interruptedBy, didCompleteRoot);
      interruptedBy = null;
      // There was a fatal error.
      {
        resetStackAfterFatalErrorInDev();
      }
      return null;
    } else if (nextUnitOfWork === null) {
      // We reached the root.
      if (isRootReadyForCommit) {
        didCompleteRoot = true;
        stopWorkLoopTimer(interruptedBy, didCompleteRoot);
        interruptedBy = null;
        // The root successfully completed. It's ready for commit.
        root.pendingCommitExpirationTime = expirationTime;
        var finishedWork = root.current.alternate;
        return finishedWork;
      } else {
        // The root did not complete.
        stopWorkLoopTimer(interruptedBy, didCompleteRoot);
        interruptedBy = null;
        !!nextRenderIsExpired ? invariant(false, 'Expired work should have completed. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        markSuspendedPriorityLevel(root, expirationTime);
        if (nextLatestTimeoutMs >= 0) {
          setTimeout(function () {
            retrySuspendedRoot(root, expirationTime);
          }, nextLatestTimeoutMs);
        }
        var firstUnblockedExpirationTime = findNextPendingPriorityLevel(root);
        onBlock(firstUnblockedExpirationTime);
        return null;
      }
    } else {
      stopWorkLoopTimer(interruptedBy, didCompleteRoot);
      interruptedBy = null;
      // There's more work to do, but we ran out of time. Yield back to
      // the renderer.
      return null;
    }
  }
  
  function dispatch(sourceFiber, value, expirationTime) {
    !(!isWorking || isCommitting$1) ? invariant(false, 'dispatch: Cannot dispatch during the render phase.') : void 0;
  
    var fiber = sourceFiber.return;
    while (fiber !== null) {
      switch (fiber.tag) {
        case ClassComponent:
          var ctor = fiber.type;
          var instance = fiber.stateNode;
          if (typeof ctor.getDerivedStateFromCatch === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
            var errorInfo = createCapturedValue(value, sourceFiber);
            var update = createClassErrorUpdate(fiber, errorInfo, expirationTime);
            enqueueUpdate(fiber, update, expirationTime);
            scheduleWork$1(fiber, expirationTime);
            return;
          }
          break;
        case HostRoot:
          {
            var _errorInfo = createCapturedValue(value, sourceFiber);
            var _update = createRootErrorUpdate(fiber, _errorInfo, expirationTime);
            enqueueUpdate(fiber, _update, expirationTime);
            scheduleWork$1(fiber, expirationTime);
            return;
          }
      }
      fiber = fiber.return;
    }
  
    if (sourceFiber.tag === HostRoot) {
      // Error was thrown at the root. There is no parent, so the root
      // itself should capture it.
      var rootFiber = sourceFiber;
      var _errorInfo2 = createCapturedValue(value, rootFiber);
      var _update2 = createRootErrorUpdate(rootFiber, _errorInfo2, expirationTime);
      enqueueUpdate(rootFiber, _update2, expirationTime);
      scheduleWork$1(rootFiber, expirationTime);
    }
  }
  
  function captureCommitPhaseError(fiber, error) {
    return dispatch(fiber, error, Sync);
  }
  
  function computeAsyncExpiration(currentTime) {
    // Given the current clock time, returns an expiration time. We use rounding
    // to batch like updates together.
    // Should complete within ~5000ms. 5250ms max.
    var expirationMs = 5000;
    var bucketSizeMs = 250;
    return computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);
  }
  
  function computeInteractiveExpiration(currentTime) {
    var expirationMs = void 0;
    // We intentionally set a higher expiration time for interactive updates in
    // dev than in production.
    // If the main thread is being blocked so long that you hit the expiration,
    // it's a problem that could be solved with better scheduling.
    // People will be more likely to notice this and fix it with the long
    // expiration time in development.
    // In production we opt for better UX at the risk of masking scheduling
    // problems, by expiring fast.
    {
      // Should complete within ~500ms. 600ms max.
      expirationMs = 500;
    }
    var bucketSizeMs = 100;
    return computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);
  }
  
  // Creates a unique async expiration time.
  function computeUniqueAsyncExpiration() {
    var currentTime = recalculateCurrentTime();
    var result = computeAsyncExpiration(currentTime);
    if (result <= lastUniqueAsyncExpiration) {
      // Since we assume the current time monotonically increases, we only hit
      // this branch when computeUniqueAsyncExpiration is fired multiple times
      // within a 200ms window (or whatever the async bucket size is).
      result = lastUniqueAsyncExpiration + 1;
    }
    lastUniqueAsyncExpiration = result;
    return lastUniqueAsyncExpiration;
  }
  
  function computeExpirationForFiber(currentTime, fiber) {
    var expirationTime = void 0;
    if (expirationContext !== NoWork) {
      // An explicit expiration context was set;
      expirationTime = expirationContext;
    } else if (isWorking) {
      if (isCommitting$1) {
        // Updates that occur during the commit phase should have sync priority
        // by default.
        expirationTime = Sync;
      } else {
        // Updates during the render phase should expire at the same time as
        // the work that is being rendered.
        expirationTime = nextRenderExpirationTime;
      }
    } else {
      // No explicit expiration context was set, and we're not currently
      // performing work. Calculate a new expiration time.
      if (fiber.mode & AsyncMode) {
        if (isBatchingInteractiveUpdates) {
          // This is an interactive update
          expirationTime = computeInteractiveExpiration(currentTime);
        } else {
          // This is an async update
          expirationTime = computeAsyncExpiration(currentTime);
        }
      } else {
        // This is a sync update
        expirationTime = Sync;
      }
    }
    if (isBatchingInteractiveUpdates) {
      // This is an interactive update. Keep track of the lowest pending
      // interactive expiration time. This allows us to synchronously flush
      // all interactive updates when needed.
      if (lowestPendingInteractiveExpirationTime === NoWork || expirationTime > lowestPendingInteractiveExpirationTime) {
        lowestPendingInteractiveExpirationTime = expirationTime;
      }
    }
    return expirationTime;
  }
  
  // TODO: Rename this to scheduleTimeout or something
  function suspendRoot(root, thenable, timeoutMs, suspendedTime) {
    // Schedule the timeout.
    if (timeoutMs >= 0 && nextLatestTimeoutMs < timeoutMs) {
      nextLatestTimeoutMs = timeoutMs;
    }
  }
  
  function retrySuspendedRoot(root, suspendedTime) {
    markPingedPriorityLevel(root, suspendedTime);
    var retryTime = findNextPendingPriorityLevel(root);
    if (retryTime !== NoWork) {
      requestRetry(root, retryTime);
    }
  }
  
  function scheduleWork$1(fiber, expirationTime) {
    recordScheduleUpdate();
  
    {
      if (fiber.tag === ClassComponent) {
        var instance = fiber.stateNode;
        warnAboutInvalidUpdates(instance);
      }
    }
  
    var node = fiber;
    while (node !== null) {
      // Walk the parent path to the root and update each node's
      // expiration time.
      if (node.expirationTime === NoWork || node.expirationTime > expirationTime) {
        node.expirationTime = expirationTime;
      }
      if (node.alternate !== null) {
        if (node.alternate.expirationTime === NoWork || node.alternate.expirationTime > expirationTime) {
          node.alternate.expirationTime = expirationTime;
        }
      }
      if (node.return === null) {
        if (node.tag === HostRoot) {
          var root = node.stateNode;
          if (!isWorking && nextRenderExpirationTime !== NoWork && expirationTime < nextRenderExpirationTime) {
            // This is an interruption. (Used for performance tracking.)
            interruptedBy = fiber;
            resetStack();
          }
          markPendingPriorityLevel(root, expirationTime);
          var nextExpirationTimeToWorkOn = findNextPendingPriorityLevel(root);
          if (
          // If we're in the render phase, we don't need to schedule this root
          // for an update, because we'll do it before we exit...
          !isWorking || isCommitting$1 ||
          // ...unless this is a different root than the one we're rendering.
          nextRoot !== root) {
            requestWork(root, nextExpirationTimeToWorkOn);
          }
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
          }
        } else {
          {
            if (fiber.tag === ClassComponent) {
              warnAboutUpdateOnUnmounted(fiber);
            }
          }
          return;
        }
      }
      node = node.return;
    }
  }
  
  function recalculateCurrentTime() {
    // Subtract initial time so it fits inside 32bits
    mostRecentCurrentTimeMs = now() - originalStartTimeMs;
    mostRecentCurrentTime = msToExpirationTime(mostRecentCurrentTimeMs);
    return mostRecentCurrentTime;
  }
  
  function deferredUpdates(fn) {
    var previousExpirationContext = expirationContext;
    var currentTime = recalculateCurrentTime();
    expirationContext = computeAsyncExpiration(currentTime);
    try {
      return fn();
    } finally {
      expirationContext = previousExpirationContext;
    }
  }
  function syncUpdates(fn, a, b, c, d) {
    var previousExpirationContext = expirationContext;
    expirationContext = Sync;
    try {
      return fn(a, b, c, d);
    } finally {
      expirationContext = previousExpirationContext;
    }
  }
  
  // TODO: Everything below this is written as if it has been lifted to the
  // renderers. I'll do this in a follow-up.
  
  // Linked-list of roots
  var firstScheduledRoot = null;
  var lastScheduledRoot = null;
  
  var callbackExpirationTime = NoWork;
  var callbackID = void 0;
  var isRendering = false;
  var nextFlushedRoot = null;
  var nextFlushedExpirationTime = NoWork;
  var lowestPendingInteractiveExpirationTime = NoWork;
  var deadlineDidExpire = false;
  var hasUnhandledError = false;
  var unhandledError = null;
  var deadline = null;
  
  var isBatchingUpdates = false;
  var isUnbatchingUpdates = false;
  var isBatchingInteractiveUpdates = false;
  
  var completedBatches = null;
  
  // Use these to prevent an infinite loop of nested updates
  var NESTED_UPDATE_LIMIT = 1000;
  var nestedUpdateCount = 0;
  
  var timeHeuristicForUnitOfWork = 1;
  
  function scheduleCallbackWithExpiration(expirationTime) {
    if (callbackExpirationTime !== NoWork) {
      // A callback is already scheduled. Check its expiration time (timeout).
      if (expirationTime > callbackExpirationTime) {
        // Existing callback has sufficient timeout. Exit.
        return;
      } else {
        if (callbackID !== null) {
          // Existing callback has insufficient timeout. Cancel and schedule a
          // new one.
          cancelDeferredCallback(callbackID);
        }
      }
      // The request callback timer is already running. Don't start a new one.
    } else {
      startRequestCallbackTimer();
    }
  
    // Compute a timeout for the given expiration time.
    var currentMs = now() - originalStartTimeMs;
    var expirationMs = expirationTimeToMs(expirationTime);
    var timeout = expirationMs - currentMs;
  
    callbackExpirationTime = expirationTime;
    callbackID = scheduleDeferredCallback(performAsyncWork, { timeout: timeout });
  }
  
  function requestRetry(root, expirationTime) {
    if (root.remainingExpirationTime === NoWork || root.remainingExpirationTime < expirationTime) {
      // For a retry, only update the remaining expiration time if it has a
      // *lower priority* than the existing value. This is because, on a retry,
      // we should attempt to coalesce as much as possible.
      requestWork(root, expirationTime);
    }
  }
  
  // requestWork is called by the scheduler whenever a root receives an update.
  // It's up to the renderer to call renderRoot at some point in the future.
  function requestWork(root, expirationTime) {
    addRootToSchedule(root, expirationTime);
  
    if (isRendering) {
      // Prevent reentrancy. Remaining work will be scheduled at the end of
      // the currently rendering batch.
      return;
    }
  
    if (isBatchingUpdates) {
      // Flush work at the end of the batch.
      if (isUnbatchingUpdates) {
        // ...unless we're inside unbatchedUpdates, in which case we should
        // flush it now.
        nextFlushedRoot = root;
        nextFlushedExpirationTime = Sync;
        performWorkOnRoot(root, Sync, false);
      }
      return;
    }
  
    // TODO: Get rid of Sync and use current time?
    if (expirationTime === Sync) {
      performSyncWork();
    } else {
      scheduleCallbackWithExpiration(expirationTime);
    }
  }
  
  function addRootToSchedule(root, expirationTime) {
    // Add the root to the schedule.
    // Check if this root is already part of the schedule.
    if (root.nextScheduledRoot === null) {
      // This root is not already scheduled. Add it.
      root.remainingExpirationTime = expirationTime;
      if (lastScheduledRoot === null) {
        firstScheduledRoot = lastScheduledRoot = root;
        root.nextScheduledRoot = root;
      } else {
        lastScheduledRoot.nextScheduledRoot = root;
        lastScheduledRoot = root;
        lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
      }
    } else {
      // This root is already scheduled, but its priority may have increased.
      var remainingExpirationTime = root.remainingExpirationTime;
      if (remainingExpirationTime === NoWork || expirationTime < remainingExpirationTime) {
        // Update the priority.
        root.remainingExpirationTime = expirationTime;
      }
    }
  }
  
  function findHighestPriorityRoot() {
    var highestPriorityWork = NoWork;
    var highestPriorityRoot = null;
    if (lastScheduledRoot !== null) {
      var previousScheduledRoot = lastScheduledRoot;
      var root = firstScheduledRoot;
      while (root !== null) {
        var remainingExpirationTime = root.remainingExpirationTime;
        if (remainingExpirationTime === NoWork) {
          // This root no longer has work. Remove it from the scheduler.
  
          // TODO: This check is redudant, but Flow is confused by the branch
          // below where we set lastScheduledRoot to null, even though we break
          // from the loop right after.
          !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          if (root === root.nextScheduledRoot) {
            // This is the only root in the list.
            root.nextScheduledRoot = null;
            firstScheduledRoot = lastScheduledRoot = null;
            break;
          } else if (root === firstScheduledRoot) {
            // This is the first root in the list.
            var next = root.nextScheduledRoot;
            firstScheduledRoot = next;
            lastScheduledRoot.nextScheduledRoot = next;
            root.nextScheduledRoot = null;
          } else if (root === lastScheduledRoot) {
            // This is the last root in the list.
            lastScheduledRoot = previousScheduledRoot;
            lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
            root.nextScheduledRoot = null;
            break;
          } else {
            previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
            root.nextScheduledRoot = null;
          }
          root = previousScheduledRoot.nextScheduledRoot;
        } else {
          if (highestPriorityWork === NoWork || remainingExpirationTime < highestPriorityWork) {
            // Update the priority, if it's higher
            highestPriorityWork = remainingExpirationTime;
            highestPriorityRoot = root;
          }
          if (root === lastScheduledRoot) {
            break;
          }
          previousScheduledRoot = root;
          root = root.nextScheduledRoot;
        }
      }
    }
  
    // If the next root is the same as the previous root, this is a nested
    // update. To prevent an infinite loop, increment the nested update count.
    var previousFlushedRoot = nextFlushedRoot;
    if (previousFlushedRoot !== null && previousFlushedRoot === highestPriorityRoot && highestPriorityWork === Sync) {
      nestedUpdateCount++;
    } else {
      // Reset whenever we switch roots.
      nestedUpdateCount = 0;
    }
    nextFlushedRoot = highestPriorityRoot;
    nextFlushedExpirationTime = highestPriorityWork;
  }
  
  function performAsyncWork(dl) {
    performWork(NoWork, true, dl);
  }
  
  function performSyncWork() {
    performWork(Sync, false, null);
  }
  
  function performWork(minExpirationTime, isAsync, dl) {
    deadline = dl;
  
    // Keep working on roots until there's no more work, or until the we reach
    // the deadline.
    findHighestPriorityRoot();
  
    if (enableProfilerTimer) {
      resumeActualRenderTimerIfPaused();
    }
  
    if (enableUserTimingAPI && deadline !== null) {
      var didExpire = nextFlushedExpirationTime < recalculateCurrentTime();
      var timeout = expirationTimeToMs(nextFlushedExpirationTime);
      stopRequestCallbackTimer(didExpire, timeout);
    }
  
    if (isAsync) {
      while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || minExpirationTime >= nextFlushedExpirationTime) && (!deadlineDidExpire || recalculateCurrentTime() >= nextFlushedExpirationTime)) {
        recalculateCurrentTime();
        performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, !deadlineDidExpire);
        findHighestPriorityRoot();
      }
    } else {
      while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || minExpirationTime >= nextFlushedExpirationTime)) {
        performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false);
        findHighestPriorityRoot();
      }
    }
  
    // We're done flushing work. Either we ran out of time in this callback,
    // or there's no more work left with sufficient priority.
  
    // If we're inside a callback, set this to false since we just completed it.
    if (deadline !== null) {
      callbackExpirationTime = NoWork;
      callbackID = null;
    }
    // If there's work left over, schedule a new callback.
    if (nextFlushedExpirationTime !== NoWork) {
      scheduleCallbackWithExpiration(nextFlushedExpirationTime);
    }
  
    // Clean-up.
    deadline = null;
    deadlineDidExpire = false;
  
    finishRendering();
  }
  
  function flushRoot(root, expirationTime) {
    !!isRendering ? invariant(false, 'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.') : void 0;
    // Perform work on root as if the given expiration time is the current time.
    // This has the effect of synchronously flushing all work up to and
    // including the given time.
    nextFlushedRoot = root;
    nextFlushedExpirationTime = expirationTime;
    performWorkOnRoot(root, expirationTime, false);
    // Flush any sync work that was scheduled by lifecycles
    performSyncWork();
    finishRendering();
  }
  
  function finishRendering() {
    nestedUpdateCount = 0;
  
    if (completedBatches !== null) {
      var batches = completedBatches;
      completedBatches = null;
      for (var i = 0; i < batches.length; i++) {
        var batch = batches[i];
        try {
          batch._onComplete();
        } catch (error) {
          if (!hasUnhandledError) {
            hasUnhandledError = true;
            unhandledError = error;
          }
        }
      }
    }
  
    if (hasUnhandledError) {
      var error = unhandledError;
      unhandledError = null;
      hasUnhandledError = false;
      throw error;
    }
  }
  
  function performWorkOnRoot(root, expirationTime, isAsync) {
    !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  
    isRendering = true;
  
    // Check if this is async work or sync/expired work.
    if (!isAsync) {
      // Flush sync work.
      var finishedWork = root.finishedWork;
      if (finishedWork !== null) {
        // This root is already complete. We can commit it.
        completeRoot(root, finishedWork, expirationTime);
      } else {
        finishedWork = renderRoot(root, expirationTime, false);
        if (finishedWork !== null) {
          // We've completed the root. Commit it.
          completeRoot(root, finishedWork, expirationTime);
        }
      }
    } else {
      // Flush async work.
      var _finishedWork = root.finishedWork;
      if (_finishedWork !== null) {
        // This root is already complete. We can commit it.
        completeRoot(root, _finishedWork, expirationTime);
      } else {
        _finishedWork = renderRoot(root, expirationTime, true);
        if (_finishedWork !== null) {
          // We've completed the root. Check the deadline one more time
          // before committing.
          if (!shouldYield()) {
            // Still time left. Commit the root.
            completeRoot(root, _finishedWork, expirationTime);
          } else {
            // There's no time left. Mark this root as complete. We'll come
            // back and commit it later.
            root.finishedWork = _finishedWork;
  
            if (enableProfilerTimer) {
              // If we didn't finish, pause the "actual" render timer.
              // We'll restart it when we resume work.
              pauseActualRenderTimerIfRunning();
            }
          }
        }
      }
    }
  
    isRendering = false;
  }
  
  function completeRoot(root, finishedWork, expirationTime) {
    // Check if there's a batch that matches this expiration time.
    var firstBatch = root.firstBatch;
    if (firstBatch !== null && firstBatch._expirationTime <= expirationTime) {
      if (completedBatches === null) {
        completedBatches = [firstBatch];
      } else {
        completedBatches.push(firstBatch);
      }
      if (firstBatch._defer) {
        // This root is blocked from committing by a batch. Unschedule it until
        // we receive another update.
        root.finishedWork = finishedWork;
        root.remainingExpirationTime = NoWork;
        return;
      }
    }
  
    // Commit the root.
    root.finishedWork = null;
    root.remainingExpirationTime = commitRoot(finishedWork);
  }
  
  // When working on async work, the reconciler asks the renderer if it should
  // yield execution. For DOM, we implement this with requestIdleCallback.
  function shouldYield() {
    if (deadline === null) {
      return false;
    }
    if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
      // Disregard deadline.didTimeout. Only expired work should be flushed
      // during a timeout. This path is only hit for non-expired work.
      return false;
    }
    deadlineDidExpire = true;
    return true;
  }
  
  function onUncaughtError(error) {
    !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    // Unschedule this root so we don't work on it again until there's
    // another update.
    nextFlushedRoot.remainingExpirationTime = NoWork;
    if (!hasUnhandledError) {
      hasUnhandledError = true;
      unhandledError = error;
    }
  }
  
  function onBlock(remainingExpirationTime) {
    !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    // This root was blocked. Unschedule it until there's another update.
    nextFlushedRoot.remainingExpirationTime = remainingExpirationTime;
  }
  
  // TODO: Batching should be implemented at the renderer level, not inside
  // the reconciler.
  function batchedUpdates$1(fn, a) {
    var previousIsBatchingUpdates = isBatchingUpdates;
    isBatchingUpdates = true;
    try {
      return fn(a);
    } finally {
      isBatchingUpdates = previousIsBatchingUpdates;
      if (!isBatchingUpdates && !isRendering) {
        performSyncWork();
      }
    }
  }
  
  // TODO: Batching should be implemented at the renderer level, not inside
  // the reconciler.
  function unbatchedUpdates(fn, a) {
    if (isBatchingUpdates && !isUnbatchingUpdates) {
      isUnbatchingUpdates = true;
      try {
        return fn(a);
      } finally {
        isUnbatchingUpdates = false;
      }
    }
    return fn(a);
  }
  
  // TODO: Batching should be implemented at the renderer level, not within
  // the reconciler.
  function flushSync(fn, a) {
    !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
    var previousIsBatchingUpdates = isBatchingUpdates;
    isBatchingUpdates = true;
    try {
      return syncUpdates(fn, a);
    } finally {
      isBatchingUpdates = previousIsBatchingUpdates;
      performSyncWork();
    }
  }
  
  function interactiveUpdates$1(fn, a, b) {
    if (isBatchingInteractiveUpdates) {
      return fn(a, b);
    }
    // If there are any pending interactive updates, synchronously flush them.
    // This needs to happen before we read any handlers, because the effect of
    // the previous event may influence which handlers are called during
    // this event.
    if (!isBatchingUpdates && !isRendering && lowestPendingInteractiveExpirationTime !== NoWork) {
      // Synchronously flush pending interactive updates.
      performWork(lowestPendingInteractiveExpirationTime, false, null);
      lowestPendingInteractiveExpirationTime = NoWork;
    }
    var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates;
    var previousIsBatchingUpdates = isBatchingUpdates;
    isBatchingInteractiveUpdates = true;
    isBatchingUpdates = true;
    try {
      return fn(a, b);
    } finally {
      isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates;
      isBatchingUpdates = previousIsBatchingUpdates;
      if (!isBatchingUpdates && !isRendering) {
        performSyncWork();
      }
    }
  }
  
  function flushInteractiveUpdates$1() {
    if (!isRendering && lowestPendingInteractiveExpirationTime !== NoWork) {
      // Synchronously flush pending interactive updates.
      performWork(lowestPendingInteractiveExpirationTime, false, null);
      lowestPendingInteractiveExpirationTime = NoWork;
    }
  }
  
  function flushControlled(fn) {
    var previousIsBatchingUpdates = isBatchingUpdates;
    isBatchingUpdates = true;
    try {
      syncUpdates(fn);
    } finally {
      isBatchingUpdates = previousIsBatchingUpdates;
      if (!isBatchingUpdates && !isRendering) {
        performWork(Sync, false, null);
      }
    }
  }
  
  // 0 is PROD, 1 is DEV.
  // Might add PROFILE later.
  
  
  var didWarnAboutNestedUpdates = void 0;
  
  {
    didWarnAboutNestedUpdates = false;
  }
  
  function getContextForSubtree(parentComponent) {
    if (!parentComponent) {
      return emptyObject;
    }
  
    var fiber = get(parentComponent);
    var parentContext = findCurrentUnmaskedContext(fiber);
    return isContextProvider(fiber) ? processChildContext(fiber, parentContext) : parentContext;
  }
  
  function scheduleRootUpdate(current, element, expirationTime, callback) {
    {
      if (ReactDebugCurrentFiber.phase === 'render' && ReactDebugCurrentFiber.current !== null && !didWarnAboutNestedUpdates) {
        didWarnAboutNestedUpdates = true;
        warning(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(ReactDebugCurrentFiber.current) || 'Unknown');
      }
    }
  
    var update = createUpdate(expirationTime);
    // Caution: React DevTools currently depends on this property
    // being called "element".
    update.payload = { element: element };
  
    callback = callback === undefined ? null : callback;
    if (callback !== null) {
      !(typeof callback === 'function') ? warning(false, 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback) : void 0;
      update.callback = callback;
    }
    enqueueUpdate(current, update, expirationTime);
  
    scheduleWork$1(current, expirationTime);
    return expirationTime;
  }
  
  function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
    // TODO: If this is a nested container, this won't be the root.
    var current = container.current;
  
    {
      if (ReactFiberInstrumentation_1.debugTool) {
        if (current.alternate === null) {
          ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
        } else if (element === null) {
          ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
        } else {
          ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
        }
      }
    }
  
    var context = getContextForSubtree(parentComponent);
    if (container.context === null) {
      container.context = context;
    } else {
      container.pendingContext = context;
    }
  
    return scheduleRootUpdate(current, element, expirationTime, callback);
  }
  
  function findHostInstance(component) {
    var fiber = get(component);
    if (fiber === undefined) {
      if (typeof component.render === 'function') {
        invariant(false, 'Unable to find node on an unmounted component.');
      } else {
        invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
      }
    }
    var hostFiber = findCurrentHostFiber(fiber);
    if (hostFiber === null) {
      return null;
    }
    return hostFiber.stateNode;
  }
  
  function createContainer(containerInfo, isAsync, hydrate) {
    return createFiberRoot(containerInfo, isAsync, hydrate);
  }
  
  function updateContainer(element, container, parentComponent, callback) {
    var current = container.current;
    var currentTime = recalculateCurrentTime();
    var expirationTime = computeExpirationForFiber(currentTime, current);
    return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback);
  }
  
  function getPublicRootInstance(container) {
    var containerFiber = container.current;
    if (!containerFiber.child) {
      return null;
    }
    switch (containerFiber.child.tag) {
      case HostComponent:
        return getPublicInstance(containerFiber.child.stateNode);
      default:
        return containerFiber.child.stateNode;
    }
  }
  
  function findHostInstanceWithNoPortals(fiber) {
    var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
    if (hostFiber === null) {
      return null;
    }
    return hostFiber.stateNode;
  }
  
  function injectIntoDevTools(devToolsConfig) {
    var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
  
    return injectInternals(_assign$$1({}, devToolsConfig, {
      findHostInstanceByFiber: function (fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      },
      findFiberByHostInstance: function (instance) {
        if (!findFiberByHostInstance) {
          // Might not be implemented by the renderer.
          return null;
        }
        return findFiberByHostInstance(instance);
      }
    }));
  }
  
  // This file intentionally does *not* have the Flow annotation.
  // Don't add it. See `./inline-typed.js` for an explanation.
  
  
  
  var DOMRenderer = Object.freeze({
    updateContainerAtExpirationTime: updateContainerAtExpirationTime,
    createContainer: createContainer,
    updateContainer: updateContainer,
    flushRoot: flushRoot,
    requestWork: requestWork,
    computeUniqueAsyncExpiration: computeUniqueAsyncExpiration,
    batchedUpdates: batchedUpdates$1,
    unbatchedUpdates: unbatchedUpdates,
    deferredUpdates: deferredUpdates,
    syncUpdates: syncUpdates,
    interactiveUpdates: interactiveUpdates$1,
    flushInteractiveUpdates: flushInteractiveUpdates$1,
    flushControlled: flushControlled,
    flushSync: flushSync,
    getPublicRootInstance: getPublicRootInstance,
    findHostInstance: findHostInstance,
    findHostInstanceWithNoPortals: findHostInstanceWithNoPortals,
    injectIntoDevTools: injectIntoDevTools
  });
  
  function createPortal$1(children, containerInfo,
  // TODO: figure out the API for cross-renderer implementation.
  implementation) {
    var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  
    return {
      // This tag allow us to uniquely identify this as a React Portal
      $$typeof: REACT_PORTAL_TYPE,
      key: key == null ? null : '' + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }
  
  // TODO: this is special because it gets imported during build.
  
  var ReactVersion = '16.4.2';
  
  // TODO: This type is shared between the reconciler and ReactDOM, but will
  // eventually be lifted out to the renderer.
  var topLevelUpdateWarnings = void 0;
  var warnOnInvalidCallback = void 0;
  var didWarnAboutUnstableCreatePortal = false;
  
  {
    if (typeof Map !== 'function' ||
    // $FlowIssue Flow incorrectly thinks Map has no prototype
    Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' ||
    // $FlowIssue Flow incorrectly thinks Set has no prototype
    Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
      warning(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }
  
    topLevelUpdateWarnings = function (container) {
      if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
        var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
        if (hostInstance) {
          !(hostInstance.parentNode === container) ? warning(false, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.') : void 0;
        }
      }
  
      var isRootRenderedBySomeReact = !!container._reactRootContainer;
      var rootEl = getReactRootElementInContainer(container);
      var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
  
      !(!hasNonRootReactChild || isRootRenderedBySomeReact) ? warning(false, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
  
      !(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY') ? warning(false, 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
    };
  
    warnOnInvalidCallback = function (callback, callerName) {
      !(callback === null || typeof callback === 'function') ? warning(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback) : void 0;
    };
  }
  
  injection$2.injectFiberControlledHostComponent(ReactDOMFiberComponent);
  
  function ReactBatch(root) {
    var expirationTime = computeUniqueAsyncExpiration();
    this._expirationTime = expirationTime;
    this._root = root;
    this._next = null;
    this._callbacks = null;
    this._didComplete = false;
    this._hasChildren = false;
    this._children = null;
    this._defer = true;
  }
  ReactBatch.prototype.render = function (children) {
    !this._defer ? invariant(false, 'batch.render: Cannot render a batch that already committed.') : void 0;
    this._hasChildren = true;
    this._children = children;
    var internalRoot = this._root._internalRoot;
    var expirationTime = this._expirationTime;
    var work = new ReactWork();
    updateContainerAtExpirationTime(children, internalRoot, null, expirationTime, work._onCommit);
    return work;
  };
  ReactBatch.prototype.then = function (onComplete) {
    if (this._didComplete) {
      onComplete();
      return;
    }
    var callbacks = this._callbacks;
    if (callbacks === null) {
      callbacks = this._callbacks = [];
    }
    callbacks.push(onComplete);
  };
  ReactBatch.prototype.commit = function () {
    var internalRoot = this._root._internalRoot;
    var firstBatch = internalRoot.firstBatch;
    !(this._defer && firstBatch !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;
  
    if (!this._hasChildren) {
      // This batch is empty. Return.
      this._next = null;
      this._defer = false;
      return;
    }
  
    var expirationTime = this._expirationTime;
  
    // Ensure this is the first batch in the list.
    if (firstBatch !== this) {
      // This batch is not the earliest batch. We need to move it to the front.
      // Update its expiration time to be the expiration time of the earliest
      // batch, so that we can flush it without flushing the other batches.
      if (this._hasChildren) {
        expirationTime = this._expirationTime = firstBatch._expirationTime;
        // Rendering this batch again ensures its children will be the final state
        // when we flush (updates are processed in insertion order: last
        // update wins).
        // TODO: This forces a restart. Should we print a warning?
        this.render(this._children);
      }
  
      // Remove the batch from the list.
      var previous = null;
      var batch = firstBatch;
      while (batch !== this) {
        previous = batch;
        batch = batch._next;
      }
      !(previous !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;
      previous._next = batch._next;
  
      // Add it to the front.
      this._next = firstBatch;
      firstBatch = internalRoot.firstBatch = this;
    }
  
    // Synchronously flush all the work up to this batch's expiration time.
    this._defer = false;
    flushRoot(internalRoot, expirationTime);
  
    // Pop the batch from the list.
    var next = this._next;
    this._next = null;
    firstBatch = internalRoot.firstBatch = next;
  
    // Append the next earliest batch's children to the update queue.
    if (firstBatch !== null && firstBatch._hasChildren) {
      firstBatch.render(firstBatch._children);
    }
  };
  ReactBatch.prototype._onComplete = function () {
    if (this._didComplete) {
      return;
    }
    this._didComplete = true;
    var callbacks = this._callbacks;
    if (callbacks === null) {
      return;
    }
    // TODO: Error handling.
    for (var i = 0; i < callbacks.length; i++) {
      var _callback = callbacks[i];
      _callback();
    }
  };
  
  function ReactWork() {
    this._callbacks = null;
    this._didCommit = false;
    // TODO: Avoid need to bind by replacing callbacks in the update queue with
    // list of Work objects.
    this._onCommit = this._onCommit.bind(this);
  }
  ReactWork.prototype.then = function (onCommit) {
    if (this._didCommit) {
      onCommit();
      return;
    }
    var callbacks = this._callbacks;
    if (callbacks === null) {
      callbacks = this._callbacks = [];
    }
    callbacks.push(onCommit);
  };
  ReactWork.prototype._onCommit = function () {
    if (this._didCommit) {
      return;
    }
    this._didCommit = true;
    var callbacks = this._callbacks;
    if (callbacks === null) {
      return;
    }
    // TODO: Error handling.
    for (var i = 0; i < callbacks.length; i++) {
      var _callback2 = callbacks[i];
      !(typeof _callback2 === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback2) : void 0;
      _callback2();
    }
  };
  
  function ReactRoot(container, isAsync, hydrate) {
    var root = createContainer(container, isAsync, hydrate);
    this._internalRoot = root;
  }
  ReactRoot.prototype.render = function (children, callback) {
    var root = this._internalRoot;
    var work = new ReactWork();
    callback = callback === undefined ? null : callback;
    {
      warnOnInvalidCallback(callback, 'render');
    }
    if (callback !== null) {
      work.then(callback);
    }
    updateContainer(children, root, null, work._onCommit);
    return work;
  };
  ReactRoot.prototype.unmount = function (callback) {
    var root = this._internalRoot;
    var work = new ReactWork();
    callback = callback === undefined ? null : callback;
    {
      warnOnInvalidCallback(callback, 'render');
    }
    if (callback !== null) {
      work.then(callback);
    }
    updateContainer(null, root, null, work._onCommit);
    return work;
  };
  ReactRoot.prototype.legacy_renderSubtreeIntoContainer = function (parentComponent, children, callback) {
    var root = this._internalRoot;
    var work = new ReactWork();
    callback = callback === undefined ? null : callback;
    {
      warnOnInvalidCallback(callback, 'render');
    }
    if (callback !== null) {
      work.then(callback);
    }
    updateContainer(children, root, parentComponent, work._onCommit);
    return work;
  };
  ReactRoot.prototype.createBatch = function () {
    var batch = new ReactBatch(this);
    var expirationTime = batch._expirationTime;
  
    var internalRoot = this._internalRoot;
    var firstBatch = internalRoot.firstBatch;
    if (firstBatch === null) {
      internalRoot.firstBatch = batch;
      batch._next = null;
    } else {
      // Insert sorted by expiration time then insertion order
      var insertAfter = null;
      var insertBefore = firstBatch;
      while (insertBefore !== null && insertBefore._expirationTime <= expirationTime) {
        insertAfter = insertBefore;
        insertBefore = insertBefore._next;
      }
      batch._next = insertBefore;
      if (insertAfter !== null) {
        insertAfter._next = batch;
      }
    }
  
    return batch;
  };
  
  /**
   * True if the supplied DOM node is a valid node element.
   *
   * @param {?DOMElement} node The candidate DOM node.
   * @return {boolean} True if the DOM is a valid DOM node.
   * @internal
   */
  function isValidContainer(node) {
    return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
  }
  
  function getReactRootElementInContainer(container) {
    if (!container) {
      return null;
    }
  
    if (container.nodeType === DOCUMENT_NODE) {
      return container.documentElement;
    } else {
      return container.firstChild;
    }
  }
  
  function shouldHydrateDueToLegacyHeuristic(container) {
    var rootElement = getReactRootElementInContainer(container);
    return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
  }
  
  injection$3.injectRenderer(DOMRenderer);
  
  var warnedAboutHydrateAPI = false;
  
  function legacyCreateRootFromDOMContainer(container, forceHydrate) {
    var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
    // First clear any existing content.
    if (!shouldHydrate) {
      var warned = false;
      var rootSibling = void 0;
      while (rootSibling = container.lastChild) {
        {
          if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
            warned = true;
            warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
          }
        }
        container.removeChild(rootSibling);
      }
    }
    {
      if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
        warnedAboutHydrateAPI = true;
        lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
      }
    }
    // Legacy roots are not async by default.
    var isAsync = false;
    return new ReactRoot(container, isAsync, shouldHydrate);
  }
  
  function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
    // TODO: Ensure all entry points contain this check
    !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
  
    {
      topLevelUpdateWarnings(container);
    }
  
    // TODO: Without `any` type, Flow says "Property cannot be accessed on any
    // member of intersection type." Whyyyyyy.
    var root = container._reactRootContainer;
    if (!root) {
      // Initial mount
      root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
      if (typeof callback === 'function') {
        var originalCallback = callback;
        callback = function () {
          var instance = getPublicRootInstance(root._internalRoot);
          originalCallback.call(instance);
        };
      }
      // Initial mount should not be batched.
      unbatchedUpdates(function () {
        if (parentComponent != null) {
          root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
        } else {
          root.render(children, callback);
        }
      });
    } else {
      if (typeof callback === 'function') {
        var _originalCallback = callback;
        callback = function () {
          var instance = getPublicRootInstance(root._internalRoot);
          _originalCallback.call(instance);
        };
      }
      // Update
      if (parentComponent != null) {
        root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
      } else {
        root.render(children, callback);
      }
    }
    return getPublicRootInstance(root._internalRoot);
  }
  
  function createPortal(children, container) {
    var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  
    !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
    // TODO: pass ReactDOM portal implementation as third argument
    return createPortal$1(children, container, null, key);
  }
  
  var ReactDOM = {
    createPortal: createPortal,
  
    findDOMNode: function (componentOrElement) {
      {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.stateNode !== null) {
          var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
          !warnedAboutRefsInRender ? warning(false, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner) || 'A component') : void 0;
          owner.stateNode._warnedAboutRefsInRender = true;
        }
      }
      if (componentOrElement == null) {
        return null;
      }
      if (componentOrElement.nodeType === ELEMENT_NODE) {
        return componentOrElement;
      }
  
      return findHostInstance(componentOrElement);
    },
    hydrate: function (element, container, callback) {
      // TODO: throw or warn if we couldn't hydrate?
      return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    },
    render: function (element, container, callback) {
      return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    },
    unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
      !(parentComponent != null && has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
      return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    },
    unmountComponentAtNode: function (container) {
      !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;
  
      if (container._reactRootContainer) {
        {
          var rootEl = getReactRootElementInContainer(container);
          var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
          !!renderedByDifferentReact ? warning(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
        }
  
        // Unmount should not be batched.
        unbatchedUpdates(function () {
          legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
            container._reactRootContainer = null;
          });
        });
        // If you call unmountComponentAtNode twice in quick succession, you'll
        // get `true` twice. That's probably fine?
        return true;
      } else {
        {
          var _rootEl = getReactRootElementInContainer(container);
          var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));
  
          // Check if the container itself is a React root node.
          var isContainerReactRoot = container.nodeType === 1 && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
  
          !!hasNonRootReactChild ? warning(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
        }
  
        return false;
      }
    },
  
  
    // Temporary alias since we already shipped React 16 RC with it.
    // TODO: remove in React 17.
    unstable_createPortal: function () {
      if (!didWarnAboutUnstableCreatePortal) {
        didWarnAboutUnstableCreatePortal = true;
        lowPriorityWarning$1(false, 'The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
      }
      return createPortal.apply(undefined, arguments);
    },
  
  
    unstable_batchedUpdates: batchedUpdates$1,
  
    unstable_deferredUpdates: deferredUpdates,
  
    unstable_interactiveUpdates: interactiveUpdates$1,
  
    flushSync: flushSync,
  
    unstable_flushControlled: flushControlled,
  
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
      // For TapEventPlugin which is popular in open source
      EventPluginHub: EventPluginHub,
      // Used by test-utils
      EventPluginRegistry: EventPluginRegistry,
      EventPropagators: EventPropagators,
      ReactControlledComponent: ReactControlledComponent,
      ReactDOMComponentTree: ReactDOMComponentTree,
      ReactDOMEventListener: ReactDOMEventListener
    }
  };
  
  ReactDOM.unstable_createRoot = function createRoot(container, options) {
    var hydrate = options != null && options.hydrate === true;
    return new ReactRoot(container, true, hydrate);
  };
  
  var foundDevTools = injectIntoDevTools({
    findFiberByHostInstance: getClosestInstanceFromNode,
    bundleType: 1,
    version: ReactVersion,
    rendererPackageName: 'react-dom'
  });
  
  {
    if (!foundDevTools && ExecutionEnvironment.canUseDOM && window.top === window.self) {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        var protocol = window.location.protocol;
        // Don't warn in exotic cases like chrome-extension://.
        if (/^(https?|file):$/.test(protocol)) {
          console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
        }
      }
    }
  }
  
  
  
  var ReactDOM$2 = Object.freeze({
    default: ReactDOM
  });
  
  var ReactDOM$3 = ( ReactDOM$2 && ReactDOM ) || ReactDOM$2;
  
  // TODO: decide on the top-level export form.
  // This is hacky but makes it work with both Rollup and Jest.
  var reactDom = ReactDOM$3.default ? ReactDOM$3.default : ReactDOM$3;
  
  module.exports = reactDom;
    })();
  }
  });
  
  var reactDom = createCommonjsModule(function (module) {
  {
    module.exports = reactDom_development;
  }
  });
  
  var reactDom_1 = reactDom.render;
  
  function renderToElementWithId(reactElement, id) {
    var match = document.getElementById(id);
    if (match == null) {
      throw [
            invalid_argument,
            "ReactDOMRe.renderToElementWithId : no element of id " + (id + " found in the HTML.")
          ];
    } else {
      reactDom_1(reactElement, match);
      return /* () */0;
    }
  }
  
  function combine(a, b) {
    return Object.assign(Object.assign({ }, a), b);
  }
  
  function unsafeAddProp(style, property, value) {
    var dict = { };
    dict[property] = value;
    return combine(style, dict);
  }
  
  var Style = /* module */[
    /* combine */combine,
    /* unsafeAddProp */unsafeAddProp
  ];
  
  
  /* react-dom Not a pure module */
  
  function _assign$1(prim, prim$1) {
    return Object.assign(prim, prim$1);
  }
  
  var emptyObject$2 = { };
  
  
  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   */
  
  // 'use strict';
  
  // var _assign = require('object-assign');
  
  // var emptyObject = require('emptyObject');
  // var _invariant = require('invariant');
  
  // if ("development" !== 'production') {
  //   var warning = require('fbjs/lib/warning');
  // }
  
  var MIXINS_KEY = 'mixins';
  
  // Helper function to allow the creation of anonymous functions which do not
  // have .name set to the name of the variable being assigned to.
  function identity(fn) {
    return fn;
  }
  
  // }
  
  
  
  var factory = (
  function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
    /**
     * Policies that describe methods in `ReactClassInterface`.
     */
  
    var injectedMixins = [];
  
    /**
     * Composite components are higher-level components that compose other composite
     * or host components.
     *
     * To create a new type of `ReactClass`, pass a specification of
     * your new class to `React.createClass`. The only requirement of your class
     * specification is that you implement a `render` method.
     *
     *   var MyComponent = React.createClass({
     *     render: function() {
     *       return <div>Hello World</div>;
     *     }
     *   });
     *
     * The class specification supports a specific protocol of methods that have
     * special meaning (e.g. `render`). See `ReactClassInterface` for
     * more the comprehensive protocol. Any other properties and methods in the
     * class specification will be available on the prototype.
     *
     * @interface ReactClassInterface
     * @internal
     */
    var ReactClassInterface = {
      /**
       * An array of Mixin objects to include when defining your component.
       *
       * @type {array}
       * @optional
       */
      mixins: 'DEFINE_MANY',
  
      /**
       * An object containing properties and methods that should be defined on
       * the component's constructor instead of its prototype (static methods).
       *
       * @type {object}
       * @optional
       */
      statics: 'DEFINE_MANY',
  
      /**
       * Definition of prop types for this component.
       *
       * @type {object}
       * @optional
       */
      propTypes: 'DEFINE_MANY',
  
      /**
       * Definition of context types for this component.
       *
       * @type {object}
       * @optional
       */
      contextTypes: 'DEFINE_MANY',
  
      /**
       * Definition of context types this component sets for its children.
       *
       * @type {object}
       * @optional
       */
      childContextTypes: 'DEFINE_MANY',
  
      // ==== Definition methods ====
  
      /**
       * Invoked when the component is mounted. Values in the mapping will be set on
       * `this.props` if that prop is not specified (i.e. using an `in` check).
       *
       * This method is invoked before `getInitialState` and therefore cannot rely
       * on `this.state` or use `this.setState`.
       *
       * @return {object}
       * @optional
       */
      getDefaultProps: 'DEFINE_MANY_MERGED',
  
      /**
       * Invoked once before the component is mounted. The return value will be used
       * as the initial value of `this.state`.
       *
       *   getInitialState: function() {
       *     return {
       *       isOn: false,
       *       fooBaz: new BazFoo()
       *     }
       *   }
       *
       * @return {object}
       * @optional
       */
      getInitialState: 'DEFINE_MANY_MERGED',
  
      /**
       * @return {object}
       * @optional
       */
      getChildContext: 'DEFINE_MANY_MERGED',
  
      /**
       * Uses props from `this.props` and state from `this.state` to render the
       * structure of the component.
       *
       * No guarantees are made about when or how often this method is invoked, so
       * it must not have side effects.
       *
       *   render: function() {
       *     var name = this.props.name;
       *     return <div>Hello, {name}!</div>;
       *   }
       *
       * @return {ReactComponent}
       * @required
       */
      render: 'DEFINE_ONCE',
  
      // ==== Delegate methods ====
  
      /**
       * Invoked when the component is initially created and about to be mounted.
       * This may have side effects, but any external subscriptions or data created
       * by this method must be cleaned up in `componentWillUnmount`.
       *
       * @optional
       */
      componentWillMount: 'DEFINE_MANY',
  
      /**
       * Invoked when the component has been mounted and has a DOM representation.
       * However, there is no guarantee that the DOM node is in the document.
       *
       * Use this as an opportunity to operate on the DOM when the component has
       * been mounted (initialized and rendered) for the first time.
       *
       * @param {DOMElement} rootNode DOM element representing the component.
       * @optional
       */
      componentDidMount: 'DEFINE_MANY',
  
      /**
       * Invoked before the component receives new props.
       *
       * Use this as an opportunity to react to a prop transition by updating the
       * state using `this.setState`. Current props are accessed via `this.props`.
       *
       *   componentWillReceiveProps: function(nextProps, nextContext) {
       *     this.setState({
       *       likesIncreasing: nextProps.likeCount > this.props.likeCount
       *     });
       *   }
       *
       * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
       * transition may cause a state change, but the opposite is not true. If you
       * need it, you are probably looking for `componentWillUpdate`.
       *
       * @param {object} nextProps
       * @optional
       */
      componentWillReceiveProps: 'DEFINE_MANY',
  
      /**
       * Invoked while deciding if the component should be updated as a result of
       * receiving new props, state and/or context.
       *
       * Use this as an opportunity to `return false` when you're certain that the
       * transition to the new props/state/context will not require a component
       * update.
       *
       *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
       *     return !equal(nextProps, this.props) ||
       *       !equal(nextState, this.state) ||
       *       !equal(nextContext, this.context);
       *   }
       *
       * @param {object} nextProps
       * @param {?object} nextState
       * @param {?object} nextContext
       * @return {boolean} True if the component should update.
       * @optional
       */
      shouldComponentUpdate: 'DEFINE_ONCE',
  
      /**
       * Invoked when the component is about to update due to a transition from
       * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
       * and `nextContext`.
       *
       * Use this as an opportunity to perform preparation before an update occurs.
       *
       * NOTE: You **cannot** use `this.setState()` in this method.
       *
       * @param {object} nextProps
       * @param {?object} nextState
       * @param {?object} nextContext
       * @param {ReactReconcileTransaction} transaction
       * @optional
       */
      componentWillUpdate: 'DEFINE_MANY',
  
      /**
       * Invoked when the component's DOM representation has been updated.
       *
       * Use this as an opportunity to operate on the DOM when the component has
       * been updated.
       *
       * @param {object} prevProps
       * @param {?object} prevState
       * @param {?object} prevContext
       * @param {DOMElement} rootNode DOM element representing the component.
       * @optional
       */
      componentDidUpdate: 'DEFINE_MANY',
  
      /**
       * Invoked when the component is about to be removed from its parent and have
       * its DOM representation destroyed.
       *
       * Use this as an opportunity to deallocate any external resources.
       *
       * NOTE: There is no `componentDidUnmount` since your component will have been
       * destroyed by that point.
       *
       * @optional
       */
      componentWillUnmount: 'DEFINE_MANY',
  
      // ==== Advanced methods ====
  
      /**
       * Updates the component's currently mounted DOM representation.
       *
       * By default, this implements React's rendering and reconciliation algorithm.
       * Sophisticated clients may wish to override this.
       *
       * @param {ReactReconcileTransaction} transaction
       * @internal
       * @overridable
       */
      updateComponent: 'OVERRIDE_BASE'
    };
  
    /**
     * Mapping from class specification keys to special processing functions.
     *
     * Although these are declared like instance properties in the specification
     * when defining classes using `React.createClass`, they are actually static
     * and are accessible on the constructor instead of the prototype. Despite
     * being static, they must be defined outside of the "statics" key under
     * which all other static methods are defined.
     */
    var RESERVED_SPEC_KEYS = {
      displayName: function(Constructor, displayName) {
        Constructor.displayName = displayName;
      },
      mixins: function(Constructor, mixins) {
        if (mixins) {
          for (var i = 0; i < mixins.length; i++) {
            mixSpecIntoComponent(Constructor, mixins[i]);
          }
        }
      },
      childContextTypes: function(Constructor, childContextTypes) {
        // if ("development" !== 'production') {
        //   validateTypeDef(Constructor, childContextTypes, 'childContext');
        // }
        Constructor.childContextTypes = _assign$1(
          {},
          Constructor.childContextTypes,
          childContextTypes
        );
      },
      contextTypes: function(Constructor, contextTypes) {
        // if ("development" !== 'production') {
        //   validateTypeDef(Constructor, contextTypes, 'context');
        // }
        Constructor.contextTypes = _assign$1(
          {},
          Constructor.contextTypes,
          contextTypes
        );
      },
      /**
       * Special case getDefaultProps which should move into statics but requires
       * automatic merging.
       */
      getDefaultProps: function(Constructor, getDefaultProps) {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps = createMergedResultFunction(
            Constructor.getDefaultProps,
            getDefaultProps
          );
        } else {
          Constructor.getDefaultProps = getDefaultProps;
        }
      },
      propTypes: function(Constructor, propTypes) {
        // if ("development" !== 'production') {
        //   validateTypeDef(Constructor, propTypes, 'prop');
        // }
        Constructor.propTypes = _assign$1({}, Constructor.propTypes, propTypes);
      },
      statics: function(Constructor, statics) {
        mixStaticSpecIntoComponent(Constructor, statics);
      },
      autobind: function() {}
    };
  
    function validateMethodOverride(isAlreadyDefined, name) {
      var specPolicy = ReactClassInterface.hasOwnProperty(name)
        ? ReactClassInterface[name]
        : null;
  
      // Disallow overriding of base class methods unless explicitly allowed.
      if (ReactClassMixin.hasOwnProperty(name)) {
        // _invariant(
        //   specPolicy === 'OVERRIDE_BASE',
        //   'ReactClassInterface: You are attempting to override ' +
        //     '`%s` from your class specification. Ensure that your method names ' +
        //     'do not overlap with React methods.',
        //   name
        // );
      }
  
      // Disallow defining methods more than once unless explicitly allowed.
      
    }
  
    /**
     * Mixin helper which handles policy validation and reserved
     * specification keys when building React classes.
     */
    function mixSpecIntoComponent(Constructor, spec) {
      if (!spec) {
        // if ("development" !== 'production') {
        //   var typeofSpec = typeof spec;
        //   var isMixinValid = typeofSpec === 'object' && spec !== null;
        //
        //   if ("development" !== 'production') {
        //     warning(
        //       isMixinValid,
        //       "%s: You're attempting to include a mixin that is either null " +
        //         'or not an object. Check the mixins included by the component, ' +
        //         'as well as any mixins they include themselves. ' +
        //         'Expected object but got %s.',
        //       Constructor.displayName || 'ReactClass',
        //       spec === null ? null : typeofSpec
        //     );
        //   }
        // }
  
        return;
      }
  
      // _invariant(
      //   typeof spec !== 'function',
      //   "ReactClass: You're attempting to " +
      //     'use a component class or function as a mixin. Instead, just use a ' +
      //     'regular object.'
      // );
      // _invariant(
      //   !isValidElement(spec),
      //   "ReactClass: You're attempting to " +
      //     'use a component as a mixin. Instead, just use a regular object.'
      // );
  
      var proto = Constructor.prototype;
      var autoBindPairs = proto.__reactAutoBindPairs;
  
      // By handling mixins before any other properties, we ensure the same
      // chaining order is applied to methods with DEFINE_MANY policy, whether
      // mixins are listed before or after these methods in the spec.
      if (spec.hasOwnProperty(MIXINS_KEY)) {
        RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
      }
  
      for (var name in spec) {
        if (!spec.hasOwnProperty(name)) {
          continue;
        }
  
        if (name === MIXINS_KEY) {
          // We have already handled mixins in a special case above.
          continue;
        }
  
        var property = spec[name];
        var isAlreadyDefined = proto.hasOwnProperty(name);
        validateMethodOverride(isAlreadyDefined, name);
  
        if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
          RESERVED_SPEC_KEYS[name](Constructor, property);
        } else {
          // Setup methods on prototype:
          // The following member methods should not be automatically bound:
          // 1. Expected ReactClass methods (in the "interface").
          // 2. Overridden methods (that were mixed in).
          var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
          var isFunction = typeof property === 'function';
          var shouldAutoBind =
            isFunction &&
            !isReactClassMethod &&
            !isAlreadyDefined &&
            spec.autobind !== false;
  
          if (shouldAutoBind) {
            autoBindPairs.push(name, property);
            proto[name] = property;
          } else {
            if (isAlreadyDefined) {
              var specPolicy = ReactClassInterface[name];
  
              // These cases should already be caught by validateMethodOverride.
              // _invariant(
              //   isReactClassMethod &&
              //     (specPolicy === 'DEFINE_MANY_MERGED' ||
              //       specPolicy === 'DEFINE_MANY'),
              //   'ReactClass: Unexpected spec policy %s for key %s ' +
              //     'when mixing in component specs.',
              //   specPolicy,
              //   name
              // );
  
              // For methods which are defined more than once, call the existing
              // methods before calling the new property, merging if appropriate.
              if (specPolicy === 'DEFINE_MANY_MERGED') {
                proto[name] = createMergedResultFunction(proto[name], property);
              } else if (specPolicy === 'DEFINE_MANY') {
                proto[name] = createChainedFunction(proto[name], property);
              }
            } else {
              proto[name] = property;
              // if ("development" !== 'production') {
              //   // Add verbose displayName to the function, which helps when looking
              //   // at profiling tools.
              //   if (typeof property === 'function' && spec.displayName) {
              //     proto[name].displayName = spec.displayName + '_' + name;
              //   }
              // }
            }
          }
        }
      }
    }
  
    function mixStaticSpecIntoComponent(Constructor, statics) {
      if (!statics) {
        return;
      }
      for (var name in statics) {
        var property = statics[name];
        if (!statics.hasOwnProperty(name)) {
          continue;
        }
  
        Constructor[name] = property;
      }
    }
  
    /**
     * Merge two objects, but throw if both contain the same key.
     *
     * @param {object} one The first object, which is mutated.
     * @param {object} two The second object
     * @return {object} one after it has been mutated to contain everything in two.
     */
    function mergeIntoWithNoDuplicateKeys(one, two) {
      // _invariant(
      //   one && two && typeof one === 'object' && typeof two === 'object',
      //   'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
      // );
  
      for (var key in two) {
        if (two.hasOwnProperty(key)) {
          // _invariant(
          //   one[key] === undefined,
          //   'mergeIntoWithNoDuplicateKeys(): ' +
          //     'Tried to merge two objects with the same key: `%s`. This conflict ' +
          //     'may be due to a mixin; in particular, this may be caused by two ' +
          //     'getInitialState() or getDefaultProps() methods returning objects ' +
          //     'with clashing keys.',
          //   key
          // );
          one[key] = two[key];
        }
      }
      return one;
    }
  
    /**
     * Creates a function that invokes two functions and merges their return values.
     *
     * @param {function} one Function to invoke first.
     * @param {function} two Function to invoke second.
     * @return {function} Function that invokes the two argument functions.
     * @private
     */
    function createMergedResultFunction(one, two) {
      return function mergedResult() {
        var a = one.apply(this, arguments);
        var b = two.apply(this, arguments);
        if (a == null) {
          return b;
        } else if (b == null) {
          return a;
        }
        var c = {};
        mergeIntoWithNoDuplicateKeys(c, a);
        mergeIntoWithNoDuplicateKeys(c, b);
        return c;
      };
    }
  
    /**
     * Creates a function that invokes two functions and ignores their return vales.
     *
     * @param {function} one Function to invoke first.
     * @param {function} two Function to invoke second.
     * @return {function} Function that invokes the two argument functions.
     * @private
     */
    function createChainedFunction(one, two) {
      return function chainedFunction() {
        one.apply(this, arguments);
        two.apply(this, arguments);
      };
    }
  
    /**
     * Binds a method to the component.
     *
     * @param {object} component Component whose method is going to be bound.
     * @param {function} method Method to be bound.
     * @return {function} The bound method.
     */
    function bindAutoBindMethod(component, method) {
      var boundMethod = method.bind(component);
      // if ("development" !== 'production') {
      //   boundMethod.__reactBoundContext = component;
      //   boundMethod.__reactBoundMethod = method;
      //   boundMethod.__reactBoundArguments = null;
      //   var componentName = component.constructor.displayName;
      //   var _bind = boundMethod.bind;
      //   boundMethod.bind = function(newThis) {
      //     for (
      //       var _len = arguments.length,
      //         args = Array(_len > 1 ? _len - 1 : 0),
      //         _key = 1;
      //       _key < _len;
      //       _key++
      //     ) {
      //       args[_key - 1] = arguments[_key];
      //     }
      //
      //     // User is trying to bind() an autobound method; we effectively will
      //     // ignore the value of "this" that the user is trying to use, so
      //     // let's warn.
      //     if (newThis !== component && newThis !== null) {
      //       if ("development" !== 'production') {
      //         warning(
      //           false,
      //           'bind(): React component methods may only be bound to the ' +
      //             'component instance. See %s',
      //           componentName
      //         );
      //       }
      //     } else if (!args.length) {
      //       if ("development" !== 'production') {
      //         warning(
      //           false,
      //           'bind(): You are binding a component method to the component. ' +
      //             'React does this for you automatically in a high-performance ' +
      //             'way, so you can safely remove this call. See %s',
      //           componentName
      //         );
      //       }
      //       return boundMethod;
      //     }
      //     var reboundMethod = _bind.apply(boundMethod, arguments);
      //     reboundMethod.__reactBoundContext = component;
      //     reboundMethod.__reactBoundMethod = method;
      //     reboundMethod.__reactBoundArguments = args;
      //     return reboundMethod;
      //   };
      // }
      return boundMethod;
    }
  
    /**
     * Binds all auto-bound methods in a component.
     *
     * @param {object} component Component whose method is going to be bound.
     */
    function bindAutoBindMethods(component) {
      var pairs = component.__reactAutoBindPairs;
      for (var i = 0; i < pairs.length; i += 2) {
        var autoBindKey = pairs[i];
        var method = pairs[i + 1];
        component[autoBindKey] = bindAutoBindMethod(component, method);
      }
    }
  
    var IsMountedPreMixin = {
      componentDidMount: function() {
        this.__isMounted = true;
      }
    };
  
    var IsMountedPostMixin = {
      componentWillUnmount: function() {
        this.__isMounted = false;
      }
    };
  
    /**
     * Add more to the ReactClass base class. These are all legacy features and
     * therefore not already part of the modern ReactComponent.
     */
    var ReactClassMixin = {
      /**
       * TODO: This will be deprecated because state should always keep a consistent
       * type signature and the only use case for this, is to avoid that.
       */
      replaceState: function(newState, callback) {
        this.updater.enqueueReplaceState(this, newState, callback);
      },
  
      /**
       * Checks whether or not this composite component is mounted.
       * @return {boolean} True if mounted, false otherwise.
       * @protected
       * @final
       */
      isMounted: function() {
        // if ("development" !== 'production') {
        //   warning(
        //     this.__didWarnIsMounted,
        //     '%s: isMounted is deprecated. Instead, make sure to clean up ' +
        //       'subscriptions and pending requests in componentWillUnmount to ' +
        //       'prevent memory leaks.',
        //     (this.constructor && this.constructor.displayName) ||
        //       this.name ||
        //       'Component'
        //   );
        //   this.__didWarnIsMounted = true;
        // }
        return !!this.__isMounted;
      }
    };
  
    var ReactClassComponent = function() {};
    _assign$1(
      ReactClassComponent.prototype,
      ReactComponent.prototype,
      ReactClassMixin
    );
  
    /**
     * Creates a composite component class given a class specification.
     * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
     *
     * @param {object} spec Class specification (which must define `render`).
     * @return {function} Component constructor function.
     * @public
     */
    function createClass(spec) {
      // To keep our warnings more understandable, we'll use a little hack here to
      // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
      // unnecessarily identify a class without displayName as 'Constructor'.
      var Constructor = identity(function(props, context, updater) {
        // This constructor gets overridden by mocks. The argument is used
        // by mocks to assert on what gets mounted.
  
        // if ("development" !== 'production') {
        //   warning(
        //     this instanceof Constructor,
        //     'Something is calling a React component directly. Use a factory or ' +
        //       'JSX instead. See: https://fb.me/react-legacyfactory'
        //   );
        // }
  
        // Wire up auto-binding
        if (this.__reactAutoBindPairs.length) {
          bindAutoBindMethods(this);
        }
  
        this.props = props;
        this.context = context;
        this.refs = emptyObject$2;
        this.updater = updater || ReactNoopUpdateQueue;
  
        this.state = null;
  
        // ReactClasses doesn't have constructors. Instead, they use the
        // getInitialState and componentWillMount methods for initialization.
  
        var initialState = this.getInitialState ? this.getInitialState() : null;
        // if ("development" !== 'production') {
        //   // We allow auto-mocks to proceed as if they're returning null.
        //   if (
        //     initialState === undefined &&
        //     this.getInitialState._isMockFunction
        //   ) {
        //     // This is probably bad practice. Consider warning here and
        //     // deprecating this convenience.
        //     initialState = null;
        //   }
        // }
        // _invariant(
        //   typeof initialState === 'object' && !Array.isArray(initialState),
        //   '%s.getInitialState(): must return an object or null',
        //   Constructor.displayName || 'ReactCompositeComponent'
        // );
  
        this.state = initialState;
      });
      Constructor.prototype = new ReactClassComponent();
      Constructor.prototype.constructor = Constructor;
      Constructor.prototype.__reactAutoBindPairs = [];
  
      injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
  
      mixSpecIntoComponent(Constructor, IsMountedPreMixin);
      mixSpecIntoComponent(Constructor, spec);
      mixSpecIntoComponent(Constructor, IsMountedPostMixin);
  
      // Initialize the defaultProps property after all mixins have been merged.
      if (Constructor.getDefaultProps) {
        Constructor.defaultProps = Constructor.getDefaultProps();
      }
  
      // if ("development" !== 'production') {
      //   // This is a tag to indicate that the use of these method names is ok,
      //   // since it's used with createClass. If it's not, then it's likely a
      //   // mistake so we'll warn you to use the static property, property
      //   // initializer or constructor respectively.
      //   if (Constructor.getDefaultProps) {
      //     Constructor.getDefaultProps.isReactClassApproved = {};
      //   }
      //   if (Constructor.prototype.getInitialState) {
      //     Constructor.prototype.getInitialState.isReactClassApproved = {};
      //   }
      // }
  
      // _invariant(
      //   Constructor.prototype.render,
      //   'createClass(...): Class specification must implement a `render` method.'
      // );
  
      // if ("development" !== 'production') {
      //   warning(
      //     !Constructor.prototype.componentShouldUpdate,
      //     '%s has a method called ' +
      //       'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
      //       'The name is phrased as a question because the function is ' +
      //       'expected to return a value.',
      //     spec.displayName || 'A component'
      //   );
      //   warning(
      //     !Constructor.prototype.componentWillRecieveProps,
      //     '%s has a method called ' +
      //       'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
      //     spec.displayName || 'A component'
      //   );
      // }
  
      // Reduce time spent doing lookups by setting these on the prototype.
      for (var methodName in ReactClassInterface) {
        if (!Constructor.prototype[methodName]) {
          Constructor.prototype[methodName] = null;
        }
      }
  
      return Constructor;
    }
  
    return createClass;
  }
  );
  
  var reactNoopUpdateQueue = new react_1().updater;
  
  var createClass$1 = factory(react_1, react_2, reactNoopUpdateQueue);
  
  
  /*  Not a pure module */
  
  function anyToUnit() {
    return /* () */0;
  }
  
  function anyToTrue() {
    return true;
  }
  
  function willReceivePropsDefault(param) {
    return param[/* state */1];
  }
  
  function renderDefault() {
    return "RenderNotImplemented";
  }
  
  function initialStateDefault() {
    return /* () */0;
  }
  
  function reducerDefault(_, _$1) {
    return /* NoUpdate */0;
  }
  
  function subscriptionsDefault() {
    return /* [] */0;
  }
  
  function convertPropsIfTheyreFromJs(props, jsPropsToReason, debugName) {
    var match = props.reasonProps;
    if (match == null) {
      if (jsPropsToReason !== undefined) {
        return /* Element */[_1(jsPropsToReason, props)];
      } else {
        throw [
              invalid_argument,
              "A JS component called the Reason component " + (debugName + " which didn't implement the JS->Reason React props conversion.")
            ];
      }
    } else {
      return match;
    }
  }
  
  function arrayOfList(l) {
    var _l = l;
    var acc = /* array */[];
    while(true) {
      var l$1 = _l;
      if (l$1) {
        acc.push(l$1[0]);
        _l = l$1[1];
        continue ;
      } else {
        return acc.reverse();
      }
    }
  }
  
  function createClass(debugName) {
    return createClass$1({
                displayName: debugName,
                subscriptions: null,
                self: (function (state, retainedProps) {
                    var $$this = this;
                    return /* record */[
                            /* handle */$$this.handleMethod,
                            /* state */state,
                            /* retainedProps */retainedProps,
                            /* send */$$this.sendMethod,
                            /* onUnmount */$$this.onUnmountMethod
                          ];
                  }),
                transitionNextTotalState: (function (curTotalState, reasonStateUpdate) {
                    if (typeof reasonStateUpdate === "number") {
                      return /* tuple */[
                              undefined,
                              curTotalState
                            ];
                    } else {
                      switch (reasonStateUpdate.tag | 0) {
                        case 0 : 
                            return /* tuple */[
                                    undefined,
                                    {
                                      reasonState: reasonStateUpdate[0]
                                    }
                                  ];
                        case 1 : 
                            return /* tuple */[
                                    reasonStateUpdate[0],
                                    curTotalState
                                  ];
                        case 2 : 
                            return /* tuple */[
                                    reasonStateUpdate[1],
                                    {
                                      reasonState: reasonStateUpdate[0]
                                    }
                                  ];
                        
                      }
                    }
                  }),
                getInitialState: (function () {
                    var thisJs = (this);
                    var convertedReasonProps = convertPropsIfTheyreFromJs(thisJs.props, thisJs.jsPropsToReason, debugName);
                    return {
                            reasonState: _1(convertedReasonProps[0][/* initialState */10], /* () */0)
                          };
                  }),
                componentDidMount: (function () {
                    var $$this = this;
                    var thisJs = (this);
                    var convertedReasonProps = convertPropsIfTheyreFromJs(thisJs.props, thisJs.jsPropsToReason, debugName);
                    var component = convertedReasonProps[0];
                    var curTotalState = thisJs.state;
                    var curReasonState = curTotalState.reasonState;
                    var self = $$this.self(curReasonState, component[/* retainedProps */11]);
                    if (component[/* subscriptions */13] !== subscriptionsDefault) {
                      var subscriptions = arrayOfList(_1(component[/* subscriptions */13], self)).map((function (param) {
                              var unsubscribe = param[1];
                              var token = _1(param[0], /* () */0);
                              return (function () {
                                  return _1(unsubscribe, token);
                                });
                            }));
                      $$this.subscriptions = subscriptions;
                    }
                    if (component[/* didMount */4] !== anyToUnit) {
                      return _1(component[/* didMount */4], self);
                    } else {
                      return 0;
                    }
                  }),
                componentDidUpdate: (function (prevProps, prevState) {
                    var $$this = this;
                    var thisJs = (this);
                    var curState = thisJs.state;
                    var curReasonState = curState.reasonState;
                    var newJsProps = thisJs.props;
                    var newConvertedReasonProps = convertPropsIfTheyreFromJs(newJsProps, thisJs.jsPropsToReason, debugName);
                    var newComponent = newConvertedReasonProps[0];
                    if (newComponent[/* didUpdate */5] !== anyToUnit) {
                      var match = prevProps === newJsProps;
                      var oldConvertedReasonProps = match ? newConvertedReasonProps : convertPropsIfTheyreFromJs(prevProps, thisJs.jsPropsToReason, debugName);
                      var prevReasonState = prevState.reasonState;
                      var newSelf = $$this.self(curReasonState, newComponent[/* retainedProps */11]);
                      var oldSelf_000 = /* handle */newSelf[/* handle */0];
                      var oldSelf_002 = /* retainedProps */oldConvertedReasonProps[0][/* retainedProps */11];
                      var oldSelf_003 = /* send */newSelf[/* send */3];
                      var oldSelf_004 = /* onUnmount */newSelf[/* onUnmount */4];
                      var oldSelf = /* record */[
                        oldSelf_000,
                        /* state */prevReasonState,
                        oldSelf_002,
                        oldSelf_003,
                        oldSelf_004
                      ];
                      return _1(newComponent[/* didUpdate */5], /* record */[
                                  /* oldSelf */oldSelf,
                                  /* newSelf */newSelf
                                ]);
                    } else {
                      return 0;
                    }
                  }),
                componentWillUnmount: (function () {
                    var $$this = this;
                    var thisJs = (this);
                    var convertedReasonProps = convertPropsIfTheyreFromJs(thisJs.props, thisJs.jsPropsToReason, debugName);
                    var component = convertedReasonProps[0];
                    var curState = thisJs.state;
                    var curReasonState = curState.reasonState;
                    if (component[/* willUnmount */6] !== anyToUnit) {
                      _1(component[/* willUnmount */6], $$this.self(curReasonState, component[/* retainedProps */11]));
                    }
                    var match = $$this.subscriptions;
                    if (match !== null) {
                      match.forEach((function (unsubscribe) {
                              return _1(unsubscribe, /* () */0);
                            }));
                      return /* () */0;
                    } else {
                      return /* () */0;
                    }
                  }),
                componentWillUpdate: (function (nextProps, nextState) {
                    var $$this = this;
                    var thisJs = (this);
                    var newConvertedReasonProps = convertPropsIfTheyreFromJs(nextProps, thisJs.jsPropsToReason, debugName);
                    var newComponent = newConvertedReasonProps[0];
                    if (newComponent[/* willUpdate */7] !== anyToUnit) {
                      var oldJsProps = thisJs.props;
                      var match = nextProps === oldJsProps;
                      var oldConvertedReasonProps = match ? newConvertedReasonProps : convertPropsIfTheyreFromJs(oldJsProps, thisJs.jsPropsToReason, debugName);
                      var curState = thisJs.state;
                      var curReasonState = curState.reasonState;
                      var nextReasonState = nextState.reasonState;
                      var newSelf = $$this.self(nextReasonState, newComponent[/* retainedProps */11]);
                      var oldSelf_000 = /* handle */newSelf[/* handle */0];
                      var oldSelf_002 = /* retainedProps */oldConvertedReasonProps[0][/* retainedProps */11];
                      var oldSelf_003 = /* send */newSelf[/* send */3];
                      var oldSelf_004 = /* onUnmount */newSelf[/* onUnmount */4];
                      var oldSelf = /* record */[
                        oldSelf_000,
                        /* state */curReasonState,
                        oldSelf_002,
                        oldSelf_003,
                        oldSelf_004
                      ];
                      return _1(newComponent[/* willUpdate */7], /* record */[
                                  /* oldSelf */oldSelf,
                                  /* newSelf */newSelf
                                ]);
                    } else {
                      return 0;
                    }
                  }),
                componentWillReceiveProps: (function (nextProps) {
                    var $$this = this;
                    var thisJs = (this);
                    var newConvertedReasonProps = convertPropsIfTheyreFromJs(nextProps, thisJs.jsPropsToReason, debugName);
                    var newComponent = newConvertedReasonProps[0];
                    if (newComponent[/* willReceiveProps */3] !== willReceivePropsDefault) {
                      var oldJsProps = thisJs.props;
                      var match = nextProps === oldJsProps;
                      var oldConvertedReasonProps = match ? newConvertedReasonProps : convertPropsIfTheyreFromJs(oldJsProps, thisJs.jsPropsToReason, debugName);
                      var oldComponent = oldConvertedReasonProps[0];
                      return thisJs.setState((function (curTotalState, _) {
                                    var curReasonState = curTotalState.reasonState;
                                    var oldSelf = $$this.self(curReasonState, oldComponent[/* retainedProps */11]);
                                    var nextReasonState = _1(newComponent[/* willReceiveProps */3], oldSelf);
                                    if (nextReasonState !== curTotalState) {
                                      return {
                                              reasonState: nextReasonState
                                            };
                                    } else {
                                      return curTotalState;
                                    }
                                  }), null);
                    } else {
                      return 0;
                    }
                  }),
                shouldComponentUpdate: (function (nextJsProps, nextState, _) {
                    var $$this = this;
                    var thisJs = (this);
                    var curJsProps = thisJs.props;
                    var oldConvertedReasonProps = convertPropsIfTheyreFromJs(thisJs.props, thisJs.jsPropsToReason, debugName);
                    var match = nextJsProps === curJsProps;
                    var newConvertedReasonProps = match ? oldConvertedReasonProps : convertPropsIfTheyreFromJs(nextJsProps, thisJs.jsPropsToReason, debugName);
                    var newComponent = newConvertedReasonProps[0];
                    var nextReasonState = nextState.reasonState;
                    var newSelf = $$this.self(nextReasonState, newComponent[/* retainedProps */11]);
                    if (newComponent[/* shouldUpdate */8] !== anyToTrue) {
                      var curState = thisJs.state;
                      var curReasonState = curState.reasonState;
                      var oldSelf_000 = /* handle */newSelf[/* handle */0];
                      var oldSelf_002 = /* retainedProps */oldConvertedReasonProps[0][/* retainedProps */11];
                      var oldSelf_003 = /* send */newSelf[/* send */3];
                      var oldSelf_004 = /* onUnmount */newSelf[/* onUnmount */4];
                      var oldSelf = /* record */[
                        oldSelf_000,
                        /* state */curReasonState,
                        oldSelf_002,
                        oldSelf_003,
                        oldSelf_004
                      ];
                      return _1(newComponent[/* shouldUpdate */8], /* record */[
                                  /* oldSelf */oldSelf,
                                  /* newSelf */newSelf
                                ]);
                    } else {
                      return true;
                    }
                  }),
                onUnmountMethod: (function (subscription) {
                    var $$this = this;
                    var match = $$this.subscriptions;
                    if (match !== null) {
                      match.push(subscription);
                      return /* () */0;
                    } else {
                      $$this.subscriptions = /* array */[subscription];
                      return /* () */0;
                    }
                  }),
                handleMethod: (function (callback) {
                    var $$this = this;
                    var thisJs = (this);
                    return (function (callbackPayload) {
                        var curState = thisJs.state;
                        var curReasonState = curState.reasonState;
                        var convertedReasonProps = convertPropsIfTheyreFromJs(thisJs.props, thisJs.jsPropsToReason, debugName);
                        return _2(callback, callbackPayload, $$this.self(curReasonState, convertedReasonProps[0][/* retainedProps */11]));
                      });
                  }),
                sendMethod: (function (action) {
                    var $$this = this;
                    var thisJs = (this);
                    var convertedReasonProps = convertPropsIfTheyreFromJs(thisJs.props, thisJs.jsPropsToReason, debugName);
                    var component = convertedReasonProps[0];
                    if (component[/* reducer */12] !== reducerDefault) {
                      var sideEffects = /* record */[/* contents */(function () {
                            return /* () */0;
                          })];
                      var partialStateApplication = _1(component[/* reducer */12], action);
                      return thisJs.setState((function (curTotalState, _) {
                                    var curReasonState = curTotalState.reasonState;
                                    var reasonStateUpdate = _1(partialStateApplication, curReasonState);
                                    if (reasonStateUpdate === /* NoUpdate */0) {
                                      return null;
                                    } else {
                                      var match = $$this.transitionNextTotalState(curTotalState, reasonStateUpdate);
                                      var nextTotalState = match[1];
                                      var performSideEffects = match[0];
                                      if (performSideEffects !== undefined) {
                                        sideEffects[/* contents */0] = performSideEffects;
                                      }
                                      if (nextTotalState !== curTotalState) {
                                        return nextTotalState;
                                      } else {
                                        return null;
                                      }
                                    }
                                  }), $$this.handleMethod((function (_, self) {
                                        return _1(sideEffects[/* contents */0], self);
                                      })));
                    } else {
                      return 0;
                    }
                  }),
                render: (function () {
                    var $$this = this;
                    var thisJs = (this);
                    var convertedReasonProps = convertPropsIfTheyreFromJs(thisJs.props, thisJs.jsPropsToReason, debugName);
                    var created = convertedReasonProps[0];
                    var curState = thisJs.state;
                    var curReasonState = curState.reasonState;
                    return _1(created[/* render */9], $$this.self(curReasonState, created[/* retainedProps */11]));
                  })
              });
  }
  
  function basicComponent(debugName) {
    return /* record */[
            /* debugName */debugName,
            /* reactClassInternal */createClass(debugName),
            /* handedOffState : record */[/* contents */undefined],
            /* willReceiveProps */willReceivePropsDefault,
            /* didMount */anyToUnit,
            /* didUpdate */anyToUnit,
            /* willUnmount */anyToUnit,
            /* willUpdate */anyToUnit,
            /* shouldUpdate */anyToTrue,
            /* render */renderDefault,
            /* initialState */initialStateDefault,
            /* retainedProps : () */0,
            /* reducer */reducerDefault,
            /* subscriptions */subscriptionsDefault,
            /* jsElementWrapped */undefined
          ];
  }
  
  var statelessComponent = basicComponent;
  
  var statelessComponentWithRetainedProps = basicComponent;
  
  var reducerComponent = basicComponent;
  
  var reducerComponentWithRetainedProps = basicComponent;
  
  function element($staropt$star, $staropt$star$1, component) {
    var key = $staropt$star !== undefined ? $staropt$star : undefined;
    var ref = $staropt$star$1 !== undefined ? $staropt$star$1 : undefined;
    var element$1 = /* Element */[component];
    var match = component[/* jsElementWrapped */14];
    if (match !== undefined) {
      return _2(match, key, ref);
    } else {
      return react_3(component[/* reactClassInternal */1], {
                  key: key,
                  ref: ref,
                  reasonProps: element$1
                });
    }
  }
  
  var dummyInteropComponent = basicComponent("interop");
  
  function wrapJsForReason(reactClass, props, children) {
    var jsElementWrapped = (function (param, param$1) {
        var reactClass$1 = reactClass;
        var props$1 = props;
        var children$1 = children;
        var key = param;
        var ref = param$1;
        var props$2 = Object.assign(Object.assign({ }, props$1), {
              ref: ref,
              key: key
            });
        var varargs = /* array */[
            reactClass$1,
            props$2
          ].concat(children$1);
        return react_3.apply(null, varargs);
      });
    return /* record */[
            /* debugName */dummyInteropComponent[/* debugName */0],
            /* reactClassInternal */dummyInteropComponent[/* reactClassInternal */1],
            /* handedOffState */dummyInteropComponent[/* handedOffState */2],
            /* willReceiveProps */dummyInteropComponent[/* willReceiveProps */3],
            /* didMount */dummyInteropComponent[/* didMount */4],
            /* didUpdate */dummyInteropComponent[/* didUpdate */5],
            /* willUnmount */dummyInteropComponent[/* willUnmount */6],
            /* willUpdate */dummyInteropComponent[/* willUpdate */7],
            /* shouldUpdate */dummyInteropComponent[/* shouldUpdate */8],
            /* render */dummyInteropComponent[/* render */9],
            /* initialState */dummyInteropComponent[/* initialState */10],
            /* retainedProps */dummyInteropComponent[/* retainedProps */11],
            /* reducer */dummyInteropComponent[/* reducer */12],
            /* subscriptions */dummyInteropComponent[/* subscriptions */13],
            /* jsElementWrapped */jsElementWrapped
          ];
  }
  
  
  /* dummyInteropComponent Not a pure module */
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  function warnNoop(publicInstance, callerName) {
    {
      var constructor = publicInstance.constructor;
      warning_1(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass');
    }
  }
  
  /**
   * This is the abstract API for an update queue.
   */
  var ReactNoopUpdateQueue = {
    /**
     * Checks whether or not this composite component is mounted.
     * @param {ReactClass} publicInstance The instance we want to test.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function (publicInstance) {
      return false;
    },
  
    /**
     * Enqueue a callback that will be executed after all the pending updates
     * have processed.
     *
     * @param {ReactClass} publicInstance The instance to use as `this` context.
     * @param {?function} callback Called after state is updated.
     * @internal
     */
    enqueueCallback: function (publicInstance, callback) {},
  
    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @internal
     */
    enqueueForceUpdate: function (publicInstance) {
      warnNoop(publicInstance, 'forceUpdate');
    },
  
    /**
     * Replaces all of the state. Always use this or `setState` to mutate state.
     * You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} completeState Next state.
     * @internal
     */
    enqueueReplaceState: function (publicInstance, completeState) {
      warnNoop(publicInstance, 'replaceState');
    },
  
    /**
     * Sets a subset of the state. This only exists because _pendingState is
     * internal. This provides a merging strategy that is not available to deep
     * properties which is confusing. TODO: Expose pendingState or don't use it
     * during the merge.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} partialState Next partial state to be merged with state.
     * @internal
     */
    enqueueSetState: function (publicInstance, partialState) {
      warnNoop(publicInstance, 'setState');
    }
  };
  
  var ReactNoopUpdateQueue_1 = ReactNoopUpdateQueue;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  var canDefineProperty$1 = false;
  {
    try {
      // $FlowFixMe https://github.com/facebook/flow/issues/285
      Object.defineProperty({}, 'x', { get: function () {} });
      canDefineProperty$1 = true;
    } catch (x) {
      // IE will fail on defineProperty
    }
  }
  
  var canDefineProperty_1 = canDefineProperty$1;
  
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  /**
   * Forked from fbjs/warning:
   * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
   *
   * Only change is we use console.warn instead of console.error,
   * and do nothing when 'console' is not supported.
   * This really simplifies the code.
   * ---
   * Similar to invariant but only logs a warning if the condition is not met.
   * This can be used to log issues in development environments in critical
   * paths. Removing the logging code for production environments will keep the
   * same logic and follow the same code paths.
   */
  
  var lowPriorityWarning$1 = function () {};
  
  {
    var printWarning$2 = function (format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
  
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.warn(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };
  
    lowPriorityWarning$1 = function (condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }
      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }
  
        printWarning$2.apply(undefined, [format].concat(args));
      }
    };
  }
  
  var lowPriorityWarning_1 = lowPriorityWarning$1;
  
  /**
   * Base class helpers for the updating state of a component.
   */
  function ReactComponent(props, context, updater) {
    this.props = props;
    this.context = context;
    this.refs = emptyObject_1;
    // We initialize the default updater but the real one gets injected by the
    // renderer.
    this.updater = updater || ReactNoopUpdateQueue_1;
  }
  
  ReactComponent.prototype.isReactComponent = {};
  
  /**
   * Sets a subset of the state. Always use this to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * When a function is provided to setState, it will be called at some point in
   * the future (not synchronously). It will be called with the up to date
   * component arguments (state, props, context). These values can be different
   * from this.* because your function may be called after receiveProps but before
   * shouldComponentUpdate, and this new state, props, and context will not yet be
   * assigned to this.
   *
   * @param {object|function} partialState Next partial state or function to
   *        produce next partial state to be merged with current state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  ReactComponent.prototype.setState = function (partialState, callback) {
    !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant_1(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
    this.updater.enqueueSetState(this, partialState);
    if (callback) {
      this.updater.enqueueCallback(this, callback, 'setState');
    }
  };
  
  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  ReactComponent.prototype.forceUpdate = function (callback) {
    this.updater.enqueueForceUpdate(this);
    if (callback) {
      this.updater.enqueueCallback(this, callback, 'forceUpdate');
    }
  };
  
  /**
   * Deprecated APIs. These APIs used to exist on classic React classes but since
   * we would like to deprecate them, we're not going to move them over to this
   * modern base class. Instead, we define a getter that warns if it's accessed.
   */
  {
    var deprecatedAPIs = {
      isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
      replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
    };
    var defineDeprecationWarning = function (methodName, info) {
      if (canDefineProperty_1) {
        Object.defineProperty(ReactComponent.prototype, methodName, {
          get: function () {
            lowPriorityWarning_1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
            return undefined;
          }
        });
      }
    };
    for (var fnName in deprecatedAPIs) {
      if (deprecatedAPIs.hasOwnProperty(fnName)) {
        defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
      }
    }
  }
  
  /**
   * Base class helpers for the updating state of a component.
   */
  function ReactPureComponent(props, context, updater) {
    // Duplicated from ReactComponent.
    this.props = props;
    this.context = context;
    this.refs = emptyObject_1;
    // We initialize the default updater but the real one gets injected by the
    // renderer.
    this.updater = updater || ReactNoopUpdateQueue_1;
  }
  
  function ComponentDummy() {}
  ComponentDummy.prototype = ReactComponent.prototype;
  ReactPureComponent.prototype = new ComponentDummy();
  ReactPureComponent.prototype.constructor = ReactPureComponent;
  // Avoid an extra prototype jump for these methods.
  objectAssign(ReactPureComponent.prototype, ReactComponent.prototype);
  ReactPureComponent.prototype.isPureReactComponent = true;
  
  var ReactBaseClasses = {
    Component: ReactComponent,
    PureComponent: ReactPureComponent
  };
  
  /**
   * Static poolers. Several custom versions for each potential number of
   * arguments. A completely generic pooler is easy to implement, but would
   * require accessing the `arguments` object. In each of these, `this` refers to
   * the Class itself, not an instance. If any others are needed, simply add them
   * here, or in their own files.
   */
  var oneArgumentPooler = function (copyFieldsFrom) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, copyFieldsFrom);
      return instance;
    } else {
      return new Klass(copyFieldsFrom);
    }
  };
  
  var twoArgumentPooler$1 = function (a1, a2) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2);
      return instance;
    } else {
      return new Klass(a1, a2);
    }
  };
  
  var threeArgumentPooler = function (a1, a2, a3) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3);
      return instance;
    } else {
      return new Klass(a1, a2, a3);
    }
  };
  
  var fourArgumentPooler$1 = function (a1, a2, a3, a4) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3, a4);
      return instance;
    } else {
      return new Klass(a1, a2, a3, a4);
    }
  };
  
  var standardReleaser = function (instance) {
    var Klass = this;
    !(instance instanceof Klass) ? invariant_1(false, 'Trying to release an instance into a pool of a different type.') : void 0;
    instance.destructor();
    if (Klass.instancePool.length < Klass.poolSize) {
      Klass.instancePool.push(instance);
    }
  };
  
  var DEFAULT_POOL_SIZE = 10;
  var DEFAULT_POOLER = oneArgumentPooler;
  
  /**
   * Augments `CopyConstructor` to be a poolable class, augmenting only the class
   * itself (statically) not adding any prototypical fields. Any CopyConstructor
   * you give this may have a `poolSize` property, and will look for a
   * prototypical `destructor` on instances.
   *
   * @param {Function} CopyConstructor Constructor that can be used to reset.
   * @param {Function} pooler Customizable pooler.
   */
  var addPoolingTo = function (CopyConstructor, pooler) {
    // Casting as any so that flow ignores the actual implementation and trusts
    // it to match the type we declared
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER;
    if (!NewKlass.poolSize) {
      NewKlass.poolSize = DEFAULT_POOL_SIZE;
    }
    NewKlass.release = standardReleaser;
    return NewKlass;
  };
  
  var PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler$1,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler$1
  };
  
  var PooledClass_1 = PooledClass;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  /**
   * Keeps track of the current owner.
   *
   * The current owner is the component who should own any components that are
   * currently being constructed.
   */
  var ReactCurrentOwner = {
    /**
     * @internal
     * @type {ReactComponent}
     */
    current: null
  };
  
  var ReactCurrentOwner_1 = ReactCurrentOwner;
  
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  // The Symbol used to tag the ReactElement type. If there is no native Symbol
  // nor polyfill, then a plain number is used for performance.
  
  var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
  
  var ReactElementSymbol = REACT_ELEMENT_TYPE;
  
  var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
  
  
  
  var RESERVED_PROPS = {
    key: true,
    ref: true,
    __self: true,
    __source: true
  };
  
  var specialPropKeyWarningShown;
  var specialPropRefWarningShown;
  
  function hasValidRef(config) {
    {
      if (hasOwnProperty$2.call(config, 'ref')) {
        var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
        if (getter && getter.isReactWarning) {
          return false;
        }
      }
    }
    return config.ref !== undefined;
  }
  
  function hasValidKey(config) {
    {
      if (hasOwnProperty$2.call(config, 'key')) {
        var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
        if (getter && getter.isReactWarning) {
          return false;
        }
      }
    }
    return config.key !== undefined;
  }
  
  function defineKeyPropWarningGetter(props, displayName) {
    var warnAboutAccessingKey = function () {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;
        warning_1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
      }
    };
    warnAboutAccessingKey.isReactWarning = true;
    Object.defineProperty(props, 'key', {
      get: warnAboutAccessingKey,
      configurable: true
    });
  }
  
  function defineRefPropWarningGetter(props, displayName) {
    var warnAboutAccessingRef = function () {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;
        warning_1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
      }
    };
    warnAboutAccessingRef.isReactWarning = true;
    Object.defineProperty(props, 'ref', {
      get: warnAboutAccessingRef,
      configurable: true
    });
  }
  
  /**
   * Factory method to create a new React element. This no longer adheres to
   * the class pattern, so do not use new to call it. Also, no instanceof check
   * will work. Instead test $$typeof field against Symbol.for('react.element') to check
   * if something is a React Element.
   *
   * @param {*} type
   * @param {*} key
   * @param {string|object} ref
   * @param {*} self A *temporary* helper to detect places where `this` is
   * different from the `owner` when React.createElement is called, so that we
   * can warn. We want to get rid of owner and replace string `ref`s with arrow
   * functions, and as long as `this` and owner are the same, there will be no
   * change in behavior.
   * @param {*} source An annotation object (added by a transpiler or otherwise)
   * indicating filename, line number, and/or other information.
   * @param {*} owner
   * @param {*} props
   * @internal
   */
  var ReactElement = function (type, key, ref, self, source, owner, props) {
    var element = {
      // This tag allow us to uniquely identify this as a React Element
      $$typeof: ReactElementSymbol,
  
      // Built-in properties that belong on the element
      type: type,
      key: key,
      ref: ref,
      props: props,
  
      // Record the component responsible for creating this element.
      _owner: owner
    };
  
    {
      // The validation flag is currently mutative. We put it on
      // an external backing store so that we can freeze the whole object.
      // This can be replaced with a WeakMap once they are implemented in
      // commonly used development environments.
      element._store = {};
  
      // To make comparing ReactElements easier for testing purposes, we make
      // the validation flag non-enumerable (where possible, which should
      // include every environment we run tests in), so the test framework
      // ignores it.
      if (canDefineProperty_1) {
        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        });
        // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        });
        // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });
      } else {
        element._store.validated = false;
        element._self = self;
        element._source = source;
      }
      if (Object.freeze) {
        Object.freeze(element.props);
        Object.freeze(element);
      }
    }
  
    return element;
  };
  
  /**
   * Create and return a new ReactElement of the given type.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
   */
  ReactElement.createElement = function (type, config, children) {
    var propName;
  
    // Reserved names are extracted
    var props = {};
  
    var key = null;
    var ref = null;
    var self = null;
    var source = null;
  
    if (config != null) {
      if (hasValidRef(config)) {
        ref = config.ref;
      }
      if (hasValidKey(config)) {
        key = '' + config.key;
      }
  
      self = config.__self === undefined ? null : config.__self;
      source = config.__source === undefined ? null : config.__source;
      // Remaining properties are added to a new props object
      for (propName in config) {
        if (hasOwnProperty$2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
          props[propName] = config[propName];
        }
      }
    }
  
    // Children can be more than one argument, and those are transferred onto
    // the newly allocated props object.
    var childrenLength = arguments.length - 2;
    if (childrenLength === 1) {
      props.children = children;
    } else if (childrenLength > 1) {
      var childArray = Array(childrenLength);
      for (var i = 0; i < childrenLength; i++) {
        childArray[i] = arguments[i + 2];
      }
      {
        if (Object.freeze) {
          Object.freeze(childArray);
        }
      }
      props.children = childArray;
    }
  
    // Resolve default props
    if (type && type.defaultProps) {
      var defaultProps = type.defaultProps;
      for (propName in defaultProps) {
        if (props[propName] === undefined) {
          props[propName] = defaultProps[propName];
        }
      }
    }
    {
      if (key || ref) {
        if (typeof props.$$typeof === 'undefined' || props.$$typeof !== ReactElementSymbol) {
          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }
          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
      }
    }
    return ReactElement(type, key, ref, self, source, ReactCurrentOwner_1.current, props);
  };
  
  /**
   * Return a function that produces ReactElements of a given type.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
   */
  ReactElement.createFactory = function (type) {
    var factory = ReactElement.createElement.bind(null, type);
    // Expose the type on the factory and the prototype so that it can be
    // easily accessed on elements. E.g. `<Foo />.type === Foo`.
    // This should not be named `constructor` since this may not be the function
    // that created the element, and it may not even be a constructor.
    // Legacy hook TODO: Warn if this is accessed
    factory.type = type;
    return factory;
  };
  
  ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
    var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
  
    return newElement;
  };
  
  /**
   * Clone and return a new ReactElement using element as the starting point.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
   */
  ReactElement.cloneElement = function (element, config, children) {
    var propName;
  
    // Original props are copied
    var props = objectAssign({}, element.props);
  
    // Reserved names are extracted
    var key = element.key;
    var ref = element.ref;
    // Self is preserved since the owner is preserved.
    var self = element._self;
    // Source is preserved since cloneElement is unlikely to be targeted by a
    // transpiler, and the original source is probably a better indicator of the
    // true owner.
    var source = element._source;
  
    // Owner will be preserved, unless ref is overridden
    var owner = element._owner;
  
    if (config != null) {
      if (hasValidRef(config)) {
        // Silently steal the ref from the parent.
        ref = config.ref;
        owner = ReactCurrentOwner_1.current;
      }
      if (hasValidKey(config)) {
        key = '' + config.key;
      }
  
      // Remaining properties override existing props
      var defaultProps;
      if (element.type && element.type.defaultProps) {
        defaultProps = element.type.defaultProps;
      }
      for (propName in config) {
        if (hasOwnProperty$2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
          if (config[propName] === undefined && defaultProps !== undefined) {
            // Resolve default props
            props[propName] = defaultProps[propName];
          } else {
            props[propName] = config[propName];
          }
        }
      }
    }
  
    // Children can be more than one argument, and those are transferred onto
    // the newly allocated props object.
    var childrenLength = arguments.length - 2;
    if (childrenLength === 1) {
      props.children = children;
    } else if (childrenLength > 1) {
      var childArray = Array(childrenLength);
      for (var i = 0; i < childrenLength; i++) {
        childArray[i] = arguments[i + 2];
      }
      props.children = childArray;
    }
  
    return ReactElement(element.type, key, ref, self, source, owner, props);
  };
  
  /**
   * Verifies the object is a ReactElement.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
   * @param {?object} object
   * @return {boolean} True if `object` is a valid component.
   * @final
   */
  ReactElement.isValidElement = function (object) {
    return typeof object === 'object' && object !== null && object.$$typeof === ReactElementSymbol;
  };
  
  var ReactElement_1 = ReactElement;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  /* global Symbol */
  
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
  
  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }
  
  var getIteratorFn_1 = getIteratorFn;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  /**
   * Escape and wrap key so it is safe to use as a reactid
   *
   * @param {string} key to be escaped.
   * @return {string} the escaped key.
   */
  
  function escape(key) {
    var escapeRegex = /[=:]/g;
    var escaperLookup = {
      '=': '=0',
      ':': '=2'
    };
    var escapedString = ('' + key).replace(escapeRegex, function (match) {
      return escaperLookup[match];
    });
  
    return '$' + escapedString;
  }
  
  /**
   * Unescape and unwrap key for human-readable display
   *
   * @param {string} key to unescape.
   * @return {string} the unescaped key.
   */
  function unescape(key) {
    var unescapeRegex = /(=0|=2)/g;
    var unescaperLookup = {
      '=0': '=',
      '=2': ':'
    };
    var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);
  
    return ('' + keySubstring).replace(unescapeRegex, function (match) {
      return unescaperLookup[match];
    });
  }
  
  var KeyEscapeUtils = {
    escape: escape,
    unescape: unescape
  };
  
  var KeyEscapeUtils_1 = KeyEscapeUtils;
  
  var SEPARATOR = '.';
  var SUBSEPARATOR = ':';
  
  /**
   * This is inlined from ReactElement since this file is shared between
   * isomorphic and renderers. We could extract this to a
   *
   */
  
  /**
   * TODO: Test that a single child and an array with one item have the same key
   * pattern.
   */
  
  var didWarnAboutMaps = false;
  
  /**
   * Generate a key string that identifies a component within a set.
   *
   * @param {*} component A component that could contain a manual key.
   * @param {number} index Index that is used if a manual key is not provided.
   * @return {string}
   */
  function getComponentKey(component, index) {
    // Do some typechecking here since we call this blindly. We want to ensure
    // that we don't block potential future ES APIs.
    if (component && typeof component === 'object' && component.key != null) {
      // Explicit key
      return KeyEscapeUtils_1.escape(component.key);
    }
    // Implicit key determined by the index in the set
    return index.toString(36);
  }
  
  /**
   * @param {?*} children Children tree container.
   * @param {!string} nameSoFar Name of the key path so far.
   * @param {!function} callback Callback to invoke with each child found.
   * @param {?*} traverseContext Used to pass information throughout the traversal
   * process.
   * @return {!number} The number of children in this subtree.
   */
  function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
    var type = typeof children;
  
    if (type === 'undefined' || type === 'boolean') {
      // All of the above are perceived as null.
      children = null;
    }
  
    if (children === null || type === 'string' || type === 'number' ||
    // The following is inlined from ReactElement. This means we can optimize
    // some checks. React Fiber also inlines this logic for similar purposes.
    type === 'object' && children.$$typeof === ReactElementSymbol) {
      callback(traverseContext, children,
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows.
      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
      return 1;
    }
  
    var child;
    var nextName;
    var subtreeCount = 0; // Count of children found in the current subtree.
    var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
  
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        child = children[i];
        nextName = nextNamePrefix + getComponentKey(child, i);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else {
      var iteratorFn = getIteratorFn_1(children);
      if (iteratorFn) {
        var iterator = iteratorFn.call(children);
        var step;
        if (iteratorFn !== children.entries) {
          var ii = 0;
          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getComponentKey(child, ii++);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else {
          {
            var mapsAsChildrenAddendum = '';
            if (ReactCurrentOwner_1.current) {
              var mapsAsChildrenOwnerName = ReactCurrentOwner_1.current.getName();
              if (mapsAsChildrenOwnerName) {
                mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
              }
            }
            warning_1(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum);
            didWarnAboutMaps = true;
          }
          // Iterator will provide entry [k,v] tuples rather than values.
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              child = entry[1];
              nextName = nextNamePrefix + KeyEscapeUtils_1.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
              subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
            }
          }
        }
      } else if (type === 'object') {
        var addendum = '';
        {
          addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
          if (children._isReactElement) {
            addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
          }
          if (ReactCurrentOwner_1.current) {
            var name = ReactCurrentOwner_1.current.getName();
            if (name) {
              addendum += ' Check the render method of `' + name + '`.';
            }
          }
        }
        var childrenString = String(children);
        invariant_1(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
      }
    }
  
    return subtreeCount;
  }
  
  /**
   * Traverses children that are typically specified as `props.children`, but
   * might also be specified through attributes:
   *
   * - `traverseAllChildren(this.props.children, ...)`
   * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
   *
   * The `traverseContext` is an optional argument that is passed through the
   * entire traversal. It can be used to store accumulations or anything else that
   * the callback might find relevant.
   *
   * @param {?*} children Children tree object.
   * @param {!function} callback To invoke upon traversing each child.
   * @param {?*} traverseContext Context for traversal.
   * @return {!number} The number of children in this subtree.
   */
  function traverseAllChildren(children, callback, traverseContext) {
    if (children == null) {
      return 0;
    }
  
    return traverseAllChildrenImpl(children, '', callback, traverseContext);
  }
  
  var traverseAllChildren_1 = traverseAllChildren;
  
  var twoArgumentPooler = PooledClass_1.twoArgumentPooler;
  var fourArgumentPooler = PooledClass_1.fourArgumentPooler;
  
  var userProvidedKeyEscapeRegex = /\/+/g;
  function escapeUserProvidedKey(text) {
    return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
  }
  
  /**
   * PooledClass representing the bookkeeping associated with performing a child
   * traversal. Allows avoiding binding callbacks.
   *
   * @constructor ForEachBookKeeping
   * @param {!function} forEachFunction Function to perform traversal with.
   * @param {?*} forEachContext Context to perform context with.
   */
  function ForEachBookKeeping(forEachFunction, forEachContext) {
    this.func = forEachFunction;
    this.context = forEachContext;
    this.count = 0;
  }
  ForEachBookKeeping.prototype.destructor = function () {
    this.func = null;
    this.context = null;
    this.count = 0;
  };
  PooledClass_1.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
  
  function forEachSingleChild(bookKeeping, child, name) {
    var func = bookKeeping.func,
        context = bookKeeping.context;
  
    func.call(context, child, bookKeeping.count++);
  }
  
  /**
   * Iterates through children that are typically specified as `props.children`.
   *
   * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
   *
   * The provided forEachFunc(child, index) will be called for each
   * leaf child.
   *
   * @param {?*} children Children tree container.
   * @param {function(*, int)} forEachFunc
   * @param {*} forEachContext Context for forEachContext.
   */
  function forEachChildren(children, forEachFunc, forEachContext) {
    if (children == null) {
      return children;
    }
    var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
    traverseAllChildren_1(children, forEachSingleChild, traverseContext);
    ForEachBookKeeping.release(traverseContext);
  }
  
  /**
   * PooledClass representing the bookkeeping associated with performing a child
   * mapping. Allows avoiding binding callbacks.
   *
   * @constructor MapBookKeeping
   * @param {!*} mapResult Object containing the ordered map of results.
   * @param {!function} mapFunction Function to perform mapping with.
   * @param {?*} mapContext Context to perform mapping with.
   */
  function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
    this.result = mapResult;
    this.keyPrefix = keyPrefix;
    this.func = mapFunction;
    this.context = mapContext;
    this.count = 0;
  }
  MapBookKeeping.prototype.destructor = function () {
    this.result = null;
    this.keyPrefix = null;
    this.func = null;
    this.context = null;
    this.count = 0;
  };
  PooledClass_1.addPoolingTo(MapBookKeeping, fourArgumentPooler);
  
  function mapSingleChildIntoContext(bookKeeping, child, childKey) {
    var result = bookKeeping.result,
        keyPrefix = bookKeeping.keyPrefix,
        func = bookKeeping.func,
        context = bookKeeping.context;
  
  
    var mappedChild = func.call(context, child, bookKeeping.count++);
    if (Array.isArray(mappedChild)) {
      mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction_1.thatReturnsArgument);
    } else if (mappedChild != null) {
      if (ReactElement_1.isValidElement(mappedChild)) {
        mappedChild = ReactElement_1.cloneAndReplaceKey(mappedChild,
        // Keep both the (mapped) and old keys if they differ, just as
        // traverseAllChildren used to do for objects as children
        keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
      }
      result.push(mappedChild);
    }
  }
  
  function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
    var escapedPrefix = '';
    if (prefix != null) {
      escapedPrefix = escapeUserProvidedKey(prefix) + '/';
    }
    var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
    traverseAllChildren_1(children, mapSingleChildIntoContext, traverseContext);
    MapBookKeeping.release(traverseContext);
  }
  
  /**
   * Maps children that are typically specified as `props.children`.
   *
   * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
   *
   * The provided mapFunction(child, key, index) will be called for each
   * leaf child.
   *
   * @param {?*} children Children tree container.
   * @param {function(*, int)} func The map function.
   * @param {*} context Context for mapFunction.
   * @return {object} Object containing the ordered map of results.
   */
  function mapChildren(children, func, context) {
    if (children == null) {
      return children;
    }
    var result = [];
    mapIntoWithKeyPrefixInternal(children, result, null, func, context);
    return result;
  }
  
  function forEachSingleChildDummy(traverseContext, child, name) {
    return null;
  }
  
  /**
   * Count the number of children that are typically specified as
   * `props.children`.
   *
   * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
   *
   * @param {?*} children Children tree container.
   * @return {number} The number of children.
   */
  function countChildren(children, context) {
    return traverseAllChildren_1(children, forEachSingleChildDummy, null);
  }
  
  /**
   * Flatten a children object (typically specified as `props.children`) and
   * return an array with appropriately re-keyed children.
   *
   * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
   */
  function toArray(children) {
    var result = [];
    mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction_1.thatReturnsArgument);
    return result;
  }
  
  var ReactChildren = {
    forEach: forEachChildren,
    map: mapChildren,
    mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
    count: countChildren,
    toArray: toArray
  };
  
  var ReactChildren_1 = ReactChildren;
  
  function isNative(fn) {
    // Based on isNative() from Lodash
    var funcToString = Function.prototype.toString;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var reIsNative = RegExp('^' + funcToString
    // Take an example native function source for comparison
    .call(hasOwnProperty
    // Strip regex characters so we can use it for regex
    ).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&'
    // Remove hasOwnProperty from the template to make it generic
    ).replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
    try {
      var source = funcToString.call(fn);
      return reIsNative.test(source);
    } catch (err) {
      return false;
    }
  }
  
  var canUseCollections =
  // Array.from
  typeof Array.from === 'function' &&
  // Map
  typeof Map === 'function' && isNative(Map) &&
  // Map.prototype.keys
  Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
  // Set
  typeof Set === 'function' && isNative(Set) &&
  // Set.prototype.keys
  Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);
  
  var setItem;
  var getItem;
  var removeItem;
  var getItemIDs;
  var addRoot;
  var removeRoot;
  var getRootIDs;
  
  if (canUseCollections) {
    var itemMap = new Map();
    var rootIDSet = new Set();
  
    setItem = function (id, item) {
      itemMap.set(id, item);
    };
    getItem = function (id) {
      return itemMap.get(id);
    };
    removeItem = function (id) {
      itemMap['delete'](id);
    };
    getItemIDs = function () {
      return Array.from(itemMap.keys());
    };
  
    addRoot = function (id) {
      rootIDSet.add(id);
    };
    removeRoot = function (id) {
      rootIDSet['delete'](id);
    };
    getRootIDs = function () {
      return Array.from(rootIDSet.keys());
    };
  } else {
    var itemByKey = {};
    var rootByKey = {};
  
    // Use non-numeric keys to prevent V8 performance issues:
    // https://github.com/facebook/react/pull/7232
    var getKeyFromID = function (id) {
      return '.' + id;
    };
    var getIDFromKey = function (key) {
      return parseInt(key.substr(1), 10);
    };
  
    setItem = function (id, item) {
      var key = getKeyFromID(id);
      itemByKey[key] = item;
    };
    getItem = function (id) {
      var key = getKeyFromID(id);
      return itemByKey[key];
    };
    removeItem = function (id) {
      var key = getKeyFromID(id);
      delete itemByKey[key];
    };
    getItemIDs = function () {
      return Object.keys(itemByKey).map(getIDFromKey);
    };
  
    addRoot = function (id) {
      var key = getKeyFromID(id);
      rootByKey[key] = true;
    };
    removeRoot = function (id) {
      var key = getKeyFromID(id);
      delete rootByKey[key];
    };
    getRootIDs = function () {
      return Object.keys(rootByKey).map(getIDFromKey);
    };
  }
  
  var unmountedIDs = [];
  
  function purgeDeep(id) {
    var item = getItem(id);
    if (item) {
      var childIDs = item.childIDs;
  
      removeItem(id);
      childIDs.forEach(purgeDeep);
    }
  }
  
  function describeComponentFrame(name, source, ownerName) {
    return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
  }
  
  function getDisplayName(element) {
    if (element == null) {
      return '#empty';
    } else if (typeof element === 'string' || typeof element === 'number') {
      return '#text';
    } else if (typeof element.type === 'string') {
      return element.type;
    } else {
      return element.type.displayName || element.type.name || 'Unknown';
    }
  }
  
  function describeID(id) {
    var name = ReactComponentTreeHook.getDisplayName(id);
    var element = ReactComponentTreeHook.getElement(id);
    var ownerID = ReactComponentTreeHook.getOwnerID(id);
    var ownerName;
    if (ownerID) {
      ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
    }
    warning_1(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id);
    return describeComponentFrame(name, element && element._source, ownerName);
  }
  
  var ReactComponentTreeHook = {
    onSetChildren: function (id, nextChildIDs) {
      var item = getItem(id);
      !item ? invariant_1(false, 'Item must have been set') : void 0;
      item.childIDs = nextChildIDs;
  
      for (var i = 0; i < nextChildIDs.length; i++) {
        var nextChildID = nextChildIDs[i];
        var nextChild = getItem(nextChildID);
        !nextChild ? invariant_1(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : void 0;
        !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? invariant_1(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : void 0;
        !nextChild.isMounted ? invariant_1(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : void 0;
        if (nextChild.parentID == null) {
          nextChild.parentID = id;
          // TODO: This shouldn't be necessary but mounting a new root during in
          // componentWillMount currently causes not-yet-mounted components to
          // be purged from our tree data so their parent id is missing.
        }
        !(nextChild.parentID === id) ? invariant_1(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : void 0;
      }
    },
    onBeforeMountComponent: function (id, element, parentID) {
      var item = {
        element: element,
        parentID: parentID,
        text: null,
        childIDs: [],
        isMounted: false,
        updateCount: 0
      };
      setItem(id, item);
    },
    onBeforeUpdateComponent: function (id, element) {
      var item = getItem(id);
      if (!item || !item.isMounted) {
        // We may end up here as a result of setState() in componentWillUnmount().
        // In this case, ignore the element.
        return;
      }
      item.element = element;
    },
    onMountComponent: function (id) {
      var item = getItem(id);
      !item ? invariant_1(false, 'Item must have been set') : void 0;
      item.isMounted = true;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        addRoot(id);
      }
    },
    onUpdateComponent: function (id) {
      var item = getItem(id);
      if (!item || !item.isMounted) {
        // We may end up here as a result of setState() in componentWillUnmount().
        // In this case, ignore the element.
        return;
      }
      item.updateCount++;
    },
    onUnmountComponent: function (id) {
      var item = getItem(id);
      if (item) {
        // We need to check if it exists.
        // `item` might not exist if it is inside an error boundary, and a sibling
        // error boundary child threw while mounting. Then this instance never
        // got a chance to mount, but it still gets an unmounting event during
        // the error boundary cleanup.
        item.isMounted = false;
        var isRoot = item.parentID === 0;
        if (isRoot) {
          removeRoot(id);
        }
      }
      unmountedIDs.push(id);
    },
    purgeUnmountedComponents: function () {
      if (ReactComponentTreeHook._preventPurging) {
        // Should only be used for testing.
        return;
      }
  
      for (var i = 0; i < unmountedIDs.length; i++) {
        var id = unmountedIDs[i];
        purgeDeep(id);
      }
      unmountedIDs.length = 0;
    },
    isMounted: function (id) {
      var item = getItem(id);
      return item ? item.isMounted : false;
    },
    getCurrentStackAddendum: function (topElement) {
      var info = '';
      if (topElement) {
        var name = getDisplayName(topElement);
        var owner = topElement._owner;
        info += describeComponentFrame(name, topElement._source, owner && owner.getName());
      }
  
      var currentOwner = ReactCurrentOwner_1.current;
      var id = currentOwner && currentOwner._debugID;
  
      info += ReactComponentTreeHook.getStackAddendumByID(id);
      return info;
    },
    getStackAddendumByID: function (id) {
      var info = '';
      while (id) {
        info += describeID(id);
        id = ReactComponentTreeHook.getParentID(id);
      }
      return info;
    },
    getChildIDs: function (id) {
      var item = getItem(id);
      return item ? item.childIDs : [];
    },
    getDisplayName: function (id) {
      var element = ReactComponentTreeHook.getElement(id);
      if (!element) {
        return null;
      }
      return getDisplayName(element);
    },
    getElement: function (id) {
      var item = getItem(id);
      return item ? item.element : null;
    },
    getOwnerID: function (id) {
      var element = ReactComponentTreeHook.getElement(id);
      if (!element || !element._owner) {
        return null;
      }
      return element._owner._debugID;
    },
    getParentID: function (id) {
      var item = getItem(id);
      return item ? item.parentID : null;
    },
    getSource: function (id) {
      var item = getItem(id);
      var element = item ? item.element : null;
      var source = element != null ? element._source : null;
      return source;
    },
    getText: function (id) {
      var element = ReactComponentTreeHook.getElement(id);
      if (typeof element === 'string') {
        return element;
      } else if (typeof element === 'number') {
        return '' + element;
      } else {
        return null;
      }
    },
    getUpdateCount: function (id) {
      var item = getItem(id);
      return item ? item.updateCount : 0;
    },
  
  
    getRootIDs: getRootIDs,
    getRegisteredIDs: getItemIDs,
  
    pushNonStandardWarningStack: function (isCreatingElement, currentSource) {
      if (typeof console.reactStack !== 'function') {
        return;
      }
  
      var stack = [];
      var currentOwner = ReactCurrentOwner_1.current;
      var id = currentOwner && currentOwner._debugID;
  
      try {
        if (isCreatingElement) {
          stack.push({
            name: id ? ReactComponentTreeHook.getDisplayName(id) : null,
            fileName: currentSource ? currentSource.fileName : null,
            lineNumber: currentSource ? currentSource.lineNumber : null
          });
        }
  
        while (id) {
          var element = ReactComponentTreeHook.getElement(id);
          var parentID = ReactComponentTreeHook.getParentID(id);
          var ownerID = ReactComponentTreeHook.getOwnerID(id);
          var ownerName = ownerID ? ReactComponentTreeHook.getDisplayName(ownerID) : null;
          var source = element && element._source;
          stack.push({
            name: ownerName,
            fileName: source ? source.fileName : null,
            lineNumber: source ? source.lineNumber : null
          });
          id = parentID;
        }
      } catch (err) {
        // Internal state is messed up.
        // Stop building the stack (it's just a nice to have).
      }
  
      console.reactStack(stack);
    },
    popNonStandardWarningStack: function () {
      if (typeof console.reactStackEnd !== 'function') {
        return;
      }
      console.reactStackEnd();
    }
  };
  
  var ReactComponentTreeHook_1 = ReactComponentTreeHook;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  var ReactPropTypeLocationNames$1 = {};
  
  {
    ReactPropTypeLocationNames$1 = {
      prop: 'prop',
      context: 'context',
      childContext: 'child context'
    };
  }
  
  var ReactPropTypeLocationNames_1 = ReactPropTypeLocationNames$1;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  var ReactPropTypesSecret$3 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  
  var ReactPropTypesSecret_1$2 = ReactPropTypesSecret$3;
  
  var ReactComponentTreeHook$1;
  
  if (typeof process !== 'undefined' && process.env && "development" === 'test') {
    // Temporary hack.
    // Inline requires don't work well with Jest:
    // https://github.com/facebook/react/issues/7240
    // Remove the inline requires when we don't need them anymore:
    // https://github.com/facebook/react/pull/7178
    ReactComponentTreeHook$1 = ReactComponentTreeHook_1;
  }
  
  var loggedTypeFailures$1 = {};
  
  /**
   * Assert that the values match with the type specs.
   * Error messages are memorized and will only be shown once.
   *
   * @param {object} typeSpecs Map of name to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @param {string} componentName Name of the component for error messages.
   * @param {?object} element The React element that is being type-checked
   * @param {?number} debugID The React component instance that is being type-checked
   * @private
   */
  function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          !(typeof typeSpecs[typeSpecName] === 'function') ? invariant_1(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames_1[location], typeSpecName) : void 0;
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret_1$2);
        } catch (ex) {
          error = ex;
        }
        warning_1(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames_1[location], typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures$1)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures$1[error.message] = true;
  
          var componentStackInfo = '';
  
          {
            if (!ReactComponentTreeHook$1) {
              ReactComponentTreeHook$1 = ReactComponentTreeHook_1;
            }
            if (debugID !== null) {
              componentStackInfo = ReactComponentTreeHook$1.getStackAddendumByID(debugID);
            } else if (element !== null) {
              componentStackInfo = ReactComponentTreeHook$1.getCurrentStackAddendum(element);
            }
          }
  
          warning_1(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo);
        }
      }
    }
  }
  
  var checkReactTypeSpec_1 = checkReactTypeSpec;
  
  function getDeclarationErrorAddendum() {
    if (ReactCurrentOwner_1.current) {
      var name = ReactCurrentOwner_1.current.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }
  
  function getSourceInfoErrorAddendum(elementProps) {
    if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
      var source = elementProps.__source;
      var fileName = source.fileName.replace(/^.*[\\\/]/, '');
      var lineNumber = source.lineNumber;
      return ' Check your code at ' + fileName + ':' + lineNumber + '.';
    }
    return '';
  }
  
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */
  var ownerHasKeyUseWarning = {};
  
  function getCurrentComponentErrorInfo(parentType) {
    var info = getDeclarationErrorAddendum();
  
    if (!info) {
      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
      if (parentName) {
        info = ' Check the top-level render call using <' + parentName + '>.';
      }
    }
    return info;
  }
  
  /**
   * Warn if the element doesn't have an explicit key assigned to it.
   * This element is in an array. The array could grow and shrink or be
   * reordered. All children that haven't already been validated are required to
   * have a "key" property assigned to it. Error statuses are cached so a warning
   * will only be shown once.
   *
   * @internal
   * @param {ReactElement} element Element that requires a key.
   * @param {*} parentType element's parent's type.
   */
  function validateExplicitKey(element, parentType) {
    if (!element._store || element._store.validated || element.key != null) {
      return;
    }
    element._store.validated = true;
  
    var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});
  
    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
    if (memoizer[currentComponentErrorInfo]) {
      return;
    }
    memoizer[currentComponentErrorInfo] = true;
  
    // Usually the current owner is the offender, but if it accepts children as a
    // property, it may be the creator of the child that's responsible for
    // assigning it a key.
    var childOwner = '';
    if (element && element._owner && element._owner !== ReactCurrentOwner_1.current) {
      // Give the component that originally created this child.
      childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
    }
  
    warning_1(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook_1.getCurrentStackAddendum(element));
  }
  
  /**
   * Ensure that every element either is passed in a static location, in an
   * array with an explicit keys property defined, or in an object literal
   * with valid key property.
   *
   * @internal
   * @param {ReactNode} node Statically passed child of any type.
   * @param {*} parentType node's parent's type.
   */
  function validateChildKeys(node, parentType) {
    if (typeof node !== 'object') {
      return;
    }
    if (Array.isArray(node)) {
      for (var i = 0; i < node.length; i++) {
        var child = node[i];
        if (ReactElement_1.isValidElement(child)) {
          validateExplicitKey(child, parentType);
        }
      }
    } else if (ReactElement_1.isValidElement(node)) {
      // This element was passed in a valid location.
      if (node._store) {
        node._store.validated = true;
      }
    } else if (node) {
      var iteratorFn = getIteratorFn_1(node);
      // Entry iterators provide implicit keys.
      if (iteratorFn) {
        if (iteratorFn !== node.entries) {
          var iterator = iteratorFn.call(node);
          var step;
          while (!(step = iterator.next()).done) {
            if (ReactElement_1.isValidElement(step.value)) {
              validateExplicitKey(step.value, parentType);
            }
          }
        }
      }
    }
  }
  
  /**
   * Given an element, validate that its props follow the propTypes definition,
   * provided by the type.
   *
   * @param {ReactElement} element
   */
  function validatePropTypes(element) {
    var componentClass = element.type;
    if (typeof componentClass !== 'function') {
      return;
    }
    var name = componentClass.displayName || componentClass.name;
    if (componentClass.propTypes) {
      checkReactTypeSpec_1(componentClass.propTypes, element.props, 'prop', name, element, null);
    }
    if (typeof componentClass.getDefaultProps === 'function') {
      warning_1(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
    }
  }
  
  var ReactElementValidator$2 = {
    createElement: function (type, props, children) {
      var validType = typeof type === 'string' || typeof type === 'function';
      // We warn in this case but don't throw. We expect the element creation to
      // succeed and there will likely be errors in render.
      if (!validType) {
        if (typeof type !== 'function' && typeof type !== 'string') {
          var info = '';
          if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
            info += ' You likely forgot to export your component from the file ' + "it's defined in.";
          }
  
          var sourceInfo = getSourceInfoErrorAddendum(props);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }
  
          info += ReactComponentTreeHook_1.getCurrentStackAddendum();
  
          var currentSource = props !== null && props !== undefined && props.__source !== undefined ? props.__source : null;
          ReactComponentTreeHook_1.pushNonStandardWarningStack(true, currentSource);
          warning_1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info);
          ReactComponentTreeHook_1.popNonStandardWarningStack();
        }
      }
  
      var element = ReactElement_1.createElement.apply(this, arguments);
  
      // The result can be nullish if a mock or a custom function is used.
      // TODO: Drop this when these are no longer allowed as the type argument.
      if (element == null) {
        return element;
      }
  
      // Skip key warning if the type isn't valid since our key validation logic
      // doesn't expect a non-string/function type and can throw confusing errors.
      // We don't want exception behavior to differ between dev and prod.
      // (Rendering will throw with a helpful message and as soon as the type is
      // fixed, the key warnings will appear.)
      if (validType) {
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], type);
        }
      }
  
      validatePropTypes(element);
  
      return element;
    },
  
    createFactory: function (type) {
      var validatedFactory = ReactElementValidator$2.createElement.bind(null, type);
      // Legacy hook TODO: Warn if this is accessed
      validatedFactory.type = type;
  
      {
        if (canDefineProperty_1) {
          Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function () {
              lowPriorityWarning_1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
              Object.defineProperty(this, 'type', {
                value: type
              });
              return type;
            }
          });
        }
      }
  
      return validatedFactory;
    },
  
    cloneElement: function (element, props, children) {
      var newElement = ReactElement_1.cloneElement.apply(this, arguments);
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }
      validatePropTypes(newElement);
      return newElement;
    }
  };
  
  var ReactElementValidator_1 = ReactElementValidator$2;
  
  /**
   * Create a factory that creates HTML tag elements.
   *
   * @private
   */
  var createDOMFactory = ReactElement_1.createFactory;
  {
    var ReactElementValidator$1 = ReactElementValidator_1;
    createDOMFactory = ReactElementValidator$1.createFactory;
  }
  
  /**
   * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
   *
   * @public
   */
  var ReactDOMFactories = {
    a: createDOMFactory('a'),
    abbr: createDOMFactory('abbr'),
    address: createDOMFactory('address'),
    area: createDOMFactory('area'),
    article: createDOMFactory('article'),
    aside: createDOMFactory('aside'),
    audio: createDOMFactory('audio'),
    b: createDOMFactory('b'),
    base: createDOMFactory('base'),
    bdi: createDOMFactory('bdi'),
    bdo: createDOMFactory('bdo'),
    big: createDOMFactory('big'),
    blockquote: createDOMFactory('blockquote'),
    body: createDOMFactory('body'),
    br: createDOMFactory('br'),
    button: createDOMFactory('button'),
    canvas: createDOMFactory('canvas'),
    caption: createDOMFactory('caption'),
    cite: createDOMFactory('cite'),
    code: createDOMFactory('code'),
    col: createDOMFactory('col'),
    colgroup: createDOMFactory('colgroup'),
    data: createDOMFactory('data'),
    datalist: createDOMFactory('datalist'),
    dd: createDOMFactory('dd'),
    del: createDOMFactory('del'),
    details: createDOMFactory('details'),
    dfn: createDOMFactory('dfn'),
    dialog: createDOMFactory('dialog'),
    div: createDOMFactory('div'),
    dl: createDOMFactory('dl'),
    dt: createDOMFactory('dt'),
    em: createDOMFactory('em'),
    embed: createDOMFactory('embed'),
    fieldset: createDOMFactory('fieldset'),
    figcaption: createDOMFactory('figcaption'),
    figure: createDOMFactory('figure'),
    footer: createDOMFactory('footer'),
    form: createDOMFactory('form'),
    h1: createDOMFactory('h1'),
    h2: createDOMFactory('h2'),
    h3: createDOMFactory('h3'),
    h4: createDOMFactory('h4'),
    h5: createDOMFactory('h5'),
    h6: createDOMFactory('h6'),
    head: createDOMFactory('head'),
    header: createDOMFactory('header'),
    hgroup: createDOMFactory('hgroup'),
    hr: createDOMFactory('hr'),
    html: createDOMFactory('html'),
    i: createDOMFactory('i'),
    iframe: createDOMFactory('iframe'),
    img: createDOMFactory('img'),
    input: createDOMFactory('input'),
    ins: createDOMFactory('ins'),
    kbd: createDOMFactory('kbd'),
    keygen: createDOMFactory('keygen'),
    label: createDOMFactory('label'),
    legend: createDOMFactory('legend'),
    li: createDOMFactory('li'),
    link: createDOMFactory('link'),
    main: createDOMFactory('main'),
    map: createDOMFactory('map'),
    mark: createDOMFactory('mark'),
    menu: createDOMFactory('menu'),
    menuitem: createDOMFactory('menuitem'),
    meta: createDOMFactory('meta'),
    meter: createDOMFactory('meter'),
    nav: createDOMFactory('nav'),
    noscript: createDOMFactory('noscript'),
    object: createDOMFactory('object'),
    ol: createDOMFactory('ol'),
    optgroup: createDOMFactory('optgroup'),
    option: createDOMFactory('option'),
    output: createDOMFactory('output'),
    p: createDOMFactory('p'),
    param: createDOMFactory('param'),
    picture: createDOMFactory('picture'),
    pre: createDOMFactory('pre'),
    progress: createDOMFactory('progress'),
    q: createDOMFactory('q'),
    rp: createDOMFactory('rp'),
    rt: createDOMFactory('rt'),
    ruby: createDOMFactory('ruby'),
    s: createDOMFactory('s'),
    samp: createDOMFactory('samp'),
    script: createDOMFactory('script'),
    section: createDOMFactory('section'),
    select: createDOMFactory('select'),
    small: createDOMFactory('small'),
    source: createDOMFactory('source'),
    span: createDOMFactory('span'),
    strong: createDOMFactory('strong'),
    style: createDOMFactory('style'),
    sub: createDOMFactory('sub'),
    summary: createDOMFactory('summary'),
    sup: createDOMFactory('sup'),
    table: createDOMFactory('table'),
    tbody: createDOMFactory('tbody'),
    td: createDOMFactory('td'),
    textarea: createDOMFactory('textarea'),
    tfoot: createDOMFactory('tfoot'),
    th: createDOMFactory('th'),
    thead: createDOMFactory('thead'),
    time: createDOMFactory('time'),
    title: createDOMFactory('title'),
    tr: createDOMFactory('tr'),
    track: createDOMFactory('track'),
    u: createDOMFactory('u'),
    ul: createDOMFactory('ul'),
    'var': createDOMFactory('var'),
    video: createDOMFactory('video'),
    wbr: createDOMFactory('wbr'),
  
    // SVG
    circle: createDOMFactory('circle'),
    clipPath: createDOMFactory('clipPath'),
    defs: createDOMFactory('defs'),
    ellipse: createDOMFactory('ellipse'),
    g: createDOMFactory('g'),
    image: createDOMFactory('image'),
    line: createDOMFactory('line'),
    linearGradient: createDOMFactory('linearGradient'),
    mask: createDOMFactory('mask'),
    path: createDOMFactory('path'),
    pattern: createDOMFactory('pattern'),
    polygon: createDOMFactory('polygon'),
    polyline: createDOMFactory('polyline'),
    radialGradient: createDOMFactory('radialGradient'),
    rect: createDOMFactory('rect'),
    stop: createDOMFactory('stop'),
    svg: createDOMFactory('svg'),
    text: createDOMFactory('text'),
    tspan: createDOMFactory('tspan')
  };
  
  var ReactDOMFactories_1 = ReactDOMFactories;
  
  var printWarning$3 = function() {};
  
  {
    printWarning$3 = function(text) {
      var message = 'Warning: ' + text;
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };
  }
  
  function emptyFunctionThatReturnsNull() {
    return null;
  }
  
  var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
    /* global Symbol */
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
  
    /**
     * Returns the iterator method function contained on the iterable object.
     *
     * Be sure to invoke the function with the iterable as context:
     *
     *     var iteratorFn = getIteratorFn(myIterable);
     *     if (iteratorFn) {
     *       var iterator = iteratorFn.call(myIterable);
     *       ...
     *     }
     *
     * @param {?object} maybeIterable
     * @return {?function}
     */
    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
    }
  
    /**
     * Collection of methods that allow declaration and validation of props that are
     * supplied to React components. Example usage:
     *
     *   var Props = require('ReactPropTypes');
     *   var MyArticle = React.createClass({
     *     propTypes: {
     *       // An optional string prop named "description".
     *       description: Props.string,
     *
     *       // A required enum prop named "category".
     *       category: Props.oneOf(['News','Photos']).isRequired,
     *
     *       // A prop named "dialog" that requires an instance of Dialog.
     *       dialog: Props.instanceOf(Dialog).isRequired
     *     },
     *     render: function() { ... }
     *   });
     *
     * A more formal specification of how these methods are used:
     *
     *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
     *   decl := ReactPropTypes.{type}(.isRequired)?
     *
     * Each and every declaration produces a function with the same signature. This
     * allows the creation of custom validation functions. For example:
     *
     *  var MyLink = React.createClass({
     *    propTypes: {
     *      // An optional string or URI prop named "href".
     *      href: function(props, propName, componentName) {
     *        var propValue = props[propName];
     *        if (propValue != null && typeof propValue !== 'string' &&
     *            !(propValue instanceof URI)) {
     *          return new Error(
     *            'Expected a string or an URI for ' + propName + ' in ' +
     *            componentName
     *          );
     *        }
     *      }
     *    },
     *    render: function() {...}
     *  });
     *
     * @internal
     */
  
    var ANONYMOUS = '<<anonymous>>';
  
    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker('array'),
      bool: createPrimitiveTypeChecker('boolean'),
      func: createPrimitiveTypeChecker('function'),
      number: createPrimitiveTypeChecker('number'),
      object: createPrimitiveTypeChecker('object'),
      string: createPrimitiveTypeChecker('string'),
      symbol: createPrimitiveTypeChecker('symbol'),
  
      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker,
    };
  
    /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */
    /*eslint-disable no-self-compare*/
    function is(x, y) {
      // SameValue algorithm
      if (x === y) {
        // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
      } else {
        // Step 6.a: NaN == NaN
        return x !== x && y !== y;
      }
    }
    /*eslint-enable no-self-compare*/
  
    /**
     * We use an Error-like object for backward compatibility as people may call
     * PropTypes directly and inspect their output. However, we don't use real
     * Errors anymore. We don't inspect their stack anyway, and creating them
     * is prohibitively expensive if they are created too often, such as what
     * happens in oneOfType() for any type before the one that matched.
     */
    function PropTypeError(message) {
      this.message = message;
      this.stack = '';
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype;
  
    function createChainableTypeChecker(validate) {
      {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }
      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;
  
        if (secret !== ReactPropTypesSecret_1) {
          if (throwOnDirectAccess) {
            // New behavior only for users of `prop-types` package
            var err = new Error(
              'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
              'Use `PropTypes.checkPropTypes()` to call them. ' +
              'Read more at http://fb.me/use-check-prop-types'
            );
            err.name = 'Invariant Violation';
            throw err;
          } else if ("development" !== 'production' && typeof console !== 'undefined') {
            // Old behavior for people using React.PropTypes
            var cacheKey = componentName + ':' + propName;
            if (
              !manualPropTypeCallCache[cacheKey] &&
              // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3
            ) {
              printWarning$3(
                'You are manually calling a React.PropTypes validation ' +
                'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
                'and will throw in the standalone `prop-types` package. ' +
                'You may be seeing this warning due to a third-party PropTypes ' +
                'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
              );
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }
        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
            }
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
          }
          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }
  
      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
  
      return chainedCheckType;
    }
  
    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== expectedType) {
          // `propValue` being instance of, say, date/regexp, pass the 'object'
          // check, but we can offer a more precise error message here rather than
          // 'of type `object`'.
          var preciseType = getPreciseType(propValue);
  
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
  
    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
  
    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
        }
        var propValue = props[propName];
        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
        }
        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
          if (error instanceof Error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
  
    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
  
    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
  
    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        printWarning$3('Invalid argument supplied to oneOf, expected an instance of array.');
        return emptyFunctionThatReturnsNull;
      }
  
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }
  
        var valuesString = JSON.stringify(expectedValues);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
      }
      return createChainableTypeChecker(validate);
    }
  
    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
        }
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
        }
        for (var key in propValue) {
          if (propValue.hasOwnProperty(key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
            if (error instanceof Error) {
              return error;
            }
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
  
    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        printWarning$3('Invalid argument supplied to oneOfType, expected an instance of array.');
        return emptyFunctionThatReturnsNull;
      }
  
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (typeof checker !== 'function') {
          printWarning$3(
            'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
            'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
          );
          return emptyFunctionThatReturnsNull;
        }
      }
  
      function validate(props, propName, componentName, location, propFullName) {
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
            return null;
          }
        }
  
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
      }
      return createChainableTypeChecker(validate);
    }
  
    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
  
    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }
        for (var key in shapeTypes) {
          var checker = shapeTypes[key];
          if (!checker) {
            continue;
          }
          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
  
    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }
        // We need to check all keys in case some are required but missing from
        // props.
        var allKeys = objectAssign({}, props[propName], shapeTypes);
        for (var key in allKeys) {
          var checker = shapeTypes[key];
          if (!checker) {
            return new PropTypeError(
              'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
              '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
              '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
            );
          }
          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
          if (error) {
            return error;
          }
        }
        return null;
      }
  
      return createChainableTypeChecker(validate);
    }
  
    function isNode(propValue) {
      switch (typeof propValue) {
        case 'number':
        case 'string':
        case 'undefined':
          return true;
        case 'boolean':
          return !propValue;
        case 'object':
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }
          if (propValue === null || isValidElement(propValue)) {
            return true;
          }
  
          var iteratorFn = getIteratorFn(propValue);
          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;
            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              // Iterator will provide entry [k,v] tuples rather than values.
              while (!(step = iterator.next()).done) {
                var entry = step.value;
                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }
  
          return true;
        default:
          return false;
      }
    }
  
    function isSymbol(propType, propValue) {
      // Native Symbol.
      if (propType === 'symbol') {
        return true;
      }
  
      // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
      if (propValue['@@toStringTag'] === 'Symbol') {
        return true;
      }
  
      // Fallback for non-spec compliant Symbols which are polyfilled.
      if (typeof Symbol === 'function' && propValue instanceof Symbol) {
        return true;
      }
  
      return false;
    }
  
    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
      var propType = typeof propValue;
      if (Array.isArray(propValue)) {
        return 'array';
      }
      if (propValue instanceof RegExp) {
        // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
      }
      if (isSymbol(propType, propValue)) {
        return 'symbol';
      }
      return propType;
    }
  
    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
      if (typeof propValue === 'undefined' || propValue === null) {
        return '' + propValue;
      }
      var propType = getPropType(propValue);
      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date';
        } else if (propValue instanceof RegExp) {
          return 'regexp';
        }
      }
      return propType;
    }
  
    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);
      switch (type) {
        case 'array':
        case 'object':
          return 'an ' + type;
        case 'boolean':
        case 'date':
        case 'regexp':
          return 'a ' + type;
        default:
          return type;
      }
    }
  
    // Returns class name of the object, if any.
    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }
      return propValue.constructor.name;
    }
  
    ReactPropTypes.checkPropTypes = checkPropTypes_1;
    ReactPropTypes.PropTypes = ReactPropTypes;
  
    return ReactPropTypes;
  };
  
  // React 15.5 references this module, and assumes PropTypes are still callable in production.
  // Therefore we re-export development-only version with all the PropTypes checks here.
  // However if one is migrating to the `prop-types` npm library, they will go through the
  // `index.js` entry point, and it will branch depending on the environment.
  
  var factory_1 = function(isValidElement) {
    // It is still allowed in 15.5.
    var throwOnDirectAccess = false;
    return factoryWithTypeCheckers(isValidElement, throwOnDirectAccess);
  };
  
  var isValidElement = ReactElement_1.isValidElement;
  
  
  
  var ReactPropTypes = factory_1(isValidElement);
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  var ReactVersion = '15.6.2';
  
  {
    var warning$2 = warning_1;
  }
  
  var MIXINS_KEY$1 = 'mixins';
  
  // Helper function to allow the creation of anonymous functions which do not
  // have .name set to the name of the variable being assigned to.
  function identity$1(fn) {
    return fn;
  }
  
  var ReactPropTypeLocationNames$3;
  {
    ReactPropTypeLocationNames$3 = {
      prop: 'prop',
      context: 'context',
      childContext: 'child context'
    };
  }
  
  function factory$1(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
    /**
     * Policies that describe methods in `ReactClassInterface`.
     */
  
    var injectedMixins = [];
  
    /**
     * Composite components are higher-level components that compose other composite
     * or host components.
     *
     * To create a new type of `ReactClass`, pass a specification of
     * your new class to `React.createClass`. The only requirement of your class
     * specification is that you implement a `render` method.
     *
     *   var MyComponent = React.createClass({
     *     render: function() {
     *       return <div>Hello World</div>;
     *     }
     *   });
     *
     * The class specification supports a specific protocol of methods that have
     * special meaning (e.g. `render`). See `ReactClassInterface` for
     * more the comprehensive protocol. Any other properties and methods in the
     * class specification will be available on the prototype.
     *
     * @interface ReactClassInterface
     * @internal
     */
    var ReactClassInterface = {
      /**
       * An array of Mixin objects to include when defining your component.
       *
       * @type {array}
       * @optional
       */
      mixins: 'DEFINE_MANY',
  
      /**
       * An object containing properties and methods that should be defined on
       * the component's constructor instead of its prototype (static methods).
       *
       * @type {object}
       * @optional
       */
      statics: 'DEFINE_MANY',
  
      /**
       * Definition of prop types for this component.
       *
       * @type {object}
       * @optional
       */
      propTypes: 'DEFINE_MANY',
  
      /**
       * Definition of context types for this component.
       *
       * @type {object}
       * @optional
       */
      contextTypes: 'DEFINE_MANY',
  
      /**
       * Definition of context types this component sets for its children.
       *
       * @type {object}
       * @optional
       */
      childContextTypes: 'DEFINE_MANY',
  
      // ==== Definition methods ====
  
      /**
       * Invoked when the component is mounted. Values in the mapping will be set on
       * `this.props` if that prop is not specified (i.e. using an `in` check).
       *
       * This method is invoked before `getInitialState` and therefore cannot rely
       * on `this.state` or use `this.setState`.
       *
       * @return {object}
       * @optional
       */
      getDefaultProps: 'DEFINE_MANY_MERGED',
  
      /**
       * Invoked once before the component is mounted. The return value will be used
       * as the initial value of `this.state`.
       *
       *   getInitialState: function() {
       *     return {
       *       isOn: false,
       *       fooBaz: new BazFoo()
       *     }
       *   }
       *
       * @return {object}
       * @optional
       */
      getInitialState: 'DEFINE_MANY_MERGED',
  
      /**
       * @return {object}
       * @optional
       */
      getChildContext: 'DEFINE_MANY_MERGED',
  
      /**
       * Uses props from `this.props` and state from `this.state` to render the
       * structure of the component.
       *
       * No guarantees are made about when or how often this method is invoked, so
       * it must not have side effects.
       *
       *   render: function() {
       *     var name = this.props.name;
       *     return <div>Hello, {name}!</div>;
       *   }
       *
       * @return {ReactComponent}
       * @required
       */
      render: 'DEFINE_ONCE',
  
      // ==== Delegate methods ====
  
      /**
       * Invoked when the component is initially created and about to be mounted.
       * This may have side effects, but any external subscriptions or data created
       * by this method must be cleaned up in `componentWillUnmount`.
       *
       * @optional
       */
      componentWillMount: 'DEFINE_MANY',
  
      /**
       * Invoked when the component has been mounted and has a DOM representation.
       * However, there is no guarantee that the DOM node is in the document.
       *
       * Use this as an opportunity to operate on the DOM when the component has
       * been mounted (initialized and rendered) for the first time.
       *
       * @param {DOMElement} rootNode DOM element representing the component.
       * @optional
       */
      componentDidMount: 'DEFINE_MANY',
  
      /**
       * Invoked before the component receives new props.
       *
       * Use this as an opportunity to react to a prop transition by updating the
       * state using `this.setState`. Current props are accessed via `this.props`.
       *
       *   componentWillReceiveProps: function(nextProps, nextContext) {
       *     this.setState({
       *       likesIncreasing: nextProps.likeCount > this.props.likeCount
       *     });
       *   }
       *
       * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
       * transition may cause a state change, but the opposite is not true. If you
       * need it, you are probably looking for `componentWillUpdate`.
       *
       * @param {object} nextProps
       * @optional
       */
      componentWillReceiveProps: 'DEFINE_MANY',
  
      /**
       * Invoked while deciding if the component should be updated as a result of
       * receiving new props, state and/or context.
       *
       * Use this as an opportunity to `return false` when you're certain that the
       * transition to the new props/state/context will not require a component
       * update.
       *
       *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
       *     return !equal(nextProps, this.props) ||
       *       !equal(nextState, this.state) ||
       *       !equal(nextContext, this.context);
       *   }
       *
       * @param {object} nextProps
       * @param {?object} nextState
       * @param {?object} nextContext
       * @return {boolean} True if the component should update.
       * @optional
       */
      shouldComponentUpdate: 'DEFINE_ONCE',
  
      /**
       * Invoked when the component is about to update due to a transition from
       * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
       * and `nextContext`.
       *
       * Use this as an opportunity to perform preparation before an update occurs.
       *
       * NOTE: You **cannot** use `this.setState()` in this method.
       *
       * @param {object} nextProps
       * @param {?object} nextState
       * @param {?object} nextContext
       * @param {ReactReconcileTransaction} transaction
       * @optional
       */
      componentWillUpdate: 'DEFINE_MANY',
  
      /**
       * Invoked when the component's DOM representation has been updated.
       *
       * Use this as an opportunity to operate on the DOM when the component has
       * been updated.
       *
       * @param {object} prevProps
       * @param {?object} prevState
       * @param {?object} prevContext
       * @param {DOMElement} rootNode DOM element representing the component.
       * @optional
       */
      componentDidUpdate: 'DEFINE_MANY',
  
      /**
       * Invoked when the component is about to be removed from its parent and have
       * its DOM representation destroyed.
       *
       * Use this as an opportunity to deallocate any external resources.
       *
       * NOTE: There is no `componentDidUnmount` since your component will have been
       * destroyed by that point.
       *
       * @optional
       */
      componentWillUnmount: 'DEFINE_MANY',
  
      /**
       * Replacement for (deprecated) `componentWillMount`.
       *
       * @optional
       */
      UNSAFE_componentWillMount: 'DEFINE_MANY',
  
      /**
       * Replacement for (deprecated) `componentWillReceiveProps`.
       *
       * @optional
       */
      UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',
  
      /**
       * Replacement for (deprecated) `componentWillUpdate`.
       *
       * @optional
       */
      UNSAFE_componentWillUpdate: 'DEFINE_MANY',
  
      // ==== Advanced methods ====
  
      /**
       * Updates the component's currently mounted DOM representation.
       *
       * By default, this implements React's rendering and reconciliation algorithm.
       * Sophisticated clients may wish to override this.
       *
       * @param {ReactReconcileTransaction} transaction
       * @internal
       * @overridable
       */
      updateComponent: 'OVERRIDE_BASE'
    };
  
    /**
     * Similar to ReactClassInterface but for static methods.
     */
    var ReactClassStaticInterface = {
      /**
       * This method is invoked after a component is instantiated and when it
       * receives new props. Return an object to update state in response to
       * prop changes. Return null to indicate no change to state.
       *
       * If an object is returned, its keys will be merged into the existing state.
       *
       * @return {object || null}
       * @optional
       */
      getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
    };
  
    /**
     * Mapping from class specification keys to special processing functions.
     *
     * Although these are declared like instance properties in the specification
     * when defining classes using `React.createClass`, they are actually static
     * and are accessible on the constructor instead of the prototype. Despite
     * being static, they must be defined outside of the "statics" key under
     * which all other static methods are defined.
     */
    var RESERVED_SPEC_KEYS = {
      displayName: function(Constructor, displayName) {
        Constructor.displayName = displayName;
      },
      mixins: function(Constructor, mixins) {
        if (mixins) {
          for (var i = 0; i < mixins.length; i++) {
            mixSpecIntoComponent(Constructor, mixins[i]);
          }
        }
      },
      childContextTypes: function(Constructor, childContextTypes) {
        {
          validateTypeDef(Constructor, childContextTypes, 'childContext');
        }
        Constructor.childContextTypes = objectAssign(
          {},
          Constructor.childContextTypes,
          childContextTypes
        );
      },
      contextTypes: function(Constructor, contextTypes) {
        {
          validateTypeDef(Constructor, contextTypes, 'context');
        }
        Constructor.contextTypes = objectAssign(
          {},
          Constructor.contextTypes,
          contextTypes
        );
      },
      /**
       * Special case getDefaultProps which should move into statics but requires
       * automatic merging.
       */
      getDefaultProps: function(Constructor, getDefaultProps) {
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps = createMergedResultFunction(
            Constructor.getDefaultProps,
            getDefaultProps
          );
        } else {
          Constructor.getDefaultProps = getDefaultProps;
        }
      },
      propTypes: function(Constructor, propTypes) {
        {
          validateTypeDef(Constructor, propTypes, 'prop');
        }
        Constructor.propTypes = objectAssign({}, Constructor.propTypes, propTypes);
      },
      statics: function(Constructor, statics) {
        mixStaticSpecIntoComponent(Constructor, statics);
      },
      autobind: function() {}
    };
  
    function validateTypeDef(Constructor, typeDef, location) {
      for (var propName in typeDef) {
        if (typeDef.hasOwnProperty(propName)) {
          // use a warning instead of an _invariant so components
          // don't show up in prod but only in __DEV__
          {
            warning$2(
              typeof typeDef[propName] === 'function',
              '%s: %s type `%s` is invalid; it must be a function, usually from ' +
                'React.PropTypes.',
              Constructor.displayName || 'ReactClass',
              ReactPropTypeLocationNames$3[location],
              propName
            );
          }
        }
      }
    }
  
    function validateMethodOverride(isAlreadyDefined, name) {
      var specPolicy = ReactClassInterface.hasOwnProperty(name)
        ? ReactClassInterface[name]
        : null;
  
      // Disallow overriding of base class methods unless explicitly allowed.
      if (ReactClassMixin.hasOwnProperty(name)) {
        invariant_1(
          specPolicy === 'OVERRIDE_BASE',
          'ReactClassInterface: You are attempting to override ' +
            '`%s` from your class specification. Ensure that your method names ' +
            'do not overlap with React methods.',
          name
        );
      }
  
      // Disallow defining methods more than once unless explicitly allowed.
      if (isAlreadyDefined) {
        invariant_1(
          specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',
          'ReactClassInterface: You are attempting to define ' +
            '`%s` on your component more than once. This conflict may be due ' +
            'to a mixin.',
          name
        );
      }
    }
  
    /**
     * Mixin helper which handles policy validation and reserved
     * specification keys when building React classes.
     */
    function mixSpecIntoComponent(Constructor, spec) {
      if (!spec) {
        {
          var typeofSpec = typeof spec;
          var isMixinValid = typeofSpec === 'object' && spec !== null;
  
          {
            warning$2(
              isMixinValid,
              "%s: You're attempting to include a mixin that is either null " +
                'or not an object. Check the mixins included by the component, ' +
                'as well as any mixins they include themselves. ' +
                'Expected object but got %s.',
              Constructor.displayName || 'ReactClass',
              spec === null ? null : typeofSpec
            );
          }
        }
  
        return;
      }
  
      invariant_1(
        typeof spec !== 'function',
        "ReactClass: You're attempting to " +
          'use a component class or function as a mixin. Instead, just use a ' +
          'regular object.'
      );
      invariant_1(
        !isValidElement(spec),
        "ReactClass: You're attempting to " +
          'use a component as a mixin. Instead, just use a regular object.'
      );
  
      var proto = Constructor.prototype;
      var autoBindPairs = proto.__reactAutoBindPairs;
  
      // By handling mixins before any other properties, we ensure the same
      // chaining order is applied to methods with DEFINE_MANY policy, whether
      // mixins are listed before or after these methods in the spec.
      if (spec.hasOwnProperty(MIXINS_KEY$1)) {
        RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
      }
  
      for (var name in spec) {
        if (!spec.hasOwnProperty(name)) {
          continue;
        }
  
        if (name === MIXINS_KEY$1) {
          // We have already handled mixins in a special case above.
          continue;
        }
  
        var property = spec[name];
        var isAlreadyDefined = proto.hasOwnProperty(name);
        validateMethodOverride(isAlreadyDefined, name);
  
        if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
          RESERVED_SPEC_KEYS[name](Constructor, property);
        } else {
          // Setup methods on prototype:
          // The following member methods should not be automatically bound:
          // 1. Expected ReactClass methods (in the "interface").
          // 2. Overridden methods (that were mixed in).
          var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
          var isFunction = typeof property === 'function';
          var shouldAutoBind =
            isFunction &&
            !isReactClassMethod &&
            !isAlreadyDefined &&
            spec.autobind !== false;
  
          if (shouldAutoBind) {
            autoBindPairs.push(name, property);
            proto[name] = property;
          } else {
            if (isAlreadyDefined) {
              var specPolicy = ReactClassInterface[name];
  
              // These cases should already be caught by validateMethodOverride.
              invariant_1(
                isReactClassMethod &&
                  (specPolicy === 'DEFINE_MANY_MERGED' ||
                    specPolicy === 'DEFINE_MANY'),
                'ReactClass: Unexpected spec policy %s for key %s ' +
                  'when mixing in component specs.',
                specPolicy,
                name
              );
  
              // For methods which are defined more than once, call the existing
              // methods before calling the new property, merging if appropriate.
              if (specPolicy === 'DEFINE_MANY_MERGED') {
                proto[name] = createMergedResultFunction(proto[name], property);
              } else if (specPolicy === 'DEFINE_MANY') {
                proto[name] = createChainedFunction(proto[name], property);
              }
            } else {
              proto[name] = property;
              {
                // Add verbose displayName to the function, which helps when looking
                // at profiling tools.
                if (typeof property === 'function' && spec.displayName) {
                  proto[name].displayName = spec.displayName + '_' + name;
                }
              }
            }
          }
        }
      }
    }
  
    function mixStaticSpecIntoComponent(Constructor, statics) {
      if (!statics) {
        return;
      }
  
      for (var name in statics) {
        var property = statics[name];
        if (!statics.hasOwnProperty(name)) {
          continue;
        }
  
        var isReserved = name in RESERVED_SPEC_KEYS;
        invariant_1(
          !isReserved,
          'ReactClass: You are attempting to define a reserved ' +
            'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
            'as an instance property instead; it will still be accessible on the ' +
            'constructor.',
          name
        );
  
        var isAlreadyDefined = name in Constructor;
        if (isAlreadyDefined) {
          var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)
            ? ReactClassStaticInterface[name]
            : null;
  
          invariant_1(
            specPolicy === 'DEFINE_MANY_MERGED',
            'ReactClass: You are attempting to define ' +
              '`%s` on your component more than once. This conflict may be ' +
              'due to a mixin.',
            name
          );
  
          Constructor[name] = createMergedResultFunction(Constructor[name], property);
  
          return;
        }
  
        Constructor[name] = property;
      }
    }
  
    /**
     * Merge two objects, but throw if both contain the same key.
     *
     * @param {object} one The first object, which is mutated.
     * @param {object} two The second object
     * @return {object} one after it has been mutated to contain everything in two.
     */
    function mergeIntoWithNoDuplicateKeys(one, two) {
      invariant_1(
        one && two && typeof one === 'object' && typeof two === 'object',
        'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
      );
  
      for (var key in two) {
        if (two.hasOwnProperty(key)) {
          invariant_1(
            one[key] === undefined,
            'mergeIntoWithNoDuplicateKeys(): ' +
              'Tried to merge two objects with the same key: `%s`. This conflict ' +
              'may be due to a mixin; in particular, this may be caused by two ' +
              'getInitialState() or getDefaultProps() methods returning objects ' +
              'with clashing keys.',
            key
          );
          one[key] = two[key];
        }
      }
      return one;
    }
  
    /**
     * Creates a function that invokes two functions and merges their return values.
     *
     * @param {function} one Function to invoke first.
     * @param {function} two Function to invoke second.
     * @return {function} Function that invokes the two argument functions.
     * @private
     */
    function createMergedResultFunction(one, two) {
      return function mergedResult() {
        var a = one.apply(this, arguments);
        var b = two.apply(this, arguments);
        if (a == null) {
          return b;
        } else if (b == null) {
          return a;
        }
        var c = {};
        mergeIntoWithNoDuplicateKeys(c, a);
        mergeIntoWithNoDuplicateKeys(c, b);
        return c;
      };
    }
  
    /**
     * Creates a function that invokes two functions and ignores their return vales.
     *
     * @param {function} one Function to invoke first.
     * @param {function} two Function to invoke second.
     * @return {function} Function that invokes the two argument functions.
     * @private
     */
    function createChainedFunction(one, two) {
      return function chainedFunction() {
        one.apply(this, arguments);
        two.apply(this, arguments);
      };
    }
  
    /**
     * Binds a method to the component.
     *
     * @param {object} component Component whose method is going to be bound.
     * @param {function} method Method to be bound.
     * @return {function} The bound method.
     */
    function bindAutoBindMethod(component, method) {
      var boundMethod = method.bind(component);
      {
        boundMethod.__reactBoundContext = component;
        boundMethod.__reactBoundMethod = method;
        boundMethod.__reactBoundArguments = null;
        var componentName = component.constructor.displayName;
        var _bind = boundMethod.bind;
        boundMethod.bind = function(newThis) {
          for (
            var _len = arguments.length,
              args = Array(_len > 1 ? _len - 1 : 0),
              _key = 1;
            _key < _len;
            _key++
          ) {
            args[_key - 1] = arguments[_key];
          }
  
          // User is trying to bind() an autobound method; we effectively will
          // ignore the value of "this" that the user is trying to use, so
          // let's warn.
          if (newThis !== component && newThis !== null) {
            {
              warning$2(
                false,
                'bind(): React component methods may only be bound to the ' +
                  'component instance. See %s',
                componentName
              );
            }
          } else if (!args.length) {
            {
              warning$2(
                false,
                'bind(): You are binding a component method to the component. ' +
                  'React does this for you automatically in a high-performance ' +
                  'way, so you can safely remove this call. See %s',
                componentName
              );
            }
            return boundMethod;
          }
          var reboundMethod = _bind.apply(boundMethod, arguments);
          reboundMethod.__reactBoundContext = component;
          reboundMethod.__reactBoundMethod = method;
          reboundMethod.__reactBoundArguments = args;
          return reboundMethod;
        };
      }
      return boundMethod;
    }
  
    /**
     * Binds all auto-bound methods in a component.
     *
     * @param {object} component Component whose method is going to be bound.
     */
    function bindAutoBindMethods(component) {
      var pairs = component.__reactAutoBindPairs;
      for (var i = 0; i < pairs.length; i += 2) {
        var autoBindKey = pairs[i];
        var method = pairs[i + 1];
        component[autoBindKey] = bindAutoBindMethod(component, method);
      }
    }
  
    var IsMountedPreMixin = {
      componentDidMount: function() {
        this.__isMounted = true;
      }
    };
  
    var IsMountedPostMixin = {
      componentWillUnmount: function() {
        this.__isMounted = false;
      }
    };
  
    /**
     * Add more to the ReactClass base class. These are all legacy features and
     * therefore not already part of the modern ReactComponent.
     */
    var ReactClassMixin = {
      /**
       * TODO: This will be deprecated because state should always keep a consistent
       * type signature and the only use case for this, is to avoid that.
       */
      replaceState: function(newState, callback) {
        this.updater.enqueueReplaceState(this, newState, callback);
      },
  
      /**
       * Checks whether or not this composite component is mounted.
       * @return {boolean} True if mounted, false otherwise.
       * @protected
       * @final
       */
      isMounted: function() {
        {
          warning$2(
            this.__didWarnIsMounted,
            '%s: isMounted is deprecated. Instead, make sure to clean up ' +
              'subscriptions and pending requests in componentWillUnmount to ' +
              'prevent memory leaks.',
            (this.constructor && this.constructor.displayName) ||
              this.name ||
              'Component'
          );
          this.__didWarnIsMounted = true;
        }
        return !!this.__isMounted;
      }
    };
  
    var ReactClassComponent = function() {};
    objectAssign(
      ReactClassComponent.prototype,
      ReactComponent.prototype,
      ReactClassMixin
    );
  
    /**
     * Creates a composite component class given a class specification.
     * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
     *
     * @param {object} spec Class specification (which must define `render`).
     * @return {function} Component constructor function.
     * @public
     */
    function createClass(spec) {
      // To keep our warnings more understandable, we'll use a little hack here to
      // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
      // unnecessarily identify a class without displayName as 'Constructor'.
      var Constructor = identity$1(function(props, context, updater) {
        // This constructor gets overridden by mocks. The argument is used
        // by mocks to assert on what gets mounted.
  
        {
          warning$2(
            this instanceof Constructor,
            'Something is calling a React component directly. Use a factory or ' +
              'JSX instead. See: https://fb.me/react-legacyfactory'
          );
        }
  
        // Wire up auto-binding
        if (this.__reactAutoBindPairs.length) {
          bindAutoBindMethods(this);
        }
  
        this.props = props;
        this.context = context;
        this.refs = emptyObject_1;
        this.updater = updater || ReactNoopUpdateQueue;
  
        this.state = null;
  
        // ReactClasses doesn't have constructors. Instead, they use the
        // getInitialState and componentWillMount methods for initialization.
  
        var initialState = this.getInitialState ? this.getInitialState() : null;
        {
          // We allow auto-mocks to proceed as if they're returning null.
          if (
            initialState === undefined &&
            this.getInitialState._isMockFunction
          ) {
            // This is probably bad practice. Consider warning here and
            // deprecating this convenience.
            initialState = null;
          }
        }
        invariant_1(
          typeof initialState === 'object' && !Array.isArray(initialState),
          '%s.getInitialState(): must return an object or null',
          Constructor.displayName || 'ReactCompositeComponent'
        );
  
        this.state = initialState;
      });
      Constructor.prototype = new ReactClassComponent();
      Constructor.prototype.constructor = Constructor;
      Constructor.prototype.__reactAutoBindPairs = [];
  
      injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
  
      mixSpecIntoComponent(Constructor, IsMountedPreMixin);
      mixSpecIntoComponent(Constructor, spec);
      mixSpecIntoComponent(Constructor, IsMountedPostMixin);
  
      // Initialize the defaultProps property after all mixins have been merged.
      if (Constructor.getDefaultProps) {
        Constructor.defaultProps = Constructor.getDefaultProps();
      }
  
      {
        // This is a tag to indicate that the use of these method names is ok,
        // since it's used with createClass. If it's not, then it's likely a
        // mistake so we'll warn you to use the static property, property
        // initializer or constructor respectively.
        if (Constructor.getDefaultProps) {
          Constructor.getDefaultProps.isReactClassApproved = {};
        }
        if (Constructor.prototype.getInitialState) {
          Constructor.prototype.getInitialState.isReactClassApproved = {};
        }
      }
  
      invariant_1(
        Constructor.prototype.render,
        'createClass(...): Class specification must implement a `render` method.'
      );
  
      {
        warning$2(
          !Constructor.prototype.componentShouldUpdate,
          '%s has a method called ' +
            'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
            'The name is phrased as a question because the function is ' +
            'expected to return a value.',
          spec.displayName || 'A component'
        );
        warning$2(
          !Constructor.prototype.componentWillRecieveProps,
          '%s has a method called ' +
            'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
          spec.displayName || 'A component'
        );
        warning$2(
          !Constructor.prototype.UNSAFE_componentWillRecieveProps,
          '%s has a method called UNSAFE_componentWillRecieveProps(). ' +
            'Did you mean UNSAFE_componentWillReceiveProps()?',
          spec.displayName || 'A component'
        );
      }
  
      // Reduce time spent doing lookups by setting these on the prototype.
      for (var methodName in ReactClassInterface) {
        if (!Constructor.prototype[methodName]) {
          Constructor.prototype[methodName] = null;
        }
      }
  
      return Constructor;
    }
  
    return createClass;
  }
  
  var factory_1$2 = factory$1;
  
  var Component = ReactBaseClasses.Component;
  
  var isValidElement$1 = ReactElement_1.isValidElement;
  
  
  
  
  var createClass$2 = factory_1$2(Component, isValidElement$1, ReactNoopUpdateQueue_1);
  
  /**
   * Returns the first child in a collection of children and verifies that there
   * is only one child in the collection.
   *
   * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
   *
   * The current implementation of this function assumes that a single child gets
   * passed without a wrapper, but the purpose of this helper function is to
   * abstract away the particular structure of children.
   *
   * @param {?object} children Child collection structure.
   * @return {ReactElement} The first and only `ReactElement` contained in the
   * structure.
   */
  function onlyChild(children) {
    !ReactElement_1.isValidElement(children) ? invariant_1(false, 'React.Children.only expected to receive a single React element child.') : void 0;
    return children;
  }
  
  var onlyChild_1 = onlyChild;
  
  var createElement = ReactElement_1.createElement;
  var createFactory = ReactElement_1.createFactory;
  var cloneElement = ReactElement_1.cloneElement;
  
  {
    var lowPriorityWarning = lowPriorityWarning_1;
    var canDefineProperty = canDefineProperty_1;
    var ReactElementValidator = ReactElementValidator_1;
    var didWarnPropTypesDeprecated = false;
    createElement = ReactElementValidator.createElement;
    createFactory = ReactElementValidator.createFactory;
    cloneElement = ReactElementValidator.cloneElement;
  }
  
  var __spread = objectAssign;
  var createMixin = function (mixin) {
    return mixin;
  };
  
  {
    var warnedForSpread = false;
    var warnedForCreateMixin = false;
    __spread = function () {
      lowPriorityWarning(warnedForSpread, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.');
      warnedForSpread = true;
      return objectAssign.apply(null, arguments);
    };
  
    createMixin = function (mixin) {
      lowPriorityWarning(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. ' + 'In React v16.0, it will be removed. ' + 'You can use this mixin directly instead. ' + 'See https://fb.me/createmixin-was-never-implemented for more info.');
      warnedForCreateMixin = true;
      return mixin;
    };
  }
  
  var React$1 = {
    // Modern
  
    Children: {
      map: ReactChildren_1.map,
      forEach: ReactChildren_1.forEach,
      count: ReactChildren_1.count,
      toArray: ReactChildren_1.toArray,
      only: onlyChild_1
    },
  
    Component: ReactBaseClasses.Component,
    PureComponent: ReactBaseClasses.PureComponent,
  
    createElement: createElement,
    cloneElement: cloneElement,
    isValidElement: ReactElement_1.isValidElement,
  
    // Classic
  
    PropTypes: ReactPropTypes,
    createClass: createClass$2,
    createFactory: createFactory,
    createMixin: createMixin,
  
    // This looks DOM specific but these are actually isomorphic helpers
    // since they are just generating DOM strings.
    DOM: ReactDOMFactories_1,
  
    version: ReactVersion,
  
    // Deprecated hook for JSX spread, don't use this for anything.
    __spread: __spread
  };
  
  {
    var warnedForCreateClass = false;
    if (canDefineProperty) {
      Object.defineProperty(React$1, 'PropTypes', {
        get: function () {
          lowPriorityWarning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated,' + ' and will be removed in  React v16.0.' + ' Use the latest available v15.* prop-types package from npm instead.' + ' For info on usage, compatibility, migration and more, see ' + 'https://fb.me/prop-types-docs');
          didWarnPropTypesDeprecated = true;
          return ReactPropTypes;
        }
      });
  
      Object.defineProperty(React$1, 'createClass', {
        get: function () {
          lowPriorityWarning(warnedForCreateClass, 'Accessing createClass via the main React package is deprecated,' + ' and will be removed in React v16.0.' + " Use a plain JavaScript class instead. If you're not yet " + 'ready to migrate, create-react-class v15.* is available ' + 'on npm as a temporary, drop-in replacement. ' + 'For more info see https://fb.me/react-create-class');
          warnedForCreateClass = true;
          return createClass$2;
        }
      });
    }
  
    // React.DOM factories are deprecated. Wrap these methods so that
    // invocations of the React.DOM namespace and alert users to switch
    // to the `react-dom-factories` package.
    React$1.DOM = {};
    var warnedForFactories = false;
    Object.keys(ReactDOMFactories_1).forEach(function (factory) {
      React$1.DOM[factory] = function () {
        if (!warnedForFactories) {
          lowPriorityWarning(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in v16.0+. Use the ' + 'react-dom-factories package instead. ' + ' Version 1.0 provides a drop-in replacement.' + ' For more info, see https://fb.me/react-dom-factories', factory);
          warnedForFactories = true;
        }
        return ReactDOMFactories_1[factory].apply(ReactDOMFactories_1, arguments);
      };
    });
  }
  
  var React_1 = React$1;
  
  var react$2 = React_1;
  
  var react_1$1 = react$2.Component;
  var react_3$1 = react$2.createElement;
  
  var undefinedHeader = /* array */[];
  
  function some(x) {
    if (x === undefined) {
      var block = /* tuple */[
        undefinedHeader,
        0
      ];
      block.tag = 256;
      return block;
    } else if (x !== null && x[0] === undefinedHeader) {
      var nid = x[1] + 1 | 0;
      var block$1 = /* tuple */[
        undefinedHeader,
        nid
      ];
      block$1.tag = 256;
      return block$1;
    } else {
      return x;
    }
  }
  
  function nullable_to_opt(x) {
    if (x === null || x === undefined) {
      return undefined;
    } else {
      return some(x);
    }
  }
  
  function undefined_to_opt(x) {
    if (x === undefined) {
      return undefined;
    } else {
      return some(x);
    }
  }
  
  function valFromOption(x) {
    if (x !== null && x[0] === undefinedHeader) {
      var depth = x[1];
      if (depth === 0) {
        return undefined;
      } else {
        return /* tuple */[
                undefinedHeader,
                depth - 1 | 0
              ];
      }
    } else {
      return x;
    }
  }
  
  
  /* No side effect */
  
  var max = 2147483647;
  
  var min = -2147483648;
  
  
  /* No side effect */
  
  function floor_int(f) {
    if (f > max) {
      return max;
    } else if (f < min) {
      return min;
    } else {
      return Math.floor(f);
    }
  }
  
  var floor = floor_int;
  
  
  /* No side effect */
  
  var id = /* record */[/* contents */0];
  
  function get_id() {
    id[0] += 1;
    return id[0];
  }
  
  function create(str) {
    var v_001 = get_id(/* () */0);
    var v = /* tuple */[
      str,
      v_001
    ];
    v.tag = 248;
    return v;
  }
  
  function isCamlExceptionOrOpenVariant(e) {
    if (e === undefined) {
      return false;
    } else if (e.tag === 248) {
      return true;
    } else {
      var slot = e[0];
      if (slot !== undefined) {
        return slot.tag === 248;
      } else {
        return false;
      }
    }
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  var Check_fail = create("Exception-WonderLog.Check_fail");
  
  var $$throw = (
      function(msg){
              throw new Error(msg)
      });
  
  
  /* throw Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function getJsonStr(json) {
    return JSON.stringify(json);
  }
  
  function warn(msg) {
    console.warn("Warn: " + (String(msg) + ""));
    return /* () */0;
  }
  
  function buildDebugMessage(description, params, _) {
    return "\n  Debug:\n\n  description\n  " + (String(description) + ("\n\n  params\n  " + (String(params) + "\n\n  ")));
  }
  
  function debugWithFunc(func, isTest) {
    if (isTest) {
      return _1(func, /* () */0);
    } else {
      return /* () */0;
    }
  }
  
  function debug(buildMessageFunc, isTest) {
    if (isTest) {
      console.log(_1(buildMessageFunc, /* () */0));
      console.trace();
      return /* () */0;
    } else {
      return /* () */0;
    }
  }
  
  function buildDebugJsonMessage(description, $$var, _) {
    var varStr = JSON.stringify($$var);
    return "\n  DebugJson:\n\n  description\n  " + (String(description) + ("\n\n  variable value\n  " + (String(varStr) + "\n  ")));
  }
  
  function debugJson(buildMessageFunc, isTest) {
    if (isTest) {
      console.log(_1(buildMessageFunc, /* () */0));
      console.trace();
      return /* () */0;
    } else {
      return /* () */0;
    }
  }
  
  function buildFatalMessage(title, description, reason, solution, params) {
    return "\n  Fatal:\n\n  title\n  " + (String(title) + ("\n\n  description\n  " + (String(description) + ("\n\n  reason\n  " + (String(reason) + ("\n\n  solution\n  " + (String(solution) + ("\n\n  params\n  " + (String(params) + "\n\n   ")))))))));
  }
  
  function fatal(msg) {
    return _1($$throw, msg);
  }
  
  function buildErrorMessage(title, description, reason, solution, params) {
    return "\n  Error:\n\n  title\n  " + (String(title) + ("\n\n  description\n  " + (String(description) + ("\n\n  reason\n  " + (String(reason) + ("\n\n  solution\n  " + (String(solution) + ("\n\n  params\n  " + (String(params) + "\n\n   ")))))))));
  }
  
  function error(msg) {
    console.error(msg);
    console.trace();
    return /* () */0;
  }
  
  function buildAssertMessage(expect, actual) {
    return "expect " + (String(expect) + (", but actual " + (String(actual) + "")));
  }
  
  
  /* Exception-WonderLog Not a pure module */
  
  function __(tag, block) {
    block.tag = tag;
    return block;
  }
  
  
  /* No side effect */
  
  function caml_int_compare(x, y) {
    if (x < y) {
      return -1;
    } else if (x === y) {
      return 0;
    } else {
      return 1;
    }
  }
  
  function caml_bool_compare(x, y) {
    if (x) {
      if (y) {
        return 0;
      } else {
        return 1;
      }
    } else if (y) {
      return -1;
    } else {
      return 0;
    }
  }
  
  function caml_string_compare(s1, s2) {
    if (s1 === s2) {
      return 0;
    } else if (s1 < s2) {
      return -1;
    } else {
      return 1;
    }
  }
  
  
  /* No side effect */
  
  var for_in = function (o,foo){
          for (var x in o) { foo(x); }
        };
  
  function caml_compare(_a, _b) {
    while(true) {
      var b = _b;
      var a = _a;
      if (a === b) {
        return 0;
      } else {
        var a_type = typeof a;
        var b_type = typeof b;
        var exit = 0;
        switch (a_type) {
          case "boolean" : 
              if (b_type === "boolean") {
                return caml_bool_compare(a, b);
              } else {
                exit = 1;
              }
              break;
          case "function" : 
              if (b_type === "function") {
                throw [
                      invalid_argument,
                      "compare: functional value"
                    ];
              } else {
                exit = 1;
              }
              break;
          case "number" : 
              if (b_type === "number") {
                return caml_int_compare(a, b);
              } else {
                exit = 1;
              }
              break;
          case "string" : 
              if (b_type === "string") {
                return caml_string_compare(a, b);
              } else {
                return 1;
              }
          case "undefined" : 
              return -1;
          default:
            exit = 1;
        }
        if (exit === 1) {
          switch (b_type) {
            case "string" : 
                return -1;
            case "undefined" : 
                return 1;
            default:
              if (a_type === "boolean") {
                return 1;
              } else if (b_type === "boolean") {
                return -1;
              } else if (a_type === "function") {
                return 1;
              } else if (b_type === "function") {
                return -1;
              } else if (a_type === "number") {
                if (b === null || b.tag === 256) {
                  return 1;
                } else {
                  return -1;
                }
              } else if (b_type === "number") {
                if (a === null || a.tag === 256) {
                  return -1;
                } else {
                  return 1;
                }
              } else if (a === null) {
                if (b.tag === 256) {
                  return 1;
                } else {
                  return -1;
                }
              } else if (b === null) {
                if (a.tag === 256) {
                  return -1;
                } else {
                  return 1;
                }
              } else {
                var tag_a = a.tag | 0;
                var tag_b = b.tag | 0;
                if (tag_a === 250) {
                  _a = a[0];
                  continue ;
                } else if (tag_b === 250) {
                  _b = b[0];
                  continue ;
                } else if (tag_a === 256) {
                  if (tag_b === 256) {
                    return caml_int_compare(a[1], b[1]);
                  } else {
                    return -1;
                  }
                } else if (tag_a === 248) {
                  return caml_int_compare(a[1], b[1]);
                } else if (tag_a === 251) {
                  throw [
                        invalid_argument,
                        "equal: abstract value"
                      ];
                } else if (tag_a !== tag_b) {
                  if (tag_a < tag_b) {
                    return -1;
                  } else {
                    return 1;
                  }
                } else {
                  var len_a = a.length | 0;
                  var len_b = b.length | 0;
                  if (len_a === len_b) {
                    if (Array.isArray(a)) {
                      var a$1 = a;
                      var b$1 = b;
                      var _i = 0;
                      var same_length = len_a;
                      while(true) {
                        var i = _i;
                        if (i === same_length) {
                          return 0;
                        } else {
                          var res = caml_compare(a$1[i], b$1[i]);
                          if (res !== 0) {
                            return res;
                          } else {
                            _i = i + 1 | 0;
                            continue ;
                          }
                        }
                      }
                    } else {
                      var a$2 = a;
                      var b$2 = b;
                      var min_key_lhs = /* record */[/* contents */undefined];
                      var min_key_rhs = /* record */[/* contents */undefined];
                      var do_key = function (param, key) {
                        var min_key = param[2];
                        var b = param[1];
                        if (!b.hasOwnProperty(key) || caml_compare(param[0][key], b[key]) > 0) {
                          var match = min_key[0];
                          if (match !== undefined && key >= match) {
                            return 0;
                          } else {
                            min_key[0] = key;
                            return /* () */0;
                          }
                        } else {
                          return 0;
                        }
                      };
                      var partial_arg = /* tuple */[
                        a$2,
                        b$2,
                        min_key_rhs
                      ];
                      var do_key_a = (function(partial_arg){
                      return function do_key_a(param) {
                        return do_key(partial_arg, param);
                      }
                      }(partial_arg));
                      var partial_arg$1 = /* tuple */[
                        b$2,
                        a$2,
                        min_key_lhs
                      ];
                      var do_key_b = (function(partial_arg$1){
                      return function do_key_b(param) {
                        return do_key(partial_arg$1, param);
                      }
                      }(partial_arg$1));
                      for_in(a$2, do_key_a);
                      for_in(b$2, do_key_b);
                      var match = min_key_lhs[0];
                      var match$1 = min_key_rhs[0];
                      if (match !== undefined) {
                        if (match$1 !== undefined) {
                          return caml_string_compare(match, match$1);
                        } else {
                          return -1;
                        }
                      } else if (match$1 !== undefined) {
                        return 1;
                      } else {
                        return 0;
                      }
                    }
                  } else if (len_a < len_b) {
                    var a$3 = a;
                    var b$3 = b;
                    var _i$1 = 0;
                    var short_length = len_a;
                    while(true) {
                      var i$1 = _i$1;
                      if (i$1 === short_length) {
                        return -1;
                      } else {
                        var res$1 = caml_compare(a$3[i$1], b$3[i$1]);
                        if (res$1 !== 0) {
                          return res$1;
                        } else {
                          _i$1 = i$1 + 1 | 0;
                          continue ;
                        }
                      }
                    }
                  } else {
                    var a$4 = a;
                    var b$4 = b;
                    var _i$2 = 0;
                    var short_length$1 = len_b;
                    while(true) {
                      var i$2 = _i$2;
                      if (i$2 === short_length$1) {
                        return 1;
                      } else {
                        var res$2 = caml_compare(a$4[i$2], b$4[i$2]);
                        if (res$2 !== 0) {
                          return res$2;
                        } else {
                          _i$2 = i$2 + 1 | 0;
                          continue ;
                        }
                      }
                    }
                  }
                }
              }
          }
        }
        
      }
    }
  }
  
  function caml_equal(_a, _b) {
    while(true) {
      var b = _b;
      var a = _a;
      if (a === b) {
        return true;
      } else {
        var a_type = typeof a;
        if (a_type === "string" || a_type === "number" || a_type === "boolean" || a_type === "undefined" || a === null) {
          return false;
        } else {
          var b_type = typeof b;
          if (a_type === "function" || b_type === "function") {
            throw [
                  invalid_argument,
                  "equal: functional value"
                ];
          } else if (b_type === "number" || b_type === "undefined" || b === null) {
            return false;
          } else {
            var tag_a = a.tag | 0;
            var tag_b = b.tag | 0;
            if (tag_a === 250) {
              _a = a[0];
              continue ;
            } else if (tag_b === 250) {
              _b = b[0];
              continue ;
            } else if (tag_a === 248) {
              return a[1] === b[1];
            } else if (tag_a === 251) {
              throw [
                    invalid_argument,
                    "equal: abstract value"
                  ];
            } else if (tag_a !== tag_b) {
              return false;
            } else if (tag_a === 256) {
              return a[1] === b[1];
            } else {
              var len_a = a.length | 0;
              var len_b = b.length | 0;
              if (len_a === len_b) {
                if (Array.isArray(a)) {
                  var a$1 = a;
                  var b$1 = b;
                  var _i = 0;
                  var same_length = len_a;
                  while(true) {
                    var i = _i;
                    if (i === same_length) {
                      return true;
                    } else if (caml_equal(a$1[i], b$1[i])) {
                      _i = i + 1 | 0;
                      continue ;
                    } else {
                      return false;
                    }
                  }
                } else {
                  var a$2 = a;
                  var b$2 = b;
                  var result = /* record */[/* contents */true];
                  var do_key_a = (function(b$2,result){
                  return function do_key_a(key) {
                    if (b$2.hasOwnProperty(key)) {
                      return 0;
                    } else {
                      result[0] = false;
                      return /* () */0;
                    }
                  }
                  }(b$2,result));
                  var do_key_b = (function(a$2,b$2,result){
                  return function do_key_b(key) {
                    if (!a$2.hasOwnProperty(key) || !caml_equal(b$2[key], a$2[key])) {
                      result[0] = false;
                      return /* () */0;
                    } else {
                      return 0;
                    }
                  }
                  }(a$2,b$2,result));
                  for_in(a$2, do_key_a);
                  if (result[0]) {
                    for_in(b$2, do_key_b);
                  }
                  return result[0];
                }
              } else {
                return false;
              }
            }
          }
        }
      }
    }
  }
  
  function caml_notequal(a, b) {
    return !caml_equal(a, b);
  }
  
  function caml_greaterequal(a, b) {
    return caml_compare(a, b) >= 0;
  }
  
  function caml_greaterthan(a, b) {
    return caml_compare(a, b) > 0;
  }
  
  function caml_lessequal(a, b) {
    return caml_compare(a, b) <= 0;
  }
  
  function caml_lessthan(a, b) {
    return caml_compare(a, b) < 0;
  }
  
  
  /* No side effect */
  
  var $$Error = create("Js_exn.Error");
  
  function internalToOCamlException(e) {
    if (isCamlExceptionOrOpenVariant(e)) {
      return e;
    } else {
      return [
              $$Error,
              e
            ];
    }
  }
  
  
  /* No side effect */
  
  function isSome(param) {
    return param !== undefined;
  }
  
  function isNone(param) {
    return param === undefined;
  }
  
  function getExn(x) {
    if (x !== undefined) {
      return valFromOption(x);
    } else {
      throw new Error("getExn");
    }
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function _assert(result, msg) {
    if (result) {
      return /* () */0;
    } else {
      throw [
            Check_fail,
            msg
          ];
    }
  }
  
  var test = function (message,func){
    try{
    func();
    } catch(e){
      throw new Error(JSON.stringify(message));
    }
    };
  
  function requireCheck(f, isTest) {
    if (isTest) {
      return _1(f, /* () */0);
    } else {
      return /* () */0;
    }
  }
  
  function ensureCheck(f, isTest, returnVal) {
    if (isTest) {
      _1(f, returnVal);
      return returnVal;
    } else {
      return returnVal;
    }
  }
  
  function assertFail() {
    throw [
          Check_fail,
          "fail"
        ];
  }
  
  function assertPass() {
    return /* () */0;
  }
  
  function assertTrue(source) {
    return _assert(source === true, "expect to be true, but actual is false");
  }
  
  function assertFalse(source) {
    return _assert(source === false, "expect to be false, but actual is true");
  }
  
  function assertIsBool(source) {
    return _assert(source === true || source === false, "expect to be bool, but actual not");
  }
  
  var _isNullableExist = (
  function(source) {
      return source !== undefined && source !== null;
  }
  );
  
  function assertNullableExist(source) {
    return _assert(_1(_isNullableExist, source), "expect exist, but actual not");
  }
  
  function assertExist(source) {
    return _assert(isSome(source), "expect exist, but actual not");
  }
  
  function assertNotExist(source) {
    return _assert(isNone(source), "expect not exist, but actual exist");
  }
  
  function _getEqualMessage(source, target) {
    return "\"expect to be " + (String(target) + (", but actual is " + (String(source) + "\"")));
  }
  
  function assertEqual(_, source, target) {
    return _assert(caml_equal(source, target), _getEqualMessage(source, target));
  }
  
  function _getNotEqualMessage(source, target) {
    return "\"expect not to be " + (String(target) + (", but actual is " + (String(source) + "\"")));
  }
  
  function assertNotEqual(_, source, target) {
    return _assert(caml_notequal(source, target), _getNotEqualMessage(source, target));
  }
  
  function assertGt(_, source, target) {
    return _assert(caml_greaterthan(source, target), "expect " + (String(source) + (" > " + (String(target) + ", but actual isn\'t"))));
  }
  
  function assertGte(_, source, target) {
    return _assert(caml_greaterequal(source, target), "expect " + (String(source) + (" >= " + (String(target) + ", but actual isn\'t"))));
  }
  
  function assertLt(_, source, target) {
    return _assert(caml_lessthan(source, target), "expect " + (String(source) + (" < " + (String(target) + ", but actual isn\'t"))));
  }
  
  function assertLte(_, source, target) {
    return _assert(caml_lessequal(source, target), "expect " + (String(source) + (" <= " + (String(target) + ", but actual isn\'t"))));
  }
  
  function $eq(a, b) {
    return assertEqual(/* Int */0, a, b);
  }
  
  function $eq$eq$dot(a, b) {
    return assertEqual(/* Float */1, a, b);
  }
  
  function $eq$eq$caret(a, b) {
    return assertEqual(/* String */2, a, b);
  }
  
  function $less$great$eq(a, b) {
    return assertNotEqual(/* Int */0, a, b);
  }
  
  function $less$great$eq$dot(a, b) {
    return assertNotEqual(/* Float */1, a, b);
  }
  
  function $great(a, b) {
    return assertGt(/* Int */0, a, b);
  }
  
  function $great$dot(a, b) {
    return assertGt(/* Float */1, a, b);
  }
  
  function $great$eq(a, b) {
    return assertGte(/* Int */0, a, b);
  }
  
  function $great$eq$dot(a, b) {
    return assertGte(/* Float */1, a, b);
  }
  
  function $less(a, b) {
    return assertLt(/* Int */0, a, b);
  }
  
  function $less$dot(a, b) {
    return assertLt(/* Float */1, a, b);
  }
  
  function $less$eq(a, b) {
    return assertLte(/* Int */0, a, b);
  }
  
  function $less$eq$dot(a, b) {
    return assertLte(/* Float */1, a, b);
  }
  
  var Operators = /* module */[
    /* = */$eq,
    /* ==. */$eq$eq$dot,
    /* ==^ */$eq$eq$caret,
    /* <>= */$less$great$eq,
    /* <>=. */$less$great$eq$dot,
    /* > */$great,
    /* >. */$great$dot,
    /* >= */$great$eq,
    /* >=. */$great$eq$dot,
    /* < */$less,
    /* <. */$less$dot,
    /* <= */$less$eq,
    /* <=. */$less$eq$dot
  ];
  
  
  /* _isNullableExist Not a pure module */
  
  function createStateData() {
    return /* record */[
            /* state */undefined,
            /* isDebug */false
          ];
  }
  
  
  /* No side effect */
  
  var stateData = createStateData(/* () */0);
  
  
  /* stateData Not a pure module */
  
  function getIsDebug(stateData) {
    return stateData[/* isDebug */1];
  }
  
  function setIsDebug(stateData, isDebug) {
    stateData[/* isDebug */1] = isDebug;
    return stateData;
  }
  
  
  /* No side effect */
  
  var hexFloat_of_string = (
  function(str) {
      return parseInt(str, 16);
  }
  );
  
  function leastFloat(_, num) {
    var match = num < 0;
    if (match) {
      return 0;
    } else {
      return num;
    }
  }
  
  function bigThan(num, below) {
    var match = caml_lessthan(num, below);
    if (match) {
      return below;
    } else {
      return num;
    }
  }
  
  function clamp(num, below, up) {
    requireCheck((function () {
            return test(buildAssertMessage("below <= up", "not"), (function () {
                          return Operators[/* <=. */12](below, up);
                        }));
          }), getIsDebug(stateData));
    var match = num < below;
    if (match) {
      return below;
    } else {
      var match$1 = num > up;
      if (match$1) {
        return up;
      } else {
        return num;
      }
    }
  }
  
  
  /* hexFloat_of_string Not a pure module */
  
  var regex_num = (/^\#([0-9a-f]{6})$/i);
  
  function _handleInValidHexStr(hexStr) {
    return fatal(buildFatalMessage("convert16HexToRGBA", "color should be #xxxxxx, but actual is " + (String(hexStr) + ""), "", "", ""));
  }
  
  function convert16HexToRGBA(hexStr) {
    var match = regex_num.exec(hexStr);
    if (match !== null) {
      var match$1 = caml_array_get(match, 1);
      if (match$1 == null) {
        return _handleInValidHexStr(hexStr);
      } else {
        var hex = floor(_1(hexFloat_of_string, match$1));
        return /* tuple */[
                ((hex >>> 16) & 255) / 255,
                ((hex >>> 8) & 255) / 255,
                (hex & 255) / 255,
                1
              ];
      }
    } else {
      return _handleInValidHexStr(hexStr);
    }
  }
  
  
  /* regex_num Not a pure module */
  
  var getHex = function (r,g,b){return (r * 255) << 16^(g * 255) << 8^(b * 255) << 0;};
  
  var getHexString = function (arr){return '#' + ( '000000' + getHex(arr[0],arr[1],arr[2]).toString( 16 ) ).slice( - 6 )};
  
  function getEngineColorRgbArr(param) {
    var rgb = param[/* rgb */1];
    return /* array */[
            rgb[/* r */0] / 255,
            rgb[/* g */1] / 255,
            rgb[/* b */2] / 255
          ];
  }
  
  function convert16HexToRGBArr(hexStr) {
    var match = convert16HexToRGBA(hexStr);
    return /* array */[
            match[0],
            match[1],
            match[2]
          ];
  }
  
  
  /* ColorService-Wonderjs Not a pure module */
  
  /* node_std_output Not a pure module */
  
  /* No side effect */
  
  var imul = ( Math.imul || function (x,y) {
    y |= 0; return ((((x >> 16) * y) << 16) + (x & 0xffff) * y)|0; 
  }
  );
  
  
  /* imul Not a pure module */
  
  /* repeat Not a pure module */
  
  /* two_ptr_32_dbl Not a pure module */
  
  function caml_failwith(s) {
    throw [
          failure,
          s
        ];
  }
  
  function parse_digit(c) {
    if (c >= 65) {
      if (c >= 97) {
        if (c >= 123) {
          return -1;
        } else {
          return c - 87 | 0;
        }
      } else if (c >= 91) {
        return -1;
      } else {
        return c - 55 | 0;
      }
    } else if (c > 57 || c < 48) {
      return -1;
    } else {
      return c - /* "0" */48 | 0;
    }
  }
  
  function int_of_string_base(param) {
    switch (param) {
      case 0 : 
          return 8;
      case 1 : 
          return 16;
      case 2 : 
          return 10;
      case 3 : 
          return 2;
      
    }
  }
  
  function parse_sign_and_base(s) {
    var sign = 1;
    var base = /* Dec */2;
    var i = 0;
    if (s[i] === "-") {
      sign = -1;
      i = i + 1 | 0;
    }
    var match = s.charCodeAt(i);
    var match$1 = s.charCodeAt(i + 1 | 0);
    if (match === 48) {
      if (match$1 >= 89) {
        if (match$1 !== 98) {
          if (match$1 !== 111) {
            if (match$1 === 120) {
              base = /* Hex */1;
              i = i + 2 | 0;
            }
            
          } else {
            base = /* Oct */0;
            i = i + 2 | 0;
          }
        } else {
          base = /* Bin */3;
          i = i + 2 | 0;
        }
      } else if (match$1 !== 66) {
        if (match$1 !== 79) {
          if (match$1 >= 88) {
            base = /* Hex */1;
            i = i + 2 | 0;
          }
          
        } else {
          base = /* Oct */0;
          i = i + 2 | 0;
        }
      } else {
        base = /* Bin */3;
        i = i + 2 | 0;
      }
    }
    return /* tuple */[
            i,
            sign,
            base
          ];
  }
  
  function caml_int_of_string(s) {
    var match = parse_sign_and_base(s);
    var i = match[0];
    var base = int_of_string_base(match[2]);
    var threshold = 4294967295;
    var len = s.length;
    var c = i < len ? s.charCodeAt(i) : /* "\000" */0;
    var d = parse_digit(c);
    if (d < 0 || d >= base) {
      throw [
            failure,
            "int_of_string"
          ];
    }
    var aux = function (_acc, _k) {
      while(true) {
        var k = _k;
        var acc = _acc;
        if (k === len) {
          return acc;
        } else {
          var a = s.charCodeAt(k);
          if (a === /* "_" */95) {
            _k = k + 1 | 0;
            continue ;
          } else {
            var v = parse_digit(a);
            if (v < 0 || v >= base) {
              throw [
                    failure,
                    "int_of_string"
                  ];
            } else {
              var acc$1 = base * acc + v;
              if (acc$1 > threshold) {
                throw [
                      failure,
                      "int_of_string"
                    ];
              } else {
                _k = k + 1 | 0;
                _acc = acc$1;
                continue ;
              }
            }
          }
        }
      }
    };
    var res = match[1] * aux(d, i + 1 | 0);
    var or_res = res | 0;
    if (base === 10 && res !== or_res) {
      throw [
            failure,
            "int_of_string"
          ];
    }
    return or_res;
  }
  
  function lowercase(c) {
    if (c >= /* "A" */65 && c <= /* "Z" */90 || c >= /* "\192" */192 && c <= /* "\214" */214 || c >= /* "\216" */216 && c <= /* "\222" */222) {
      return c + 32 | 0;
    } else {
      return c;
    }
  }
  
  function parse_format(fmt) {
    var len = fmt.length;
    if (len > 31) {
      throw [
            invalid_argument,
            "format_int: format too long"
          ];
    }
    var f = /* record */[
      /* justify */"+",
      /* signstyle */"-",
      /* filter */" ",
      /* alternate */false,
      /* base : Dec */2,
      /* signedconv */false,
      /* width */0,
      /* uppercase */false,
      /* sign */1,
      /* prec */-1,
      /* conv */"f"
    ];
    var _i = 0;
    while(true) {
      var i = _i;
      if (i >= len) {
        return f;
      } else {
        var c = fmt.charCodeAt(i);
        var exit = 0;
        if (c >= 69) {
          if (c >= 88) {
            if (c >= 121) {
              exit = 1;
            } else {
              switch (c - 88 | 0) {
                case 0 : 
                    f[/* base */4] = /* Hex */1;
                    f[/* uppercase */7] = true;
                    _i = i + 1 | 0;
                    continue ;
                case 13 : 
                case 14 : 
                case 15 : 
                    exit = 5;
                    break;
                case 12 : 
                case 17 : 
                    exit = 4;
                    break;
                case 23 : 
                    f[/* base */4] = /* Oct */0;
                    _i = i + 1 | 0;
                    continue ;
                case 29 : 
                    f[/* base */4] = /* Dec */2;
                    _i = i + 1 | 0;
                    continue ;
                case 1 : 
                case 2 : 
                case 3 : 
                case 4 : 
                case 5 : 
                case 6 : 
                case 7 : 
                case 8 : 
                case 9 : 
                case 10 : 
                case 11 : 
                case 16 : 
                case 18 : 
                case 19 : 
                case 20 : 
                case 21 : 
                case 22 : 
                case 24 : 
                case 25 : 
                case 26 : 
                case 27 : 
                case 28 : 
                case 30 : 
                case 31 : 
                    exit = 1;
                    break;
                case 32 : 
                    f[/* base */4] = /* Hex */1;
                    _i = i + 1 | 0;
                    continue ;
                
              }
            }
          } else if (c >= 72) {
            exit = 1;
          } else {
            f[/* signedconv */5] = true;
            f[/* uppercase */7] = true;
            f[/* conv */10] = String.fromCharCode(lowercase(c));
            _i = i + 1 | 0;
            continue ;
          }
        } else {
          var switcher = c - 32 | 0;
          if (switcher > 25 || switcher < 0) {
            exit = 1;
          } else {
            switch (switcher) {
              case 3 : 
                  f[/* alternate */3] = true;
                  _i = i + 1 | 0;
                  continue ;
              case 0 : 
              case 11 : 
                  exit = 2;
                  break;
              case 13 : 
                  f[/* justify */0] = "-";
                  _i = i + 1 | 0;
                  continue ;
              case 14 : 
                  f[/* prec */9] = 0;
                  var j = i + 1 | 0;
                  while((function(j){
                      return function () {
                        var w = fmt.charCodeAt(j) - /* "0" */48 | 0;
                        return w >= 0 && w <= 9;
                      }
                      }(j))()) {
                    f[/* prec */9] = (imul(f[/* prec */9], 10) + fmt.charCodeAt(j) | 0) - /* "0" */48 | 0;
                    j = j + 1 | 0;
                  };
                  _i = j;
                  continue ;
              case 1 : 
              case 2 : 
              case 4 : 
              case 5 : 
              case 6 : 
              case 7 : 
              case 8 : 
              case 9 : 
              case 10 : 
              case 12 : 
              case 15 : 
                  exit = 1;
                  break;
              case 16 : 
                  f[/* filter */2] = "0";
                  _i = i + 1 | 0;
                  continue ;
              case 17 : 
              case 18 : 
              case 19 : 
              case 20 : 
              case 21 : 
              case 22 : 
              case 23 : 
              case 24 : 
              case 25 : 
                  exit = 3;
                  break;
              
            }
          }
        }
        switch (exit) {
          case 1 : 
              _i = i + 1 | 0;
              continue ;
          case 2 : 
              f[/* signstyle */1] = String.fromCharCode(c);
              _i = i + 1 | 0;
              continue ;
          case 3 : 
              f[/* width */6] = 0;
              var j$1 = i;
              while((function(j$1){
                  return function () {
                    var w = fmt.charCodeAt(j$1) - /* "0" */48 | 0;
                    return w >= 0 && w <= 9;
                  }
                  }(j$1))()) {
                f[/* width */6] = (imul(f[/* width */6], 10) + fmt.charCodeAt(j$1) | 0) - /* "0" */48 | 0;
                j$1 = j$1 + 1 | 0;
              };
              _i = j$1;
              continue ;
          case 4 : 
              f[/* signedconv */5] = true;
              f[/* base */4] = /* Dec */2;
              _i = i + 1 | 0;
              continue ;
          case 5 : 
              f[/* signedconv */5] = true;
              f[/* conv */10] = String.fromCharCode(c);
              _i = i + 1 | 0;
              continue ;
          
        }
      }
    }
  }
  
  function finish_formatting(param, rawbuffer) {
    var justify = param[/* justify */0];
    var signstyle = param[/* signstyle */1];
    var filter = param[/* filter */2];
    var alternate = param[/* alternate */3];
    var base = param[/* base */4];
    var signedconv = param[/* signedconv */5];
    var width = param[/* width */6];
    var uppercase = param[/* uppercase */7];
    var sign = param[/* sign */8];
    var len = rawbuffer.length;
    if (signedconv && (sign < 0 || signstyle !== "-")) {
      len = len + 1 | 0;
    }
    if (alternate) {
      if (base === /* Oct */0) {
        len = len + 1 | 0;
      } else if (base === /* Hex */1) {
        len = len + 2 | 0;
      }
      
    }
    var buffer = "";
    if (justify === "+" && filter === " ") {
      for(var i = len ,i_finish = width - 1 | 0; i <= i_finish; ++i){
        buffer = buffer + filter;
      }
    }
    if (signedconv) {
      if (sign < 0) {
        buffer = buffer + "-";
      } else if (signstyle !== "-") {
        buffer = buffer + signstyle;
      }
      
    }
    if (alternate && base === /* Oct */0) {
      buffer = buffer + "0";
    }
    if (alternate && base === /* Hex */1) {
      buffer = buffer + "0x";
    }
    if (justify === "+" && filter === "0") {
      for(var i$1 = len ,i_finish$1 = width - 1 | 0; i$1 <= i_finish$1; ++i$1){
        buffer = buffer + filter;
      }
    }
    buffer = uppercase ? buffer + rawbuffer.toUpperCase() : buffer + rawbuffer;
    if (justify === "-") {
      for(var i$2 = len ,i_finish$2 = width - 1 | 0; i$2 <= i_finish$2; ++i$2){
        buffer = buffer + " ";
      }
    }
    return buffer;
  }
  
  function caml_format_float(fmt, x) {
    var f = parse_format(fmt);
    var prec = f[/* prec */9] < 0 ? 6 : f[/* prec */9];
    var x$1 = x < 0 ? (f[/* sign */8] = -1, -x) : x;
    var s = "";
    if (isNaN(x$1)) {
      s = "nan";
      f[/* filter */2] = " ";
    } else if (isFinite(x$1)) {
      var match = f[/* conv */10];
      switch (match) {
        case "e" : 
            s = x$1.toExponential(prec);
            var i = s.length;
            if (s[i - 3 | 0] === "e") {
              s = s.slice(0, i - 1 | 0) + ("0" + s.slice(i - 1 | 0));
            }
            break;
        case "f" : 
            s = x$1.toFixed(prec);
            break;
        case "g" : 
            var prec$1 = prec !== 0 ? prec : 1;
            s = x$1.toExponential(prec$1 - 1 | 0);
            var j = s.indexOf("e");
            var exp = Number(s.slice(j + 1 | 0)) | 0;
            if (exp < -4 || x$1 >= 1e21 || x$1.toFixed().length > prec$1) {
              var i$1 = j - 1 | 0;
              while(s[i$1] === "0") {
                i$1 = i$1 - 1 | 0;
              }
              if (s[i$1] === ".") {
                i$1 = i$1 - 1 | 0;
              }
              s = s.slice(0, i$1 + 1 | 0) + s.slice(j);
              var i$2 = s.length;
              if (s[i$2 - 3 | 0] === "e") {
                s = s.slice(0, i$2 - 1 | 0) + ("0" + s.slice(i$2 - 1 | 0));
              }
              
            } else {
              var p = prec$1;
              if (exp < 0) {
                p = p - (exp + 1 | 0) | 0;
                s = x$1.toFixed(p);
              } else {
                while((function () {
                        s = x$1.toFixed(p);
                        return s.length > (prec$1 + 1 | 0);
                      })()) {
                  p = p - 1 | 0;
                }
              }
              if (p !== 0) {
                var k = s.length - 1 | 0;
                while(s[k] === "0") {
                  k = k - 1 | 0;
                }
                if (s[k] === ".") {
                  k = k - 1 | 0;
                }
                s = s.slice(0, k + 1 | 0);
              }
              
            }
            break;
        default:
          
      }
    } else {
      s = "inf";
      f[/* filter */2] = " ";
    }
    return finish_formatting(f, s);
  }
  
  var float_of_string = (
    function (s, caml_failwith) {
      var res = +s;
      if ((s.length > 0) && (res === res))
          return res;
      s = s.replace(/_/g, "");
      res = +s;
      if (((s.length > 0) && (res === res)) || /^[+-]?nan$/i.test(s)) {
          return res;
      }
      
      if (/^ *0x[0-9a-f_]+p[+-]?[0-9_]+/i.test(s)) {
          var pidx = s.indexOf('p');
          pidx = (pidx == -1) ? s.indexOf('P') : pidx;
          var exp = +s.substring(pidx + 1);
          res = +s.substring(0, pidx);
          return res * Math.pow(2, exp);
      }
      if (/^\+?inf(inity)?$/i.test(s))
          return Infinity;
      if (/^-inf(inity)?$/i.test(s))
          return -Infinity;
      caml_failwith("float_of_string");
  }
  
  );
  
  function caml_float_of_string(s) {
    return _2(float_of_string, s, caml_failwith);
  }
  
  
  /* float_of_string Not a pure module */
  
  function bytes_of_string(s) {
    var len = s.length;
    var res = new Array(len);
    for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
      res[i] = s.charCodeAt(i);
    }
    return res;
  }
  
  function get(s, i) {
    if (i < 0 || i >= s.length) {
      throw [
            invalid_argument,
            "index out of bounds"
          ];
    } else {
      return s.charCodeAt(i);
    }
  }
  
  
  /* No side effect */
  
  /* No side effect */
  
  /* No side effect */
  
  function failwith(s) {
    throw [
          failure,
          s
        ];
  }
  
  var Exit = create("Pervasives.Exit");
  
  function valid_float_lexem(s) {
    var l = s.length;
    var _i = 0;
    while(true) {
      var i = _i;
      if (i >= l) {
        return s + ".";
      } else {
        var match = get(s, i);
        if (match >= 48) {
          if (match >= 58) {
            return s;
          } else {
            _i = i + 1 | 0;
            continue ;
          }
        } else if (match !== 45) {
          return s;
        } else {
          _i = i + 1 | 0;
          continue ;
        }
      }
    }
  }
  
  function string_of_float(f) {
    return valid_float_lexem(caml_format_float("%.12g", f));
  }
  
  function $at(l1, l2) {
    if (l1) {
      return /* :: */[
              l1[0],
              $at(l1[1], l2)
            ];
    } else {
      return l2;
    }
  }
  
  
  /* No side effect */
  
  var onresize = function (handleFunc){
    window.onresize = handleFunc;
  };
  
  var apply = (
      function(dataArray, func) {
        return func.apply(null, dataArray);
      }
    );
  
  var deleteKeyInDict = (
      function (key,dict) {
        delete dict[key];
        return dict;
      }
    );
  
  function stopPropagation(e) {
    return e.stopPropagation();
  }
  
  function preventDefault(e) {
    return e.preventDefault();
  }
  
  function getRandomKey() {
    return string_of_float(Date.now() * Math.random());
  }
  
  function textEl(str) {
    return str;
  }
  
  
  /* apply Not a pure module */
  
  function updateWithSideEffects(state, func) {
    _1(func, state);
    return /* Update */__(0, [state]);
  }
  
  function sideEffects(func) {
    _1(func, /* () */0);
    return /* NoUpdate */0;
  }
  
  
  /* No side effect */
  
  var component$2 = reducerComponent("Switch");
  
  function reducer(openFunc, closeFunc, _) {
    return (function (state) {
        var match = state[/* isOpen */0];
        if (match) {
          return updateWithSideEffects(/* record */[/* isOpen */!state[/* isOpen */0]], (function () {
                        return _1(closeFunc, /* () */0);
                      }));
        } else {
          return updateWithSideEffects(/* record */[/* isOpen */!state[/* isOpen */0]], (function () {
                        return _1(openFunc, /* () */0);
                      }));
        }
      });
  }
  
  function render$2(openText, closeText, param) {
    var send = param[/* send */3];
    var match = param[/* state */1][/* isOpen */0];
    return react_3$1("article", {
                className: "wonder-switch"
              }, match ? react_3$1("button", {
                      onClick: (function () {
                          return _1(send, /* ChangeState */0);
                        })
                    }, textEl(closeText)) : react_3$1("button", {
                      onClick: (function () {
                          return _1(send, /* ChangeState */0);
                        })
                    }, textEl(openText)));
  }
  
  function make$3(openText, openFunc, closeText, closeFunc, isOpen, _) {
    return /* record */[
            /* debugName */component$2[/* debugName */0],
            /* reactClassInternal */component$2[/* reactClassInternal */1],
            /* handedOffState */component$2[/* handedOffState */2],
            /* willReceiveProps */component$2[/* willReceiveProps */3],
            /* didMount */component$2[/* didMount */4],
            /* didUpdate */component$2[/* didUpdate */5],
            /* willUnmount */component$2[/* willUnmount */6],
            /* willUpdate */component$2[/* willUpdate */7],
            /* shouldUpdate */component$2[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$2(openText, closeText, self);
              }),
            /* initialState */(function () {
                return /* record */[/* isOpen */isOpen];
              }),
            /* retainedProps */component$2[/* retainedProps */11],
            /* reducer */(function (param) {
                return reducer(openFunc, closeFunc, param);
              }),
            /* subscriptions */component$2[/* subscriptions */13],
            /* jsElementWrapped */component$2[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function convertColorObjToColorPickRgbType(rgbObj) {
    return /* record */[
            /* r */rgbObj.r,
            /* g */rgbObj.g,
            /* b */rgbObj.b
          ];
  }
  
  function convertColorObjToColorPickType(colorObj) {
    return /* record */[
            /* hex */colorObj.hex,
            /* rgb */convertColorObjToColorPickRgbType(colorObj.rgb)
          ];
  }
  
  
  /* No side effect */
  
  function triggerOnSubmitWithValue(value, onSubmitFunc) {
    if (onSubmitFunc !== undefined) {
      return _1(onSubmitFunc, value);
    } else {
      return /* () */0;
    }
  }
  
  var component$3 = reducerComponent("FileInput");
  
  function reducer$1(onSubmitFunc, action) {
    if (typeof action === "number") {
      if (action !== 0) {
        return (function (state) {
            var inputValue = state[/* inputValue */0].trim();
            if (inputValue === "") {
              return /* NoUpdate */0;
            } else {
              return updateWithSideEffects(/* record */[
                          /* inputValue */inputValue,
                          /* isShowInput */state[/* isShowInput */1]
                        ], (function () {
                            return triggerOnSubmitWithValue(inputValue, onSubmitFunc);
                          }));
            }
          });
      } else {
        return (function (state) {
            return /* Update */__(0, [/* record */[
                        /* inputValue */state[/* inputValue */0],
                        /* isShowInput */!state[/* isShowInput */1]
                      ]]);
          });
      }
    } else {
      var text = action[0];
      return (function (state) {
          return /* Update */__(0, [/* record */[
                      /* inputValue */text,
                      /* isShowInput */state[/* isShowInput */1]
                    ]]);
        });
    }
  }
  
  function render$3(buttonText, param) {
    var send = param[/* send */3];
    var state = param[/* state */1];
    var match = state[/* isShowInput */1];
    return react_3$1("article", {
                className: "wonder-file-input"
              }, buttonText !== undefined ? react_3$1("button", {
                      onClick: (function () {
                          return _1(send, /* ShowInput */0);
                        })
                    }, textEl(buttonText)) : null, match ? react_3$1("div", undefined, react_3$1("textarea", {
                          className: "input-component file-input",
                          type: "text",
                          value: state[/* inputValue */0],
                          onChange: (function (_e) {
                              return _1(send, /* Change */[_e.target.value]);
                            })
                        }), react_3$1("button", {
                          onClick: (function () {
                              return _1(send, /* Submit */1);
                            })
                        }, textEl("submit"))) : null);
  }
  
  function make$4(buttonText, onSubmit, _) {
    return /* record */[
            /* debugName */component$3[/* debugName */0],
            /* reactClassInternal */component$3[/* reactClassInternal */1],
            /* handedOffState */component$3[/* handedOffState */2],
            /* willReceiveProps */component$3[/* willReceiveProps */3],
            /* didMount */component$3[/* didMount */4],
            /* didUpdate */component$3[/* didUpdate */5],
            /* willUnmount */component$3[/* willUnmount */6],
            /* willUpdate */component$3[/* willUpdate */7],
            /* shouldUpdate */component$3[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$3(buttonText, self);
              }),
            /* initialState */(function () {
                return /* record */[
                        /* inputValue */"",
                        /* isShowInput */false
                      ];
              }),
            /* retainedProps */component$3[/* retainedProps */11],
            /* reducer */(function (param) {
                return reducer$1(onSubmit, param);
              }),
            /* subscriptions */component$3[/* subscriptions */13],
            /* jsElementWrapped */component$3[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function entries(dict) {
    var keys = Object.keys(dict);
    var l = keys.length;
    var values = new Array(l);
    for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
      var key = keys[i];
      values[i] = /* tuple */[
        key,
        dict[key]
      ];
    }
    return values;
  }
  
  function values(dict) {
    var keys = Object.keys(dict);
    var l = keys.length;
    var values$1 = new Array(l);
    for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
      values$1[i] = dict[keys[i]];
    }
    return values$1;
  }
  
  function fromList$1(entries) {
    var dict = { };
    var _param = entries;
    while(true) {
      var param = _param;
      if (param) {
        var match = param[0];
        dict[match[0]] = match[1];
        _param = param[1];
        continue ;
      } else {
        return dict;
      }
    }
  }
  
  function map$1(f, source) {
    var target = { };
    var keys = Object.keys(source);
    var l = keys.length;
    for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
      var key = keys[i];
      target[key] = f(source[key]);
    }
    return target;
  }
  
  
  /* unsafeDeleteKey Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function createEmpty$1() {
    return { };
  }
  
  function set(key, value, map$$1) {
    map$$1[key] = value;
    return map$$1;
  }
  
  function get$2(key, map$$1) {
    return undefined_to_opt(map$$1[key]);
  }
  
  function unsafeGet(key, map$$1) {
    return map$$1[key];
  }
  
  var fromList = fromList$1;
  
  
  /* Js_dict Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function createEmpty() {
    return /* array */[];
  }
  
  function removeDuplicateItems(arr) {
    var resultArr = /* array */[];
    var map = createEmpty$1(/* () */0);
    for(var i = 0 ,i_finish = arr.length - 1 | 0; i <= i_finish; ++i){
      var item = arr[i];
      var key = item.toString();
      var match = get$2(key, map);
      if (match === undefined) {
        resultArr.push(item);
        set(key, item, map);
      }
      
    }
    return resultArr;
  }
  
  function isNotEqual(index, target, arr) {
    if (index >= arr.length) {
      return true;
    } else {
      return caml_notequal(arr[index], target);
    }
  }
  
  function forEach(func, arr) {
    for(var i = 0 ,i_finish = arr.length - 1 | 0; i <= i_finish; ++i){
      func(arr[i]);
    }
    return /* () */0;
  }
  
  function range(a, b) {
    var result = /* array */[];
    for(var i = a; i <= b; ++i){
      result.push(i);
    }
    return result;
  }
  
  function reduceOneParam(func, param, arr) {
    var mutableParam = param;
    for(var i = 0 ,i_finish = arr.length - 1 | 0; i <= i_finish; ++i){
      mutableParam = func(mutableParam, arr[i]);
    }
    return mutableParam;
  }
  
  function reduceOneParami(func, param, arr) {
    var mutableParam = param;
    for(var i = 0 ,i_finish = arr.length - 1 | 0; i <= i_finish; ++i){
      mutableParam = func(mutableParam, arr[i], i);
    }
    return mutableParam;
  }
  
  
  /* HashMapService-WonderCommonlib Not a pure module */
  
  function iter(x, f) {
    if (x == null) {
      return /* () */0;
    } else {
      return f(x);
    }
  }
  
  function fromOption(x) {
    if (x !== undefined) {
      return valFromOption(x);
    }
    
  }
  
  
  /* No side effect */
  
  function checkComponentShouldAlive(component, isAliveFunc, record) {
    return test(buildAssertMessage("component alive", "not"), (function () {
                  return assertTrue(_2(isAliveFunc, component, record));
                }));
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function deleteBySwap(index, lastIndex, arr) {
    requireCheck((function () {
            var len = arr.length;
            return test(buildAssertMessage("lastIndex:" + (String(lastIndex) + (" === arr.length:" + (String(len) + ""))), "not"), (function () {
                          return assertEqual(/* Int */0, arr.length - 1 | 0, lastIndex);
                        }));
          }), getIsDebug(stateData));
    arr[index] = arr[lastIndex];
    arr.pop();
    return /* () */0;
  }
  
  function range$1(a, b) {
    var result = createEmpty(/* () */0);
    for(var i = a; i <= b; ++i){
      result.push(i);
    }
    return result;
  }
  
  function push$1(item, arr) {
    arr.push(item);
    return arr;
  }
  
  function getLast(arr) {
    return arr[arr.length - 1 | 0];
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  
  function isEmpty(value) {
    if (value === null) {
      return true;
    } else {
      return value === undefined;
    }
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function createEmpty$2() {
    return /* array */[];
  }
  
  function unsafeGet$1(key, map) {
    return map[key];
  }
  
  function get$3(key, map) {
    var value = map[key];
    var match = isEmpty(value);
    if (match) {
      return undefined;
    } else {
      return some(value);
    }
  }
  
  function has$1(key, map) {
    return !isEmpty(map[key]);
  }
  
  function set$1(key, value, map) {
    map[key] = value;
    return map;
  }
  
  function deleteVal$1(key, map) {
    map[key] = undefined;
    return map;
  }
  
  
  /* No side effect */
  
  function mark(transform, isDirty, record) {
    var dirtyMap = record[/* dirtyMap */18];
    set$1(transform, isDirty, dirtyMap);
    return record;
  }
  
  function isDirty(transform, record) {
    var dirtyMap = record[/* dirtyMap */18];
    return ensureCheck((function (isDirty) {
                  return test(buildAssertMessage("return bool", "not"), (function () {
                                return assertIsBool(isDirty);
                              }));
                }), getIsDebug(stateData), unsafeGet$1(transform, dirtyMap) === true);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function unsafeGetParent(transform, record) {
    return unsafeGet$1(transform, record[/* parentMap */15]);
  }
  
  function getParent$2(transform, record) {
    return undefined_to_opt(unsafeGet$1(transform, record[/* parentMap */15]));
  }
  
  function removeFromParentMap(child, record) {
    var newrecord = caml_array_dup(record);
    newrecord[/* parentMap */15] = deleteVal$1(child, record[/* parentMap */15]);
    return newrecord;
  }
  
  function unsafeGetChildren(transform, record) {
    return ensureCheck((function (children) {
                  return test(buildAssertMessage("children exist", "not"), (function () {
                                return assertNullableExist(children);
                              }));
                }), getIsDebug(stateData), unsafeGet$1(transform, record[/* childMap */16]));
  }
  
  function _setChildren(record, parent, children) {
    var newrecord = caml_array_dup(record);
    newrecord[/* childMap */16] = set$1(parent, children, record[/* childMap */16]);
    return newrecord;
  }
  
  function _removeChild(child, _, children) {
    return deleteBySwap(children.indexOf(child), children.length - 1 | 0, children);
  }
  
  function removeFromChildMap(parent, child, isKeepOrder, record) {
    if (isKeepOrder) {
      return _setChildren(record, parent, unsafeGetChildren(parent, record).filter((function (transform) {
                        return transform !== child;
                      })));
    } else {
      _removeChild(child, isKeepOrder, unsafeGetChildren(parent, record));
      return record;
    }
  }
  
  function _removeFromParent(currentParent, child, isKeepOrder, record) {
    return removeFromChildMap(currentParent, child, isKeepOrder, removeFromParentMap(child, record));
  }
  
  function _setParent(parent, child, record) {
    var newrecord = caml_array_dup(record);
    newrecord[/* parentMap */15] = set$1(child, parent, record[/* parentMap */15]);
    return newrecord;
  }
  
  function _addChild(parent, child, record) {
    unsafeGetChildren(parent, record).push(child);
    return record;
  }
  
  function addToParent(parent, child, record) {
    requireCheck((function () {
            test(buildAssertMessage("child not has parent", "has"), (function () {
                    return assertNotExist(undefined_to_opt(unsafeGet$1(child, record[/* parentMap */15])));
                  }));
            return test(buildAssertMessage("parent not already has the child", "has"), (function () {
                          return assertFalse(unsafeGetChildren(parent, record).includes(child));
                        }));
          }), getIsDebug(stateData));
    return _addChild(parent, child, _setParent(parent, child, record));
  }
  
  function markHierachyDirty(transform, record) {
    return reduceOneParam((function (record, child) {
                  return markHierachyDirty(child, record);
                }), record, unsafeGetChildren(transform, mark(transform, true, record)));
  }
  
  function _setNewParent(parent, child, isKeepOrder, record) {
    var match = unsafeGet$1(child, record[/* parentMap */15]);
    if (match !== undefined) {
      var match$1 = match !== parent;
      if (match$1) {
        return addToParent(parent, child, _removeFromParent(match, child, isKeepOrder, record));
      } else {
        return record;
      }
    } else {
      return addToParent(parent, child, record);
    }
  }
  
  function _setParent$1(parent, child, isKeepOrder, record) {
    if (parent !== undefined) {
      return _setNewParent(parent, child, isKeepOrder, record);
    } else {
      var match = unsafeGet$1(child, record[/* parentMap */15]);
      if (match !== undefined) {
        return _removeFromParent(match, child, isKeepOrder, record);
      } else {
        return record;
      }
    }
  }
  
  function setParent$1(parent, child, record) {
    return markHierachyDirty(child, _setParent$1(parent, child, false, record));
  }
  
  function setParentKeepOrder$2(parent, child, record) {
    return markHierachyDirty(child, _setParent$1(parent, child, true, record));
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function checkNotExceedMaxCountByIndex(maxCount, index) {
    return ensureCheck((function (index) {
                  var maxIndex = maxCount - 1 | 0;
                  return test(buildAssertMessage("index: " + (String(index) + (" <= maxIndex: " + (String(maxIndex) + ""))), "not"), (function () {
                                return Operators[/* <= */11](index, maxIndex);
                              }));
                }), getIsDebug(stateData), index);
  }
  
  function checkNotExceedMaxCount(maxCount, resultTuple) {
    checkNotExceedMaxCountByIndex(maxCount, resultTuple[1]);
    return resultTuple;
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function unsafeGet$2(optionData) {
    requireCheck((function () {
            return test(buildAssertMessage("data exist(get by getExn)", "not"), (function () {
                          return assertExist(optionData);
                        }));
          }), getIsDebug(stateData));
    return getExn(optionData);
  }
  
  function isJsonSerializedValueNone(value) {
    if (value === null) {
      return true;
    } else {
      return value === undefined;
    }
  }
  
  var unsafeGetJsonSerializedValue = unsafeGet$2;
  
  
  /* Log-WonderLog Not a pure module */
  
  function unsafeGetBuffer(param) {
    return unsafeGet$2(param[/* buffer */2]);
  }
  
  function getTransformCount(record) {
    return unsafeGetBuffer(record)[/* transformCount */2];
  }
  
  function getCustomGeometryPointCount(record) {
    return unsafeGetBuffer(record)[/* customGeometryPointCount */0];
  }
  
  function getCustomGeometryCount(record) {
    return unsafeGetBuffer(record)[/* customGeometryCount */1];
  }
  
  function getBasicMaterialCount(record) {
    return unsafeGetBuffer(record)[/* basicMaterialCount */3];
  }
  
  function getLightMaterialCount(record) {
    return unsafeGetBuffer(record)[/* lightMaterialCount */4];
  }
  
  function getMeshRendererCount(record) {
    return unsafeGetBuffer(record)[/* meshRendererCount */8];
  }
  
  function getSourceInstanceCount(record) {
    return unsafeGetBuffer(record)[/* instanceBuffer */9][/* sourceInstanceCount */0];
  }
  
  function getObjectInstanceCountPerSourceInstance(record) {
    return unsafeGetBuffer(record)[/* instanceBuffer */9][/* objectInstanceCountPerSourceInstance */1];
  }
  
  function getTextureCountPerMaterial(record) {
    return unsafeGetBuffer(record)[/* textureCountPerMaterial */5];
  }
  
  function getBasicSourceTextureCount(record) {
    return unsafeGetBuffer(record)[/* basicSourceTextureCount */6];
  }
  
  function getArrayBufferViewSourceTextureCount(record) {
    return unsafeGetBuffer(record)[/* arrayBufferViewSourceTextureCount */7];
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function _getDisposedIndex(disposedIndexArray) {
    return /* tuple */[
            disposedIndexArray,
            undefined_to_opt(disposedIndexArray.pop())
          ];
  }
  
  function generateIndex(index, disposedIndexArray) {
    var match = _getDisposedIndex(disposedIndexArray);
    var match$1 = match[1];
    var disposedIndexArray$1 = match[0];
    if (match$1 !== undefined) {
      return /* tuple */[
              match$1,
              index,
              disposedIndexArray$1
            ];
    } else {
      return /* tuple */[
              index,
              index + 1 | 0,
              disposedIndexArray$1
            ];
    }
  }
  
  
  /* No side effect */
  
  function isDeleted(item) {
    return item == null;
  }
  
  function length$1(prim) {
    return prim.length;
  }
  
  function copy(prim) {
    return prim.slice();
  }
  
  function getValidValues(map) {
    return map.filter((function (value) {
                  return value !== undefined;
                }));
  }
  
  function getValidKeys(map) {
    return reduceOneParami((function (arr, value, key) {
                  if (value === undefined) {
                    return arr;
                  } else {
                    arr.push(key);
                    return arr;
                  }
                }), /* array */[], map);
  }
  
  function forEachValid(func, map) {
    return forEach((function (value) {
                  if (value === undefined) {
                    return /* () */0;
                  } else {
                    return func(value);
                  }
                }), map);
  }
  
  function reduceiValid(func, initValue, map) {
    return reduceOneParami((function (previousValue, value, index) {
                  if (value === undefined) {
                    return previousValue;
                  } else {
                    return func(previousValue, value, index);
                  }
                }), initValue, map);
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  function copyFloat32Array(typeArr) {
    if (typeArr === undefined) {
      return undefined;
    } else {
      return typeArr.slice();
    }
  }
  
  function copyFloat32ArrayWithEndIndex(endIndex, typeArr) {
    return typeArr.slice(0, endIndex);
  }
  
  function copyUint8ArrayWithEndIndex(endIndex, typeArr) {
    return typeArr.slice(0, endIndex);
  }
  
  function copyUint16ArrayWithEndIndex(endIndex, typeArr) {
    return typeArr.slice(0, endIndex);
  }
  
  function copyUint32ArrayWithEndIndex(endIndex, typeArr) {
    return typeArr.slice(0, endIndex);
  }
  
  function deepCopyFloat32ArrayArray(arr) {
    return arr.map(copyFloat32Array);
  }
  
  function deepCopyArrayArray(arr) {
    return arr.map((function (itemArr) {
                  var match = isDeleted(itemArr);
                  if (match) {
                    return undefined;
                  } else {
                    return itemArr.slice();
                  }
                }));
  }
  
  
  /* SparseMapService-Wonderjs Not a pure module */
  
  var _isSupportSharedArrayBuffer = (
      function(){
          return typeof SharedArrayBuffer !== "undefined"
      }
      );
  
  function isSupportSharedArrayBuffer() {
    return _1(_isSupportSharedArrayBuffer, /* () */0);
  }
  
  function newSharedArrayBuffer(totalByteLength) {
    var match = _1(_isSupportSharedArrayBuffer, /* () */0);
    if (match) {
      return new SharedArrayBuffer(totalByteLength);
    } else {
      return new ArrayBuffer(totalByteLength);
    }
  }
  
  
  /* _isSupportSharedArrayBuffer Not a pure module */
  
  function getLocalToWorldMatricesSize() {
    return 16;
  }
  
  function getLocalToWorldMatricesLength(count) {
    return (count << 4);
  }
  
  function getLocalToWorldMatricesOffset() {
    return 0;
  }
  
  function getLocalPositionsSize() {
    return 3;
  }
  
  function getLocalPositionsLength(count) {
    return imul(count, 3);
  }
  
  function getLocalPositionsOffset(count) {
    return 0 + imul((count << 4), Float32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getLocalRotationsSize() {
    return 4;
  }
  
  function getLocalRotationsLength(count) {
    return (count << 2);
  }
  
  function getLocalRotationsOffset(count) {
    return getLocalPositionsOffset(count) + imul(imul(count, 3), Float32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getLocalScalesSize() {
    return 3;
  }
  
  function getLocalScalesLength(count) {
    return imul(count, 3);
  }
  
  function getLocalScalesOffset(count) {
    return getLocalRotationsOffset(count) + imul((count << 2), Float32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getLocalToWorldMatrixIndex(index) {
    return (index << 4);
  }
  
  function getLocalPositionIndex(index) {
    return imul(index, 3);
  }
  
  function getLocalRotationIndex(index) {
    return (index << 2);
  }
  
  function getLocalScaleIndex(index) {
    return imul(index, 3);
  }
  
  function getTotalByteLength(count) {
    return imul(imul(count, Float32Array.BYTES_PER_ELEMENT), 26);
  }
  
  function createBuffer(count) {
    return newSharedArrayBuffer(getTotalByteLength(count));
  }
  
  
  /* Worker-Wonderjs Not a pure module */
  
  function findFirstHtmlElement($$document, str) {
    var elements = $$document.querySelectorAll(str);
    var match = elements.length;
    if (match !== 0) {
      return some(caml_array_get(elements, 0));
    }
    
  }
  
  function _prepend(sourceElement, targetElement) {
    var match = targetElement.prepend;
    if (match == null) {
      return targetElement.insertBefore(sourceElement, targetElement.firstChild);
    } else {
      return targetElement.prepend(sourceElement);
    }
  }
  
  function prependTo(sourceElement, targetElement) {
    if (targetElement !== undefined) {
      var match = sourceElement.nodeType;
      if (match !== 1) {
        return sourceElement;
      } else {
        _prepend(sourceElement, valFromOption(targetElement));
        return sourceElement;
      }
    } else {
      return failwith("targetElement should exist");
    }
  }
  
  function setBatchStyle(element, cssText) {
    element.style.cssText = cssText;
    return element;
  }
  
  var requestPointerLock = function (element){
    element.requestPointerLock();
    };
  
  var exitPointerLock = function (){
    document.exitPointerLock();
    };
  
  
  /* No side effect */
  
  function buildCanvas() {
    return document.createElement("canvas");
  }
  
  
  /* No side effect */
  
  var hasProperty = (
      function has(property, target){
          return property in target
      }
      );
  
  
  /* hasProperty Not a pure module */
  
  function setSetting(param) {
    var worker = param[/* worker */6];
    var gpu = param[/* gpu */5];
    var context = param[/* context */4];
    var isDebug = param[/* isDebug */3];
    var buffer = param[/* buffer */2];
    var memory = param[/* memory */1];
    return /* record */[
            /* canvasId */param[/* canvasId */0],
            /* memory */memory !== undefined ? memory : /* record */[
                /* maxDisposeCount */1000,
                /* maxTypeArrayPoolSize */5000,
                /* maxBigTypeArrayPoolSize */100
              ],
            /* buffer */buffer !== undefined ? buffer : /* record */[
                /* customGeometryPointCount */1000000,
                /* customGeometryCount */1000,
                /* transformCount */10000,
                /* basicMaterialCount */10000,
                /* lightMaterialCount */10000,
                /* textureCountPerMaterial */16,
                /* basicSourceTextureCount */64,
                /* arrayBufferViewSourceTextureCount */64,
                /* meshRendererCount */10000,
                /* instanceBuffer : record */[
                  /* sourceInstanceCount */2,
                  /* objectInstanceCountPerSourceInstance */10000
                ]
              ],
            /* isDebug */isDebug !== undefined ? isDebug : false,
            /* context */context !== undefined ? context : /* record */[
                /* alpha */true,
                /* depth */true,
                /* stencil */false,
                /* antialias */true,
                /* premultipliedAlpha */true,
                /* preserveDrawingBuffer */false
              ],
            /* gpu */gpu !== undefined ? gpu : /* record */[/* useHardwareInstance */true],
            /* worker */worker !== undefined ? worker : /* record */[/* useWorker */false]
          ];
  }
  
  function getCanvasId(param) {
    return param[/* canvasId */0];
  }
  
  function unsafeGetMemory(param) {
    return unsafeGet$2(param[/* memory */1]);
  }
  
  function unsafeGetIsDebug(param) {
    return unsafeGet$2(param[/* isDebug */3]);
  }
  
  function unsafeGetGPU(param) {
    return unsafeGet$2(param[/* gpu */5]);
  }
  
  function unsafeGetContext(param) {
    return unsafeGet$2(param[/* context */4]);
  }
  
  function unsafeGetWorker(param) {
    return unsafeGet$2(param[/* worker */6]);
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function detect(state) {
    var isSupportSharedArrayBuffer$$1 = isSupportSharedArrayBuffer(/* () */0);
    var newrecord = caml_array_dup(state);
    var match = !isSupportSharedArrayBuffer$$1;
    newrecord[/* workerDetectRecord */40] = /* record */[
      /* isSupportSharedArrayBuffer */isSupportSharedArrayBuffer$$1,
      /* isSupportRenderWorkerAndSharedArrayBuffer */match ? false : _2(hasProperty, "transferControlToOffscreen", buildCanvas(/* () */0))
    ];
    return newrecord;
  }
  
  function isUseWorker(state) {
    if (unsafeGetWorker(state[/* settingRecord */1])[/* useWorker */0]) {
      return state[/* workerDetectRecord */40][/* isSupportRenderWorkerAndSharedArrayBuffer */1];
    } else {
      return false;
    }
  }
  
  
  /* Worker-Wonderjs Not a pure module */
  
  function createTypeArrays(buffer, count) {
    return /* tuple */[
            new Float32Array(buffer, getLocalToWorldMatricesOffset(count), getLocalToWorldMatricesLength(count)),
            new Float32Array(buffer, getLocalPositionsOffset(count), getLocalPositionsLength(count)),
            new Float32Array(buffer, getLocalRotationsOffset(count), getLocalRotationsLength(count)),
            new Float32Array(buffer, getLocalScalesOffset(count), getLocalScalesLength(count))
          ];
  }
  
  
  /* BufferTransformService-Wonderjs Not a pure module */
  
  function getUint8_1(index, typeArray) {
    return typeArray[index];
  }
  
  function getUint16_1(index, typeArray) {
    return typeArray[index];
  }
  
  function getUint32_1(index, typeArray) {
    return typeArray[index];
  }
  
  function getFloat1(index, typeArray) {
    return typeArray[index];
  }
  
  function getFloat3(index, typeArray) {
    return /* array */[
            typeArray[index],
            typeArray[index + 1 | 0],
            typeArray[index + 2 | 0]
          ];
  }
  
  function getFloat3Tuple(index, typeArray) {
    return /* tuple */[
            typeArray[index],
            typeArray[index + 1 | 0],
            typeArray[index + 2 | 0]
          ];
  }
  
  function getFloat4Tuple(index, typeArray) {
    return /* tuple */[
            typeArray[index],
            typeArray[index + 1 | 0],
            typeArray[index + 2 | 0],
            typeArray[index + 3 | 0]
          ];
  }
  
  function setUint8_1(index, value, typeArray) {
    typeArray[index] = value;
    return typeArray;
  }
  
  function setUint16_1(index, value, typeArray) {
    typeArray[index] = value;
    return typeArray;
  }
  
  function setUint32_1(index, value, typeArray) {
    typeArray[index] = value;
    return typeArray;
  }
  
  function setFloat1(index, value, typeArray) {
    typeArray[index] = value;
    return typeArray;
  }
  
  function setFloat3(index, record, typeArray) {
    requireCheck((function () {
            var len = record.length;
            return test(buildAssertMessage("record.length === 3", "is " + (String(len) + "")), (function () {
                          return Operators[/* = */0](len, 3);
                        }));
          }), getIsDebug(stateData));
    for(var i = index ,i_finish = index + 2 | 0; i <= i_finish; ++i){
      typeArray[i] = record[i - index | 0];
    }
    return typeArray;
  }
  
  function setFloat4(index, record, typeArray) {
    requireCheck((function () {
            var len = record.length;
            return test(buildAssertMessage("record.length === 4", "is " + (String(len) + "")), (function () {
                          return Operators[/* = */0](len, 4);
                        }));
          }), getIsDebug(stateData));
    for(var i = index ,i_finish = index + 3 | 0; i <= i_finish; ++i){
      typeArray[i] = record[i - index | 0];
    }
    return typeArray;
  }
  
  function setFloat3ByTuple(index, param, typeArray) {
    typeArray[index] = param[0];
    typeArray[index + 1 | 0] = param[1];
    typeArray[index + 2 | 0] = param[2];
    return typeArray;
  }
  
  function setFloat4ByTuple(index, param, typeArray) {
    typeArray[index] = param[0];
    typeArray[index + 1 | 0] = param[1];
    typeArray[index + 2 | 0] = param[2];
    typeArray[index + 3 | 0] = param[3];
    return typeArray;
  }
  
  function getFloat16TypeArray(index, typeArray) {
    return typeArray.subarray(index, index + 16 | 0);
  }
  
  function setFloat16(index, record, typeArray) {
    requireCheck((function () {
            var len = record.length;
            return test(buildAssertMessage("record.length === 16", "is " + (String(len) + "")), (function () {
                          return Operators[/* = */0](len, 16);
                        }));
          }), getIsDebug(stateData));
    for(var i = index ,i_finish = index + 15 | 0; i <= i_finish; ++i){
      typeArray[i] = record[i - index | 0];
    }
    return typeArray;
  }
  
  function fillFloat32ArrayWithOffset(targetTypeArr, sourceTypeArr, offset) {
    requireCheck((function () {
            test(buildAssertMessage("offset should >= 0", "is " + (String(offset) + "")), (function () {
                    return Operators[/* >= */7](offset, 0);
                  }));
            var sourceTypeArrLen = sourceTypeArr.length;
            var targetTypeArrLen = targetTypeArr.length;
            return test(buildAssertMessage("sourceTypeArr.length:" + (String(sourceTypeArrLen) + (" + offset:" + (String(offset) + (" <= targetTypeArr.length:" + (String(targetTypeArrLen) + ""))))), ""), (function () {
                          return Operators[/* <= */11](sourceTypeArrLen + offset | 0, targetTypeArrLen);
                        }));
          }), getIsDebug(stateData));
    targetTypeArr.set(sourceTypeArr, offset);
    return /* () */0;
  }
  
  function getFloat32ArraySubarray(typeArray, startIndex, endIndex) {
    return typeArray.subarray(startIndex, endIndex);
  }
  
  function fillUint16ArrayWithOffset(targetTypeArr, sourceTypeArr, offset) {
    requireCheck((function () {
            test(buildAssertMessage("offset should >= 0", "is " + (String(offset) + "")), (function () {
                    return Operators[/* >= */7](offset, 0);
                  }));
            var sourceTypeArrLen = sourceTypeArr.length;
            var targetTypeArrLen = targetTypeArr.length;
            return test(buildAssertMessage("sourceTypeArr.length:" + (String(sourceTypeArrLen) + (" + offset:" + (String(offset) + (" <= targetTypeArr.length:" + (String(targetTypeArrLen) + ""))))), ""), (function () {
                          return Operators[/* <= */11](sourceTypeArrLen + offset | 0, targetTypeArrLen);
                        }));
          }), getIsDebug(stateData));
    targetTypeArr.set(sourceTypeArr, offset);
    return /* () */0;
  }
  
  function getUint16ArraySubarray(typeArray, startIndex, endIndex) {
    return typeArray.subarray(startIndex, endIndex);
  }
  
  function _setFloat32ArrayWithFloat32Array(targetTypeArr, sourceTypeArr, typeArrIndex, i) {
    targetTypeArr[typeArrIndex] = sourceTypeArr[i];
    return /* () */0;
  }
  
  function _setUint8ArrayWithUint8Array(targetTypeArr, sourceTypeArr, typeArrIndex, i) {
    targetTypeArr[typeArrIndex] = sourceTypeArr[i];
    return /* () */0;
  }
  
  function _setUint16ArrayWithUint16Array(targetTypeArr, sourceTypeArr, typeArrIndex, i) {
    targetTypeArr[typeArrIndex] = sourceTypeArr[i];
    return /* () */0;
  }
  
  function _setUint32ArrayWithUint32Array(targetTypeArr, sourceTypeArr, typeArrIndex, i) {
    targetTypeArr[typeArrIndex] = sourceTypeArr[i];
    return /* () */0;
  }
  
  function _fillTypeArrayWithTypeArr(param, param$1, endIndex, _setTypeArrWithTypeArr) {
    var sourceTypeArr = param$1[0];
    var targetTypeArr = param[0];
    var typeArrIndex = param[1];
    for(var i = param$1[1] ,i_finish = endIndex - 1 | 0; i <= i_finish; ++i){
      _setTypeArrWithTypeArr(targetTypeArr, sourceTypeArr, typeArrIndex, i);
      typeArrIndex = typeArrIndex + 1 | 0;
    }
    return typeArrIndex;
  }
  
  function fillUint8ArrayWithUint8Array(targetData, sourceData, endIndex) {
    return _fillTypeArrayWithTypeArr(targetData, sourceData, endIndex, _setUint8ArrayWithUint8Array);
  }
  
  function fillUint16ArrayWithUint16Array(targetData, sourceData, endIndex) {
    return _fillTypeArrayWithTypeArr(targetData, sourceData, endIndex, _setUint16ArrayWithUint16Array);
  }
  
  function fillUint32ArrayWithUint32Array(targetData, sourceData, endIndex) {
    return _fillTypeArrayWithTypeArr(targetData, sourceData, endIndex, _setUint32ArrayWithUint32Array);
  }
  
  function fillFloat32ArrayWithFloat32Array(targetData, sourceData, endIndex) {
    return _fillTypeArrayWithTypeArr(targetData, sourceData, endIndex, _setFloat32ArrayWithFloat32Array);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function getLocalToWorldMatrixTypeArray(index, typeArr) {
    return getFloat16TypeArray(getLocalToWorldMatrixIndex(index), typeArr);
  }
  
  function setLocalToWorldMatrix(index, data, typeArr) {
    return setFloat16(getLocalToWorldMatrixIndex(index), data, typeArr);
  }
  
  function getLocalPositionTuple(index, typeArr) {
    return getFloat3Tuple(getLocalPositionIndex(index), typeArr);
  }
  
  function setLocalPosition$1(index, data, typeArr) {
    return setFloat3(getLocalPositionIndex(index), data, typeArr);
  }
  
  function setLocalPositionByTuple(index, dataTuple, typeArr) {
    return setFloat3ByTuple(getLocalPositionIndex(index), dataTuple, typeArr);
  }
  
  function getLocalRotationTuple(index, typeArr) {
    return getFloat4Tuple(getLocalRotationIndex(index), typeArr);
  }
  
  function setLocalRotation$1(index, data, typeArr) {
    return setFloat4(getLocalRotationIndex(index), data, typeArr);
  }
  
  function setLocalRotationByTuple(index, dataTuple, typeArr) {
    return setFloat4ByTuple(getLocalRotationIndex(index), dataTuple, typeArr);
  }
  
  function getLocalScaleTuple(index, typeArr) {
    return getFloat3Tuple(getLocalScaleIndex(index), typeArr);
  }
  
  function setLocalScale$1(index, data, typeArr) {
    return setFloat3(getLocalScaleIndex(index), data, typeArr);
  }
  
  function setLocalScaleByTuple(index, dataTuple, typeArr) {
    return setFloat3ByTuple(getLocalScaleIndex(index), dataTuple, typeArr);
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function getRecord(param) {
    return unsafeGet$2(param[/* transformRecord */12]);
  }
  
  function setAllTypeArrDataToDefault(count, param, param$1) {
    var defaultLocalScale = param[3];
    var defaultLocalRotation = param[2];
    var defaultLocalPosition = param[1];
    var defaultLocalToWorldMatrix = param[0];
    return reduceOneParam((function (param, index) {
                  return /* tuple */[
                          setLocalToWorldMatrix(index, defaultLocalToWorldMatrix, param[0]),
                          setLocalPosition$1(index, defaultLocalPosition, param[1]),
                          setLocalRotation$1(index, defaultLocalRotation, param[2]),
                          setLocalScale$1(index, defaultLocalScale, param[3])
                        ];
                }), /* tuple */[
                param$1[0],
                param$1[1],
                param$1[2],
                param$1[3]
              ], range(0, count - 1 | 0));
  }
  
  function _setAllTypeArrDataToDefault(count, defaultDataTuple, param) {
    return /* tuple */[
            param[0],
            setAllTypeArrDataToDefault(count, defaultDataTuple, /* tuple */[
                  param[1],
                  param[2],
                  param[3],
                  param[4]
                ])
          ];
  }
  
  function _initBufferData(count, defaultDataTuple) {
    var buffer = createBuffer(count);
    var match = createTypeArrays(buffer, count);
    return _setAllTypeArrDataToDefault(count, defaultDataTuple, /* tuple */[
                buffer,
                match[0],
                match[1],
                match[2],
                match[3]
              ]);
  }
  
  function _createForWorker(transformCount, defaultDataTuple, param, state) {
    var match = _initBufferData(transformCount, defaultDataTuple);
    var match$1 = match[1];
    state[/* transformRecord */12] = /* record */[
      /* index */0,
      /* buffer */param[0],
      /* localToWorldMatrices */param[1],
      /* localPositions */param[2],
      /* localRotations */param[3],
      /* localScales */param[4],
      /* copiedBuffer */some(match[0]),
      /* copiedLocalToWorldMatrices */some(match$1[0]),
      /* copiedLocalPositions */some(match$1[1]),
      /* copiedLocalRotations */some(match$1[2]),
      /* copiedLocalScales */some(match$1[3]),
      /* defaultLocalToWorldMatrix */defaultDataTuple[0],
      /* defaultLocalPosition */defaultDataTuple[1],
      /* defaultLocalRotation */defaultDataTuple[2],
      /* defaultLocalScale */defaultDataTuple[3],
      /* parentMap */createEmpty$2(/* () */0),
      /* childMap */createEmpty$2(/* () */0),
      /* gameObjectMap */createEmpty$2(/* () */0),
      /* dirtyMap */createEmpty$2(/* () */0),
      /* localToWorldMatrixCacheMap */createEmpty$2(/* () */0),
      /* normalMatrixCacheMap */createEmpty$2(/* () */0),
      /* disposedIndexArray */createEmpty(/* () */0)
    ];
    return state;
  }
  
  function _createForNoWorker(param, param$1, state) {
    state[/* transformRecord */12] = /* record */[
      /* index */0,
      /* buffer */param$1[0],
      /* localToWorldMatrices */param$1[1],
      /* localPositions */param$1[2],
      /* localRotations */param$1[3],
      /* localScales */param$1[4],
      /* copiedBuffer */undefined,
      /* copiedLocalToWorldMatrices */undefined,
      /* copiedLocalPositions */undefined,
      /* copiedLocalRotations */undefined,
      /* copiedLocalScales */undefined,
      /* defaultLocalToWorldMatrix */param[0],
      /* defaultLocalPosition */param[1],
      /* defaultLocalRotation */param[2],
      /* defaultLocalScale */param[3],
      /* parentMap */createEmpty$2(/* () */0),
      /* childMap */createEmpty$2(/* () */0),
      /* gameObjectMap */createEmpty$2(/* () */0),
      /* dirtyMap */createEmpty$2(/* () */0),
      /* localToWorldMatrixCacheMap */createEmpty$2(/* () */0),
      /* normalMatrixCacheMap */createEmpty$2(/* () */0),
      /* disposedIndexArray */createEmpty(/* () */0)
    ];
    return state;
  }
  
  function create$2(state) {
    var transformCount = getTransformCount(state[/* settingRecord */1]);
    var defaultLocalToWorldMatrix = /* array */[
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ];
    var defaultLocalPosition = /* array */[
      0,
      0,
      0
    ];
    var defaultLocalRotation = /* array */[
      0,
      0,
      0,
      1
    ];
    var defaultLocalScale = /* array */[
      1,
      1,
      1
    ];
    var defaultDataTuple = /* tuple */[
      defaultLocalToWorldMatrix,
      defaultLocalPosition,
      defaultLocalRotation,
      defaultLocalScale
    ];
    var match = _initBufferData(transformCount, defaultDataTuple);
    var match$1 = match[1];
    var localScales = match$1[3];
    var localRotations = match$1[2];
    var localPositions = match$1[1];
    var localToWorldMatrices = match$1[0];
    var buffer = match[0];
    var match$2 = isUseWorker(state);
    if (match$2) {
      return _createForWorker(transformCount, defaultDataTuple, /* tuple */[
                  buffer,
                  localToWorldMatrices,
                  localPositions,
                  localRotations,
                  localScales
                ], state);
    } else {
      return _createForNoWorker(defaultDataTuple, /* tuple */[
                  buffer,
                  localToWorldMatrices,
                  localPositions,
                  localRotations,
                  localScales
                ], state);
    }
  }
  
  function deepCopyForRestore(state) {
    var record = getRecord(state);
    var index = record[/* index */0];
    var localToWorldMatrices = record[/* localToWorldMatrices */2];
    var localPositions = record[/* localPositions */3];
    var localRotations = record[/* localRotations */4];
    var localScales = record[/* localScales */5];
    var parentMap = record[/* parentMap */15];
    var childMap = record[/* childMap */16];
    var gameObjectMap = record[/* gameObjectMap */17];
    var dirtyMap = record[/* dirtyMap */18];
    var disposedIndexArray = record[/* disposedIndexArray */21];
    var newrecord = caml_array_dup(state);
    newrecord[/* transformRecord */12] = /* record */[
      /* index */record[/* index */0],
      /* buffer */record[/* buffer */1],
      /* localToWorldMatrices */copyFloat32ArrayWithEndIndex(imul(index, getLocalToWorldMatricesSize(/* () */0)), localToWorldMatrices),
      /* localPositions */copyFloat32ArrayWithEndIndex(imul(index, getLocalPositionsSize(/* () */0)), localPositions),
      /* localRotations */copyFloat32ArrayWithEndIndex(imul(index, getLocalRotationsSize(/* () */0)), localRotations),
      /* localScales */copyFloat32ArrayWithEndIndex(imul(index, getLocalScalesSize(/* () */0)), localScales),
      /* copiedBuffer */record[/* copiedBuffer */6],
      /* copiedLocalToWorldMatrices */record[/* copiedLocalToWorldMatrices */7],
      /* copiedLocalPositions */record[/* copiedLocalPositions */8],
      /* copiedLocalRotations */record[/* copiedLocalRotations */9],
      /* copiedLocalScales */record[/* copiedLocalScales */10],
      /* defaultLocalToWorldMatrix */record[/* defaultLocalToWorldMatrix */11],
      /* defaultLocalPosition */record[/* defaultLocalPosition */12],
      /* defaultLocalRotation */record[/* defaultLocalRotation */13],
      /* defaultLocalScale */record[/* defaultLocalScale */14],
      /* parentMap */copy(parentMap),
      /* childMap */deepCopyArrayArray(childMap),
      /* gameObjectMap */copy(gameObjectMap),
      /* dirtyMap */copy(dirtyMap),
      /* localToWorldMatrixCacheMap */createEmpty$2(/* () */0),
      /* normalMatrixCacheMap */createEmpty$2(/* () */0),
      /* disposedIndexArray */disposedIndexArray.slice()
    ];
    return newrecord;
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function _setDefaultChildren(index, childMap) {
    return set$1(index, createEmpty(/* () */0), childMap);
  }
  
  function _initDataWhenCreate(index, transformRecord) {
    var childMap = transformRecord[/* childMap */16];
    var match = has$1(index, childMap);
    if (match) {
      return transformRecord;
    } else {
      var newrecord = caml_array_dup(transformRecord);
      newrecord[/* childMap */16] = _setDefaultChildren(index, childMap);
      return newrecord;
    }
  }
  
  function createWithoutMarkNotDirtyWithRecord(settingRecord, transformRecord) {
    var index = transformRecord[/* index */0];
    var disposedIndexArray = transformRecord[/* disposedIndexArray */21];
    var match = generateIndex(index, disposedIndexArray);
    var index$1 = match[0];
    transformRecord[/* index */0] = match[1];
    var transformRecord$1 = _initDataWhenCreate(index$1, transformRecord);
    transformRecord$1[/* disposedIndexArray */21] = match[2];
    return checkNotExceedMaxCount(getTransformCount(settingRecord), /* tuple */[
                transformRecord$1,
                index$1
              ]);
  }
  
  function createWithoutMarkNotDirty(state) {
    var match = createWithoutMarkNotDirtyWithRecord(state[/* settingRecord */1], getRecord(state));
    state[/* transformRecord */12] = match[0];
    return /* tuple */[
            state,
            match[1]
          ];
  }
  
  function create$1(state) {
    var match = createWithoutMarkNotDirty(state);
    var index = match[1];
    var state$1 = match[0];
    state$1[/* transformRecord */12] = mark(index, true, getRecord(state$1));
    return /* tuple */[
            state$1,
            index
          ];
  }
  
  
  /* BufferService-Wonderjs Not a pure module */
  
  var getGameObject$1 = get$3;
  
  function unsafeGetGameObject$1(component, gameObjectMap) {
    return ensureCheck((function (gameObject) {
                  return test(buildAssertMessage("component\'s gameObject exist", "not"), (function () {
                                return assertNullableExist(gameObject);
                              }));
                }), getIsDebug(stateData), unsafeGet$1(component, gameObjectMap));
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function unsafeGetGameObject(transform, param) {
    var gameObjectMap = param[/* gameObjectMap */17];
    return unsafeGetGameObject$1(transform, gameObjectMap);
  }
  
  
  /* GameObjectMapService-Wonderjs Not a pure module */
  
  function getDegToRad() {
    return Math.PI / 180;
  }
  
  
  /* No side effect */
  
  function add$1(_, param, param$1) {
    return /* tuple */[
            param[0] + param$1[0],
            param[1] + param$1[1],
            param[2] + param$1[2]
          ];
  }
  
  function sub$1(_, param, param$1) {
    return /* tuple */[
            param[0] - param$1[0],
            param[1] - param$1[1],
            param[2] - param$1[2]
          ];
  }
  
  function scale(_, scalar, param) {
    return /* tuple */[
            param[0] * scalar,
            param[1] * scalar,
            param[2] * scalar
          ];
  }
  
  function lerp(param, param$1, t) {
    var z1 = param[2];
    var y1 = param[1];
    var x1 = param[0];
    return /* tuple */[
            x1 + t * (param$1[0] - x1),
            y1 + t * (param$1[1] - y1),
            z1 + t * (param$1[2] - z1)
          ];
  }
  
  function cross(param, param$1) {
    var z2 = param$1[2];
    var y2 = param$1[1];
    var x2 = param$1[0];
    var z1 = param[2];
    var y1 = param[1];
    var x1 = param[0];
    return /* tuple */[
            y1 * z2 - y2 * z1,
            z1 * x2 - z2 * x1,
            x1 * y2 - x2 * y1
          ];
  }
  
  function normalize(param) {
    var z = param[2];
    var y = param[1];
    var x = param[0];
    var d = Math.sqrt(x * x + y * y + z * z);
    var match = d === 0;
    if (match) {
      return /* tuple */[
              0,
              0,
              0
            ];
    } else {
      return /* tuple */[
              x / d,
              y / d,
              z / d
            ];
    }
  }
  
  var transformQuat = function (a,q){
       // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
      let qx = q[0], qy = q[1], qz = q[2], qw = q[3];
      let x = a[0], y = a[1], z = a[2];
      // var qvec = [qx, qy, qz];
      // var uv = vec3.cross([], qvec, a);
      let uvx = qy * z - qz * y,
          uvy = qz * x - qx * z,
          uvz = qx * y - qy * x;
      // var uuv = vec3.cross([], qvec, uv);
      let uuvx = qy * uvz - qz * uvy,
          uuvy = qz * uvx - qx * uvz,
          uuvz = qx * uvy - qy * uvx;
      // vec3.scale(uv, uv, 2 * w);
      let w2 = qw * 2;
      uvx *= w2;
      uvy *= w2;
      uvz *= w2;
      // vec3.scale(uuv, uuv, 2);
      uuvx *= 2;
      uuvy *= 2;
      uuvz *= 2;
      // return vec3.add(out, a, vec3.add(out, uv, uuv));
  
      return [
  
  x + uvx + uuvx,
  y + uvy + uuvy,
  z + uvz + uuvz
  
      ]
  
    };
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  
  function createIdentityMatrix4$1() {
    return new Float32Array(/* array */[
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1
              ]);
  }
  
  function ortho(left, right, bottom, top, near, far, resultFloat32Arr) {
    var lr = 1 / (left - right);
    var bt = 1 / (bottom - top);
    var nf = 1 / (near - far);
    resultFloat32Arr[0] = -2 * lr;
    resultFloat32Arr[1] = 0;
    resultFloat32Arr[2] = 0;
    resultFloat32Arr[3] = 0;
    resultFloat32Arr[4] = 0;
    resultFloat32Arr[5] = -2 * bt;
    resultFloat32Arr[6] = 0;
    resultFloat32Arr[7] = 0;
    resultFloat32Arr[8] = 0;
    resultFloat32Arr[9] = 0;
    resultFloat32Arr[10] = 2 * nf;
    resultFloat32Arr[11] = 0;
    resultFloat32Arr[12] = (left + right) * lr;
    resultFloat32Arr[13] = (top + bottom) * bt;
    resultFloat32Arr[14] = (far + near) * nf;
    resultFloat32Arr[15] = 1;
    return resultFloat32Arr;
  }
  
  
  /* No side effect */
  
  function createIdentityMatrix4() {
    return createIdentityMatrix4$1(/* () */0);
  }
  
  function fromTranslationRotationScale(param, param$1, param$2, resultFloat32Arr) {
    var sz = param$2[2];
    var sy = param$2[1];
    var sx = param$2[0];
    var w = param$1[3];
    var z = param$1[2];
    var y = param$1[1];
    var x = param$1[0];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    resultFloat32Arr[0] = (1 - (yy + zz)) * sx;
    resultFloat32Arr[1] = (xy + wz) * sx;
    resultFloat32Arr[2] = (xz - wy) * sx;
    resultFloat32Arr[3] = 0;
    resultFloat32Arr[4] = (xy - wz) * sy;
    resultFloat32Arr[5] = (1 - (xx + zz)) * sy;
    resultFloat32Arr[6] = (yz + wx) * sy;
    resultFloat32Arr[7] = 0;
    resultFloat32Arr[8] = (xz + wy) * sz;
    resultFloat32Arr[9] = (yz - wx) * sz;
    resultFloat32Arr[10] = (1 - (xx + yy)) * sz;
    resultFloat32Arr[11] = 0;
    resultFloat32Arr[12] = param[0];
    resultFloat32Arr[13] = param[1];
    resultFloat32Arr[14] = param[2];
    resultFloat32Arr[15] = 1;
    return resultFloat32Arr;
  }
  
  function getX(matTypeArr) {
    return /* tuple */[
            matTypeArr[0],
            matTypeArr[1],
            matTypeArr[2]
          ];
  }
  
  function getY(matTypeArr) {
    return /* tuple */[
            matTypeArr[4],
            matTypeArr[5],
            matTypeArr[6]
          ];
  }
  
  function getTranslationTuple(matTypeArr) {
    return /* tuple */[
            matTypeArr[12],
            matTypeArr[13],
            matTypeArr[14]
          ];
  }
  
  function getRotationTuple(matTypeArr) {
    var trace = matTypeArr[0] + matTypeArr[5] + matTypeArr[10];
    if (trace > 0) {
      var s = Math.sqrt(trace + 1.0) * 2;
      return /* tuple */[
              (matTypeArr[6] - matTypeArr[9]) / s,
              (matTypeArr[8] - matTypeArr[2]) / s,
              (matTypeArr[1] - matTypeArr[4]) / s,
              0.25 * s
            ];
    } else if (matTypeArr[0] > matTypeArr[5] && matTypeArr[0] > matTypeArr[10]) {
      var s$1 = Math.sqrt(1.0 + matTypeArr[0] - matTypeArr[5] - matTypeArr[10]) * 2;
      return /* tuple */[
              0.25 * s$1,
              (matTypeArr[1] + matTypeArr[4]) / s$1,
              (matTypeArr[8] + matTypeArr[2]) / s$1,
              (matTypeArr[6] - matTypeArr[9]) / s$1
            ];
    } else if (matTypeArr[5] > matTypeArr[10]) {
      var s$2 = Math.sqrt(1.0 + matTypeArr[5] - matTypeArr[0] - matTypeArr[10]) * 2;
      return /* tuple */[
              (matTypeArr[1] + matTypeArr[4]) / s$2,
              0.25 * s$2,
              (matTypeArr[6] + matTypeArr[9]) / s$2,
              (matTypeArr[8] - matTypeArr[2]) / s$2
            ];
    } else {
      var s$3 = Math.sqrt(1.0 + matTypeArr[10] - matTypeArr[0] - matTypeArr[5]) * 2;
      return /* tuple */[
              (matTypeArr[8] + matTypeArr[2]) / s$3,
              (matTypeArr[6] + matTypeArr[9]) / s$3,
              0.25 * s$3,
              (matTypeArr[1] - matTypeArr[4]) / s$3
            ];
    }
  }
  
  function multiply(aMatTypeArr, bMatTypeArr, resultFloat32Arr) {
    var a00 = aMatTypeArr[0];
    var a01 = aMatTypeArr[1];
    var a02 = aMatTypeArr[2];
    var a03 = aMatTypeArr[3];
    var a10 = aMatTypeArr[4];
    var a11 = aMatTypeArr[5];
    var a12 = aMatTypeArr[6];
    var a13 = aMatTypeArr[7];
    var a20 = aMatTypeArr[8];
    var a21 = aMatTypeArr[9];
    var a22 = aMatTypeArr[10];
    var a23 = aMatTypeArr[11];
    var a30 = aMatTypeArr[12];
    var a31 = aMatTypeArr[13];
    var a32 = aMatTypeArr[14];
    var a33 = aMatTypeArr[15];
    var b0 = bMatTypeArr[0];
    var b1 = bMatTypeArr[1];
    var b2 = bMatTypeArr[2];
    var b3 = bMatTypeArr[3];
    resultFloat32Arr[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    resultFloat32Arr[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    resultFloat32Arr[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    resultFloat32Arr[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = bMatTypeArr[4];
    b1 = bMatTypeArr[5];
    b2 = bMatTypeArr[6];
    b3 = bMatTypeArr[7];
    resultFloat32Arr[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    resultFloat32Arr[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    resultFloat32Arr[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    resultFloat32Arr[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = bMatTypeArr[8];
    b1 = bMatTypeArr[9];
    b2 = bMatTypeArr[10];
    b3 = bMatTypeArr[11];
    resultFloat32Arr[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    resultFloat32Arr[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    resultFloat32Arr[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    resultFloat32Arr[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = bMatTypeArr[12];
    b1 = bMatTypeArr[13];
    b2 = bMatTypeArr[14];
    b3 = bMatTypeArr[15];
    resultFloat32Arr[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    resultFloat32Arr[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    resultFloat32Arr[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    resultFloat32Arr[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return resultFloat32Arr;
  }
  
  function buildPerspective(param, resultFloat32Arr) {
    var far = param[3];
    var near = param[2];
    var fovy = param[0];
    requireCheck((function () {
            return test(buildAssertMessage("frustum not be null", "be"), (function () {
                          var fovy$1 = Math.PI * fovy / 180 / 2;
                          return Operators[/* <>=. */4](Math.sin(fovy$1), 0);
                        }));
          }), getIsDebug(stateData));
    var fovy$1 = Math.PI * fovy / 180 / 2;
    var s = Math.sin(fovy$1);
    var rd = 1 / (far - near);
    var ct = Math.cos(fovy$1) / s;
    resultFloat32Arr[0] = ct / param[1];
    resultFloat32Arr[1] = 0;
    resultFloat32Arr[2] = 0;
    resultFloat32Arr[3] = 0;
    resultFloat32Arr[4] = 0;
    resultFloat32Arr[5] = ct;
    resultFloat32Arr[6] = 0;
    resultFloat32Arr[7] = 0;
    resultFloat32Arr[8] = 0;
    resultFloat32Arr[9] = 0;
    resultFloat32Arr[10] = -(far + near) * rd;
    resultFloat32Arr[11] = -1;
    resultFloat32Arr[12] = 0;
    resultFloat32Arr[13] = 0;
    resultFloat32Arr[14] = -2 * far * near * rd;
    resultFloat32Arr[15] = 0;
    return resultFloat32Arr;
  }
  
  function invert(mat, resultFloat32Arr) {
    var a00 = mat[0];
    var a01 = mat[1];
    var a02 = mat[2];
    var a03 = mat[3];
    var a10 = mat[4];
    var a11 = mat[5];
    var a12 = mat[6];
    var a13 = mat[7];
    var a20 = mat[8];
    var a21 = mat[9];
    var a22 = mat[10];
    var a23 = mat[11];
    var a30 = mat[12];
    var a31 = mat[13];
    var a32 = mat[14];
    var a33 = mat[15];
    var b00 = a00 * a11 - a01 * a10;
    var b01 = a00 * a12 - a02 * a10;
    var b02 = a00 * a13 - a03 * a10;
    var b03 = a01 * a12 - a02 * a11;
    var b04 = a01 * a13 - a03 * a11;
    var b05 = a02 * a13 - a03 * a12;
    var b06 = a20 * a31 - a21 * a30;
    var b07 = a20 * a32 - a22 * a30;
    var b08 = a20 * a33 - a23 * a30;
    var b09 = a21 * a32 - a22 * a31;
    var b10 = a21 * a33 - a23 * a31;
    var b11 = a22 * a33 - a23 * a32;
    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    var match = det;
    if (match !== 0) {
      det = 1.0 / det;
      resultFloat32Arr[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
      resultFloat32Arr[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
      resultFloat32Arr[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
      resultFloat32Arr[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
      resultFloat32Arr[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
      resultFloat32Arr[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
      resultFloat32Arr[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
      resultFloat32Arr[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
      resultFloat32Arr[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
      resultFloat32Arr[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
      resultFloat32Arr[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
      resultFloat32Arr[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
      resultFloat32Arr[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
      resultFloat32Arr[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
      resultFloat32Arr[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
      resultFloat32Arr[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
      return resultFloat32Arr;
    } else {
      return fatal(buildFatalMessage("invert", "det shouldn\'t be 0.", "", "", ""));
    }
  }
  
  function invertTo3x3(mat, resultFloat32Arr) {
    var a00 = mat[0];
    var a01 = mat[1];
    var a02 = mat[2];
    var a10 = mat[4];
    var a11 = mat[5];
    var a12 = mat[6];
    var a20 = mat[8];
    var a21 = mat[9];
    var a22 = mat[10];
    var b11 = a22 * a11 - a12 * a21;
    var b21 = -a22 * a01 + a02 * a21;
    var b31 = a12 * a01 - a02 * a11;
    var b12 = -a22 * a10 + a12 * a20;
    var b22 = a22 * a00 - a02 * a20;
    var b32 = -a12 * a00 + a02 * a10;
    var b13 = a21 * a10 - a11 * a20;
    var b23 = -a21 * a00 + a01 * a20;
    var b33 = a11 * a00 - a01 * a10;
    var det = a00 * b11 + a01 * b12 + a02 * b13;
    var match = det;
    if (match !== 0) {
      det = 1.0 / det;
      resultFloat32Arr[0] = b11 * det;
      resultFloat32Arr[1] = b21 * det;
      resultFloat32Arr[2] = b31 * det;
      resultFloat32Arr[3] = b12 * det;
      resultFloat32Arr[4] = b22 * det;
      resultFloat32Arr[5] = b32 * det;
      resultFloat32Arr[6] = b13 * det;
      resultFloat32Arr[7] = b23 * det;
      resultFloat32Arr[8] = b33 * det;
      return resultFloat32Arr;
    } else {
      return fatal(buildFatalMessage("invertTo3x3", "det shouldn\'t be 0.", "", "", ""));
    }
  }
  
  function setLookAt(eye, center, up) {
    var z = normalize(sub$1(/* Float */0, eye, center));
    var y = normalize(up);
    var x = normalize(cross(y, z));
    var match = cross(z, x);
    return new Float32Array(/* array */[
                x[0],
                x[1],
                x[2],
                0,
                match[0],
                match[1],
                match[2],
                0,
                z[0],
                z[1],
                z[2],
                0,
                eye[0],
                eye[1],
                eye[2],
                1
              ]);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function conjugate(param) {
    return /* tuple */[
            param[0] * -1.0,
            param[1] * -1.0,
            param[2] * -1.0,
            param[3]
          ];
  }
  
  function length$2(param) {
    var w = param[3];
    var z = param[2];
    var y = param[1];
    var x = param[0];
    return Math.sqrt(x * x + y * y + z * z + w * w);
  }
  
  function normalize$1(tuple) {
    var len = length$2(tuple);
    if (len !== 0) {
      return /* tuple */[
              tuple[0] / len,
              tuple[1] / len,
              tuple[2] / len,
              tuple[3] / len
            ];
    } else {
      return /* tuple */[
              0,
              0,
              0,
              1
            ];
    }
  }
  
  function invert$1(tuple) {
    return normalize$1(conjugate(tuple));
  }
  
  function multiply$2(param, param$1) {
    var q2w = param$1[3];
    var q2z = param$1[2];
    var q2y = param$1[1];
    var q2x = param$1[0];
    var q1w = param[3];
    var q1z = param[2];
    var q1y = param[1];
    var q1x = param[0];
    return /* tuple */[
            q1w * q2x + q1x * q2w + q1y * q2z - q1z * q2y,
            q1w * q2y + q1y * q2w + q1z * q2x - q1x * q2z,
            q1w * q2z + q1z * q2w + q1x * q2y - q1y * q2x,
            q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z
          ];
  }
  
  var setFromMatrix = function (matrixTypeArray){
               var m00, m01, m02, m10, m11, m12, m20, m21, m22,
                  tr, s, rs, lx, ly, lz, m;
                  var x,y,z,w;
  
              m = matrixTypeArray;
  
              // Cache matrix values for super-speed
              m00 = m[0];
              m01 = m[1];
              m02 = m[2];
              m10 = m[4];
              m11 = m[5];
              m12 = m[6];
              m20 = m[8];
              m21 = m[9];
              m22 = m[10];
  
              // Remove the scale from the matrix
              lx = 1 / Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);
              ly = 1 / Math.sqrt(m10 * m10 + m11 * m11 + m12 * m12);
              lz = 1 / Math.sqrt(m20 * m20 + m21 * m21 + m22 * m22);
  
              m00 *= lx;
              m01 *= lx;
              m02 *= lx;
              m10 *= ly;
              m11 *= ly;
              m12 *= ly;
              m20 *= lz;
              m21 *= lz;
              m22 *= lz;
  
              // http://www.cs.ucr.edu/~vbz/resources/quatut.pdf
  
              tr = m00 + m11 + m22;
              if (tr >= 0) {
                  s = Math.sqrt(tr + 1);
                  w = s * 0.5;
                  s = 0.5 / s;
                  x = (m12 - m21) * s;
                  y = (m20 - m02) * s;
                  z = (m01 - m10) * s;
              } else {
                  if (m00 > m11) {
                      if (m00 > m22) {
                          // XDiagDomMatrix
                          rs = (m00 - (m11 + m22)) + 1;
                          rs = Math.sqrt(rs);
  
                          x = rs * 0.5;
                          rs = 0.5 / rs;
                          w = (m12 - m21) * rs;
                          y = (m01 + m10) * rs;
                          z = (m02 + m20) * rs;
                      } else {
                          // ZDiagDomMatrix
                          rs = (m22 - (m00 + m11)) + 1;
                          rs = Math.sqrt(rs);
  
                          z = rs * 0.5;
                          rs = 0.5 / rs;
                          w = (m01 - m10) * rs;
                          x = (m20 + m02) * rs;
                          y = (m21 + m12) * rs;
                      }
                  } else if (m11 > m22) {
                      // YDiagDomMatrix
                      rs = (m11 - (m22 + m00)) + 1;
                      rs = Math.sqrt(rs);
  
                      y = rs * 0.5;
                      rs = 0.5 / rs;
                      w = (m20 - m02) * rs;
                      z = (m12 + m21) * rs;
                      x = (m10 + m01) * rs;
                  } else {
                      // ZDiagDomMatrix
                      rs = (m22 - (m00 + m11)) + 1;
                      rs = Math.sqrt(rs);
  
                      z = rs * 0.5;
                      rs = 0.5 / rs;
                      w = (m01 - m10) * rs;
                      x = (m20 + m02) * rs;
                      y = (m21 + m12) * rs;
                  }
              }
  
              return [x,y,z,w]
    };
  
  function setFromEulerAngles(param) {
    var halfToRad = 0.5 * getDegToRad(/* () */0);
    var ex = param[0] * halfToRad;
    var ey = param[1] * halfToRad;
    var ez = param[2] * halfToRad;
    var sx = Math.sin(ex);
    var cx = Math.cos(ex);
    var sy = Math.sin(ey);
    var cy = Math.cos(ey);
    var sz = Math.sin(ez);
    var cz = Math.cos(ez);
    return /* tuple */[
            sx * cy * cz - cx * sy * sz,
            cx * sy * cz + sx * cy * sz,
            cx * cy * sz - sx * sy * cz,
            cx * cy * cz + sx * sy * sz
          ];
  }
  
  var _getEulerAngles = function (quat){
              var x, y, z, qx, qy, qz, qw, a2;
  
              qx = quat[0];
              qy = quat[1];
              qz = quat[2];
              qw = quat[3];
  
              a2 = 2 * (qw * qy - qx * qz);
              if (a2 <= -0.99999) {
                  x = 2 * Math.atan2(qx, qw);
                  y = -Math.PI / 2;
                  z = 0;
              } else if (a2 >= 0.99999) {
                  x = 2 * Math.atan2(qx, qw);
                  y = Math.PI / 2;
                  z = 0;
              } else {
                  x = Math.atan2(2 * (qw * qx + qy * qz), 1 - 2 * (qx * qx + qy * qy));
                  y = Math.asin(a2);
                  z = Math.atan2(2 * (qw * qz + qx * qy), 1 - 2 * (qy * qy + qz * qz));
              }
  
              //return Vector3.create(x, y, z).scale(RAD_TO_DEG);
              return [x, y, z];
      };
  
  function getEulerAngles$2(quat) {
    var rad_to_deg = 180 / Math.PI;
    return scale(/* Float */0, rad_to_deg, _getEulerAngles(quat));
  }
  
  
  /* No side effect */
  
  function getFloat32Array1(record) {
    return record[/* float16Array1 */0];
  }
  
  
  /* No side effect */
  
  function createIdentityMatrix3() {
    return new Float32Array(/* array */[
                1,
                0,
                0,
                1,
                0,
                0,
                1,
                0,
                0
              ]);
  }
  
  function transposeSelf$1(mat) {
    var a01 = mat[1];
    var a02 = mat[2];
    var a12 = mat[5];
    mat[1] = mat[3];
    mat[2] = mat[6];
    mat[3] = a01;
    mat[5] = mat[7];
    mat[6] = a02;
    mat[7] = a12;
    return mat;
  }
  
  
  /* No side effect */
  
  function getLocalToWorldMatrixTypeArray$1(transform, localToWorldMatrices, localToWorldMatrixCacheMap) {
    var match = get$3(transform, localToWorldMatrixCacheMap);
    if (match !== undefined) {
      return valFromOption(match);
    } else {
      var matrix = getLocalToWorldMatrixTypeArray(transform, localToWorldMatrices);
      set$1(transform, matrix, localToWorldMatrixCacheMap);
      return matrix;
    }
  }
  
  function _getNormalMatrixTypeArray(transform, localToWorldMatrices, param, getLocalToWorldMatrixTypeArrayFunc) {
    return transposeSelf$1(invertTo3x3(getLocalToWorldMatrixTypeArrayFunc(transform, localToWorldMatrices, param[0]), param[1]));
  }
  
  function getNormalMatrixTypeArray(transform, localToWorldMatrices, param) {
    var normalMatrixCacheMap = param[1];
    var match = get$3(transform, normalMatrixCacheMap);
    if (match !== undefined) {
      return valFromOption(match);
    } else {
      var matrix = _getNormalMatrixTypeArray(transform, localToWorldMatrices, /* tuple */[
            param[0],
            createIdentityMatrix3(/* () */0)
          ], getLocalToWorldMatrixTypeArray$1);
      set$1(transform, matrix, normalMatrixCacheMap);
      return matrix;
    }
  }
  
  var getLocalPositionTuple$1 = getLocalPositionTuple;
  
  function setLocalPositionByTuple$1(transform, dataTuple, record) {
    var localPositions = record[/* localPositions */3];
    setLocalPositionByTuple(transform, dataTuple, localPositions);
    return markHierachyDirty(transform, record);
  }
  
  var getLocalRotationTuple$1 = getLocalRotationTuple;
  
  function setLocalRotationByTuple$1(transform, dataTuple, record) {
    var localRotations = record[/* localRotations */4];
    setLocalRotationByTuple(transform, dataTuple, localRotations);
    return markHierachyDirty(transform, record);
  }
  
  function getLocalEulerAnglesTuple(transform, localRotations) {
    return getEulerAngles$2(getLocalRotationTuple(transform, localRotations));
  }
  
  function setLocalEulerAnglesByTuple(transform, eulerAngles, record) {
    var localRotations = record[/* localRotations */4];
    setLocalRotationByTuple(transform, setFromEulerAngles(eulerAngles), localRotations);
    return markHierachyDirty(transform, record);
  }
  
  var getLocalScaleTuple$1 = getLocalScaleTuple;
  
  function setLocalScaleByTuple$1(transform, dataTuple, record) {
    var localScales = record[/* localScales */5];
    setLocalScaleByTuple(transform, dataTuple, localScales);
    return markHierachyDirty(transform, record);
  }
  
  
  /* Matrix4Service-Wonderjs Not a pure module */
  
  function _clearCache(transform, record) {
    var normalMatrixCacheMap = record[/* normalMatrixCacheMap */20];
    deleteVal$1(transform, normalMatrixCacheMap);
    return record;
  }
  
  function update(transform, globalTempRecord, transformRecord) {
    var localPositions = transformRecord[/* localPositions */3];
    var localRotations = transformRecord[/* localRotations */4];
    var localScales = transformRecord[/* localScales */5];
    var match = isDirty(transform, transformRecord);
    if (match) {
      var transformRecord$1 = _clearCache(transform, mark(transform, false, transformRecord));
      var match$1 = getParent$2(transform, transformRecord$1);
      if (match$1 !== undefined) {
        var parent = match$1;
        var transformRecord$2 = update(parent, globalTempRecord, transformRecord$1);
        var parentLocalToWorldMatrix = getLocalToWorldMatrixTypeArray$1(parent, transformRecord$2[/* localToWorldMatrices */2], transformRecord$2[/* localToWorldMatrixCacheMap */19]);
        var childLocalToWorldMatrix = getLocalToWorldMatrixTypeArray$1(transform, transformRecord$2[/* localToWorldMatrices */2], transformRecord$2[/* localToWorldMatrixCacheMap */19]);
        multiply(parentLocalToWorldMatrix, fromTranslationRotationScale(getLocalPositionTuple$1(transform, localPositions), getLocalRotationTuple$1(transform, localRotations), getLocalScaleTuple$1(transform, localScales), getFloat32Array1(globalTempRecord)), childLocalToWorldMatrix);
        return transformRecord$2;
      } else {
        var localToWorldMatrix = getLocalToWorldMatrixTypeArray$1(transform, transformRecord$1[/* localToWorldMatrices */2], transformRecord$1[/* localToWorldMatrixCacheMap */19]);
        fromTranslationRotationScale(getLocalPositionTuple$1(transform, localPositions), getLocalRotationTuple$1(transform, localRotations), getLocalScaleTuple$1(transform, localScales), localToWorldMatrix);
        return transformRecord$1;
      }
    } else {
      return transformRecord;
    }
  }
  
  function updateAndGetLocalToWorldMatrixTypeArray(transform, globalTempRecord, record) {
    var record$1 = update(transform, globalTempRecord, record);
    return getLocalToWorldMatrixTypeArray$1(transform, record$1[/* localToWorldMatrices */2], record$1[/* localToWorldMatrixCacheMap */19]);
  }
  
  function updateAndGetPositionTuple(transform, globalTempRecord, record) {
    var match = update(transform, globalTempRecord, record);
    var localToWorldMatrices = match[/* localToWorldMatrices */2];
    var localToWorldMatrixCacheMap = match[/* localToWorldMatrixCacheMap */19];
    return getTranslationTuple(getLocalToWorldMatrixTypeArray$1(transform, localToWorldMatrices, localToWorldMatrixCacheMap));
  }
  
  function updateAndGetRotationTuple(transform, globalTempRecord, record) {
    var match = update(transform, globalTempRecord, record);
    var localToWorldMatrices = match[/* localToWorldMatrices */2];
    var localToWorldMatrixCacheMap = match[/* localToWorldMatrixCacheMap */19];
    return getRotationTuple(getLocalToWorldMatrixTypeArray$1(transform, localToWorldMatrices, localToWorldMatrixCacheMap));
  }
  
  function updateAndSetRotationByTuple(transform, rotation, globalTempRecord, record) {
    var match = getParent$2(transform, record);
    if (match !== undefined) {
      return setLocalRotationByTuple$1(transform, multiply$2(invert$1(updateAndGetRotationTuple(match, globalTempRecord, record)), rotation), record);
    } else {
      return setLocalRotationByTuple$1(transform, rotation, record);
    }
  }
  
  
  /* Matrix4Service-Wonderjs Not a pure module */
  
  function lookAt$1(transform, target, state, $staropt$star, _) {
    var up = $staropt$star !== undefined ? $staropt$star : /* tuple */[
        0,
        1,
        0
      ];
    var globalTempRecord = state[/* globalTempRecord */36];
    var transformRecord = getRecord(state);
    var __x = setFromMatrix(setLookAt(updateAndGetPositionTuple(transform, globalTempRecord, transformRecord), target, up));
    state[/* transformRecord */12] = updateAndSetRotationByTuple(transform, __x, globalTempRecord, transformRecord);
    return state;
  }
  
  
  /* Matrix4Service-Wonderjs Not a pure module */
  
  function isAlive$1(component, disposedIndexArray) {
    return !disposedIndexArray.includes(component);
  }
  
  function checkComponentShouldAlive$1(component, isAliveFunc, record) {
    return test(buildAssertMessage("dispose the alive component", "not"), (function () {
                  return assertTrue(_2(isAliveFunc, component, record));
                }));
  }
  
  function checkComponentShouldAliveWithBatchDispose(componentArr, isAliveFunc, record) {
    return forEach((function (component) {
                  return checkComponentShouldAlive$1(component, isAliveFunc, record);
                }), componentArr);
  }
  
  var disposeSparseMapData = deleteVal$1;
  
  function removeFromArray(target, arr) {
    var index = arr.indexOf(target);
    var lastIndex = arr.length - 1 | 0;
    deleteBySwap(index, lastIndex, arr);
    return arr;
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function deleteBySwapAndResetFloat32TypeArr(param, typeArr, length, defaultValueArr) {
    var targetIndex = param[1];
    var sourceIndex = param[0];
    for(var i = 0 ,i_finish = length - 1 | 0; i <= i_finish; ++i){
      typeArr[sourceIndex + i | 0] = typeArr[targetIndex + i | 0];
      typeArr[targetIndex + i | 0] = caml_array_get(defaultValueArr, i);
    }
    return typeArr;
  }
  
  function deleteSingleValueBySwapAndResetFloat32TypeArr(param, typeArr, _, defaultValue) {
    var targetIndex = param[1];
    typeArr[param[0]] = typeArr[targetIndex];
    typeArr[targetIndex] = defaultValue;
    return typeArr;
  }
  
  function deleteSingleValueBySwapUint32TypeArr(sourceIndex, lastIndex, typeArr) {
    typeArr[sourceIndex] = typeArr[lastIndex];
    return typeArr;
  }
  
  function deleteAndResetFloat32TypeArr(sourceIndex, length, defaultValueArr, typeArr) {
    for(var i = 0 ,i_finish = length - 1 | 0; i <= i_finish; ++i){
      typeArr[sourceIndex + i | 0] = caml_array_get(defaultValueArr, i);
    }
    return typeArr;
  }
  
  function deleteAndResetFloat32(sourceIndex, defaultValue, typeArr) {
    typeArr[sourceIndex] = defaultValue;
    return typeArr;
  }
  
  function deleteAndResetUint32(sourceIndex, defaultValue, typeArr) {
    typeArr[sourceIndex] = defaultValue;
    return typeArr;
  }
  
  function deleteAndResetUint8(sourceIndex, defaultValue, typeArr) {
    typeArr[sourceIndex] = defaultValue;
    return typeArr;
  }
  
  
  /* No side effect */
  
  function isAlive(transform, param) {
    var disposedIndexArray = param[/* disposedIndexArray */21];
    return isAlive$1(transform, disposedIndexArray);
  }
  
  function _disposeFromParentAndChildMap(transform, isKeepOrder, record) {
    reduceOneParam((function (record, child) {
            return removeFromParentMap(child, record);
          }), record, unsafeGetChildren(transform, record));
    var match = getParent$2(transform, record);
    if (match !== undefined) {
      return removeFromChildMap(match, transform, isKeepOrder, record);
    } else {
      return record;
    }
  }
  
  function _disposeData(transform, param, transformRecord) {
    var localToWorldMatrices = transformRecord[/* localToWorldMatrices */2];
    var localPositions = transformRecord[/* localPositions */3];
    var localRotations = transformRecord[/* localRotations */4];
    var localScales = transformRecord[/* localScales */5];
    var parentMap = transformRecord[/* parentMap */15];
    var childMap = transformRecord[/* childMap */16];
    var gameObjectMap = transformRecord[/* gameObjectMap */17];
    var dirtyMap = transformRecord[/* dirtyMap */18];
    var transformRecord$1 = _disposeFromParentAndChildMap(transform, param[2], transformRecord);
    transformRecord$1[/* localToWorldMatrices */2] = deleteAndResetFloat32TypeArr(getLocalToWorldMatrixIndex(transform), getLocalToWorldMatricesSize(/* () */0), transformRecord[/* defaultLocalToWorldMatrix */11], localToWorldMatrices);
    transformRecord$1[/* localPositions */3] = deleteAndResetFloat32TypeArr(getLocalPositionIndex(transform), getLocalPositionsSize(/* () */0), transformRecord[/* defaultLocalPosition */12], localPositions);
    transformRecord$1[/* localRotations */4] = deleteAndResetFloat32TypeArr(getLocalRotationIndex(transform), getLocalRotationsSize(/* () */0), transformRecord[/* defaultLocalRotation */13], localRotations);
    transformRecord$1[/* localScales */5] = deleteAndResetFloat32TypeArr(getLocalScaleIndex(transform), getLocalScalesSize(/* () */0), transformRecord[/* defaultLocalScale */14], localScales);
    transformRecord$1[/* parentMap */15] = disposeSparseMapData(transform, parentMap);
    transformRecord$1[/* childMap */16] = disposeSparseMapData(transform, childMap);
    transformRecord$1[/* dirtyMap */18] = disposeSparseMapData(transform, dirtyMap);
    transformRecord$1[/* gameObjectMap */17] = disposeSparseMapData(transform, gameObjectMap);
    return transformRecord$1;
  }
  
  function handleBatchDisposeComponent(transformArray, maxTypeArrayPoolSize, isKeepOrder, state) {
    requireCheck((function () {
            return checkComponentShouldAliveWithBatchDispose(transformArray, isAlive, getRecord(state));
          }), getIsDebug(stateData));
    var transformRecord = getRecord(state);
    var disposedIndexArray = transformRecord[/* disposedIndexArray */21];
    transformRecord[/* disposedIndexArray */21] = disposedIndexArray.concat(transformArray);
    var transformCount = getTransformCount(state[/* settingRecord */1]);
    var dataTuple = /* tuple */[
      transformCount,
      maxTypeArrayPoolSize,
      isKeepOrder
    ];
    var transformRecord$1 = reduceOneParam((function (transformRecord, transform) {
            return _disposeData(transform, dataTuple, transformRecord);
          }), transformRecord, transformArray);
    state[/* transformRecord */12] = transformRecord$1;
    return state;
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  function unsafeGetTransformGameObject(transform, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(transform, isAlive, getRecord(state));
          }), getIsDebug(stateData));
    return unsafeGetGameObject(transform, getRecord(state));
  }
  
  function unsafeGetTransformParent(transform, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(transform, isAlive, getRecord(state));
          }), getIsDebug(stateData));
    return unsafeGetParent(transform, getRecord(state));
  }
  
  function _checkParentAndChildTransformShouldAlive(parent, child, state) {
    return requireCheck((function () {
                  iter(parent, (function (parent) {
                          return checkComponentShouldAlive(parent, isAlive, getRecord(state));
                        }));
                  return checkComponentShouldAlive(child, isAlive, getRecord(state));
                }), getIsDebug(stateData));
  }
  
  function _setTransformParent(parent, child, setParentFunc, state) {
    _checkParentAndChildTransformShouldAlive(parent, child, state);
    state[/* transformRecord */12] = setParentFunc((parent == null) ? undefined : some(parent), child, getRecord(state));
    return state;
  }
  
  function setTransformParentKeepOrder(parent, child, state) {
    return _setTransformParent(parent, child, setParentKeepOrder$2, state);
  }
  
  function unsafeGetTransformChildren(transform, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(transform, isAlive, getRecord(state));
          }), getIsDebug(stateData));
    return unsafeGetChildren(transform, getRecord(state));
  }
  
  function getTransformLocalPosition(transform, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(transform, isAlive, getRecord(state));
          }), getIsDebug(stateData));
    return getLocalPositionTuple$1(transform, getRecord(state)[/* localPositions */3]);
  }
  
  function setTransformLocalPosition(transform, localPosition, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(transform, isAlive, getRecord(state));
          }), getIsDebug(stateData));
    state[/* transformRecord */12] = setLocalPositionByTuple$1(transform, localPosition, getRecord(state));
    return state;
  }
  
  function getTransformPosition(transform, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(transform, isAlive, getRecord(state));
          }), getIsDebug(stateData));
    return updateAndGetPositionTuple(transform, state[/* globalTempRecord */36], getRecord(state));
  }
  
  function getTransformLocalScale(transform, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(transform, isAlive, getRecord(state));
          }), getIsDebug(stateData));
    return getLocalScaleTuple$1(transform, getRecord(state)[/* localScales */5]);
  }
  
  function setTransformLocalScale(transform, localScale, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(transform, isAlive, getRecord(state));
          }), getIsDebug(stateData));
    state[/* transformRecord */12] = setLocalScaleByTuple$1(transform, localScale, getRecord(state));
    return state;
  }
  
  function getTransformLocalEulerAngles(transform, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(transform, isAlive, getRecord(state));
          }), getIsDebug(stateData));
    return getLocalEulerAnglesTuple(transform, getRecord(state)[/* localRotations */4]);
  }
  
  function setTransformLocalEulerAngles$1(transform, eulerAngles, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(transform, isAlive, getRecord(state));
          }), getIsDebug(stateData));
    state[/* transformRecord */12] = setLocalEulerAnglesByTuple(transform, eulerAngles, getRecord(state));
    return state;
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  function setLocalPosition(localPosition, transform, engineState) {
    return setTransformLocalPosition(transform, localPosition, engineState);
  }
  
  function setTransformLocalEulerAngles(localEulerAngles, transform, engineState) {
    return setTransformLocalEulerAngles$1(transform, localEulerAngles, engineState);
  }
  
  var getParent$1 = unsafeGetTransformParent;
  
  var setParentKeepOrder$1 = setTransformParentKeepOrder;
  
  var getChildren$1 = unsafeGetTransformChildren;
  
  function setLocalEulerAngles(value, component, engineState) {
    return setTransformLocalEulerAngles$1(component, value, engineState);
  }
  
  function setLocalScale(value, component, engineState) {
    return setTransformLocalScale(component, value, engineState);
  }
  
  var getLocalPosition = getTransformLocalPosition;
  
  var getGameObjectByTransform = unsafeGetTransformGameObject;
  
  var getLocalEulerAngles = getTransformLocalEulerAngles;
  
  var getLocalScale = getTransformLocalScale;
  
  
  /* TransformAPI-Wonderjs Not a pure module */
  
  function unsafeGetGl(record) {
    var gl = record[/* gl */0];
    requireCheck((function () {
            return test(buildAssertMessage("gl exist", "not"), (function () {
                          return assertExist(gl);
                        }));
          }), getIsDebug(stateData));
    return unsafeGet$2(gl);
  }
  
  function setGl(gl, record) {
    return /* record */[
            /* gl */some(gl),
            /* colorWrite */record[/* colorWrite */1],
            /* clearColor */record[/* clearColor */2],
            /* side */record[/* side */3],
            /* depthTest */record[/* depthTest */4],
            /* viewport */record[/* viewport */5]
          ];
  }
  
  function setColorWrite(gl, param, record) {
    var colorWrite = record[/* colorWrite */1];
    var writeAlpha = param[3];
    var writeBlue = param[2];
    var writeGreen = param[1];
    var writeRed = param[0];
    var exit = 0;
    if (colorWrite !== undefined) {
      var match = colorWrite;
      if (match[0] === writeRed && match[1] === writeGreen && match[2] === writeBlue && match[3] === writeAlpha) {
        return record;
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      gl.colorMask(writeRed, writeGreen, writeBlue, writeAlpha);
      return /* record */[
              /* gl */record[/* gl */0],
              /* colorWrite *//* tuple */[
                writeRed,
                writeGreen,
                writeBlue,
                writeAlpha
              ],
              /* clearColor */record[/* clearColor */2],
              /* side */record[/* side */3],
              /* depthTest */record[/* depthTest */4],
              /* viewport */record[/* viewport */5]
            ];
    }
    
  }
  
  function _setSide(gl, targetSide) {
    switch (targetSide) {
      case 0 : 
          gl.enable(gl.CULL_FACE);
          gl.cullFace(gl.FRONT_AND_BACK);
          return /* () */0;
      case 1 : 
          gl.disable(gl.CULL_FACE);
          return /* () */0;
      case 2 : 
          gl.enable(gl.CULL_FACE);
          gl.cullFace(gl.BACK);
          return /* () */0;
      case 3 : 
          gl.enable(gl.CULL_FACE);
          gl.cullFace(gl.FRONT);
          return /* () */0;
      
    }
  }
  
  function setSide(gl, targetSide, record) {
    var side = record[/* side */3];
    var exit = 0;
    if (side !== undefined && side === targetSide) {
      return record;
    } else {
      exit = 1;
    }
    if (exit === 1) {
      _setSide(gl, targetSide);
      return /* record */[
              /* gl */record[/* gl */0],
              /* colorWrite */record[/* colorWrite */1],
              /* clearColor */record[/* clearColor */2],
              /* side */targetSide,
              /* depthTest */record[/* depthTest */4],
              /* viewport */record[/* viewport */5]
            ];
    }
    
  }
  
  function _setDepthTest(gl, targetDepthTest) {
    if (targetDepthTest) {
      gl.enable(gl.DEPTH_TEST);
      return /* () */0;
    } else {
      gl.disable(gl.DEPTH_TEST);
      return /* () */0;
    }
  }
  
  function setDepthTest(gl, targetDepthTest, record) {
    var depthTest = record[/* depthTest */4];
    var exit = 0;
    if (depthTest !== undefined && depthTest === targetDepthTest) {
      return record;
    } else {
      exit = 1;
    }
    if (exit === 1) {
      _setDepthTest(gl, targetDepthTest);
      return /* record */[
              /* gl */record[/* gl */0],
              /* colorWrite */record[/* colorWrite */1],
              /* clearColor */record[/* clearColor */2],
              /* side */record[/* side */3],
              /* depthTest */targetDepthTest,
              /* viewport */record[/* viewport */5]
            ];
    }
    
  }
  
  function clearBuffer(gl, bit, record) {
    var record$1 = setColorWrite(gl, /* tuple */[
          true,
          true,
          true,
          true
        ], record);
    gl.clear(bit);
    return record$1;
  }
  
  function clearColor(gl, param, record) {
    var clearColor$1 = record[/* clearColor */2];
    var a = param[3];
    var b = param[2];
    var g = param[1];
    var r = param[0];
    var exit = 0;
    if (clearColor$1 !== undefined) {
      var match = clearColor$1;
      if (match[0] === r && match[1] === g && match[2] === b && match[3] === a) {
        return record;
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      gl.clearColor(r, g, b, a);
      return /* record */[
              /* gl */record[/* gl */0],
              /* colorWrite */record[/* colorWrite */1],
              /* clearColor *//* tuple */[
                r,
                g,
                b,
                a
              ],
              /* side */record[/* side */3],
              /* depthTest */record[/* depthTest */4],
              /* viewport */record[/* viewport */5]
            ];
    }
    
  }
  
  function setViewportData(param, record) {
    return /* record */[
            /* gl */record[/* gl */0],
            /* colorWrite */record[/* colorWrite */1],
            /* clearColor */record[/* clearColor */2],
            /* side */record[/* side */3],
            /* depthTest */record[/* depthTest */4],
            /* viewport *//* tuple */[
              param[0],
              param[1],
              param[2],
              param[3]
            ]
          ];
  }
  
  function setViewportOfGl(gl, param, record) {
    var viewport = record[/* viewport */5];
    var height = param[3];
    var width = param[2];
    var y = param[1];
    var x = param[0];
    var exit = 0;
    if (viewport !== undefined) {
      var match = viewport;
      if (match[0] === x && match[1] === y && match[2] === width && match[3] === height) {
        return record;
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      gl.viewport(x, y, width, height);
      return /* record */[
              /* gl */record[/* gl */0],
              /* colorWrite */record[/* colorWrite */1],
              /* clearColor */record[/* clearColor */2],
              /* side */record[/* side */3],
              /* depthTest */record[/* depthTest */4],
              /* viewport *//* tuple */[
                x,
                y,
                width,
                height
              ]
            ];
    }
    
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function _getExtension(name, gl) {
    var tmp = name === "instanced_arrays" ? gl.getExtension("ANGLE_instanced_arrays") : gl.getExtension(name);
    if (tmp == null) {
      return undefined;
    } else {
      return some(tmp);
    }
  }
  
  function _detectExtension(gl, record) {
    return /* record */[
            /* extensionInstancedArrays */_getExtension("instanced_arrays", gl),
            /* precision */record[/* precision */1],
            /* maxTextureUnit */record[/* maxTextureUnit */2]
          ];
  }
  
  function _detectPrecision(gl, record) {
    var vertexShader = gl.VERTEX_SHADER;
    var fragmentShader = gl.FRAGMENT_SHADER;
    var highFloat = gl.HIGH_FLOAT;
    var mediumFloat = gl.MEDIUM_FLOAT;
    var vertexShaderPrecisionHighpFloat = gl.getShaderPrecisionFormat(vertexShader, highFloat);
    var vertexShaderPrecisionMediumpFloat = gl.getShaderPrecisionFormat(vertexShader, mediumFloat);
    var fragmentShaderPrecisionHighpFloat = gl.getShaderPrecisionFormat(fragmentShader, highFloat);
    var fragmentShaderPrecisionMediumpFloat = gl.getShaderPrecisionFormat(fragmentShader, mediumFloat);
    var highpAvailable = vertexShaderPrecisionHighpFloat.precision > 0 && fragmentShaderPrecisionHighpFloat.precision > 0;
    var mediumpAvailable = vertexShaderPrecisionMediumpFloat.precision > 0 && fragmentShaderPrecisionMediumpFloat.precision > 0;
    if (highpAvailable) {
      return /* record */[
              /* extensionInstancedArrays */record[/* extensionInstancedArrays */0],
              /* precision *//* HIGHP */0,
              /* maxTextureUnit */record[/* maxTextureUnit */2]
            ];
    } else if (mediumpAvailable) {
      warn("not support highp, using mediump instead");
      return /* record */[
              /* extensionInstancedArrays */record[/* extensionInstancedArrays */0],
              /* precision *//* MEDIUMP */1,
              /* maxTextureUnit */record[/* maxTextureUnit */2]
            ];
    } else {
      warn("not support highp and mediump, using lowp instead");
      return /* record */[
              /* extensionInstancedArrays */record[/* extensionInstancedArrays */0],
              /* precision *//* LOWP */2,
              /* maxTextureUnit */record[/* maxTextureUnit */2]
            ];
    }
  }
  
  function _getTextureCapability(gl, textureCountPerMaterial, record) {
    return ensureCheck((function (param) {
                  var maxTextureUnit = unsafeGet$2(param[/* maxTextureUnit */2]);
                  return test(buildAssertMessage("maxTextureUnit:" + (String(maxTextureUnit) + (" >= textureCountPerMaterial:" + (String(textureCountPerMaterial) + ""))), "not"), (function () {
                                return Operators[/* >= */7](maxTextureUnit, textureCountPerMaterial);
                              }));
                }), getIsDebug(stateData), /* record */[
                /* extensionInstancedArrays */record[/* extensionInstancedArrays */0],
                /* precision */record[/* precision */1],
                /* maxTextureUnit */gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS)
              ]);
  }
  
  function _detectCapability(gl, textureCountPerMaterial, record) {
    return _detectPrecision(gl, _getTextureCapability(gl, textureCountPerMaterial, record));
  }
  
  function detect$1(gl, textureCountPerMaterial, record) {
    return _detectCapability(gl, textureCountPerMaterial, _detectExtension(gl, record));
  }
  
  var hasExtension = isSome;
  
  function unsafeGetInstanceExtension(record) {
    requireCheck((function () {
            return test(buildAssertMessage("extensionInstancedArrays exist", "not"), (function () {
                          return assertExist(record[/* extensionInstancedArrays */0]);
                        }));
          }), getIsDebug(stateData));
    return unsafeGet$2(record[/* extensionInstancedArrays */0]);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function isSupportInstance$1(useHardwareInstance, gpuDetectRecord) {
    if (useHardwareInstance) {
      return hasExtension(gpuDetectRecord[/* extensionInstancedArrays */0]);
    } else {
      return false;
    }
  }
  
  var unsafeGetIsSourceInstance = unsafeGet$1;
  
  
  /* GPUDetectService-Wonderjs Not a pure module */
  
  var getComponent = get$3;
  
  function unsafeGetComponent(uid, componentMap) {
    return ensureCheck((function (r) {
                  return test(buildAssertMessage("component exist", "not"), (function () {
                                return assertNullableExist(r);
                              }));
                }), getIsDebug(stateData), unsafeGet$1(uid, componentMap));
  }
  
  function hasComponent(uid, componentMap) {
    return unsafeGet$1(uid, componentMap) !== undefined;
  }
  
  function addComponent(uid, component, componentMap) {
    requireCheck((function () {
            return test(buildAssertMessage("this type of the component shouldn\'t be added before", "not"), (function () {
                          return assertFalse(hasComponent(uid, componentMap));
                        }));
          }), getIsDebug(stateData));
    set$1(uid, component, componentMap);
    return /* () */0;
  }
  
  var removeComponent = deleteVal$1;
  
  var hasComponent$1 = hasComponent;
  
  function batchGetComponent(uidArray, componentMap) {
    return reduceOneParam((function (arr, uid) {
                  var match = get$3(uid, componentMap);
                  if (match !== undefined) {
                    return push$1(match, arr);
                  } else {
                    return arr;
                  }
                }), /* array */[], uidArray);
  }
  
  function batchDisposeComponent(componentRecord, handleFunc, componentArray) {
    return handleFunc(componentArray, componentRecord);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function getBoxGeometryType() {
    return 0;
  }
  
  function getCustomGeometryType() {
    return 1;
  }
  
  var getComponentData = get$3;
  
  function unsafeGetComponentData(uid, currentComponentDataMap) {
    return ensureCheck((function (r) {
                  return test(buildAssertMessage("has component", "not"), (function () {
                                return assertNullableExist(r);
                              }));
                }), getIsDebug(stateData), unsafeGet$1(uid, currentComponentDataMap));
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function _buildFaceData(width, height, depth) {
    return /* tuple */[
            /* array */[
              /* array */[
                0,
                1,
                3
              ],
              /* array */[
                4,
                5,
                7
              ],
              /* array */[
                3,
                2,
                6
              ],
              /* array */[
                1,
                0,
                4
              ],
              /* array */[
                1,
                4,
                2
              ],
              /* array */[
                5,
                0,
                6
              ]
            ],
            /* array */[
              /* array */[
                0,
                0,
                1
              ],
              /* array */[
                0,
                0,
                -1
              ],
              /* array */[
                0,
                1,
                0
              ],
              /* array */[
                0,
                -1,
                0
              ],
              /* array */[
                1,
                0,
                0
              ],
              /* array */[
                -1,
                0,
                0
              ]
            ],
            /* array */[
              /* tuple */[
                -width,
                -height,
                depth
              ],
              /* tuple */[
                width,
                -height,
                depth
              ],
              /* tuple */[
                width,
                height,
                depth
              ],
              /* tuple */[
                -width,
                height,
                depth
              ],
              /* tuple */[
                width,
                -height,
                -depth
              ],
              /* tuple */[
                -width,
                -height,
                -depth
              ],
              /* tuple */[
                -width,
                height,
                -depth
              ],
              /* tuple */[
                width,
                height,
                -depth
              ]
            ]
          ];
  }
  
  function _getLerpData(param, param$1, param$2) {
    var side = param$1[0];
    var corners = param[1];
    var faceAxes = param[0];
    return lerp(caml_array_get(corners, caml_array_get(caml_array_get(faceAxes, side), param$2[0])), caml_array_get(corners, caml_array_get(caml_array_get(faceAxes, side), param$2[1])), param$2[2] / param$1[1]);
  }
  
  function _generateVertex(param, param$1, param$2, vertices) {
    var corners = param$1[1];
    var faceAxes = param$1[0];
    var side = param[0];
    var match = add$1(/* Float */0, _getLerpData(/* tuple */[
              faceAxes,
              corners
            ], /* tuple */[
              side,
              param[1]
            ], /* tuple */[
              0,
              1,
              param$2[0]
            ]), sub$1(/* Float */0, _getLerpData(/* tuple */[
                  faceAxes,
                  corners
                ], /* tuple */[
                  side,
                  param[2]
                ], /* tuple */[
                  0,
                  2,
                  param$2[1]
                ]), caml_array_get(corners, caml_array_get(caml_array_get(faceAxes, side), 0))));
    vertices.push(match[0], match[1], match[2]);
    return /* () */0;
  }
  
  function _generateTexCoord(u, v, texCoords) {
    texCoords.push(u, v);
    return /* () */0;
  }
  
  function _generateNormal(side, faceNormals, normals) {
    normals.push(caml_array_get(caml_array_get(faceNormals, side), 0), caml_array_get(caml_array_get(faceNormals, side), 1), caml_array_get(caml_array_get(faceNormals, side), 2));
    return /* () */0;
  }
  
  function _generateIndex(param, param$1, indices) {
    var vSegmentIndex = param$1[1];
    var uSegmentIndex = param$1[0];
    var offset = param[2];
    var uSegment = param[0];
    if (uSegmentIndex < uSegment && vSegmentIndex < param[1]) {
      indices.push((offset + vSegmentIndex | 0) + imul(uSegmentIndex, uSegment + 1 | 0) | 0, (offset + vSegmentIndex | 0) + imul(uSegmentIndex + 1 | 0, uSegment + 1 | 0) | 0, ((offset + vSegmentIndex | 0) + imul(uSegmentIndex, uSegment + 1 | 0) | 0) + 1 | 0, (offset + vSegmentIndex | 0) + imul(uSegmentIndex + 1 | 0, uSegment + 1 | 0) | 0, ((offset + vSegmentIndex | 0) + imul(uSegmentIndex + 1 | 0, uSegment + 1 | 0) | 0) + 1 | 0, ((offset + vSegmentIndex | 0) + imul(uSegmentIndex, uSegment + 1 | 0) | 0) + 1 | 0);
      return /* () */0;
    } else {
      return /* () */0;
    }
  }
  
  function _generateFace(directionDataTuple, param, param$1) {
    var vSegment = directionDataTuple[2];
    var uSegment = directionDataTuple[1];
    var side = directionDataTuple[0];
    var indices = param$1[3];
    var normals = param$1[2];
    var texCoords = param$1[1];
    var vertices = param$1[0];
    var corners = param[2];
    var faceNormals = param[1];
    var faceAxes = param[0];
    var offset = vertices.length / 3 | 0;
    for(var i = 0; i <= uSegment; ++i){
      for(var j = 0; j <= vSegment; ++j){
        var segmentIndexTuple = /* tuple */[
          i,
          j
        ];
        _generateVertex(directionDataTuple, /* tuple */[
              faceAxes,
              corners
            ], segmentIndexTuple, vertices);
        _generateTexCoord(i / uSegment, j / vSegment, texCoords);
        _generateNormal(side, faceNormals, normals);
        _generateIndex(/* tuple */[
              uSegment,
              vSegment,
              offset
            ], segmentIndexTuple, indices);
      }
    }
    return /* tuple */[
            vertices,
            texCoords,
            normals,
            indices
          ];
  }
  
  function _buildAllFaceDirectionDataTupleArr(widthSegment, heightSegment, depthSegment) {
    return /* array */[
            /* tuple */[
              0,
              widthSegment,
              heightSegment
            ],
            /* tuple */[
              1,
              widthSegment,
              heightSegment
            ],
            /* tuple */[
              2,
              widthSegment,
              depthSegment
            ],
            /* tuple */[
              3,
              widthSegment,
              depthSegment
            ],
            /* tuple */[
              4,
              depthSegment,
              heightSegment
            ],
            /* tuple */[
              5,
              depthSegment,
              heightSegment
            ]
          ];
  }
  
  function generateAllFaces() {
    var faceDataTuple = _buildFaceData(5, 5, 5);
    return reduceOneParam((function (pointsTuple, directionDataTuple) {
                  return _generateFace(directionDataTuple, faceDataTuple, pointsTuple);
                }), /* tuple */[
                createEmpty(/* () */0),
                createEmpty(/* () */0),
                createEmpty(/* () */0),
                createEmpty(/* () */0)
              ], _buildAllFaceDirectionDataTupleArr(1, 1, 1));
  }
  
  function getIndicesCount$1() {
    return 36;
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  function getIndices(_, param) {
    return param[/* boxGeometryRecord */5][/* indices */3];
  }
  
  function getIndicesCount(_, _$1) {
    return getIndicesCount$1(/* () */0);
  }
  
  
  /* ComputePointsBoxGeometryService-Wonderjs Not a pure module */
  
  function getNormals(_, param) {
    return param[/* boxGeometryRecord */5][/* normals */2];
  }
  
  
  /* No side effect */
  
  function getVertices(_, param) {
    return param[/* boxGeometryRecord */5][/* vertices */0];
  }
  
  
  /* No side effect */
  
  function getTexCoords(_, param) {
    return param[/* boxGeometryRecord */5][/* texCoords */1];
  }
  
  
  /* No side effect */
  
  function getVertexSize() {
    return 3;
  }
  
  function getTexCoordsSize() {
    return 2;
  }
  
  function getVertexLength(customGeometryPointCount) {
    return imul(customGeometryPointCount, 3);
  }
  
  function getTexCoordsLength(customGeometryPointCount) {
    return (customGeometryPointCount << 1);
  }
  
  function getVerticesOffset() {
    return 0;
  }
  
  function getTexCoordsOffset(customGeometryPointCount) {
    return 0 + imul(imul(customGeometryPointCount, 3), Float32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getNormalsOffset(customGeometryPointCount) {
    return getTexCoordsOffset(customGeometryPointCount) + imul((customGeometryPointCount << 1), Float32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getIndexSize() {
    return 1;
  }
  
  function getIndicesLength(customGeometryPointCount) {
    return (customGeometryPointCount << 0);
  }
  
  function getIndicesOffset(customGeometryPointCount) {
    return getNormalsOffset(customGeometryPointCount) + imul(imul(customGeometryPointCount, 3), Float32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getVerticesInfosLength(customGeometryCount) {
    return (customGeometryCount << 1);
  }
  
  function getVerticesInfosOffset(customGeometryPointCount) {
    return getIndicesOffset(customGeometryPointCount) + imul((customGeometryPointCount << 0), Uint16Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getTexCoordsInfosLength(customGeometryCount) {
    return (customGeometryCount << 1);
  }
  
  function getTexCoordsInfosOffset(customGeometryPointCount, customGeometryCount) {
    return getVerticesInfosOffset(customGeometryPointCount) + imul((customGeometryCount << 1), Uint32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getNormalsInfosLength(customGeometryCount) {
    return (customGeometryCount << 1);
  }
  
  function getNormalsInfosOffset(customGeometryPointCount, customGeometryCount) {
    return getTexCoordsInfosOffset(customGeometryPointCount, customGeometryCount) + imul((customGeometryCount << 1), Uint32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getIndicesInfosLength(customGeometryCount) {
    return (customGeometryCount << 1);
  }
  
  function getIndicesInfosOffset(customGeometryPointCount, customGeometryCount) {
    return getNormalsInfosOffset(customGeometryPointCount, customGeometryCount) + imul((customGeometryCount << 1), Uint32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getInfoIndex(index) {
    return (index << 1);
  }
  
  function getTotalByteLength$1(customGeometryPointCount, customGeometryCount) {
    return imul(customGeometryPointCount, ((imul(Float32Array.BYTES_PER_ELEMENT, 3) << 1) + (Float32Array.BYTES_PER_ELEMENT << 1) | 0) + (Uint16Array.BYTES_PER_ELEMENT << 0) | 0) + (imul(customGeometryCount, Uint32Array.BYTES_PER_ELEMENT) << 3) | 0;
  }
  
  function createBuffer$1(customGeometryPointCount, customGeometryCount) {
    return newSharedArrayBuffer(getTotalByteLength$1(customGeometryPointCount, customGeometryCount));
  }
  
  
  /* Worker-Wonderjs Not a pure module */
  
  function getInfo(infoIndex, infos) {
    return ensureCheck((function (param) {
                  var endIndex = param[1];
                  var startIndex = param[0];
                  return test(buildAssertMessage("endIndex >= startIndex", "is " + (String(endIndex) + "")), (function () {
                                return Operators[/* >= */7](endIndex, startIndex);
                              }));
                }), getIsDebug(stateData), /* tuple */[
                getUint32_1(infoIndex, infos),
                getUint32_1(infoIndex + 1 | 0, infos)
              ]);
  }
  
  function setInfo(infoIndex, startIndex, endIndex, infos) {
    requireCheck((function () {
            test(buildAssertMessage("startIndex >= 0", "is " + (String(startIndex) + "")), (function () {
                    return Operators[/* >= */7](startIndex, 0);
                  }));
            return test(buildAssertMessage("endIndex >= startIndex", "is " + (String(endIndex) + "")), (function () {
                          return Operators[/* >= */7](endIndex, startIndex);
                        }));
          }), getIsDebug(stateData));
    return setUint32_1(infoIndex + 1 | 0, endIndex, setUint32_1(infoIndex, startIndex, infos));
  }
  
  function hasPointData(infoIndex, infos) {
    var match = getInfo(infoIndex, infos);
    return match[1] > match[0];
  }
  
  function getFloat32PointData(infoIndex, points, infos) {
    var match = getInfo(infoIndex, infos);
    return getFloat32ArraySubarray(points, match[0], match[1]);
  }
  
  function _setPointData(param, fillTypeArrayFunc) {
    var offset = param[2];
    var newOffset = offset + param[3] | 0;
    setInfo(param[0], offset, newOffset, param[1]);
    _1(fillTypeArrayFunc, offset);
    return newOffset;
  }
  
  var setFloat32PointData = _setPointData;
  
  function getUint16PointData(infoIndex, points, infos) {
    var match = getInfo(infoIndex, infos);
    return getUint16ArraySubarray(points, match[0], match[1]);
  }
  
  var setUint16PointData = _setPointData;
  
  
  /* Log-WonderLog Not a pure module */
  
  function getIndices$1(index, param) {
    var customGeometryRecord = param[/* customGeometryRecord */6];
    return getUint16PointData(getInfoIndex(index), customGeometryRecord[/* indices */3], customGeometryRecord[/* indicesInfos */7]);
  }
  
  function getIndicesCount$2(index, param) {
    var match = getInfo(getInfoIndex(index), param[/* customGeometryRecord */6][/* indicesInfos */7]);
    return match[1] - match[0] | 0;
  }
  
  
  /* BufferCustomGeometryService-Wonderjs Not a pure module */
  
  function hasNormals$1(index, normalsInfos) {
    return hasPointData(getInfoIndex(index), normalsInfos);
  }
  
  
  /* BufferCustomGeometryService-Wonderjs Not a pure module */
  
  function hasNormals(geometry, customGeometry) {
    return hasNormals$1(geometry, customGeometry[/* normalsInfos */6]);
  }
  
  
  /* HasNormalsService-Wonderjs Not a pure module */
  
  function _getPosition(vertices, vIndex) {
    return /* tuple */[
            vertices[vIndex],
            vertices[vIndex + 1 | 0],
            vertices[vIndex + 2 | 0]
          ];
  }
  
  function _setNormal(param, vIndex, normals) {
    normals[vIndex] = normals[vIndex] + param[0];
    normals[vIndex + 1 | 0] = normals[vIndex + 1 | 0] + param[1];
    normals[vIndex + 2 | 0] = normals[vIndex + 2 | 0] + param[2];
    return normals;
  }
  
  function _normalizeNormals(normals) {
    var len = normals.length;
    var _index = 0;
    var normals$1 = normals;
    while(true) {
      var index = _index;
      var match = index >= len;
      if (match) {
        return normals$1;
      } else {
        var x = normals$1[index];
        var y = normals$1[index + 1 | 0];
        var z = normals$1[index + 2 | 0];
        var d = Math.sqrt(x * x + y * y + z * z);
        var match$1 = d === 0;
        if (match$1) {
          normals$1[index] = 0;
          normals$1[index + 1 | 0] = 0;
          normals$1[index + 2 | 0] = 0;
        } else {
          normals$1[index] = x / d;
          normals$1[index + 1 | 0] = y / d;
          normals$1[index + 2 | 0] = z / d;
        }
        _index = index + 3 | 0;
        continue ;
      }
    }
  }
  
  function computeVertexNormals$1(vertices, indices) {
    var indicesLen = indices.length;
    var _compute = function (_index, _normals) {
      while(true) {
        var normals = _normals;
        var index = _index;
        var match = index >= indicesLen;
        if (match) {
          return normals;
        } else {
          var va = imul(indices[index], 3);
          var vb = imul(indices[index + 1 | 0], 3);
          var vc = imul(indices[index + 2 | 0], 3);
          var pa = _getPosition(vertices, va);
          var pb = _getPosition(vertices, vb);
          var pc = _getPosition(vertices, vc);
          var v0 = sub$1(/* Float */0, pc, pb);
          var v1 = sub$1(/* Float */0, pa, pb);
          var faceNormalTuple = cross(v0, v1);
          _normals = _setNormal(faceNormalTuple, vc, _setNormal(faceNormalTuple, vb, _setNormal(faceNormalTuple, va, normals)));
          _index = index + 3 | 0;
          continue ;
        }
      }
    };
    return _normalizeNormals(_compute(0, new Float32Array(vertices.length)));
  }
  
  
  /* No side effect */
  
  function getVertices$1(index, param) {
    var customGeometryRecord = param[/* customGeometryRecord */6];
    return getFloat32PointData(getInfoIndex(index), customGeometryRecord[/* vertices */0], customGeometryRecord[/* verticesInfos */4]);
  }
  
  
  /* BufferCustomGeometryService-Wonderjs Not a pure module */
  
  function computeVertexNormals(index, state) {
    return computeVertexNormals$1(getVertices$1(index, state), getIndices$1(index, state));
  }
  
  
  /* GetCustomGeometryIndicesRenderService-Wonderjs Not a pure module */
  
  function _getNormals(index, param) {
    var customGeometryRecord = param[/* customGeometryRecord */6];
    return getFloat32PointData(getInfoIndex(index), customGeometryRecord[/* normals */2], customGeometryRecord[/* normalsInfos */6]);
  }
  
  function getNormals$1(index, state) {
    var match = hasNormals(index, state[/* customGeometryRecord */6]);
    if (match) {
      return _getNormals(index, state);
    } else {
      return computeVertexNormals(index, state);
    }
  }
  
  
  /* BufferCustomGeometryService-Wonderjs Not a pure module */
  
  function getTexCoords$1(index, param) {
    var customGeometryRecord = param[/* customGeometryRecord */6];
    return getFloat32PointData(getInfoIndex(index), customGeometryRecord[/* texCoords */1], customGeometryRecord[/* texCoordsInfos */5]);
  }
  
  
  /* BufferCustomGeometryService-Wonderjs Not a pure module */
  
  var addToMap = set$1;
  
  function hasComponent$1$1(uid, currentComponentDataMap, targetType_) {
    var match = getComponentData(uid, currentComponentDataMap);
    if (match !== undefined) {
      return match[1] === targetType_;
    } else {
      return false;
    }
  }
  
  function getCurrentGeometryBufferMapAndGetPointsFuncs(type_, vboBufferRecord) {
    if (type_ === getBoxGeometryType(/* () */0)) {
      return /* tuple */[
              /* tuple */[
                vboBufferRecord[/* boxGeometryVertexBufferMap */0],
                vboBufferRecord[/* boxGeometryTexCoordBufferMap */1],
                vboBufferRecord[/* boxGeometryNormalBufferMap */2],
                vboBufferRecord[/* boxGeometryElementArrayBufferMap */3]
              ],
              /* tuple */[
                getVertices,
                getTexCoords,
                getNormals,
                getIndices
              ]
            ];
    } else if (type_ === getCustomGeometryType(/* () */0)) {
      return /* tuple */[
              /* tuple */[
                vboBufferRecord[/* customGeometryVertexBufferMap */4],
                vboBufferRecord[/* customGeometryTexCoordBufferMap */5],
                vboBufferRecord[/* customGeometryNormalBufferMap */6],
                vboBufferRecord[/* customGeometryElementArrayBufferMap */7]
              ],
              /* tuple */[
                getVertices$1,
                getTexCoords$1,
                getNormals$1,
                getIndices$1
              ]
            ];
    } else {
      return fatal(buildFatalMessage("getCurrentGeometryBufferMapAndGetPointsFuncs", "unknown type_: " + (String(type_) + ""), "", "", ""));
    }
  }
  
  function getGetIndicesCountFunc(type_) {
    if (type_ === getBoxGeometryType(/* () */0)) {
      return getIndicesCount;
    } else {
      return getIndicesCount$2;
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function hasBasicCameraViewComponent(uid, gameObjectRecord) {
    return hasComponent$1(uid, gameObjectRecord[/* basicCameraViewMap */23]);
  }
  
  function hasPerspectiveCameraProjectionComponent(uid, gameObjectRecord) {
    return hasComponent$1(uid, gameObjectRecord[/* perspectiveCameraProjectionMap */24]);
  }
  
  function hasArcballCameraControllerComponent(uid, gameObjectRecord) {
    return hasComponent$1(uid, gameObjectRecord[/* arcballCameraControllerMap */25]);
  }
  
  function hasMeshRendererComponent(uid, gameObjectRecord) {
    return hasComponent$1(uid, gameObjectRecord[/* meshRendererMap */26]);
  }
  
  function hasBoxGeometryComponent(uid, gameObjectRecord) {
    return hasComponent$1$1(uid, gameObjectRecord[/* geometryDataMap */21], getBoxGeometryType(/* () */0));
  }
  
  function hasBasicMaterialComponent(uid, gameObjectRecord) {
    return hasComponent$1(uid, gameObjectRecord[/* basicMaterialMap */27]);
  }
  
  function hasLightMaterialComponent(uid, gameObjectRecord) {
    return hasComponent$1(uid, gameObjectRecord[/* lightMaterialMap */28]);
  }
  
  function hasDirectionLightComponent(uid, gameObjectRecord) {
    return hasComponent$1(uid, gameObjectRecord[/* directionLightMap */31]);
  }
  
  function hasPointLightComponent(uid, gameObjectRecord) {
    return hasComponent$1(uid, gameObjectRecord[/* pointLightMap */32]);
  }
  
  function hasSourceInstanceComponent(uid, gameObjectRecord) {
    return hasComponent$1(uid, gameObjectRecord[/* sourceInstanceMap */29]);
  }
  
  
  /* ComponentMapService-Wonderjs Not a pure module */
  
  function isSupportInstance(state) {
    return isSupportInstance$1(unsafeGetGPU(state[/* settingRecord */1])[/* useHardwareInstance */0], state[/* gpuDetectRecord */6]);
  }
  
  function isSourceInstance(materialIndex, gameObjectMap, gameObjectRecord) {
    return hasSourceInstanceComponent(unsafeGetGameObject$1(materialIndex, gameObjectMap), gameObjectRecord);
  }
  
  function buildMap(index, gameObjectMap, gameObjectRecord) {
    return reduceOneParam((function (map, materialIndex) {
                  return set$1(materialIndex, isSourceInstance(materialIndex, gameObjectMap, gameObjectRecord), map);
                }), createEmpty$2(/* () */0), range$1(0, index - 1 | 0));
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function unsafeFindFirst(arr, targetValue, func) {
    return ensureCheck((function (first) {
                  var arrJson = getJsonStr(arr);
                  return test(buildAssertMessage("find " + (String(targetValue) + (" in " + (String(arrJson) + ""))), "not"), (function () {
                                return assertNullableExist(first);
                              }));
                }), getIsDebug(stateData), arr.find(func));
  }
  
  var filterTargetName = caml_equal;
  
  function _throwJobFlagsShouldBeDefined() {
    return fatal(buildFatalMessage("throwJobFlagsShouldBeDefined", "jobFlags should be defined", "", "", ""));
  }
  
  function unsafeGetFlags(flags) {
    if (flags !== undefined) {
      return valFromOption(flags);
    } else {
      return _throwJobFlagsShouldBeDefined(/* () */0);
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function getDefaultShaderIndex() {
    return 429496729;
  }
  
  function getDefaultSourceInstance() {
    return 429496729;
  }
  
  
  /* No side effect */
  
  function getShaderIndicesSize() {
    return 1;
  }
  
  function getShaderIndicesLength(count) {
    return (count << 0);
  }
  
  function getShaderIndicesOffset() {
    return 0;
  }
  
  function getShaderIndexIndex(index) {
    return (index << 0);
  }
  
  function getShaderIndex(index, typeArr) {
    return getUint32_1((index << 0), typeArr);
  }
  
  function setShaderIndex(index, data, typeArr) {
    return setUint32_1((index << 0), data, typeArr);
  }
  
  function hasShaderIndex(materialIndex, shaderIndices) {
    return getUint32_1((materialIndex << 0), shaderIndices) !== getDefaultShaderIndex(/* () */0);
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  var addDisposeIndex = push$1;
  
  function disposeData(material, param, defaultShaderIndex) {
    return /* tuple */[
            deleteAndResetUint32(getShaderIndexIndex(material), defaultShaderIndex, param[0]),
            set$1(material, 0, param[1]),
            disposeSparseMapData(material, param[2])
          ];
  }
  
  function isNotDisposed(disposedIndexArray) {
    return disposedIndexArray.length === 0;
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function getShaders(param) {
    return param[/* shaders */0];
  }
  
  function getShaderLibs(param) {
    return param[/* shaderLibs */1];
  }
  
  function getPass(param) {
    return param[/* pass */2];
  }
  
  function getFail(param) {
    return param[/* fail */3];
  }
  
  
  /* No side effect */
  
  function _initMaterialShader(gl, param, param$1, param$2) {
    var state = param$2[2];
    var renderConfigRecord = param$2[1];
    var materialIndex = param[0];
    var shaders = getShaders(renderConfigRecord);
    param$1[2](materialIndex, _4(param$1[0], materialIndex, /* tuple */[
              gl,
              param$1[4](materialIndex, /* tuple */[
                    param[1],
                    param[2]
                  ], /* tuple */[
                    shaders,
                    _1(param$1[3], shaders),
                    getShaderLibs(renderConfigRecord)
                  ], state)
            ], param$1[1], state), param$2[0]);
    return state;
  }
  
  var initMaterial$1 = _initMaterialShader;
  
  function reInitMaterial(gl, param, param$1, param$2) {
    var state = param$2[2];
    var renderConfigRecord = param$2[1];
    var materialIndex = param[0];
    var shaders = getShaders(renderConfigRecord);
    param$1[2](materialIndex, _4(param$1[0], materialIndex, /* tuple */[
              gl,
              param$1[4](materialIndex, /* tuple */[
                    param[1],
                    param[2]
                  ], /* tuple */[
                    shaders,
                    _1(param$1[3], shaders),
                    getShaderLibs(renderConfigRecord)
                  ], state)
            ], param$1[1], state), param$2[0]);
    return state;
  }
  
  function init$1(gl, param, initMaterialFunc, param$1) {
    var disposedIndexArray = param$1[1];
    var isSupportInstance = param[1];
    var isSourceInstanceMap = param[0];
    requireCheck((function () {
            return test(buildAssertMessage("not dispose any material before init", "do"), (function () {
                          return assertTrue(isNotDisposed(disposedIndexArray));
                        }));
          }), getIsDebug(stateData));
    return reduceOneParam((function (state, materialIndex) {
                  return initMaterialFunc(gl, /* tuple */[
                              materialIndex,
                              unsafeGetIsSourceInstance(materialIndex, isSourceInstanceMap),
                              isSupportInstance
                            ], state);
                }), param$1[2], range$1(0, param$1[0] - 1 | 0));
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function _compileShader(gl, glslSource, shader) {
    gl.shaderSource(shader, glslSource);
    gl.compileShader(shader);
    debugWithFunc((function () {
            var match = gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false;
            if (match) {
              var message = gl.getShaderInfoLog(shader);
              var partial_arg = "" + (String(message) + "");
              debug((function (param) {
                      return buildDebugMessage("shader info log", partial_arg, param);
                    }), getIsDebug(stateData));
              var partial_arg$1 = "" + (String(glslSource) + "");
              return debug((function (param) {
                            return buildDebugMessage("glsl source", partial_arg$1, param);
                          }), getIsDebug(stateData));
            } else {
              return /* () */0;
            }
          }), getIsDebug(stateData));
    return shader;
  }
  
  function _linkProgram(program, gl) {
    gl.linkProgram(program);
    debugWithFunc((function () {
            var match = gl.getProgramParameter(program, gl.LINK_STATUS) === false;
            if (match) {
              var message = gl.getProgramInfoLog(program);
              return fatal(buildFatalMessage("link program error", "" + (String(message) + ""), "", "", ""));
            } else {
              return /* () */0;
            }
          }), getIsDebug(stateData));
    return /* () */0;
  }
  
  function initShader(vsSource, fsSource, gl, program) {
    var vs = _compileShader(gl, vsSource, gl.createShader(gl.VERTEX_SHADER));
    var fs = _compileShader(gl, fsSource, gl.createShader(gl.FRAGMENT_SHADER));
    gl.attachShader(program, vs);
    gl.attachShader(program, fs);
    gl.bindAttribLocation(program, 0, "a_position");
    _linkProgram(program, gl);
    gl.deleteShader(vs);
    gl.deleteShader(fs);
    return program;
  }
  
  function unsafeGetProgram(shaderIndex, param) {
    return ensureCheck((function (program) {
                  return test(buildAssertMessage("program exist", "not"), (function () {
                                return assertNullableExist(program);
                              }));
                }), getIsDebug(stateData), unsafeGet$1(shaderIndex, param[/* programMap */0]));
  }
  
  function registerProgram(shaderIndex, param, program) {
    set$1(shaderIndex, program, param[/* programMap */0]);
    return program;
  }
  
  function clearLastSendProgram(record) {
    return /* record */[
            /* programMap */record[/* programMap */0],
            /* lastUsedProgram */undefined
          ];
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function getShaderIndex$1(key, param) {
    var shaderIndexMap = param[/* shaderIndexMap */1];
    return get$2(key, shaderIndexMap);
  }
  
  function setShaderIndex$1(key, shaderIndex, param) {
    var shaderIndexMap = param[/* shaderIndexMap */1];
    return set(key, shaderIndex, shaderIndexMap);
  }
  
  function genereateShaderIndex(record) {
    var index = record[/* index */0];
    record[/* index */0] = index + 1 | 0;
    return ensureCheck((function (r) {
                  var defaultShaderIndex = getDefaultShaderIndex(/* () */0);
                  return test(buildAssertMessage("not equal default shader index:" + (String(defaultShaderIndex) + " "), "equal"), (function () {
                                return Operators[/* <>= */3](r, defaultShaderIndex);
                              }));
                }), getIsDebug(stateData), index);
  }
  
  function useShaderIndex(shaderIndex, record) {
    var usedShaderIndexArray = record[/* usedShaderIndexArray */2];
    push$1(shaderIndex, usedShaderIndexArray);
    return record;
  }
  
  function unuseShaderIndex(shaderIndex, record) {
    var usedShaderIndexArray = record[/* usedShaderIndexArray */2];
    var index = usedShaderIndexArray.indexOf(shaderIndex);
    var match = index === -1;
    if (match) {
      return record;
    } else {
      usedShaderIndexArray.splice(index, 1);
      return record;
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function _join(array) {
    var output = "";
    for(var i = 0 ,i_finish = array.length - 1 | 0; i <= i_finish; ++i){
      output = output + caml_array_get(array, i)[/* name */0];
    }
    return output;
  }
  
  function _createProgramAndInit(gl, shaderIndex, param, programRecord) {
    return initShader(param[0], param[1], gl, registerProgram(shaderIndex, programRecord, gl.createProgram()));
  }
  
  function _initNewShader(materialIndex, shaderIndex, key, param, param$1, param$2) {
    var shaderLibDataArr = param[1];
    var gl = param[0];
    setShaderIndex$1(key, shaderIndex, useShaderIndex(shaderIndex, param$2[0]));
    var match = param$1[0](materialIndex, shaderLibDataArr, param$1[1], /* tuple */[
          param$2[2],
          param$2[5]
        ]);
    var program = _createProgramAndInit(gl, shaderIndex, /* tuple */[
          match[0],
          match[1]
        ], param$2[1]);
    var recordTuple = param$1[2](/* tuple */[
          gl,
          shaderIndex,
          program
        ], shaderLibDataArr, /* tuple */[
          param$2[3],
          param$2[4]
        ]);
    param$1[3](gl, /* tuple */[
          program,
          shaderIndex,
          shaderLibDataArr
        ], recordTuple);
    return shaderIndex;
  }
  
  function initMaterialShader$1(materialIndex, param, param$1, param$2) {
    var shaderRecord = param$2[0];
    var shaderLibDataArr = param[1];
    var key = _join(shaderLibDataArr);
    var match = getShaderIndex$1(key, shaderRecord);
    if (match !== undefined) {
      return match;
    } else {
      return _initNewShader(materialIndex, genereateShaderIndex(shaderRecord), key, /* tuple */[
                  param[0],
                  shaderLibDataArr
                ], /* tuple */[
                  param$1[0],
                  param$1[1],
                  param$1[2],
                  param$1[3]
                ], /* tuple */[
                  shaderRecord,
                  param$2[1],
                  param$2[2],
                  param$2[3],
                  param$2[4],
                  param$2[5]
                ]);
    }
  }
  
  function reInitMaterialShader(materialIndex, param, param$1, param$2) {
    var shaderRecord = param$2[0];
    var shaderLibDataArr = param[1];
    var key = _join(shaderLibDataArr);
    var shaderIndex = genereateShaderIndex(shaderRecord);
    return _initNewShader(materialIndex, shaderIndex, key, /* tuple */[
                param[0],
                shaderLibDataArr
              ], /* tuple */[
                param$1[0],
                param$1[1],
                param$1[2],
                param$1[3]
              ], /* tuple */[
                shaderRecord,
                param$2[1],
                param$2[2],
                param$2[3],
                param$2[4],
                param$2[5]
              ]);
  }
  
  
  /* ProgramService-Wonderjs Not a pure module */
  
  function getHandle(name) {
    return fatal(buildFatalMessage("getHandle", "unknown handle name: " + (String(name) + ""), "", "", ""));
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function _getLocation(param, getGlLocationFunc, gl) {
    var locationMap = param[2];
    var name = param[1];
    var match = get$2(name, locationMap);
    if (match !== undefined) {
      return valFromOption(match);
    } else {
      var pos = getGlLocationFunc(param[0], name, gl);
      set(name, pos, locationMap);
      return pos;
    }
  }
  
  function _getGlAttribLocation(program, name, gl) {
    return gl.getAttribLocation(program, name);
  }
  
  function _getGlUniformLocation(program, name, gl) {
    return gl.getUniformLocation(program, name);
  }
  
  function getAttribLocation(program, name, attributeLocationMap, gl) {
    return _getLocation(/* tuple */[
                program,
                name,
                attributeLocationMap
              ], _getGlAttribLocation, gl);
  }
  
  function getUniformLocation(program, name, uniformLocationMap, gl) {
    return _getLocation(/* tuple */[
                program,
                name,
                uniformLocationMap
              ], _getGlUniformLocation, gl);
  }
  
  function getAttributeLocationMap(shaderIndex, glslLocationRecord) {
    return get$3(shaderIndex, glslLocationRecord[/* attributeLocationMap */0]);
  }
  
  function setAttributeLocationMap(shaderIndex, attributeLocationMap, glslLocationRecord) {
    set$1(shaderIndex, attributeLocationMap, glslLocationRecord[/* attributeLocationMap */0]);
    return glslLocationRecord;
  }
  
  function getUniformLocationMap(shaderIndex, glslLocationRecord) {
    return get$3(shaderIndex, glslLocationRecord[/* uniformLocationMap */1]);
  }
  
  function setUniformLocationMap(shaderIndex, uniformLocationMap, glslLocationRecord) {
    set$1(shaderIndex, uniformLocationMap, glslLocationRecord[/* uniformLocationMap */1]);
    return glslLocationRecord;
  }
  
  function isAttributeLocationExist(pos) {
    return pos !== -1;
  }
  
  function isUniformLocationExist(pos) {
    return pos !== null;
  }
  
  
  /* HashMapService-WonderCommonlib Not a pure module */
  
  function getBufferSizeByType(type_) {
    switch (type_) {
      case "vec2" : 
          return 2;
      case "vec3" : 
          return 3;
      default:
        return fatal(buildFatalMessage("getBufferSizeByType", "invalide type_: " + (String(type_) + ""), "", "", ""));
    }
  }
  
  function enableVertexAttribArray(gl, pos, vertexAttribHistoryArray) {
    var match = isNotEqual(pos, true, vertexAttribHistoryArray);
    if (match) {
      gl.enableVertexAttribArray(pos);
      vertexAttribHistoryArray[pos] = true;
      return /* () */0;
    } else {
      return /* () */0;
    }
  }
  
  function sendMatrix3(gl, pos, data) {
    gl.uniformMatrix3fv(pos, false, data);
    return /* () */0;
  }
  
  function sendMatrix4(gl, pos, data) {
    gl.uniformMatrix4fv(pos, false, data);
    return /* () */0;
  }
  
  var getCacheMap = get$3;
  
  function _queryIsNotCacheWithCache(cache, x, y, z) {
    var isNotCached = false;
    if (cache[0] !== x) {
      cache[0] = x;
      isNotCached = true;
    }
    if (cache[1] !== y) {
      cache[1] = y;
      isNotCached = true;
    }
    if (cache[2] !== z) {
      cache[2] = z;
      isNotCached = true;
    }
    return isNotCached;
  }
  
  function _isNotCacheVector3AndSetCache(shaderCacheMap, name, param) {
    var z = param[2];
    var y = param[1];
    var x = param[0];
    var match = get$2(name, shaderCacheMap);
    if (match !== undefined) {
      return _queryIsNotCacheWithCache(match, x, y, z);
    } else {
      set(name, /* array */[
            x,
            y,
            z
          ], shaderCacheMap);
      return true;
    }
  }
  
  function _isNotCacheNumberAndSetCache(shaderCacheMap, name, value) {
    var match = get$2(name, shaderCacheMap);
    if (match !== undefined) {
      return valFromOption(match) !== value;
    } else {
      set(name, value, shaderCacheMap);
      return true;
    }
  }
  
  function sendFloat(gl, shaderCacheMap, param, value) {
    if (_isNotCacheNumberAndSetCache(shaderCacheMap, param[0], value)) {
      gl.uniform1f(param[1], value);
      return /* () */0;
    } else {
      return /* () */0;
    }
  }
  
  function sendInt(gl, shaderCacheMap, param, value) {
    if (_isNotCacheNumberAndSetCache(shaderCacheMap, param[0], value)) {
      gl.uniform1i(param[1], value);
      return /* () */0;
    } else {
      return /* () */0;
    }
  }
  
  function sendFloat3(gl, shaderCacheMap, param, valueArr) {
    requireCheck((function () {
            return test(buildAssertMessage("valueArr.length === 3", "not"), (function () {
                          return Operators[/* = */0](valueArr.length, 3);
                        }));
          }), getIsDebug(stateData));
    var x = caml_array_get(valueArr, 0);
    var y = caml_array_get(valueArr, 1);
    var z = caml_array_get(valueArr, 2);
    if (_isNotCacheVector3AndSetCache(shaderCacheMap, param[0], /* tuple */[
            x,
            y,
            z
          ])) {
      gl.uniform3f(param[1], x, y, z);
      return /* () */0;
    } else {
      return /* () */0;
    }
  }
  
  function sendVec3(gl, shaderCacheMap, param, dataTuple) {
    if (_isNotCacheVector3AndSetCache(shaderCacheMap, param[0], dataTuple)) {
      gl.uniform3f(param[1], dataTuple[0], dataTuple[1], dataTuple[2]);
      return /* () */0;
    } else {
      return /* () */0;
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function getLocalToWorldMatrixTypeArray$2(transform, state) {
    var transformRecord = state[/* transformRecord */15];
    return getLocalToWorldMatrixTypeArray$1(transform, transformRecord[/* localToWorldMatrices */0], transformRecord[/* localToWorldMatrixCacheMap */1]);
  }
  
  function getNormalMatrixTypeArray$1(transform, param) {
    var transformRecord = param[/* transformRecord */15];
    return getNormalMatrixTypeArray(transform, transformRecord[/* localToWorldMatrices */0], /* tuple */[
                transformRecord[/* localToWorldMatrixCacheMap */1],
                transformRecord[/* normalMatrixCacheMap */2]
              ]);
  }
  
  
  /* ModelMatrixTransformService-Wonderjs Not a pure module */
  
  function getSendNoCachableDataByType(type_) {
    switch (type_) {
      case "mat3" : 
          return sendMatrix3;
      case "mat4" : 
          return sendMatrix4;
      default:
        return fatal(buildFatalMessage("getSendNoCachableDataByType", "unknown type:" + (String(type_) + ""), "", "", ""));
    }
  }
  
  function getSendCachableDataByType(type_) {
    switch (type_) {
      case "float" : 
          return sendFloat;
      case "float3" : 
          return sendFloat3;
      case "sampler2D" : 
          return sendInt;
      case "vec3" : 
          return sendVec3;
      default:
        return fatal(buildFatalMessage("getSendCachableDataByType", "unknown type:" + (String(type_) + ""), "", "", ""));
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function unsafeGetUniformSendData$1(shaderIndex, map) {
    return ensureCheck((function (sendData) {
                  return test(buildAssertMessage("uniform send record exist", "not"), (function () {
                                return assertNullableExist(sendData);
                              }));
                }), getIsDebug(stateData), unsafeGet$1(shaderIndex, map));
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function addUniformSendDataByType(param, param$1, getDataFunc) {
    return /* tuple */[
            push$1(/* record */[
                  /* pos */param[0],
                  /* getDataFunc */getDataFunc,
                  /* sendDataFunc */getSendNoCachableDataByType(param[1])
                ], param$1[0]),
            param$1[1],
            param$1[2],
            param$1[3],
            param$1[4],
            param$1[5]
          ];
  }
  
  function setToUniformSendMap(shaderIndex, uniformRenderObjectSendModelDataMap, renderObjectSendModelDataArr) {
    set$1(shaderIndex, renderObjectSendModelDataArr, uniformRenderObjectSendModelDataMap);
    return /* () */0;
  }
  
  function unsafeGetUniformSendData(shaderIndex, param) {
    return unsafeGetUniformSendData$1(shaderIndex, param[/* uniformRenderObjectSendModelDataMap */3]);
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function addUniformSendDataByType$1(pos, param, param$1) {
    return /* tuple */[
            param[0],
            param[1],
            param[2],
            param[3],
            param[4],
            push$1(/* record */[
                  /* pos */pos,
                  /* getDataFunc */param$1[0],
                  /* sendDataFunc */param$1[1]
                ], param[5])
          ];
  }
  
  function setToUniformSendMap$1(shaderIndex, uniformInstanceSendNoCachableDataMap, instanceSendNoCachableDataArr) {
    set$1(shaderIndex, instanceSendNoCachableDataArr, uniformInstanceSendNoCachableDataMap);
    return /* () */0;
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function addModelSendData(param, sendDataArrTuple) {
    var type_ = param[3];
    var pos = param[1];
    var field = param[0];
    switch (field) {
      case "instance_mMatrix" : 
          return addUniformSendDataByType$1(pos, sendDataArrTuple, /* tuple */[
                      getLocalToWorldMatrixTypeArray$2,
                      sendMatrix4
                    ]);
      case "instance_normalMatrix" : 
          return addUniformSendDataByType$1(pos, sendDataArrTuple, /* tuple */[
                      getNormalMatrixTypeArray$1,
                      sendMatrix3
                    ]);
      case "mMatrix" : 
          return addUniformSendDataByType(/* tuple */[
                      pos,
                      type_
                    ], sendDataArrTuple, getLocalToWorldMatrixTypeArray$2);
      case "normalMatrix" : 
          return addUniformSendDataByType(/* tuple */[
                      pos,
                      type_
                    ], sendDataArrTuple, getNormalMatrixTypeArray$1);
      default:
        return fatal(buildFatalMessage("_addModelSendData", "unknow field:" + (String(field) + ""), "", "", ""));
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function getCameraVMatrixData(state) {
    return unsafeGet$2(state[/* cameraRecord */7])[/* vMatrix */0];
  }
  
  function getCameraPMatrixData(state) {
    return unsafeGet$2(state[/* cameraRecord */7])[/* pMatrix */1];
  }
  
  function getCameraPositionData(state) {
    return unsafeGet$2(state[/* cameraRecord */7])[/* position */2];
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function addUniformSendDataByType$2(param, param$1, getDataFunc) {
    return /* tuple */[
            param$1[0],
            param$1[1],
            param$1[2],
            push$1(/* record */[
                  /* shaderCacheMap */param[0],
                  /* name */param[1],
                  /* pos */param[2],
                  /* getDataFunc */getDataFunc,
                  /* sendDataFunc */getSendCachableDataByType(param[3])
                ], param$1[3]),
            param$1[4],
            param$1[5]
          ];
  }
  
  function setToUniformSendMap$2(shaderIndex, uniformShaderSendCachableDataMap, shaderSendCachableDataArr) {
    return set$1(shaderIndex, shaderSendCachableDataArr, uniformShaderSendCachableDataMap);
  }
  
  function unsafeGetUniformSendData$3(shaderIndex, glslSenderRecord) {
    return unsafeGetUniformSendData$1(shaderIndex, glslSenderRecord[/* uniformShaderSendCachableDataMap */6]);
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function addUniformSendDataByType$3(param, param$1, getDataFunc) {
    return /* tuple */[
            param$1[0],
            param$1[1],
            push$1(/* record */[
                  /* pos */param[1],
                  /* getDataFunc */getDataFunc,
                  /* sendDataFunc */getSendNoCachableDataByType(param[0])
                ], param$1[2]),
            param$1[3],
            param$1[4],
            param$1[5]
          ];
  }
  
  function setToUniformSendMap$3(shaderIndex, uniformShaderSendNoCachableDataMap, shaderSendNoCachableDataArr) {
    return set$1(shaderIndex, shaderSendNoCachableDataArr, uniformShaderSendNoCachableDataMap);
  }
  
  function unsafeGetUniformSendData$4(shaderIndex, glslSenderRecord) {
    return unsafeGetUniformSendData$1(shaderIndex, glslSenderRecord[/* uniformShaderSendNoCachableDataMap */5]);
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function addCameraSendData(param, sendDataArrTuple) {
    var type_ = param[3];
    var pos = param[1];
    var field = param[0];
    switch (field) {
      case "pMatrix" : 
          return addUniformSendDataByType$3(/* tuple */[
                      type_,
                      pos
                    ], sendDataArrTuple, getCameraPMatrixData);
      case "position" : 
          return addUniformSendDataByType$2(/* tuple */[
                      param[4],
                      param[2],
                      pos,
                      type_
                    ], sendDataArrTuple, getCameraPositionData);
      case "vMatrix" : 
          return addUniformSendDataByType$3(/* tuple */[
                      type_,
                      pos
                    ], sendDataArrTuple, getCameraVMatrixData);
      default:
        return fatal(buildFatalMessage("_addCameraSendData", "unknow field:" + (String(field) + ""), "", "", ""));
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function getDefaultTextureIndex() {
    return 0;
  }
  
  function getTextureIndicesSize(textureCountPerMaterial) {
    return textureCountPerMaterial;
  }
  
  var getTextureIndicesLength$1 = imul;
  
  var getTextureIndicesIndex$1 = imul;
  
  function getTextureIndexIndex$1(index, textureIndex, textureCountPerMaterial) {
    return imul(index, textureCountPerMaterial) + textureIndex | 0;
  }
  
  
  /* No side effect */
  
  function getShaderIndicesSize$1() {
    return 1;
  }
  
  function getColorsSize() {
    return 3;
  }
  
  function getMapUnitsSize() {
    return 1;
  }
  
  function getColorsLength(basicMaterialCount) {
    return imul(basicMaterialCount, 3);
  }
  
  function getColorsOffset(basicMaterialCount) {
    return getShaderIndicesOffset(basicMaterialCount) + imul(getShaderIndicesLength(basicMaterialCount), Uint32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getColorIndex(index) {
    return imul(index, 3);
  }
  
  function getTextureIndicesOffset(basicMaterialCount, _) {
    return getColorsOffset(basicMaterialCount) + imul(imul(basicMaterialCount, 3), Float32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getMapUnitsLength(basicMaterialCount) {
    return (basicMaterialCount << 0);
  }
  
  function getMapUnitsOffset(basicMaterialCount, textureCountPerMaterial) {
    return getTextureIndicesOffset(basicMaterialCount, textureCountPerMaterial) + imul(getTextureIndicesLength$1(basicMaterialCount, textureCountPerMaterial), Uint32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getMapUnitIndex(index) {
    return (index << 0);
  }
  
  function getTotalByteLength$2(basicMaterialCount, textureCountPerMaterial) {
    return imul(basicMaterialCount, ((imul(Uint32Array.BYTES_PER_ELEMENT, getShaderIndicesSize(/* () */0)) + imul(Float32Array.BYTES_PER_ELEMENT, 3) | 0) + imul(Uint32Array.BYTES_PER_ELEMENT, getTextureIndicesSize(textureCountPerMaterial)) | 0) + (Uint8Array.BYTES_PER_ELEMENT << 0) | 0);
  }
  
  function createBuffer$2(basicMaterialCount, textureCountPerMaterial) {
    return newSharedArrayBuffer(getTotalByteLength$2(basicMaterialCount, textureCountPerMaterial));
  }
  
  var getTextureIndicesLength = getTextureIndicesLength$1;
  
  
  /* Worker-Wonderjs Not a pure module */
  
  function getTextureIndex$1(param, typeArr) {
    return getUint32_1(getTextureIndexIndex$1(param[0], param[1], param[2]), typeArr);
  }
  
  function setTextureIndex$1(param, data, typeArr) {
    return setUint32_1(getTextureIndexIndex$1(param[0], param[1], param[2]), data, typeArr);
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function getColor$2(index, typeArr) {
    return getFloat3(getColorIndex(index), typeArr);
  }
  
  function setColor(index, data, typeArr) {
    return setFloat3(getColorIndex(index), data, typeArr);
  }
  
  var setTextureIndex = setTextureIndex$1;
  
  function getMapUnit$1(index, typeArr) {
    return getUint8_1(getMapUnitIndex(index), typeArr);
  }
  
  function setMapUnit(index, data, typeArr) {
    return setUint8_1(getMapUnitIndex(index), data, typeArr);
  }
  
  var getTextureIndex = getTextureIndex$1;
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function getColor$1(material, param) {
    return getColor$2(material, param[/* basicMaterialRecord */8][/* colors */1]);
  }
  
  function getMapUnit(material, param) {
    return getMapUnit$1(material, param[/* basicMaterialRecord */8][/* mapUnits */3]);
  }
  
  
  /* OperateTypeArrayBasicMaterialService-Wonderjs Not a pure module */
  
  function getShaderIndicesSize$2() {
    return 1;
  }
  
  function getDiffuseColorsSize() {
    return 3;
  }
  
  function getMapUnitsSize$1() {
    return 1;
  }
  
  function getDiffuseColorsLength(lightMaterialCount) {
    return imul(lightMaterialCount, 3);
  }
  
  function getDiffuseColorsOffset(lightMaterialCount) {
    return imul(getShaderIndicesLength(lightMaterialCount), Uint32Array.BYTES_PER_ELEMENT);
  }
  
  function getSpecularColorsSize() {
    return 3;
  }
  
  function getSpecularColorsLength(lightMaterialCount) {
    return imul(lightMaterialCount, 3);
  }
  
  function getSpecularColorsOffset(lightMaterialCount) {
    return imul(getShaderIndicesLength(lightMaterialCount), Uint32Array.BYTES_PER_ELEMENT) + imul(imul(lightMaterialCount, 3), Float32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getShininessSize() {
    return 1;
  }
  
  function getShininessLength(lightMaterialCount) {
    return (lightMaterialCount << 0);
  }
  
  function getShininessOffset(lightMaterialCount) {
    return getSpecularColorsOffset(lightMaterialCount) + imul(imul(lightMaterialCount, 3), Float32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getDiffuseColorIndex(index) {
    return imul(index, 3);
  }
  
  function getSpecularColorIndex(index) {
    return imul(index, 3);
  }
  
  function getShininessIndex(index) {
    return (index << 0);
  }
  
  function getTextureIndicesOffset$1(lightMaterialCount, _) {
    return getShininessOffset(lightMaterialCount) + imul((lightMaterialCount << 0), Float32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getDiffuseMapUnitsLength(lightMaterialCount) {
    return (lightMaterialCount << 0);
  }
  
  function getDiffuseMapUnitsOffset(lightMaterialCount, textureCountPerMaterial) {
    return getTextureIndicesOffset$1(lightMaterialCount, textureCountPerMaterial) + imul(getTextureIndicesLength$1(lightMaterialCount, textureCountPerMaterial), Uint32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getDiffuseMapUnitIndex(index) {
    return (index << 0);
  }
  
  function getSpecularMapUnitsLength(lightMaterialCount) {
    return (lightMaterialCount << 0);
  }
  
  function getSpecularMapUnitsOffset(lightMaterialCount, textureCountPerMaterial) {
    return getDiffuseMapUnitsOffset(lightMaterialCount, textureCountPerMaterial) + imul((lightMaterialCount << 0), Uint8Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getSpecularMapUnitIndex(index) {
    return (index << 0);
  }
  
  function getTotalByteLength$3(lightMaterialCount, textureCountPerMaterial) {
    return imul(lightMaterialCount, ((imul(Uint32Array.BYTES_PER_ELEMENT, getShaderIndicesSize(/* () */0)) + imul(Float32Array.BYTES_PER_ELEMENT, 7) | 0) + imul(Uint32Array.BYTES_PER_ELEMENT, getTextureIndicesSize(textureCountPerMaterial)) | 0) + (Uint8Array.BYTES_PER_ELEMENT << 1) | 0);
  }
  
  function createBuffer$3(lightMaterialCount, textureCountPerMaterial) {
    return newSharedArrayBuffer(getTotalByteLength$3(lightMaterialCount, textureCountPerMaterial));
  }
  
  var getTextureIndicesLength$2 = getTextureIndicesLength$1;
  
  
  /* Worker-Wonderjs Not a pure module */
  
  function getDiffuseColor$1(index, typeArr) {
    return getFloat3(getDiffuseColorIndex(index), typeArr);
  }
  
  function setDiffuseColor(index, data, typeArr) {
    return setFloat3(getDiffuseColorIndex(index), data, typeArr);
  }
  
  function getSpecularColor$1(index, typeArr) {
    return getFloat3(getSpecularColorIndex(index), typeArr);
  }
  
  function setSpecularColor(index, data, typeArr) {
    return setFloat3(getSpecularColorIndex(index), data, typeArr);
  }
  
  function getShininess$1(index, typeArr) {
    return getFloat1(getShininessIndex(index), typeArr);
  }
  
  function setShininess(index, data, typeArr) {
    return setFloat1(getShininessIndex(index), data, typeArr);
  }
  
  var setTextureIndex$2 = setTextureIndex$1;
  
  function getDiffuseMapUnit$1(index, typeArr) {
    return getUint8_1(getDiffuseMapUnitIndex(index), typeArr);
  }
  
  function setDiffuseMapUnit(index, data, typeArr) {
    return setUint8_1(getDiffuseMapUnitIndex(index), data, typeArr);
  }
  
  function getSpecularMapUnit$1(index, typeArr) {
    return getUint8_1(getSpecularMapUnitIndex(index), typeArr);
  }
  
  function setSpecularMapUnit(index, data, typeArr) {
    return setUint8_1(getSpecularMapUnitIndex(index), data, typeArr);
  }
  
  var getTextureIndex$2 = getTextureIndex$1;
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function getDiffuseColor(material, param) {
    return getDiffuseColor$1(material, param[/* lightMaterialRecord */9][/* diffuseColors */1]);
  }
  
  function getSpecularColor(material, param) {
    return getSpecularColor$1(material, param[/* lightMaterialRecord */9][/* specularColors */2]);
  }
  
  function getShininess(material, param) {
    return getShininess$1(material, param[/* lightMaterialRecord */9][/* shininess */3]);
  }
  
  function getDiffuseMapUnit(material, param) {
    return getDiffuseMapUnit$1(material, param[/* lightMaterialRecord */9][/* diffuseMapUnits */5]);
  }
  
  function getSpecularMapUnit(material, param) {
    return getSpecularMapUnit$1(material, param[/* lightMaterialRecord */9][/* specularMapUnits */6]);
  }
  
  
  /* OperateTypeArrayLightMaterialService-Wonderjs Not a pure module */
  
  function addUniformSendDataByType$4(param, param$1, getDataFunc) {
    return /* tuple */[
            param$1[0],
            push$1(/* record */[
                  /* shaderCacheMap */param[0],
                  /* name */param[1],
                  /* pos */param[2],
                  /* getDataFunc */getDataFunc,
                  /* sendDataFunc */getSendCachableDataByType(param[3])
                ], param$1[1]),
            param$1[2],
            param$1[3],
            param$1[4],
            param$1[5]
          ];
  }
  
  function addUniformTextureSendDataByType(param, param$1, getDataFunc) {
    return /* tuple */[
            param$1[0],
            push$1(/* record */[
                  /* shaderCacheMap */param[0],
                  /* name */param[1],
                  /* pos */param[2],
                  /* getDataFunc */getDataFunc,
                  /* sendDataFunc */sendInt
                ], param$1[1]),
            param$1[2],
            param$1[3],
            param$1[4],
            param$1[5]
          ];
  }
  
  function setToUniformSendMap$4(shaderIndex, uniformRenderObjectSendMaterialDataMap, renderObjectSendMaterialDataArr) {
    set$1(shaderIndex, renderObjectSendMaterialDataArr, uniformRenderObjectSendMaterialDataMap);
    return /* () */0;
  }
  
  function unsafeGetUniformSendData$5(shaderIndex, glslSenderRecord) {
    return unsafeGetUniformSendData$1(shaderIndex, glslSenderRecord[/* uniformRenderObjectSendMaterialDataMap */4]);
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function addBasicMaterialSendData(param, sendDataArrTuple) {
    var uniformCacheMap = param[4];
    var type_ = param[3];
    var name = param[2];
    var pos = param[1];
    var field = param[0];
    switch (field) {
      case "color" : 
          return addUniformSendDataByType$4(/* tuple */[
                      uniformCacheMap,
                      name,
                      pos,
                      type_
                    ], sendDataArrTuple, getColor$1);
      case "map" : 
          return addUniformTextureSendDataByType(/* tuple */[
                      uniformCacheMap,
                      name,
                      pos,
                      type_
                    ], sendDataArrTuple, getMapUnit);
      default:
        return fatal(buildFatalMessage("_addBasicMaterialSendData", "unknow field:" + (String(field) + ""), "", "", ""));
    }
  }
  
  function addLightMaterialSendData(param, sendDataArrTuple) {
    var uniformCacheMap = param[4];
    var type_ = param[3];
    var name = param[2];
    var pos = param[1];
    var field = param[0];
    switch (field) {
      case "diffuseColor" : 
          return addUniformSendDataByType$4(/* tuple */[
                      uniformCacheMap,
                      name,
                      pos,
                      type_
                    ], sendDataArrTuple, getDiffuseColor);
      case "diffuseMap" : 
          return addUniformTextureSendDataByType(/* tuple */[
                      uniformCacheMap,
                      name,
                      pos,
                      type_
                    ], sendDataArrTuple, getDiffuseMapUnit);
      case "shininess" : 
          return addUniformSendDataByType$4(/* tuple */[
                      uniformCacheMap,
                      name,
                      pos,
                      type_
                    ], sendDataArrTuple, getShininess);
      case "specularColor" : 
          return addUniformSendDataByType$4(/* tuple */[
                      uniformCacheMap,
                      name,
                      pos,
                      type_
                    ], sendDataArrTuple, getSpecularColor);
      case "specularMap" : 
          return addUniformTextureSendDataByType(/* tuple */[
                      uniformCacheMap,
                      name,
                      pos,
                      type_
                    ], sendDataArrTuple, getSpecularMapUnit);
      default:
        return fatal(buildFatalMessage("_addLightMaterialSendData", "unknow field:" + (String(field) + ""), "", "", ""));
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function getOrCreateHashMap(map) {
    if (map !== undefined) {
      return valFromOption(map);
    } else {
      return createEmpty$1(/* () */0);
    }
  }
  
  
  /* HashMapService-WonderCommonlib Not a pure module */
  
  function addUniformSendDataByType$5(param, param$1, sendDataFunc) {
    return /* tuple */[
            param$1[0],
            param$1[1],
            param$1[2],
            param$1[3],
            push$1(/* record */[
                  /* program */param[0],
                  /* shaderCacheMap */param[1],
                  /* locationMap */param[2],
                  /* sendCachableFunctionDataFunc */sendDataFunc
                ], param$1[4]),
            param$1[5]
          ];
  }
  
  function setToUniformSendMap$5(shaderIndex, uniformShaderSendCachableFunctionDataMap, shaderSendCachableFunctionDataArr) {
    return set$1(shaderIndex, shaderSendCachableFunctionDataArr, uniformShaderSendCachableFunctionDataMap);
  }
  
  function unsafeGetUniformSendData$6(shaderIndex, glslSenderRecord) {
    return unsafeGetUniformSendData$1(shaderIndex, glslSenderRecord[/* uniformShaderSendCachableFunctionDataMap */7]);
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function _setToUniformSendMap(shaderIndex, param, param$1) {
    setToUniformSendMap(shaderIndex, param[/* uniformRenderObjectSendModelDataMap */3], param$1[0]);
    setToUniformSendMap$4(shaderIndex, param[/* uniformRenderObjectSendMaterialDataMap */4], param$1[1]);
    setToUniformSendMap$3(shaderIndex, param[/* uniformShaderSendNoCachableDataMap */5], param$1[2]);
    setToUniformSendMap$2(shaderIndex, param[/* uniformShaderSendCachableDataMap */6], param$1[3]);
    setToUniformSendMap$5(shaderIndex, param[/* uniformShaderSendCachableFunctionDataMap */7], param$1[4]);
    setToUniformSendMap$1(shaderIndex, param[/* uniformInstanceSendNoCachableDataMap */8], param$1[5]);
    return /* () */0;
  }
  
  function readUniformSendData(shaderLibDataArr, param, readUniformsFunc, param$1) {
    var uniformCacheMap = param$1[1];
    var uniformLocationMap = param$1[0];
    var program = param[1];
    var gl = param[0];
    return reduceOneParam((function (sendDataArrTuple, param) {
                  var variables = param[/* variables */2];
                  var match = isJsonSerializedValueNone(variables);
                  if (match) {
                    return sendDataArrTuple;
                  } else {
                    var match$1 = unsafeGetJsonSerializedValue(variables);
                    return readUniformsFunc(/* tuple */[
                                gl,
                                program,
                                uniformLocationMap,
                                uniformCacheMap
                              ], sendDataArrTuple, match$1[/* uniforms */0]);
                  }
                }), /* tuple */[
                /* array */[],
                /* array */[],
                /* array */[],
                /* array */[],
                /* array */[],
                /* array */[]
              ], shaderLibDataArr);
  }
  
  function addUniformSendData$1(gl, param, readUniformSendDataFunc, param$1) {
    var glslLocationRecord = param$1[1];
    var glslSenderRecord = param$1[0];
    var shaderIndex = param[1];
    var uniformLocationMap = getOrCreateHashMap(getUniformLocationMap(shaderIndex, glslLocationRecord));
    return /* tuple */[
            _setToUniformSendMap(shaderIndex, glslSenderRecord, readUniformSendDataFunc(param[2], gl, param[0], /* tuple */[
                      uniformLocationMap,
                      getOrCreateHashMap(getCacheMap(shaderIndex, glslSenderRecord[/* uniformCacheMap */2]))
                    ])),
            setUniformLocationMap(shaderIndex, uniformLocationMap, glslLocationRecord)
          ];
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function _readUniforms(param, sendDataArrTuple, uniforms) {
    var uniformCacheMap = param[3];
    var uniformLocationMap = param[2];
    var program = param[1];
    var gl = param[0];
    var match = isJsonSerializedValueNone(uniforms);
    if (match) {
      return sendDataArrTuple;
    } else {
      return reduceOneParam((function (sendDataArrTuple, param) {
                    var from = param[/* from */3];
                    var type_ = param[/* type_ */2];
                    var field = param[/* field */1];
                    var name = param[/* name */0];
                    switch (from) {
                      case "basicMaterial" : 
                          return addBasicMaterialSendData(/* tuple */[
                                      field,
                                      getUniformLocation(program, name, uniformLocationMap, gl),
                                      name,
                                      type_,
                                      uniformCacheMap
                                    ], sendDataArrTuple);
                      case "camera" : 
                          return addCameraSendData(/* tuple */[
                                      field,
                                      getUniformLocation(program, name, uniformLocationMap, gl),
                                      name,
                                      type_,
                                      uniformCacheMap
                                    ], sendDataArrTuple);
                      case "model" : 
                          return addModelSendData(/* tuple */[
                                      field,
                                      getUniformLocation(program, name, uniformLocationMap, gl),
                                      name,
                                      type_,
                                      uniformCacheMap
                                    ], sendDataArrTuple);
                      default:
                        return fatal(buildFatalMessage("_readUniforms", "unknow from:" + (String(from) + ""), "", "", ""));
                    }
                  }), sendDataArrTuple, unsafeGetJsonSerializedValue(uniforms));
    }
  }
  
  function _readUniformSendData(shaderLibDataArr, gl, program, param) {
    return readUniformSendData(shaderLibDataArr, /* tuple */[
                gl,
                program
              ], _readUniforms, /* tuple */[
                param[0],
                param[1]
              ]);
  }
  
  function addUniformSendData(gl, param, recordTuple) {
    return addUniformSendData$1(gl, /* tuple */[
                param[0],
                param[1],
                param[2]
              ], _readUniformSendData, recordTuple);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function sendBuffer(gl, param, buffer, state) {
    var pos = param[1];
    var match = isAttributeLocationExist(pos);
    if (match) {
      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
      gl.vertexAttribPointer(pos, param[0], gl.FLOAT, false, 0, 0);
      enableVertexAttribArray(gl, pos, state[/* glslSenderRecord */3][/* vertexAttribHistoryArray */9]);
    }
    return state;
  }
  
  
  /* GLSLLocationService-Wonderjs Not a pure module */
  
  function bindElementArrayBuffer(gl, _, buffer, renderState) {
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);
    return renderState;
  }
  
  
  /* No side effect */
  
  function addModelMatrixInstanceArrayBufferSendData(param, param$1) {
    return /* tuple */[
            param$1[0],
            push$1(/* record */[
                  /* pos */getAttribLocation(param[1], param[2], param[3], param[0]),
                  /* size */4,
                  /* getOffsetFunc */(function (index) {
                      return (index << 4);
                    })
                ], param$1[1])
          ];
  }
  
  function addOtherArrayBufferSendData(param, param$1) {
    return /* tuple */[
            push$1(/* record */[
                  /* pos */getAttribLocation(param[1], param[2], param[5], param[0]),
                  /* size */getBufferSizeByType(param[4]),
                  /* buffer */param[3],
                  /* sendFunc */sendBuffer
                ], param$1[0]),
            param$1[1]
          ];
  }
  
  function addElementBufferSendData(buffer, param) {
    return /* tuple */[
            push$1(/* record */[
                  /* pos */0,
                  /* size */0,
                  /* buffer */buffer,
                  /* sendFunc */bindElementArrayBuffer
                ], param[0]),
            param[1]
          ];
  }
  
  function readAttributeSendData(shaderLibDataArr, param, readAttributesFunc, attributeLocationMap) {
    var program = param[1];
    var gl = param[0];
    return reduceOneParam((function (sendDataArrTuple, param) {
                  var variables = param[/* variables */2];
                  var match = isJsonSerializedValueNone(variables);
                  if (match) {
                    return sendDataArrTuple;
                  } else {
                    var match$1 = unsafeGetJsonSerializedValue(variables);
                    return readAttributesFunc(/* tuple */[
                                gl,
                                program,
                                attributeLocationMap
                              ], sendDataArrTuple, match$1[/* attributes */1]);
                  }
                }), /* tuple */[
                /* array */[],
                /* array */[]
              ], shaderLibDataArr);
  }
  
  function _setToAttributeSendMap(shaderIndex, _, glslSenderRecord, param) {
    set$1(shaderIndex, param[0], glslSenderRecord[/* attributeSendDataMap */0]);
    set$1(shaderIndex, param[1], glslSenderRecord[/* instanceAttributeSendDataMap */1]);
    return glslSenderRecord;
  }
  
  function addAttributeSendData$1(param, shaderLibDataArr, readAttributeSendDataFunc, param$1) {
    var glslLocationRecord = param$1[1];
    var shaderIndex = param[1];
    var attributeLocationMap = getOrCreateHashMap(getAttributeLocationMap(shaderIndex, glslLocationRecord));
    return /* tuple */[
            _setToAttributeSendMap(shaderIndex, attributeLocationMap, param$1[0], readAttributeSendDataFunc(shaderLibDataArr, param[0], param[2], attributeLocationMap)),
            setAttributeLocationMap(shaderIndex, attributeLocationMap, glslLocationRecord)
          ];
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function _readAttributes(param, sendDataArrTuple, attributes) {
    var attributeLocationMap = param[2];
    var program = param[1];
    var gl = param[0];
    var match = isJsonSerializedValueNone(attributes);
    if (match) {
      return sendDataArrTuple;
    } else {
      return reduceOneParam((function (sendDataArrTuple, param) {
                    var type_ = param[/* type_ */2];
                    var buffer = param[/* buffer */1];
                    var name = param[/* name */0];
                    var match = !isJsonSerializedValueNone(name) && !isJsonSerializedValueNone(type_);
                    if (match) {
                      var name$1 = unsafeGetJsonSerializedValue(name);
                      var type_$1 = unsafeGetJsonSerializedValue(type_);
                      if (buffer >= 5) {
                        return addModelMatrixInstanceArrayBufferSendData(/* tuple */[
                                    gl,
                                    program,
                                    name$1,
                                    attributeLocationMap
                                  ], sendDataArrTuple);
                      } else {
                        return addOtherArrayBufferSendData(/* tuple */[
                                    gl,
                                    program,
                                    name$1,
                                    buffer,
                                    type_$1,
                                    attributeLocationMap
                                  ], sendDataArrTuple);
                      }
                    } else {
                      return addElementBufferSendData(buffer, sendDataArrTuple);
                    }
                  }), sendDataArrTuple, unsafeGetJsonSerializedValue(attributes));
    }
  }
  
  function _readAttributeSendData(shaderLibDataArr, gl, program, attributeLocationMap) {
    return readAttributeSendData(shaderLibDataArr, /* tuple */[
                gl,
                program
              ], _readAttributes, attributeLocationMap);
  }
  
  function addAttributeSendData(glTuple, shaderLibDataArr, recordTuple) {
    return addAttributeSendData$1(glTuple, shaderLibDataArr, _readAttributeSendData, recordTuple);
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function initMaterialShader(materialIndex, param, buildGLSLSourceFunc, state) {
    return initMaterialShader$1(materialIndex, /* tuple */[
                param[0],
                param[1]
              ], /* tuple */[
                buildGLSLSourceFunc,
                getHandle,
                addAttributeSendData,
                addUniformSendData
              ], /* tuple */[
                state[/* shaderRecord */2],
                state[/* programRecord */3],
                state[/* glslRecord */4],
                state[/* glslSenderRecord */5],
                state[/* glslLocationRecord */6],
                state[/* glslChunkRecord */7]
              ]);
  }
  
  
  /* InitShaderInitMaterialService-Wonderjs Not a pure module */
  
  function getChunk(name, glslChunkRecord) {
    return getExn(get$2(name, glslChunkRecord[/* chunkMap */0]));
  }
  
  function _buildChunk(param, varDeclare, param$1, body) {
    return /* record */[
            /* top */param[0],
            /* define */param[1],
            /* varDeclare */varDeclare,
            /* funcDeclare */param$1[0],
            /* funcDefine */param$1[1],
            /* body */body
          ];
  }
  
  function create$4() {
    return /* record */[/* chunkMap */set("webgl1_basic_map_fragment", _buildChunk(/* tuple */[
                      "\n\n",
                      "\n\n"
                    ], "\nvarying vec2 v_mapCoord0;\n", /* tuple */[
                      "\n\n",
                      "\n\n"
                    ], "\nvec4 totalColor = vec4(texture2D(u_mapSampler, v_mapCoord0).rgb * u_color, 1.0);\n"), set("webgl1_basic_map_vertex", _buildChunk(/* tuple */[
                          "\n\n",
                          "\n\n"
                        ], "\nvarying vec2 v_mapCoord0;\n", /* tuple */[
                          "\n\n",
                          "\n\n"
                        ], "\n//    vec2 sourceTexCoord0 = a_texCoord * u_map0SourceRegion.zw + u_map0SourceRegion.xy;\n//\n//    v_mapCoord0 = sourceTexCoord0 * u_map0RepeatRegion.zw + u_map0RepeatRegion.xy;\n\n    v_mapCoord0 = a_texCoord;\n"), set("webgl1_no_basic_map_fragment", _buildChunk(/* tuple */[
                              "\n\n",
                              "\n\n"
                            ], "\n\n", /* tuple */[
                              "\n\n",
                              "\n\n"
                            ], "\nvec4 totalColor = vec4(u_color, 1.0);\n"), set("webgl1_basic_end_fragment", _buildChunk(/* tuple */[
                                  "\n\n",
                                  "\n\n"
                                ], "\n\n", /* tuple */[
                                  "\n\n",
                                  "\n\n"
                                ], "\ngl_FragColor = vec4(totalColor.rgb, totalColor.a);\n"), set("webgl1_basic_vertex", _buildChunk(/* tuple */[
                                      "\n\n",
                                      "\n\n"
                                    ], "\n\n", /* tuple */[
                                      "\n\n",
                                      "\n\n"
                                    ], "\ngl_Position = u_pMatrix * u_vMatrix * mMatrix * vec4(a_position, 1.0);\n"), set("common_define", _buildChunk(/* tuple */[
                                          "\n\n",
                                          "\n\n"
                                        ], "\n\n", /* tuple */[
                                          "\n\n",
                                          "\n\n"
                                        ], "\n\n"), set("common_fragment", _buildChunk(/* tuple */[
                                              "\n\n",
                                              "\n\n"
                                            ], "\n\n", /* tuple */[
                                              "\n\n",
                                              "\n\n"
                                            ], "\n\n"), set("common_function", _buildChunk(/* tuple */[
                                                  "\n\n",
                                                  "\n\n"
                                                ], "\n\n", /* tuple */[
                                                  "\n\n",
                                                  "\n// mat2 transpose(mat2 m) {\n//   return mat2(  m[0][0], m[1][0],   // new col 0\n//                 m[0][1], m[1][1]    // new col 1\n//              );\n//   }\n\n// mat3 transpose(mat3 m) {\n//   return mat3(  m[0][0], m[1][0], m[2][0],  // new col 0\n//                 m[0][1], m[1][1], m[2][1],  // new col 1\n//                 m[0][2], m[1][2], m[2][2]   // new col 1\n//              );\n//   }\n\n//bool isRenderArrayEmpty(int isRenderArrayEmpty){\n//  return isRenderArrayEmpty == 1;\n//}\n"
                                                ], "\n\n"), set("common_vertex", _buildChunk(/* tuple */[
                                                      "\n\n",
                                                      "\n\n"
                                                    ], "\n\n", /* tuple */[
                                                      "\n\n",
                                                      "\n// mat2 transpose(mat2 m) {\n//   return mat2(  m[0][0], m[1][0],   // new col 0\n//                 m[0][1], m[1][1]    // new col 1\n//              );\n//   }\n\n// mat3 transpose(mat3 m) {\n//   return mat3(  m[0][0], m[1][0], m[2][0],  // new col 0\n//                 m[0][1], m[1][1], m[2][1],  // new col 1\n//                 m[0][2], m[1][2], m[2][2]   // new col 1\n//              );\n//   }\n\n//bool isRenderArrayEmpty(int isRenderArrayEmpty){\n//  return isRenderArrayEmpty == 1;\n//}\n"
                                                    ], "\n\n"), set("highp_fragment", _buildChunk(/* tuple */[
                                                          "\nprecision highp float;\nprecision highp int;\n",
                                                          "\n\n"
                                                        ], "\n\n", /* tuple */[
                                                          "\n\n",
                                                          "\n\n"
                                                        ], "\n\n"), set("lowp_fragment", _buildChunk(/* tuple */[
                                                              "\nprecision lowp float;\nprecision lowp int;\n",
                                                              "\n\n"
                                                            ], "\n\n", /* tuple */[
                                                              "\n\n",
                                                              "\n\n"
                                                            ], "\n\n"), set("mediump_fragment", _buildChunk(/* tuple */[
                                                                  "\nprecision mediump float;\nprecision mediump int;\n",
                                                                  "\n\n"
                                                                ], "\n\n", /* tuple */[
                                                                  "\n\n",
                                                                  "\n\n"
                                                                ], "\n\n"), set("webgl1_setPos_mvp", _buildChunk(/* tuple */[
                                                                      "\n\n",
                                                                      "\n\n"
                                                                    ], "\n\n", /* tuple */[
                                                                      "\n\n",
                                                                      "\n\n"
                                                                    ], "\ngl_Position = u_pMatrix * u_vMatrix * mMatrix * vec4(a_position, 1.0);\n"), set("modelMatrix_batch_instance_vertex", _buildChunk(/* tuple */[
                                                                          "\n\n",
                                                                          "\n\n"
                                                                        ], "\n\n", /* tuple */[
                                                                          "\n\n",
                                                                          "\n\n"
                                                                        ], "\nmat4 mMatrix = u_mMatrix;\n"), set("normalMatrix_batch_instance_vertex", _buildChunk(/* tuple */[
                                                                              "\n\n",
                                                                              "\n\n"
                                                                            ], "\n\n", /* tuple */[
                                                                              "\n\n",
                                                                              "\n\n"
                                                                            ], "\nmat3 normalMatrix = u_normalMatrix;\n"), set("modelMatrix_hardware_instance_vertex", _buildChunk(/* tuple */[
                                                                                  "\n\n",
                                                                                  "\n\n"
                                                                                ], "\n\n", /* tuple */[
                                                                                  "\n\n",
                                                                                  "\n\n"
                                                                                ], "\nmat4 mMatrix = mat4(a_mVec4_0, a_mVec4_1, a_mVec4_2, a_mVec4_3);\n"), set("normalMatrix_hardware_instance_vertex", _buildChunk(/* tuple */[
                                                                                      "\n\n",
                                                                                      "\n\n"
                                                                                    ], "\n\n", /* tuple */[
                                                                                      "\n\n",
                                                                                      "\n\n"
                                                                                    ], "\nmat3 normalMatrix = mat3(a_normalVec3_0, a_normalVec3_1, a_normalVec3_2);\n"), set("modelMatrix_noInstance_vertex", _buildChunk(/* tuple */[
                                                                                          "\n\n",
                                                                                          "\n\n"
                                                                                        ], "\n\n", /* tuple */[
                                                                                          "\n\n",
                                                                                          "\n\n"
                                                                                        ], "\nmat4 mMatrix = u_mMatrix;\n"), set("normalMatrix_noInstance_vertex", _buildChunk(/* tuple */[
                                                                                              "\n\n",
                                                                                              "\n\n"
                                                                                            ], "\n\n", /* tuple */[
                                                                                              "\n\n",
                                                                                              "\n\n"
                                                                                            ], "\nmat3 normalMatrix = u_normalMatrix;\n"), set("webgl1_diffuse_map_fragment", _buildChunk(/* tuple */[
                                                                                                  "\n\n",
                                                                                                  "\n\n"
                                                                                                ], "\nvarying vec2 v_diffuseMapTexCoord;\n", /* tuple */[
                                                                                                  "\n\n",
                                                                                                  "\nvec3 getMaterialDiffuse() {\n        return texture2D(u_diffuseMapSampler, v_diffuseMapTexCoord).rgb * u_diffuse;\n    }\n"
                                                                                                ], "\n\n"), set("webgl1_diffuse_map_vertex", _buildChunk(/* tuple */[
                                                                                                      "\n\n",
                                                                                                      "\n\n"
                                                                                                    ], "\nvarying vec2 v_diffuseMapTexCoord;\n", /* tuple */[
                                                                                                      "\n\n",
                                                                                                      "\n\n"
                                                                                                    ], "\n//TODO optimize(combine, reduce compute numbers)\n    //TODO BasicTexture extract textureMatrix\n//    vec2 sourceTexCoord = a_texCoord * u_diffuseMapSourceRegion.zw + u_diffuseMapSourceRegion.xy;\n//    v_diffuseMapTexCoord = sourceTexCoord * u_diffuseMapRepeatRegion.zw + u_diffuseMapRepeatRegion.xy;\n\n    v_diffuseMapTexCoord = a_texCoord;\n"), set("webgl1_no_diffuse_map_fragment", _buildChunk(/* tuple */[
                                                                                                          "\n\n",
                                                                                                          "\n\n"
                                                                                                        ], "\n\n", /* tuple */[
                                                                                                          "\n\n",
                                                                                                          "\nvec3 getMaterialDiffuse() {\n        return u_diffuse;\n    }\n"
                                                                                                        ], "\n\n"), set("webgl1_no_emission_map_fragment", _buildChunk(/* tuple */[
                                                                                                              "\n\n",
                                                                                                              "\n\n"
                                                                                                            ], "\n\n", /* tuple */[
                                                                                                              "\n\n",
                                                                                                              "\nvec3 getMaterialEmission() {\n        return vec3(0.0);\n    }\n"
                                                                                                            ], "\n\n"), set("webgl1_no_light_map_fragment", _buildChunk(/* tuple */[
                                                                                                                  "\n\n",
                                                                                                                  "\n\n"
                                                                                                                ], "\n\n", /* tuple */[
                                                                                                                  "\n\n",
                                                                                                                  "\nvec3 getMaterialLight() {\n        return vec3(0.0);\n    }\n"
                                                                                                                ], "\n\n"), set("webgl1_no_normal_map_fragment", _buildChunk(/* tuple */[
                                                                                                                      "\n\n",
                                                                                                                      "\n\n"
                                                                                                                    ], "\nvarying vec3 v_normal;\n", /* tuple */[
                                                                                                                      "\nvec3 getNormal();\n",
                                                                                                                      "\nvec3 getNormal(){\n    return v_normal;\n}\n\n#if POINT_LIGHTS_COUNT > 0\nvec3 getPointLightDir(int index){\n    //workaround '[] : Index expression must be constant' error\n    for (int x = 0; x <= POINT_LIGHTS_COUNT; x++) {\n        if(x == index){\n            return getPointLightDirByLightPos(u_pointLights[x].position);\n        }\n    }\n    /*!\n    solve error in window7 chrome/firefox:\n    not all control paths return a value.\n    failed to create d3d shaders\n    */\n    return vec3(0.0);\n}\n#endif\n\n#if DIRECTION_LIGHTS_COUNT > 0\nvec3 getDirectionLightDir(int index){\n    //workaround '[] : Index expression must be constant' error\n    for (int x = 0; x <= DIRECTION_LIGHTS_COUNT; x++) {\n        if(x == index){\n            return getDirectionLightDir(u_directionLights[x].direction);\n        }\n    }\n\n    /*!\n    solve error in window7 chrome/firefox:\n    not all control paths return a value.\n    failed to create d3d shaders\n    */\n    return vec3(0.0);\n}\n#endif\n\n\nvec3 getViewDir(){\n    return normalize(u_cameraPos - v_worldPosition);\n}\n"
                                                                                                                    ], "\n\n"), set("webgl1_no_normal_map_vertex", _buildChunk(/* tuple */[
                                                                                                                          "\n\n",
                                                                                                                          "\n\n"
                                                                                                                        ], "\nvarying vec3 v_normal;\n", /* tuple */[
                                                                                                                          "\n\n",
                                                                                                                          "\n\n"
                                                                                                                        ], "\nv_normal = normalize(normalMatrix * a_normal);\n"), set("webgl1_no_shadow_map_fragment", _buildChunk(/* tuple */[
                                                                                                                              "\n\n",
                                                                                                                              "\n\n"
                                                                                                                            ], "\n\n", /* tuple */[
                                                                                                                              "\n\n",
                                                                                                                              "\nfloat getShadowVisibility() {\n        return 1.0;\n    }\n"
                                                                                                                            ], "\n\n"), set("webgl1_no_specular_map_fragment", _buildChunk(/* tuple */[
                                                                                                                                  "\n\n",
                                                                                                                                  "\n\n"
                                                                                                                                ], "\n\n", /* tuple */[
                                                                                                                                  "\n\n",
                                                                                                                                  "\nfloat getSpecularStrength() {\n        return 1.0;\n    }\n"
                                                                                                                                ], "\n\n"), set("webgl1_specular_map_fragment", _buildChunk(/* tuple */[
                                                                                                                                      "\n\n",
                                                                                                                                      "\n\n"
                                                                                                                                    ], "\nvarying vec2 v_specularMapTexCoord;\n", /* tuple */[
                                                                                                                                      "\n\n",
                                                                                                                                      "\nfloat getSpecularStrength() {\n        return texture2D(u_specularMapSampler, v_specularMapTexCoord).r;\n    }\n"
                                                                                                                                    ], "\n\n"), set("webgl1_specular_map_vertex", _buildChunk(/* tuple */[
                                                                                                                                          "\n\n",
                                                                                                                                          "\n\n"
                                                                                                                                        ], "\nvarying vec2 v_specularMapTexCoord;\n", /* tuple */[
                                                                                                                                          "\n\n",
                                                                                                                                          "\n\n"
                                                                                                                                        ], "\nv_specularMapTexCoord = a_texCoord;\n"), set("webgl1_ambientLight_fragment", _buildChunk(/* tuple */[
                                                                                                                                              "\n\n",
                                                                                                                                              "\n\n"
                                                                                                                                            ], "\nuniform vec3 u_ambient;\n", /* tuple */[
                                                                                                                                              "\n\n",
                                                                                                                                              "\n\n"
                                                                                                                                            ], "\n\n"), set("webgl1_frontLight_common_fragment", _buildChunk(/* tuple */[
                                                                                                                                                  "\n\n",
                                                                                                                                                  "\n\n"
                                                                                                                                                ], "\nvarying vec3 v_worldPosition;\n\n#if POINT_LIGHTS_COUNT > 0\nstruct PointLight {\n    vec3 position;\n    vec3 color;\n    float intensity;\n\n    float range;\n    float constant;\n    float linear;\n    float quadratic;\n};\nuniform PointLight u_pointLights[POINT_LIGHTS_COUNT];\n\n#endif\n\n\n#if DIRECTION_LIGHTS_COUNT > 0\nstruct DirectionLight {\n    vec3 direction;\n\n    float intensity;\n\n    vec3 color;\n};\nuniform DirectionLight u_directionLights[DIRECTION_LIGHTS_COUNT];\n#endif\n", /* tuple */[
                                                                                                                                                  "\nvec3 getDirectionLightDir(vec3 lightDirection);\nvec3 getPointLightDirByLightPos(vec3 lightPos);\nvec3 getPointLightDirByLightPos(vec3 lightPos, vec3 worldPosition);\n",
                                                                                                                                                  "\nvec3 getDirectionLightDir(vec3 lightDirection){\n    lightDirection =  normalize(lightDirection);\n\n    return -lightDirection;\n}\nvec3 getPointLightDirByLightPos(vec3 lightPos){\n    return lightPos - v_worldPosition;\n}\nvec3 getPointLightDirByLightPos(vec3 lightPos, vec3 worldPosition){\n    return lightPos - worldPosition;\n}\n"
                                                                                                                                                ], "\n\n"), set("webgl1_frontLight_common_vertex", _buildChunk(/* tuple */[
                                                                                                                                                      "\n\n",
                                                                                                                                                      "\n\n"
                                                                                                                                                    ], "\nvarying vec3 v_worldPosition;\n\n#if POINT_LIGHTS_COUNT > 0\nstruct PointLight {\n    vec3 position;\n    vec3 color;\n    float intensity;\n\n    float range;\n    float constant;\n    float linear;\n    float quadratic;\n};\nuniform PointLight u_pointLights[POINT_LIGHTS_COUNT];\n\n#endif\n\n\n#if DIRECTION_LIGHTS_COUNT > 0\nstruct DirectionLight {\n    vec3 direction;\n\n    float intensity;\n\n    vec3 color;\n};\nuniform DirectionLight u_directionLights[DIRECTION_LIGHTS_COUNT];\n#endif\n", /* tuple */[
                                                                                                                                                      "\nvec3 getDirectionLightDir(vec3 lightDirection);\nvec3 getPointLightDirByLightPos(vec3 lightPos);\nvec3 getPointLightDirByLightPos(vec3 lightPos, vec3 worldPosition);\n",
                                                                                                                                                      "\nvec3 getDirectionLightDir(vec3 lightDirection){\n    lightDirection =  normalize(lightDirection);\n\n    return -lightDirection;\n}\nvec3 getPointLightDirByLightPos(vec3 lightPos){\n    return lightPos - v_worldPosition;\n}\nvec3 getPointLightDirByLightPos(vec3 lightPos, vec3 worldPosition){\n    return lightPos - worldPosition;\n}\n"
                                                                                                                                                    ], "\n\n"), set("webgl1_frontLight_common", _buildChunk(/* tuple */[
                                                                                                                                                          "\n\n",
                                                                                                                                                          "\n\n"
                                                                                                                                                        ], "\nvarying vec3 v_worldPosition;\n\n#if POINT_LIGHTS_COUNT > 0\nstruct PointLight {\n    vec3 position;\n    vec3 color;\n    float intensity;\n\n    float range;\n    float constant;\n    float linear;\n    float quadratic;\n};\nuniform PointLight u_pointLights[POINT_LIGHTS_COUNT];\n\n#endif\n\n\n#if DIRECTION_LIGHTS_COUNT > 0\nstruct DirectionLight {\n    vec3 direction;\n\n    float intensity;\n\n    vec3 color;\n};\nuniform DirectionLight u_directionLights[DIRECTION_LIGHTS_COUNT];\n#endif\n", /* tuple */[
                                                                                                                                                          "\nvec3 getDirectionLightDir(vec3 lightDirection);\nvec3 getPointLightDirByLightPos(vec3 lightPos);\nvec3 getPointLightDirByLightPos(vec3 lightPos, vec3 worldPosition);\n",
                                                                                                                                                          "\nvec3 getDirectionLightDir(vec3 lightDirection){\n    lightDirection =  normalize(lightDirection);\n\n    return -lightDirection;\n}\nvec3 getPointLightDirByLightPos(vec3 lightPos){\n    return lightPos - v_worldPosition;\n}\nvec3 getPointLightDirByLightPos(vec3 lightPos, vec3 worldPosition){\n    return lightPos - worldPosition;\n}\n"
                                                                                                                                                        ], "\n\n"), set("webgl1_frontLight_end_fragment", _buildChunk(/* tuple */[
                                                                                                                                                              "\n\n",
                                                                                                                                                              "\n\n"
                                                                                                                                                            ], "\n\n", /* tuple */[
                                                                                                                                                              "\n\n",
                                                                                                                                                              "\n\n"
                                                                                                                                                            ], "\ngl_FragColor = totalColor;\n"), set("webgl1_frontLight_fragment", _buildChunk(/* tuple */[
                                                                                                                                                                  "\n\n",
                                                                                                                                                                  "\n\n"
                                                                                                                                                                ], "\n\n", /* tuple */[
                                                                                                                                                                  "\n\n",
                                                                                                                                                                  "\nfloat getBlinnShininess(float shininess, vec3 normal, vec3 lightDir, vec3 viewDir, float dotResultBetweenNormAndLight){\n        vec3 halfAngle = normalize(lightDir + viewDir);\n\n        float blinnTerm = dot(normal, halfAngle);\n\n        blinnTerm = clamp(blinnTerm, 0.0, 1.0);\n        blinnTerm = dotResultBetweenNormAndLight != 0.0 ? blinnTerm : 0.0;\n        blinnTerm = pow(blinnTerm, shininess);\n\n        return blinnTerm;\n}\n\n// float getPhongShininess(float shininess, vec3 normal, vec3 lightDir, vec3 viewDir, float dotResultBetweenNormAndLight){\n//         vec3 reflectDir = reflect(-lightDir, normal);\n//         float phongTerm = dot(viewDir, reflectDir);\n\n//         phongTerm = clamp(phongTerm, 0.0, 1.0);\n//         phongTerm = dotResultBetweenNormAndLight != 0.0 ? phongTerm : 0.0;\n//         phongTerm = pow(phongTerm, shininess);\n\n//         return phongTerm;\n// }\n\nvec3 calcAmbientColor(vec3 materialDiffuse){\n        vec3 materialLight = getMaterialLight();\n\n        return (u_ambient + materialLight) * materialDiffuse.rgb;\n}\n\nvec3 calcLight(vec3 lightDir, vec3 color, float intensity, float attenuation, vec3 normal, vec3 viewDir)\n{\n        vec3 materialDiffuse = getMaterialDiffuse();\n        vec3 materialSpecular = u_specular;\n        vec3 materialEmission = getMaterialEmission();\n\n        float specularStrength = getSpecularStrength();\n\n        float dotResultBetweenNormAndLight = dot(normal, lightDir);\n        float diff = max(dotResultBetweenNormAndLight, 0.0);\n\n        vec3 emissionColor = materialEmission;\n\n        vec3 ambientColor = calcAmbientColor(materialDiffuse);\n\n\n        // if(u_lightModel == 3){\n        //     return emissionColor + ambientColor;\n        // }\n\n//        vec4 diffuseColor = vec4(color * materialDiffuse.rgb * diff * intensity, materialDiffuse.a);\n        vec3 diffuseColor = color * materialDiffuse.rgb * diff * intensity;\n\n        float spec = 0.0;\n\n        // if(u_lightModel == 2){\n        //         spec = getPhongShininess(u_shininess, normal, lightDir, viewDir, diff);\n        // }\n        // else if(u_lightModel == 1){\n        //         spec = getBlinnShininess(u_shininess, normal, lightDir, viewDir, diff);\n        // }\n\n        spec = getBlinnShininess(u_shininess, normal, lightDir, viewDir, diff);\n\n\n        vec3 specularColor = spec * materialSpecular * specularStrength * intensity;\n\n//        return vec4(emissionColor + ambientColor + attenuation * (diffuseColor.rgb + specularColor), diffuseColor.a);\n        return emissionColor + ambientColor + attenuation * (diffuseColor.rgb + specularColor);\n}\n\n\n\n\n#if POINT_LIGHTS_COUNT > 0\n        vec3 calcPointLight(vec3 lightDir, PointLight light, vec3 normal, vec3 viewDir)\n{\n        //lightDir is not normalize computing distance\n        float distance = length(lightDir);\n\n        float attenuation = 0.0;\n\n        if(distance < light.range)\n        {\n            attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));\n        }\n\n        lightDir = normalize(lightDir);\n\n        return calcLight(lightDir, light.color, light.intensity, attenuation, normal, viewDir);\n}\n#endif\n\n\n\n#if DIRECTION_LIGHTS_COUNT > 0\n        vec3 calcDirectionLight(vec3 lightDir, DirectionLight light, vec3 normal, vec3 viewDir)\n{\n        float attenuation = 1.0;\n\n        // lightDir = normalize(lightDir);\n\n        return calcLight(lightDir, light.color, light.intensity, attenuation, normal, viewDir);\n}\n#endif\n\n\n\nvec4 calcTotalLight(vec3 norm, vec3 viewDir){\n    vec4 totalLight = vec4(0.0, 0.0, 0.0, 1.0);\n\n\n    #if (DIRECTION_LIGHTS_COUNT == 0 && POINT_LIGHTS_COUNT == 0 )\n        return vec4(calcAmbientColor(getMaterialDiffuse()), 1.0);\n    #endif\n\n\n    #if POINT_LIGHTS_COUNT > 0\n                for(int i = 0; i < POINT_LIGHTS_COUNT; i++){\n                totalLight += vec4(calcPointLight(getPointLightDir(i), u_pointLights[i], norm, viewDir), 0.0);\n        }\n    #endif\n\n    #if DIRECTION_LIGHTS_COUNT > 0\n                for(int i = 0; i < DIRECTION_LIGHTS_COUNT; i++){\n                totalLight += vec4(calcDirectionLight(getDirectionLightDir(i), u_directionLights[i], norm, viewDir), 0.0);\n        }\n    #endif\n\n        return totalLight;\n}\n"
                                                                                                                                                                ], "\nvec3 normal = normalize(getNormal());\n\n// #ifdef BOTH_SIdE\n// normal = normal * (-1.0 + 2.0 * float(gl_FrontFacing));\n// #endif\n\nvec3 viewDir = normalize(getViewDir());\n\nvec4 totalColor = calcTotalLight(normal, viewDir);\n\n// totalColor.a *= u_opacity;\n\ntotalColor.rgb = totalColor.rgb * getShadowVisibility();\n"), set("webgl1_frontLight_setWorldPosition_vertex", _buildChunk(/* tuple */[
                                                                                                                                                                      "\n\n",
                                                                                                                                                                      "\n\n"
                                                                                                                                                                    ], "\n\n", /* tuple */[
                                                                                                                                                                      "\n\n",
                                                                                                                                                                      "\n\n"
                                                                                                                                                                    ], "\nv_worldPosition = vec3(mMatrix * vec4(a_position, 1.0));\n"), set("webgl1_frontLight_vertex", _buildChunk(/* tuple */[
                                                                                                                                                                          "\n\n",
                                                                                                                                                                          "\n\n"
                                                                                                                                                                        ], "\n\n", /* tuple */[
                                                                                                                                                                          "\n\n",
                                                                                                                                                                          "\n\n"
                                                                                                                                                                        ], "\ngl_Position = u_pMatrix * u_vMatrix * vec4(v_worldPosition, 1.0);\n"), createEmpty$1(/* () */0)))))))))))))))))))))))))))))))))))))))];
  }
  
  
  /* HashMapService-WonderCommonlib Not a pure module */
  
  var webgl1_main_begin = "void main(void){\n";
  
  var webgl1_main_end = "}\n";
  
  function _generateAttributeSource(shaderLibDataArr) {
    return shaderLibDataArr.reduce((function (result, param) {
                  var variables = param[/* variables */2];
                  var match = isJsonSerializedValueNone(variables);
                  if (match) {
                    return result;
                  } else {
                    var optionalAttributes = unsafeGetJsonSerializedValue(variables)[/* attributes */1];
                    var match$1 = isJsonSerializedValueNone(optionalAttributes);
                    if (match$1) {
                      return result;
                    } else {
                      return result + unsafeGetJsonSerializedValue(optionalAttributes).reduce((function (result, param) {
                                    var type_ = param[/* type_ */2];
                                    var name = param[/* name */0];
                                    var match = !isJsonSerializedValueNone(name) && !isJsonSerializedValueNone(type_);
                                    if (match) {
                                      var name$1 = unsafeGetJsonSerializedValue(name);
                                      var type_$1 = unsafeGetJsonSerializedValue(type_);
                                      return result + ("attribute " + (String(type_$1) + (" " + (String(name$1) + ";\n  "))));
                                    } else {
                                      return result;
                                    }
                                  }), "");
                    }
                  }
                }), "");
  }
  
  function _isInSource(key, source) {
    return source.indexOf(key) > -1;
  }
  
  function _generateUniformSourceType(type_) {
    if (type_ === "float3") {
      return "vec3";
    } else {
      return type_;
    }
  }
  
  function _generateUniformSource(shaderLibDataArr, sourceVarDeclare, sourceFuncDefine, sourceBody) {
    return shaderLibDataArr.reduce((function (result, param) {
                  var variables = param[/* variables */2];
                  var match = isJsonSerializedValueNone(variables);
                  if (match) {
                    return result;
                  } else {
                    var optionalUniforms = unsafeGetJsonSerializedValue(variables)[/* uniforms */0];
                    var match$1 = isJsonSerializedValueNone(optionalUniforms);
                    if (match$1) {
                      return result;
                    } else {
                      return result + unsafeGetJsonSerializedValue(optionalUniforms).filter((function (param) {
                                      var name = param[/* name */0];
                                      if (_isInSource(name, sourceVarDeclare) || _isInSource(name, sourceFuncDefine)) {
                                        return true;
                                      } else {
                                        return _isInSource(name, sourceBody);
                                      }
                                    })).reduce((function (result, param) {
                                    var type_ = _generateUniformSourceType(param[/* type_ */2]);
                                    return result + ("uniform " + (String(type_) + (" " + (String(param[/* name */0]) + ";\n"))));
                                  }), "");
                    }
                  }
                }), "");
  }
  
  function _setSource(sourceChunk, param) {
    var sourceTop = sourceChunk[/* top */0];
    var sourceDefine = sourceChunk[/* define */1];
    var sourceVarDeclare = sourceChunk[/* varDeclare */2];
    var sourceFuncDeclare = sourceChunk[/* funcDeclare */3];
    var sourceFuncDefine = sourceChunk[/* funcDefine */4];
    var sourceBody = sourceChunk[/* body */5];
    var top = param[/* top */0];
    var define = param[/* define */1];
    var varDeclare = param[/* varDeclare */2];
    var funcDeclare = param[/* funcDeclare */3];
    var funcDefine = param[/* funcDefine */4];
    var body = param[/* body */5];
    sourceChunk[/* top */0] = sourceTop + top;
    sourceChunk[/* define */1] = sourceDefine + define;
    sourceChunk[/* varDeclare */2] = sourceVarDeclare + varDeclare;
    sourceChunk[/* funcDeclare */3] = sourceFuncDeclare + funcDeclare;
    sourceChunk[/* funcDefine */4] = sourceFuncDefine + funcDefine;
    sourceChunk[/* body */5] = sourceBody + body;
    return sourceChunk;
  }
  
  function _buildBody(param, webgl1_main_end) {
    var body = param[/* body */5];
    return body + webgl1_main_end;
  }
  
  function _buildVarDeclare(param, shaderLibDataArr) {
    var varDeclare = param[/* varDeclare */2];
    var funcDefine = param[/* funcDefine */4];
    var body = param[/* body */5];
    return varDeclare + ("\n" + _generateUniformSource(shaderLibDataArr, varDeclare, funcDefine, body));
  }
  
  function _addAlllParts(param) {
    var top = param[/* top */0];
    var define = param[/* define */1];
    var varDeclare = param[/* varDeclare */2];
    var funcDeclare = param[/* funcDeclare */3];
    var funcDefine = param[/* funcDefine */4];
    var body = param[/* body */5];
    return top + (define + (varDeclare + (funcDeclare + (funcDefine + body))));
  }
  
  function _buildVsAndFsByType(param, param$1, execHandleFunc, glslChunkRecord) {
    var name = param$1[1];
    var type_ = param$1[0];
    var fs = param[1];
    var vs = param[0];
    switch (type_) {
      case "fs" : 
          return /* tuple */[
                  vs,
                  _setSource(fs, getChunk(name, glslChunkRecord))
                ];
      case "fs_function" : 
          return /* tuple */[
                  vs,
                  _setSource(fs, _1(execHandleFunc, name))
                ];
      case "vs" : 
          return /* tuple */[
                  _setSource(vs, getChunk(name, glslChunkRecord)),
                  fs
                ];
      case "vs_function" : 
          return /* tuple */[
                  _setSource(vs, _1(execHandleFunc, name)),
                  fs
                ];
      default:
        return fatal(buildFatalMessage("buildGLSLSource", "unknown glsl type: " + (String(type_) + ""), "", "", "name: " + (String(name) + "")));
    }
  }
  
  function _buildVsAndFs(param, shaderLibDataArr, execHandleFunc, glslChunkRecord) {
    return reduceOneParam((function (glslTuple, param) {
                  var glsls = param[/* glsls */1];
                  var match = isJsonSerializedValueNone(glsls);
                  if (match) {
                    return glslTuple;
                  } else {
                    return reduceOneParam((function (sourceTuple, param) {
                                  return _buildVsAndFsByType(sourceTuple, /* tuple */[
                                              param[/* type_ */0],
                                              param[/* name */1]
                                            ], execHandleFunc, glslChunkRecord);
                                }), glslTuple, unsafeGetJsonSerializedValue(glsls));
                  }
                }), /* tuple */[
                param[0],
                param[1]
              ], shaderLibDataArr);
  }
  
  function buildGLSLSource(_, shaderLibDataArr, execHandleFunc, param) {
    var precision = param[0][/* precision */0];
    var vs = /* record */[
      /* top */"",
      /* define */"",
      /* varDeclare */"",
      /* funcDeclare */"",
      /* funcDefine */"",
      /* body */""
    ];
    var fs = /* record */[
      /* top */"",
      /* define */"",
      /* varDeclare */"",
      /* funcDeclare */"",
      /* funcDefine */"",
      /* body */""
    ];
    vs[/* body */5] = vs[/* body */5] + webgl1_main_begin;
    fs[/* body */5] = fs[/* body */5] + webgl1_main_begin;
    var precision$1 = unsafeGet$2(precision);
    vs[/* top */0] = precision$1 + vs[/* top */0];
    fs[/* top */0] = precision$1 + fs[/* top */0];
    var match = _buildVsAndFs(/* tuple */[
          vs,
          fs
        ], shaderLibDataArr, execHandleFunc, param[1]);
    var fs$1 = match[1];
    var vs$1 = match[0];
    vs$1[/* body */5] = _buildBody(vs$1, webgl1_main_end);
    fs$1[/* body */5] = _buildBody(fs$1, webgl1_main_end);
    vs$1[/* varDeclare */2] = "\n" + (_generateAttributeSource(shaderLibDataArr) + vs$1[/* varDeclare */2]);
    vs$1[/* varDeclare */2] = _buildVarDeclare(vs$1, shaderLibDataArr);
    fs$1[/* varDeclare */2] = _buildVarDeclare(fs$1, shaderLibDataArr);
    return /* tuple */[
            _addAlllParts(vs$1),
            _addAlllParts(fs$1)
          ];
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function getDefaultUnit() {
    return 255;
  }
  
  function hasMap(mapUnit) {
    return mapUnit !== 255;
  }
  
  
  /* No side effect */
  
  function findFirstShaderData(shaderLibName, shaderLibs) {
    return unsafeFindFirst(shaderLibs, shaderLibName, (function (item) {
                  return filterTargetName(item[/* name */0], shaderLibName);
                }));
  }
  
  function _getMaterialShaderLibDataArrByGroup(groups, name, shaderLibs, resultDataArr) {
    return resultDataArr.concat(unsafeFindFirst(groups, name, (function (item) {
                          return filterTargetName(item[/* name */0], name);
                        }))[/* value */1].map((function (name) {
                      return findFirstShaderData(name, shaderLibs);
                    })));
  }
  
  function handleUnknownNameWhenGetMaterialShaderLibDataArrByStaticBranch(name, staticBranchs) {
    var partial_arg = "staticBranchs";
    debugJson((function (param) {
            return buildDebugJsonMessage(partial_arg, staticBranchs, param);
          }), getIsDebug(stateData));
    return fatal(buildFatalMessage("_getMaterialShaderLibDataArrByStaticBranch", "unknown name:" + (String(name) + ""), "", "", ""));
  }
  
  function getMaterialShaderLibDataArrByStaticBranchInstance(param, param$1, resultDataArr) {
    var value = param$1[1];
    return push$1(findFirstShaderData(param[0] ? (
                      param[1] ? caml_array_get(value, 1) : caml_array_get(value, 2)
                    ) : caml_array_get(value, 0), param$1[0]), resultDataArr);
  }
  
  function getMaterialShaderLibDataArrByDynamicBranch(param, param$1, isPassFunc, resultDataArr) {
    var name = param[1];
    var dynamicBranchData = unsafeFindFirst(param$1[0], name, (function (item) {
            return filterTargetName(item[/* name */0], name);
          }));
    var match = isPassFunc(param[0], dynamicBranchData[/* condition */1], param$1[2]);
    var dynamicBranchShaderLibNameOption = match ? getPass(dynamicBranchData) : getFail(dynamicBranchData);
    var match$1 = isJsonSerializedValueNone(dynamicBranchShaderLibNameOption);
    if (match$1) {
      return resultDataArr;
    } else {
      return push$1(findFirstShaderData(unsafeGetJsonSerializedValue(dynamicBranchShaderLibNameOption), param$1[1]), resultDataArr);
    }
  }
  
  function getMaterialShaderLibDataArrByType(param, param$1, param$2, resultDataArr) {
    var shaderLibs = param$1[0];
    var name = param[3];
    var type_ = param[1];
    switch (type_) {
      case "dynamic_branch" : 
          return getMaterialShaderLibDataArrByDynamicBranch(/* tuple */[
                      param[0],
                      name
                    ], /* tuple */[
                      param$1[2],
                      shaderLibs,
                      param$1[3]
                    ], param$2[1], resultDataArr);
      case "group" : 
          return _getMaterialShaderLibDataArrByGroup(param[2], name, shaderLibs, resultDataArr);
      case "static_branch" : 
          return param$2[0](/* tuple */[
                      name,
                      param[4],
                      param[5]
                    ], /* tuple */[
                      param$1[1],
                      shaderLibs
                    ], resultDataArr);
      default:
        var partial_arg = "shaderLibs";
        debugJson((function (param) {
                return buildDebugJsonMessage(partial_arg, shaderLibs, param);
              }), getIsDebug(stateData));
        return fatal(buildFatalMessage("_getMaterialShaderLibDataArrByType", "unknown type_:" + (String(type_) + ""), "", "", ""));
    }
  }
  
  function getMaterialShaderLibDataArr$1(param, param$1, param$2, state) {
    var isPassFunc = param$2[1];
    var getMaterialShaderLibDataArrByStaticBranchFunc = param$2[0];
    var shaderLibs = param$1[2];
    var match = param$1[0];
    var groups = match[/* groups */2];
    var dynamicBranchs = match[/* dynamicBranchs */1];
    var staticBranchs = match[/* staticBranchs */0];
    var isSupportInstance = param[2];
    var isSourceInstance = param[1];
    var materialIndex = param[0];
    return reduceOneParam((function (resultDataArr, param) {
                  var name = param[/* name */1];
                  var type_ = param[/* type_ */0];
                  var match = isJsonSerializedValueNone(type_);
                  if (match) {
                    return push$1(findFirstShaderData(name, shaderLibs), resultDataArr);
                  } else {
                    return getMaterialShaderLibDataArrByType(/* tuple */[
                                materialIndex,
                                unsafeGetJsonSerializedValue(type_),
                                groups,
                                name,
                                isSourceInstance,
                                isSupportInstance
                              ], /* tuple */[
                                shaderLibs,
                                staticBranchs,
                                dynamicBranchs,
                                state
                              ], /* tuple */[
                                getMaterialShaderLibDataArrByStaticBranchFunc,
                                isPassFunc
                              ], resultDataArr);
                  }
                }), createEmpty(/* () */0), param$1[1]);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function _getMaterialShaderLibDataArrByStaticBranch(param, param$1, resultDataArr) {
    var staticBranchs = param$1[0];
    var name = param[0];
    if (name === "modelMatrix_instance") {
      var match = unsafeFindFirst(staticBranchs, name, (function (item) {
              return filterTargetName(item[/* name */0], name);
            }));
      return getMaterialShaderLibDataArrByStaticBranchInstance(/* tuple */[
                  param[1],
                  param[2]
                ], /* tuple */[
                  param$1[1],
                  match[/* value */1]
                ], resultDataArr);
    } else {
      return handleUnknownNameWhenGetMaterialShaderLibDataArrByStaticBranch(name, staticBranchs);
    }
  }
  
  function _isPass(materialIndex, condition, state) {
    if (condition === "basic_has_map") {
      return hasMap(getMapUnit$1(materialIndex, state[/* materialRecord */0][/* mapUnits */3]));
    } else {
      return fatal(buildFatalMessage("_isPass", "unknown condition:" + (String(condition) + ""), "", "", ""));
    }
  }
  
  function getMaterialShaderLibDataArr(materialIndex, param, shaderLibTuple, state) {
    return getMaterialShaderLibDataArr$1(/* tuple */[
                materialIndex,
                param[0],
                param[1]
              ], shaderLibTuple, /* tuple */[
                _getMaterialShaderLibDataArrByStaticBranch,
                _isPass
              ], state);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function _getShaderLibItems(param) {
    var shaderName = "render_basic";
    return unsafeFindFirst(param[/* materialShaders */3], shaderName, (function (param) {
                    return filterTargetName(param[/* name */0], shaderName);
                  }))[/* shaderLibs */1];
  }
  
  function isNeedInitMaterial(materialIndex, shaderIndices) {
    return !hasShaderIndex(materialIndex, shaderIndices);
  }
  
  function initMaterial(gl, dataTuple, state) {
    return initMaterial$1(gl, dataTuple, /* tuple */[
                initMaterialShader,
                buildGLSLSource,
                setShaderIndex,
                _getShaderLibItems,
                getMaterialShaderLibDataArr
              ], /* tuple */[
                state[/* materialRecord */0][/* shaderIndices */2],
                state[/* renderConfigRecord */1],
                state
              ]);
  }
  
  function init(gl, instanceTuple, state) {
    var materialRecord = state[/* materialRecord */0];
    return init$1(gl, instanceTuple, initMaterial, /* tuple */[
                materialRecord[/* index */0],
                materialRecord[/* disposedIndexArray */1],
                state
              ]);
  }
  
  
  /* JobConfigService-Wonderjs Not a pure module */
  
  function createTypeArrays$1(buffer, basicMaterialCount, textureCountPerMaterial) {
    return /* tuple */[
            new Uint32Array(buffer, getShaderIndicesOffset(basicMaterialCount), getShaderIndicesLength(basicMaterialCount)),
            new Float32Array(buffer, getColorsOffset(basicMaterialCount), getColorsLength(basicMaterialCount)),
            new Uint32Array(buffer, getTextureIndicesOffset(basicMaterialCount, textureCountPerMaterial), getTextureIndicesLength(basicMaterialCount, textureCountPerMaterial)),
            new Uint8Array(buffer, getMapUnitsOffset(basicMaterialCount, textureCountPerMaterial), getMapUnitsLength(basicMaterialCount))
          ];
  }
  
  
  /* ShaderIndicesService-Wonderjs Not a pure module */
  
  function getRecord$1(param) {
    return unsafeGet$2(param[/* basicMaterialRecord */16]);
  }
  
  function setAllTypeArrDataToDefault$1(basicMaterialCount, defaultShaderIndex, defaultColor, param) {
    var defaultUnit = getDefaultUnit(/* () */0);
    var match = reduceOneParam((function (param, index) {
            return /* tuple */[
                    setShaderIndex(index, defaultShaderIndex, param[0]),
                    setColor(index, defaultColor, param[1]),
                    setMapUnit(index, defaultUnit, param[2])
                  ];
          }), /* tuple */[
          param[0],
          param[1],
          param[3]
        ], range(0, basicMaterialCount - 1 | 0));
    return /* tuple */[
            match[0],
            match[1],
            param[2].fill(0),
            match[2]
          ];
  }
  
  function _setAllTypeArrDataToDefault$1(basicMaterialCount, defaultShaderIndex, defaultColor, param) {
    return /* tuple */[
            param[0],
            setAllTypeArrDataToDefault$1(basicMaterialCount, defaultShaderIndex, defaultColor, /* tuple */[
                  param[1],
                  param[2],
                  param[3],
                  param[4]
                ])
          ];
  }
  
  function _initBufferData$1(basicMaterialCount, textureCountPerMaterial, defaultShaderIndex, defaultColor) {
    var buffer = createBuffer$2(basicMaterialCount, textureCountPerMaterial);
    var match = createTypeArrays$1(buffer, basicMaterialCount, textureCountPerMaterial);
    return _setAllTypeArrDataToDefault$1(basicMaterialCount, defaultShaderIndex, defaultColor, /* tuple */[
                buffer,
                match[0],
                match[1],
                match[2],
                match[3]
              ]);
  }
  
  function create$5(state) {
    var settingRecord = state[/* settingRecord */1];
    var defaultShaderIndex = getDefaultShaderIndex(/* () */0);
    var defaultColor = /* array */[
      1,
      1,
      1
    ];
    var match = _initBufferData$1(getBasicMaterialCount(settingRecord), getTextureCountPerMaterial(settingRecord), defaultShaderIndex, defaultColor);
    var match$1 = match[1];
    state[/* basicMaterialRecord */16] = /* record */[
      /* index */0,
      /* buffer */match[0],
      /* shaderIndices */match$1[0],
      /* colors */match$1[1],
      /* textureIndices */match$1[2],
      /* mapUnits */match$1[3],
      /* textureCountMap */createEmpty$2(/* () */0),
      /* defaultColor */defaultColor,
      /* gameObjectMap */createEmpty$2(/* () */0),
      /* groupCountMap */createEmpty$2(/* () */0),
      /* disposedIndexArray */createEmpty(/* () */0),
      /* nameMap */createEmpty$2(/* () */0),
      /* materialArrayForWorkerInit */createEmpty(/* () */0)
    ];
    return state;
  }
  
  function deepCopyForRestore$1(state) {
    var record = getRecord$1(state);
    var index = record[/* index */0];
    var materialArrayForWorkerInit = record[/* materialArrayForWorkerInit */12];
    var newrecord = caml_array_dup(state);
    newrecord[/* basicMaterialRecord */16] = /* record */[
      /* index */index,
      /* buffer */record[/* buffer */1],
      /* shaderIndices */copyUint32ArrayWithEndIndex(imul(index, getShaderIndicesSize$1(/* () */0)), record[/* shaderIndices */2]),
      /* colors */copyFloat32ArrayWithEndIndex(imul(index, getColorsSize(/* () */0)), record[/* colors */3]),
      /* textureIndices */copyUint32ArrayWithEndIndex(imul(index, getTextureIndicesSize(getTextureCountPerMaterial(state[/* settingRecord */1]))), record[/* textureIndices */4]),
      /* mapUnits */copyUint8ArrayWithEndIndex(imul(index, getMapUnitsSize(/* () */0)), record[/* mapUnits */5]),
      /* textureCountMap */copy(record[/* textureCountMap */6]),
      /* defaultColor */record[/* defaultColor */7],
      /* gameObjectMap */copy(record[/* gameObjectMap */8]),
      /* groupCountMap */copy(record[/* groupCountMap */9]),
      /* disposedIndexArray */record[/* disposedIndexArray */10].slice(),
      /* nameMap */copy(record[/* nameMap */11]),
      /* materialArrayForWorkerInit */materialArrayForWorkerInit.slice()
    ];
    return newrecord;
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function buildMapFromArray(array, map) {
    forEach((function (value) {
            set$1(value, true, map);
            return /* () */0;
          }), array);
    return map;
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  function removeDisposedOnesFromMaterialArrayForWorkerInit(materialArray, materialArrayForWorkerInit) {
    var match = materialArray.length;
    if (match !== 0) {
      var materialMap = buildMapFromArray(materialArray, createEmpty$2(/* () */0));
      return materialArrayForWorkerInit.filter((function (material) {
                    return !has$1(material, materialMap);
                  }));
    } else {
      return materialArrayForWorkerInit;
    }
  }
  
  function addMaterialToMaterialArrayForWorkerInit(materialIndex, materialArrayForWorkerInit) {
    var match = getLast(materialArrayForWorkerInit) === materialIndex;
    if (match) {
      return materialArrayForWorkerInit;
    } else {
      return push$1(materialIndex, materialArrayForWorkerInit);
    }
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function getRecord$2(state) {
    return unsafeGet$2(state[/* renderConfigRecord */5]);
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function createInitMaterialState(param, state) {
    var match = getRecord$1(state);
    return /* record */[
            /* materialRecord : record */[
              /* index */param[0],
              /* disposedIndexArray */param[1],
              /* shaderIndices */match[/* shaderIndices */2],
              /* mapUnits */match[/* mapUnits */5]
            ],
            /* renderConfigRecord */getRecord$2(state),
            /* shaderRecord */state[/* shaderRecord */27],
            /* programRecord */state[/* programRecord */29],
            /* glslRecord */state[/* glslRecord */28],
            /* glslSenderRecord */state[/* glslSenderRecord */31],
            /* glslLocationRecord */state[/* glslLocationRecord */30],
            /* glslChunkRecord */state[/* glslChunkRecord */32]
          ];
  }
  
  
  /* RecordRenderConfigMainService-Wonderjs Not a pure module */
  
  function initMaterials(materialIndexArr, gl, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var gameObjectMap = getRecord$1(state)[/* gameObjectMap */8];
    var isSupportInstance$$1 = isSupportInstance(state);
    var match = getRecord$1(state);
    reduceOneParam((function (state, materialIndex) {
            return initMaterial(gl, /* tuple */[
                        materialIndex,
                        isSourceInstance(materialIndex, gameObjectMap, gameObjectRecord),
                        isSupportInstance$$1
                      ], state);
          }), createInitMaterialState(/* tuple */[
              match[/* index */0],
              match[/* disposedIndexArray */10]
            ], state), materialIndexArr);
    return state;
  }
  
  function handleInitComponent(materialIndex, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var match = getRecord$1(state);
    var match$1 = isNeedInitMaterial(materialIndex, match[/* shaderIndices */2]);
    if (match$1) {
      var match$2 = isUseWorker(state);
      if (match$2) {
        var match$3 = getRecord$1(state);
        var materialArrayForWorkerInit = match$3[/* materialArrayForWorkerInit */12];
        addMaterialToMaterialArrayForWorkerInit(materialIndex, materialArrayForWorkerInit);
        return state;
      } else {
        var gl = unsafeGetGl(state[/* deviceManagerRecord */10]);
        var gameObjectMap = getRecord$1(state)[/* gameObjectMap */8];
        var isSupportInstance$$1 = isSupportInstance(state);
        var match$4 = getRecord$1(state);
        initMaterial(gl, /* tuple */[
              materialIndex,
              isSourceInstance(materialIndex, gameObjectMap, gameObjectRecord),
              isSupportInstance$$1
            ], createInitMaterialState(/* tuple */[
                  match$4[/* index */0],
                  match$4[/* disposedIndexArray */10]
                ], state));
        return state;
      }
    } else {
      return state;
    }
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  function getBufferMaxCount() {
    return 4;
  }
  
  function getColorsSize$1() {
    return 3;
  }
  
  function getIntensitiesSize() {
    return 1;
  }
  
  function getColorIndex$1(index) {
    return imul(index, 3);
  }
  
  function getIntensityIndex(index) {
    return (index << 0);
  }
  
  function getColorsOffset$1() {
    return 0;
  }
  
  function getColorsLength$1() {
    return 12;
  }
  
  function getIntensitiesOffset() {
    return imul(getColorsLength$1(/* () */0), Float32Array.BYTES_PER_ELEMENT);
  }
  
  function getIntensitiesLength() {
    return 4;
  }
  
  function getTotalByteLength$4(count) {
    return (imul(count, Float32Array.BYTES_PER_ELEMENT) << 2);
  }
  
  function createBuffer$4(count) {
    return newSharedArrayBuffer(getTotalByteLength$4(count));
  }
  
  
  /* Worker-Wonderjs Not a pure module */
  
  function getLightCount$1(count, _) {
    return ensureCheck((function (count) {
                  var maxCount = getBufferMaxCount(/* () */0);
                  return test(buildAssertMessage("light count: " + (String(count) + (" <= max buffer count: " + (String(maxCount) + ""))), "not"), (function () {
                                return assertLte(/* Int */0, count, maxCount);
                              }));
                }), getIsDebug(stateData), count);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function getBufferMaxCount$1() {
    return 4;
  }
  
  function getColorsSize$2() {
    return 3;
  }
  
  function getIntensitiesSize$1() {
    return 1;
  }
  
  function getConstantsSize() {
    return 1;
  }
  
  function getLinearsSize() {
    return 1;
  }
  
  function getQuadraticsSize() {
    return 1;
  }
  
  function getRangesSize() {
    return 1;
  }
  
  function getColorIndex$2(index) {
    return imul(index, 3);
  }
  
  function getColorsOffset$2() {
    return 0;
  }
  
  function getColorsLength$2() {
    return 12;
  }
  
  function getIntensitiesOffset$1() {
    return imul(getColorsLength$2(/* () */0), Float32Array.BYTES_PER_ELEMENT);
  }
  
  function getIntensitiesLength$1() {
    return 4;
  }
  
  function getConstantsOffset() {
    return imul(getColorsLength$2(/* () */0), Float32Array.BYTES_PER_ELEMENT) + imul(getIntensitiesLength$1(/* () */0), Float32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getConstantsLength() {
    return 4;
  }
  
  function getLinearsOffset() {
    return getConstantsOffset(/* () */0) + imul(getConstantsLength(/* () */0), Float32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getLinearsLength() {
    return 4;
  }
  
  function getQuadraticsOffset() {
    return getLinearsOffset(/* () */0) + imul(getLinearsLength(/* () */0), Float32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getQuadraticsLength() {
    return 4;
  }
  
  function getRangesOffset() {
    return getQuadraticsOffset(/* () */0) + imul(getQuadraticsLength(/* () */0), Float32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getRangesLength() {
    return 4;
  }
  
  function getTotalByteLength$5(count) {
    return (imul(count, Float32Array.BYTES_PER_ELEMENT) << 3);
  }
  
  function createBuffer$5(count) {
    return newSharedArrayBuffer(getTotalByteLength$5(count));
  }
  
  
  /* Worker-Wonderjs Not a pure module */
  
  function getLightCount(param) {
    return getLightCount$1(param[/* index */0], getBufferMaxCount$1(/* () */0));
  }
  
  
  /* CountLightService-Wonderjs Not a pure module */
  
  function getLightCount$2(param) {
    return getLightCount$1(param[/* index */0], getBufferMaxCount(/* () */0));
  }
  
  
  /* CountLightService-Wonderjs Not a pure module */
  
  function execHandle(param) {
    var directionLightCount = getLightCount$2(param[0]);
    var pointLightCount = getLightCount(param[1]);
    return /* record */[
            /* top */"",
            /* define */"#define DIRECTION_LIGHTS_COUNT " + (String(directionLightCount) + ("\n#define POINT_LIGHTS_COUNT " + (String(pointLightCount) + ""))),
            /* varDeclare */"",
            /* funcDeclare */"",
            /* funcDefine */"",
            /* body */""
          ];
  }
  
  
  /* CountInitLightMaterialPointLightService-Wonderjs Not a pure module */
  
  function getHandle$1(recordTuple, name) {
    if (name === "defineLightCount") {
      return execHandle(recordTuple);
    } else {
      return fatal(buildFatalMessage("getHandle", "unknown handle name: " + (String(name) + ""), "", "", ""));
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  var getPosition$1 = unsafeGet$1;
  
  
  /* No side effect */
  
  function createTypeArrays$2(buffer, _) {
    return /* tuple */[
            new Float32Array(buffer, getColorsOffset$2(/* () */0), getColorsLength$2(/* () */0)),
            new Float32Array(buffer, getIntensitiesOffset$1(/* () */0), getIntensitiesLength$1(/* () */0)),
            new Float32Array(buffer, getConstantsOffset(/* () */0), getConstantsLength(/* () */0)),
            new Float32Array(buffer, getLinearsOffset(/* () */0), getLinearsLength(/* () */0)),
            new Float32Array(buffer, getQuadraticsOffset(/* () */0), getQuadraticsLength(/* () */0)),
            new Float32Array(buffer, getRangesOffset(/* () */0), getRangesLength(/* () */0))
          ];
  }
  
  
  /* BufferPointLightService-Wonderjs Not a pure module */
  
  function getColor$4(index, typeArr) {
    return getFloat3(getColorIndex$2(index), typeArr);
  }
  
  function setColor$1(index, color, typeArr) {
    return setFloat3(getColorIndex$2(index), color, typeArr);
  }
  
  function getIntensity$1(index, typeArr) {
    return typeArr[index];
  }
  
  function setIntensity(index, intensity, typeArr) {
    typeArr[index] = intensity;
    return typeArr;
  }
  
  function getConstant$1(index, typeArr) {
    return typeArr[index];
  }
  
  function setConstant(index, constant, typeArr) {
    typeArr[index] = constant;
    return typeArr;
  }
  
  function getLinear(index, typeArr) {
    return typeArr[index];
  }
  
  function setLinear(index, linear, typeArr) {
    typeArr[index] = linear;
    return typeArr;
  }
  
  function getQuadratic$1(index, typeArr) {
    return typeArr[index];
  }
  
  function setQuadratic(index, quadratic, typeArr) {
    typeArr[index] = quadratic;
    return typeArr;
  }
  
  function getRange$1(index, typeArr) {
    return typeArr[index];
  }
  
  function setRange(index, range$$1, typeArr) {
    typeArr[index] = range$$1;
    return typeArr;
  }
  
  function getDefaultColor() {
    return /* array */[
            1,
            1,
            1
          ];
  }
  
  function getDefaultIntensity() {
    return 1;
  }
  
  function getDefaultConstant() {
    return 1;
  }
  
  function getDefaultLinear() {
    return 0.07;
  }
  
  function getDefaultQuadratic() {
    return 0.017;
  }
  
  function getDefaultRange() {
    return 65;
  }
  
  function setAllTypeArrDataToDefault$2(count, param) {
    var defaultColor = /* array */[
      1,
      1,
      1
    ];
    return reduceOneParam((function (param, index) {
                  return /* tuple */[
                          setColor$1(index, defaultColor, param[0]),
                          setIntensity(index, 1, param[1]),
                          setConstant(index, 1, param[2]),
                          setLinear(index, 0.07, param[3]),
                          setQuadratic(index, 0.017, param[4]),
                          setRange(index, 65, param[5])
                        ];
                }), /* tuple */[
                param[0],
                param[1],
                param[2],
                param[3],
                param[4],
                param[5]
              ], range(0, count - 1 | 0));
  }
  
  function _setAllTypeArrDataToDefault$2(count, param) {
    return /* tuple */[
            param[0],
            setAllTypeArrDataToDefault$2(count, /* tuple */[
                  param[1],
                  param[2],
                  param[3],
                  param[4],
                  param[5],
                  param[6]
                ])
          ];
  }
  
  function _initBufferData$2() {
    var count = getBufferMaxCount$1(/* () */0);
    var buffer = createBuffer$5(count);
    var match = createTypeArrays$2(buffer, count);
    return _setAllTypeArrDataToDefault$2(count, /* tuple */[
                buffer,
                match[0],
                match[1],
                match[2],
                match[3],
                match[4],
                match[5]
              ]);
  }
  
  function create$6() {
    var match = _initBufferData$2(/* () */0);
    var match$1 = match[1];
    return /* record */[
            /* index */0,
            /* buffer */match[0],
            /* colors */match$1[0],
            /* intensities */match$1[1],
            /* constants */match$1[2],
            /* linears */match$1[3],
            /* quadratics */match$1[4],
            /* ranges */match$1[5],
            /* mappedIndexMap */createEmpty$2(/* () */0),
            /* gameObjectMap */createEmpty$2(/* () */0)
          ];
  }
  
  function deepCopyForRestore$2(state) {
    var pointLightRecord = state[/* pointLightRecord */22];
    var index = pointLightRecord[/* index */0];
    var newrecord = caml_array_dup(state);
    newrecord[/* pointLightRecord */22] = /* record */[
      /* index */index,
      /* buffer */pointLightRecord[/* buffer */1],
      /* colors */copyFloat32ArrayWithEndIndex(imul(index, getColorsSize$2(/* () */0)), pointLightRecord[/* colors */2]),
      /* intensities */copyFloat32ArrayWithEndIndex(imul(index, getIntensitiesSize$1(/* () */0)), pointLightRecord[/* intensities */3]),
      /* constants */copyFloat32ArrayWithEndIndex(imul(index, getConstantsSize(/* () */0)), pointLightRecord[/* constants */4]),
      /* linears */copyFloat32ArrayWithEndIndex(imul(index, getLinearsSize(/* () */0)), pointLightRecord[/* linears */5]),
      /* quadratics */copyFloat32ArrayWithEndIndex(imul(index, getQuadraticsSize(/* () */0)), pointLightRecord[/* quadratics */6]),
      /* ranges */copyFloat32ArrayWithEndIndex(imul(index, getRangesSize(/* () */0)), pointLightRecord[/* ranges */7]),
      /* mappedIndexMap */copy(pointLightRecord[/* mappedIndexMap */8]),
      /* gameObjectMap */copy(pointLightRecord[/* gameObjectMap */9])
    ];
    return newrecord;
  }
  
  
  /* SparseMapService-Wonderjs Not a pure module */
  
  function getColor$3(mappedIndex, param) {
    return getColor$4(mappedIndex, param[/* colors */1]);
  }
  
  function getIntensity(mappedIndex, param) {
    return getIntensity$1(mappedIndex, param[/* intensities */2]);
  }
  
  function getConstant(mappedIndex, param) {
    return getConstant$1(mappedIndex, param[/* constants */3]);
  }
  
  function getLiear(mappedIndex, param) {
    return getLinear(mappedIndex, param[/* linears */4]);
  }
  
  function getQuadratic(mappedIndex, param) {
    return getQuadratic$1(mappedIndex, param[/* quadratics */5]);
  }
  
  function getRange(mappedIndex, param) {
    return getRange$1(mappedIndex, param[/* ranges */6]);
  }
  
  
  /* RecordPointLightMainService-Wonderjs Not a pure module */
  
  function getLightGLSLDataStructureMemberNameArr() {
    return /* array */[
            /* record */[
              /* position */"u_pointLights[0].position",
              /* color */"u_pointLights[0].color",
              /* intensity */"u_pointLights[0].intensity",
              /* constant */"u_pointLights[0].constant",
              /* linear */"u_pointLights[0].linear",
              /* quadratic */"u_pointLights[0].quadratic",
              /* range */"u_pointLights[0].range"
            ],
            /* record */[
              /* position */"u_pointLights[1].position",
              /* color */"u_pointLights[1].color",
              /* intensity */"u_pointLights[1].intensity",
              /* constant */"u_pointLights[1].constant",
              /* linear */"u_pointLights[1].linear",
              /* quadratic */"u_pointLights[1].quadratic",
              /* range */"u_pointLights[1].range"
            ],
            /* record */[
              /* position */"u_pointLights[2].position",
              /* color */"u_pointLights[2].color",
              /* intensity */"u_pointLights[2].intensity",
              /* constant */"u_pointLights[2].constant",
              /* linear */"u_pointLights[2].linear",
              /* quadratic */"u_pointLights[2].quadratic",
              /* range */"u_pointLights[2].range"
            ],
            /* record */[
              /* position */"u_pointLights[3].position",
              /* color */"u_pointLights[3].color",
              /* intensity */"u_pointLights[3].intensity",
              /* constant */"u_pointLights[3].constant",
              /* linear */"u_pointLights[3].linear",
              /* quadratic */"u_pointLights[3].quadratic",
              /* range */"u_pointLights[3].range"
            ]
          ];
  }
  
  function _sendAttenuation(index, param, param$1, pointLightRecord) {
    var range$$1 = param$1[/* range */6];
    var quadratic = param$1[/* quadratic */5];
    var linear = param$1[/* linear */4];
    var constant = param$1[/* constant */3];
    var uniformLocationMap = param[3];
    var uniformCacheMap = param[2];
    var program = param[1];
    var gl = param[0];
    sendFloat(gl, uniformCacheMap, /* tuple */[
          constant,
          getUniformLocation(program, constant, uniformLocationMap, gl)
        ], getConstant(index, pointLightRecord));
    sendFloat(gl, uniformCacheMap, /* tuple */[
          linear,
          getUniformLocation(program, linear, uniformLocationMap, gl)
        ], getLiear(index, pointLightRecord));
    sendFloat(gl, uniformCacheMap, /* tuple */[
          quadratic,
          getUniformLocation(program, quadratic, uniformLocationMap, gl)
        ], getQuadratic(index, pointLightRecord));
    sendFloat(gl, uniformCacheMap, /* tuple */[
          range$$1,
          getUniformLocation(program, range$$1, uniformLocationMap, gl)
        ], getRange(index, pointLightRecord));
    return pointLightRecord;
  }
  
  function send(gl, param, param$1) {
    var pointLightRecord = param$1[/* pointLightRecord */14];
    var uniformLocationMap = param[2];
    var uniformCacheMap = param[1];
    var program = param[0];
    requireCheck((function () {
            var maxCount = getBufferMaxCount$1(/* () */0);
            return test(buildAssertMessage("max buffer count === 4", "is " + (String(maxCount) + "")), (function () {
                          return Operators[/* = */0](maxCount, 4);
                        }));
          }), getIsDebug(stateData));
    var lightGLSLDataStructureMemberNameArr = getLightGLSLDataStructureMemberNameArr(/* () */0);
    var positionMap = pointLightRecord[/* positionMap */7];
    reduceOneParam((function (pointLightRecord, index) {
            var structureMemberNameData = caml_array_get(lightGLSLDataStructureMemberNameArr, index);
            var intensity = structureMemberNameData[/* intensity */2];
            var color = structureMemberNameData[/* color */1];
            var position = structureMemberNameData[/* position */0];
            sendVec3(gl, uniformCacheMap, /* tuple */[
                  position,
                  getUniformLocation(program, position, uniformLocationMap, gl)
                ], getPosition$1(index, positionMap));
            sendFloat3(gl, uniformCacheMap, /* tuple */[
                  color,
                  getUniformLocation(program, color, uniformLocationMap, gl)
                ], getColor$3(index, pointLightRecord));
            sendFloat(gl, uniformCacheMap, /* tuple */[
                  intensity,
                  getUniformLocation(program, intensity, uniformLocationMap, gl)
                ], getIntensity(index, pointLightRecord));
            return _sendAttenuation(index, /* tuple */[
                        gl,
                        program,
                        uniformCacheMap,
                        uniformLocationMap
                      ], structureMemberNameData, pointLightRecord);
          }), pointLightRecord, range(0, pointLightRecord[/* index */0] - 1 | 0));
    return /* () */0;
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function getColor$5(param) {
    return param[/* ambientLight */0][/* color */0];
  }
  
  
  /* No side effect */
  
  function send$1(gl, param, param$1) {
    var name = "u_ambient";
    return sendFloat3(gl, param[1], /* tuple */[
                name,
                getUniformLocation(param[0], name, param[2], gl)
              ], getColor$5(param$1[/* sceneRecord */0]));
  }
  
  
  /* GLSLLocationService-Wonderjs Not a pure module */
  
  var getDirection = unsafeGet$1;
  
  
  /* No side effect */
  
  function createTypeArrays$3(buffer, _) {
    return /* tuple */[
            new Float32Array(buffer, getColorsOffset$1(/* () */0), getColorsLength$1(/* () */0)),
            new Float32Array(buffer, getIntensitiesOffset(/* () */0), getIntensitiesLength(/* () */0))
          ];
  }
  
  
  /* BufferDirectionLightService-Wonderjs Not a pure module */
  
  function getDefaultColor$1() {
    return /* array */[
            1,
            1,
            1
          ];
  }
  
  function getDefaultIntensity$1() {
    return 1;
  }
  
  function getColor$7(index, typeArr) {
    return getFloat3(getColorIndex$1(index), typeArr);
  }
  
  function setColor$2(index, color, typeArr) {
    return setFloat3(getColorIndex$1(index), color, typeArr);
  }
  
  function getIntensity$3(index, typeArr) {
    return getFloat1(getIntensityIndex(index), typeArr);
  }
  
  function setIntensity$1(index, intensity, typeArr) {
    return setFloat1(getIntensityIndex(index), intensity, typeArr);
  }
  
  function setAllTypeArrDataToDefault$3(count, param) {
    var defaultColor = /* array */[
      1,
      1,
      1
    ];
    return reduceOneParam((function (param, index) {
                  return /* tuple */[
                          setColor$2(index, defaultColor, param[0]),
                          setIntensity$1(index, 1, param[1])
                        ];
                }), /* tuple */[
                param[0],
                param[1]
              ], range(0, count - 1 | 0));
  }
  
  function _setAllTypeArrDataToDefault$3(count, param) {
    return /* tuple */[
            param[0],
            setAllTypeArrDataToDefault$3(count, /* tuple */[
                  param[1],
                  param[2]
                ])
          ];
  }
  
  function _initBufferData$3() {
    var count = getBufferMaxCount(/* () */0);
    var buffer = createBuffer$4(count);
    var match = createTypeArrays$3(buffer, count);
    return _setAllTypeArrDataToDefault$3(count, /* tuple */[
                buffer,
                match[0],
                match[1]
              ]);
  }
  
  function create$7() {
    var match = _initBufferData$3(/* () */0);
    var match$1 = match[1];
    return /* record */[
            /* index */0,
            /* buffer */match[0],
            /* colors */match$1[0],
            /* intensities */match$1[1],
            /* mappedIndexMap */createEmpty$2(/* () */0),
            /* gameObjectMap */createEmpty$2(/* () */0)
          ];
  }
  
  function deepCopyForRestore$3(state) {
    var directionLightRecord = state[/* directionLightRecord */21];
    var index = directionLightRecord[/* index */0];
    var newrecord = caml_array_dup(state);
    newrecord[/* directionLightRecord */21] = /* record */[
      /* index */index,
      /* buffer */directionLightRecord[/* buffer */1],
      /* colors */copyFloat32ArrayWithEndIndex(imul(index, getColorsSize$1(/* () */0)), directionLightRecord[/* colors */2]),
      /* intensities */copyFloat32ArrayWithEndIndex(imul(index, getIntensitiesSize(/* () */0)), directionLightRecord[/* intensities */3]),
      /* mappedIndexMap */copy(directionLightRecord[/* mappedIndexMap */4]),
      /* gameObjectMap */copy(directionLightRecord[/* gameObjectMap */5])
    ];
    return newrecord;
  }
  
  
  /* SparseMapService-Wonderjs Not a pure module */
  
  function getColor$6(mappedIndex, param) {
    return getColor$7(mappedIndex, param[/* colors */1]);
  }
  
  function getIntensity$2(mappedIndex, param) {
    return getIntensity$3(mappedIndex, param[/* intensities */2]);
  }
  
  
  /* RecordDirectionLightMainService-Wonderjs Not a pure module */
  
  function send$2(gl, param, param$1) {
    var directionLightRecord = param$1[/* directionLightRecord */13];
    var uniformLocationMap = param[2];
    var uniformCacheMap = param[1];
    var program = param[0];
    requireCheck((function () {
            var maxCount = getBufferMaxCount(/* () */0);
            return test(buildAssertMessage("max buffer count === 4", "is " + (String(maxCount) + "")), (function () {
                          return Operators[/* = */0](maxCount, 4);
                        }));
          }), getIsDebug(stateData));
    var lightGLSLDataStructureMemberNameArr = /* array */[
      /* record */[
        /* direction */"u_directionLights[0].direction",
        /* color */"u_directionLights[0].color",
        /* intensity */"u_directionLights[0].intensity"
      ],
      /* record */[
        /* direction */"u_directionLights[1].direction",
        /* color */"u_directionLights[1].color",
        /* intensity */"u_directionLights[1].intensity"
      ],
      /* record */[
        /* direction */"u_directionLights[2].direction",
        /* color */"u_directionLights[2].color",
        /* intensity */"u_directionLights[2].intensity"
      ],
      /* record */[
        /* direction */"u_directionLights[3].direction",
        /* color */"u_directionLights[3].color",
        /* intensity */"u_directionLights[3].intensity"
      ]
    ];
    var directionMap = directionLightRecord[/* directionMap */3];
    reduceOneParam((function (directionLightRecord, index) {
            var match = caml_array_get(lightGLSLDataStructureMemberNameArr, index);
            var intensity = match[/* intensity */2];
            var color = match[/* color */1];
            var direction = match[/* direction */0];
            sendVec3(gl, uniformCacheMap, /* tuple */[
                  direction,
                  getUniformLocation(program, direction, uniformLocationMap, gl)
                ], getDirection(index, directionMap));
            sendFloat3(gl, uniformCacheMap, /* tuple */[
                  color,
                  getUniformLocation(program, color, uniformLocationMap, gl)
                ], getColor$6(index, directionLightRecord));
            sendFloat(gl, uniformCacheMap, /* tuple */[
                  intensity,
                  getUniformLocation(program, intensity, uniformLocationMap, gl)
                ], getIntensity$2(index, directionLightRecord));
            return directionLightRecord;
          }), directionLightRecord, range(0, directionLightRecord[/* index */0] - 1 | 0));
    return /* () */0;
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function addAmbientLightSendData(param, sendDataArrTuple) {
    var field = param[0];
    if (field === "send") {
      return addUniformSendDataByType$5(/* tuple */[
                  param[1],
                  param[2],
                  param[3]
                ], sendDataArrTuple, send$1);
    } else {
      return fatal(buildFatalMessage("_addAmbientLightSendData", "unknow field:" + (String(field) + ""), "", "", ""));
    }
  }
  
  function addDirectionLightSendData(param, sendDataArrTuple) {
    var field = param[0];
    if (field === "send") {
      return addUniformSendDataByType$5(/* tuple */[
                  param[1],
                  param[2],
                  param[3]
                ], sendDataArrTuple, send$2);
    } else {
      return fatal(buildFatalMessage("_addDirectionLightSendData", "unknow field:" + (String(field) + ""), "", "", ""));
    }
  }
  
  function addPointLightSendData(param, sendDataArrTuple) {
    var field = param[0];
    if (field === "send") {
      return addUniformSendDataByType$5(/* tuple */[
                  param[1],
                  param[2],
                  param[3]
                ], sendDataArrTuple, send);
    } else {
      return fatal(buildFatalMessage("_addPointLightSendData", "unknow field:" + (String(field) + ""), "", "", ""));
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function _readUniforms$1(param, sendDataArrTuple, uniforms) {
    var uniformCacheMap = param[3];
    var uniformLocationMap = param[2];
    var program = param[1];
    var gl = param[0];
    var match = isJsonSerializedValueNone(uniforms);
    if (match) {
      return sendDataArrTuple;
    } else {
      return reduceOneParam((function (sendDataArrTuple, param) {
                    var from = param[/* from */3];
                    var type_ = param[/* type_ */2];
                    var field = param[/* field */1];
                    var name = param[/* name */0];
                    switch (from) {
                      case "ambientLight" : 
                          return addAmbientLightSendData(/* tuple */[
                                      field,
                                      program,
                                      uniformCacheMap,
                                      uniformLocationMap
                                    ], sendDataArrTuple);
                      case "basicMaterial" : 
                          return addBasicMaterialSendData(/* tuple */[
                                      field,
                                      getUniformLocation(program, name, uniformLocationMap, gl),
                                      name,
                                      type_,
                                      uniformCacheMap
                                    ], sendDataArrTuple);
                      case "camera" : 
                          return addCameraSendData(/* tuple */[
                                      field,
                                      getUniformLocation(program, name, uniformLocationMap, gl),
                                      name,
                                      type_,
                                      uniformCacheMap
                                    ], sendDataArrTuple);
                      case "directionLight" : 
                          return addDirectionLightSendData(/* tuple */[
                                      field,
                                      program,
                                      uniformCacheMap,
                                      uniformLocationMap
                                    ], sendDataArrTuple);
                      case "lightMaterial" : 
                          return addLightMaterialSendData(/* tuple */[
                                      field,
                                      getUniformLocation(program, name, uniformLocationMap, gl),
                                      name,
                                      type_,
                                      uniformCacheMap
                                    ], sendDataArrTuple);
                      case "model" : 
                          return addModelSendData(/* tuple */[
                                      field,
                                      getUniformLocation(program, name, uniformLocationMap, gl),
                                      name,
                                      type_,
                                      uniformCacheMap
                                    ], sendDataArrTuple);
                      case "pointLight" : 
                          return addPointLightSendData(/* tuple */[
                                      field,
                                      program,
                                      uniformCacheMap,
                                      uniformLocationMap
                                    ], sendDataArrTuple);
                      default:
                        return fatal(buildFatalMessage("_readUniforms", "unknow from:" + (String(from) + ""), "", "", ""));
                    }
                  }), sendDataArrTuple, unsafeGetJsonSerializedValue(uniforms));
    }
  }
  
  function _readUniformSendData$1(shaderLibDataArr, gl, program, param) {
    return readUniformSendData(shaderLibDataArr, /* tuple */[
                gl,
                program
              ], _readUniforms$1, /* tuple */[
                param[0],
                param[1]
              ]);
  }
  
  function addUniformSendData$2(gl, param, recordTuple) {
    return addUniformSendData$1(gl, /* tuple */[
                param[0],
                param[1],
                param[2]
              ], _readUniformSendData$1, recordTuple);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function _addNormalMatrixInstanceArrayBufferSendData(param, param$1) {
    return /* tuple */[
            param$1[0],
            push$1(/* record */[
                  /* pos */getAttribLocation(param[1], param[2], param[3], param[0]),
                  /* size */3,
                  /* getOffsetFunc */(function (index) {
                      return imul(index - 4 | 0, 12) + 64 | 0;
                    })
                ], param$1[1])
          ];
  }
  
  function _readAttributes$1(param, sendDataArrTuple, attributes) {
    var attributeLocationMap = param[2];
    var program = param[1];
    var gl = param[0];
    var match = isJsonSerializedValueNone(attributes);
    if (match) {
      return sendDataArrTuple;
    } else {
      return reduceOneParam((function (sendDataArrTuple, param) {
                    var type_ = param[/* type_ */2];
                    var buffer = param[/* buffer */1];
                    var name = param[/* name */0];
                    var match = !isJsonSerializedValueNone(name) && !isJsonSerializedValueNone(type_);
                    if (match) {
                      var name$1 = unsafeGetJsonSerializedValue(name);
                      var type_$1 = unsafeGetJsonSerializedValue(type_);
                      if (buffer !== 4) {
                        if (buffer >= 5) {
                          return addModelMatrixInstanceArrayBufferSendData(/* tuple */[
                                      gl,
                                      program,
                                      name$1,
                                      attributeLocationMap
                                    ], sendDataArrTuple);
                        } else {
                          return addOtherArrayBufferSendData(/* tuple */[
                                      gl,
                                      program,
                                      name$1,
                                      buffer,
                                      type_$1,
                                      attributeLocationMap
                                    ], sendDataArrTuple);
                        }
                      } else {
                        return _addNormalMatrixInstanceArrayBufferSendData(/* tuple */[
                                    gl,
                                    program,
                                    name$1,
                                    attributeLocationMap
                                  ], sendDataArrTuple);
                      }
                    } else {
                      return addElementBufferSendData(buffer, sendDataArrTuple);
                    }
                  }), sendDataArrTuple, unsafeGetJsonSerializedValue(attributes));
    }
  }
  
  function _readAttributeSendData$1(shaderLibDataArr, gl, program, attributeLocationMap) {
    return readAttributeSendData(shaderLibDataArr, /* tuple */[
                gl,
                program
              ], _readAttributes$1, attributeLocationMap);
  }
  
  function addAttributeSendData$2(glTuple, shaderLibDataArr, recordTuple) {
    return addAttributeSendData$1(glTuple, shaderLibDataArr, _readAttributeSendData$1, recordTuple);
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function initMaterialShader$2(materialIndex, param, buildGLSLSourceFunc, state) {
    var partial_arg_000 = state[/* directionLightRecord */1];
    var partial_arg_001 = state[/* pointLightRecord */2];
    var partial_arg = /* tuple */[
      partial_arg_000,
      partial_arg_001
    ];
    return initMaterialShader$1(materialIndex, /* tuple */[
                param[0],
                param[1]
              ], /* tuple */[
                buildGLSLSourceFunc,
                (function (param) {
                    return getHandle$1(partial_arg, param);
                  }),
                addAttributeSendData$2,
                addUniformSendData$2
              ], /* tuple */[
                state[/* shaderRecord */4],
                state[/* programRecord */5],
                state[/* glslRecord */6],
                state[/* glslSenderRecord */7],
                state[/* glslLocationRecord */8],
                state[/* glslChunkRecord */9]
              ]);
  }
  
  function reInitMaterialShader$1(materialIndex, param, buildGLSLSourceFunc, state) {
    var partial_arg_000 = state[/* directionLightRecord */1];
    var partial_arg_001 = state[/* pointLightRecord */2];
    var partial_arg = /* tuple */[
      partial_arg_000,
      partial_arg_001
    ];
    return reInitMaterialShader(materialIndex, /* tuple */[
                param[0],
                param[1]
              ], /* tuple */[
                buildGLSLSourceFunc,
                (function (param) {
                    return getHandle$1(partial_arg, param);
                  }),
                addAttributeSendData$2,
                addUniformSendData$2
              ], /* tuple */[
                state[/* shaderRecord */4],
                state[/* programRecord */5],
                state[/* glslRecord */6],
                state[/* glslSenderRecord */7],
                state[/* glslLocationRecord */8],
                state[/* glslChunkRecord */9]
              ]);
  }
  
  
  /* InitShaderInitMaterialService-Wonderjs Not a pure module */
  
  function _getMaterialShaderLibDataArrByStaticBranch$1(param, param$1, resultDataArr) {
    var staticBranchs = param$1[0];
    var name = param[0];
    var exit = 0;
    switch (name) {
      case "modelMatrix_instance" : 
      case "normalMatrix_instance" : 
          exit = 1;
          break;
      default:
        return handleUnknownNameWhenGetMaterialShaderLibDataArrByStaticBranch(name, staticBranchs);
    }
    if (exit === 1) {
      var match = unsafeFindFirst(staticBranchs, name, (function (item) {
              return filterTargetName(item[/* name */0], name);
            }));
      return getMaterialShaderLibDataArrByStaticBranchInstance(/* tuple */[
                  param[1],
                  param[2]
                ], /* tuple */[
                  param$1[1],
                  match[/* value */1]
                ], resultDataArr);
    }
    
  }
  
  function _isPass$1(materialIndex, condition, state) {
    var materialRecord = state[/* materialRecord */0];
    switch (condition) {
      case "has_diffuse_map" : 
          return hasMap(getDiffuseMapUnit$1(materialIndex, materialRecord[/* diffuseMapUnits */3]));
      case "has_specular_map" : 
          return hasMap(getSpecularMapUnit$1(materialIndex, materialRecord[/* specularMapUnits */4]));
      case "light_has_map" : 
          if (hasMap(getDiffuseMapUnit$1(materialIndex, materialRecord[/* diffuseMapUnits */3]))) {
            return true;
          } else {
            return hasMap(getSpecularMapUnit$1(materialIndex, materialRecord[/* specularMapUnits */4]));
          }
      default:
        return fatal(buildFatalMessage("_isPass", "unknown condition:" + (String(condition) + ""), "", "", ""));
    }
  }
  
  function getMaterialShaderLibDataArr$2(materialIndex, param, shaderLibTuple, state) {
    return getMaterialShaderLibDataArr$1(/* tuple */[
                materialIndex,
                param[0],
                param[1]
              ], shaderLibTuple, /* tuple */[
                _getMaterialShaderLibDataArrByStaticBranch$1,
                _isPass$1
              ], state);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function _getShaderLibItems$1(param) {
    var shaderName = "front_render_light";
    return unsafeFindFirst(param[/* materialShaders */3], shaderName, (function (param) {
                    return filterTargetName(param[/* name */0], shaderName);
                  }))[/* shaderLibs */1];
  }
  
  function isNeedInitMaterial$1(materialIndex, shaderIndices) {
    return !hasShaderIndex(materialIndex, shaderIndices);
  }
  
  function initMaterial$2(gl, dataTuple, state) {
    return initMaterial$1(gl, dataTuple, /* tuple */[
                initMaterialShader$2,
                buildGLSLSource,
                setShaderIndex,
                _getShaderLibItems$1,
                getMaterialShaderLibDataArr$2
              ], /* tuple */[
                state[/* materialRecord */0][/* shaderIndices */2],
                state[/* renderConfigRecord */3],
                state
              ]);
  }
  
  function reInitMaterial$1(gl, dataTuple, state) {
    return reInitMaterial(gl, dataTuple, /* tuple */[
                reInitMaterialShader$1,
                buildGLSLSource,
                setShaderIndex,
                _getShaderLibItems$1,
                getMaterialShaderLibDataArr$2
              ], /* tuple */[
                state[/* materialRecord */0][/* shaderIndices */2],
                state[/* renderConfigRecord */3],
                state
              ]);
  }
  
  function init$2(gl, instanceTuple, state) {
    var materialRecord = state[/* materialRecord */0];
    return init$1(gl, instanceTuple, initMaterial$2, /* tuple */[
                materialRecord[/* index */0],
                materialRecord[/* disposedIndexArray */1],
                state
              ]);
  }
  
  
  /* JobConfigService-Wonderjs Not a pure module */
  
  function createTypeArrays$4(buffer, lightMaterialCount, textureCountPerMaterial) {
    return /* tuple */[
            new Uint32Array(buffer, getShaderIndicesOffset(lightMaterialCount), getShaderIndicesLength(lightMaterialCount)),
            new Float32Array(buffer, getDiffuseColorsOffset(lightMaterialCount), getDiffuseColorsLength(lightMaterialCount)),
            new Float32Array(buffer, getSpecularColorsOffset(lightMaterialCount), getSpecularColorsLength(lightMaterialCount)),
            new Float32Array(buffer, getShininessOffset(lightMaterialCount), getShininessLength(lightMaterialCount)),
            new Uint32Array(buffer, getTextureIndicesOffset$1(lightMaterialCount, textureCountPerMaterial), getTextureIndicesLength$2(lightMaterialCount, textureCountPerMaterial)),
            new Uint8Array(buffer, getDiffuseMapUnitsOffset(lightMaterialCount, textureCountPerMaterial), getDiffuseMapUnitsLength(lightMaterialCount)),
            new Uint8Array(buffer, getSpecularMapUnitsOffset(lightMaterialCount, textureCountPerMaterial), getSpecularMapUnitsLength(lightMaterialCount))
          ];
  }
  
  
  /* ShaderIndicesService-Wonderjs Not a pure module */
  
  function getRecord$3(param) {
    return unsafeGet$2(param[/* lightMaterialRecord */17]);
  }
  
  function setAllTypeArrDataToDefault$4(lightMaterialCount, param, param$1) {
    var defaultShininess = param[3];
    var defaultSpecularColor = param[2];
    var defaultDiffuseColor = param[1];
    var defaultShaderIndex = param[0];
    var defaultUnit = getDefaultUnit(/* () */0);
    var match = reduceOneParam((function (param, index) {
            return /* tuple */[
                    setShaderIndex(index, defaultShaderIndex, param[0]),
                    setDiffuseColor(index, defaultDiffuseColor, param[1]),
                    setSpecularColor(index, defaultSpecularColor, param[2]),
                    setShininess(index, defaultShininess, param[3]),
                    setDiffuseMapUnit(index, defaultUnit, param[4]),
                    setSpecularMapUnit(index, defaultUnit, param[5])
                  ];
          }), /* tuple */[
          param$1[0],
          param$1[1],
          param$1[2],
          param$1[3],
          param$1[5],
          param$1[6]
        ], range(0, lightMaterialCount - 1 | 0));
    return /* tuple */[
            match[0],
            match[1],
            match[2],
            match[3],
            param$1[4].fill(0),
            match[4],
            match[5]
          ];
  }
  
  function _setAllTypeArrDataToDefault$4(lightMaterialCount, param, param$1) {
    return /* tuple */[
            param$1[0],
            setAllTypeArrDataToDefault$4(lightMaterialCount, /* tuple */[
                  param[0],
                  param[1],
                  param[2],
                  param[3]
                ], /* tuple */[
                  param$1[1],
                  param$1[2],
                  param$1[3],
                  param$1[4],
                  param$1[5],
                  param$1[6],
                  param$1[7]
                ])
          ];
  }
  
  function _initBufferData$4(lightMaterialCount, textureCountPerMaterial, param) {
    var buffer = createBuffer$3(lightMaterialCount, textureCountPerMaterial);
    var match = createTypeArrays$4(buffer, lightMaterialCount, textureCountPerMaterial);
    return _setAllTypeArrDataToDefault$4(lightMaterialCount, /* tuple */[
                param[0],
                param[1],
                param[2],
                param[3]
              ], /* tuple */[
                buffer,
                match[0],
                match[1],
                match[2],
                match[3],
                match[4],
                match[5],
                match[6]
              ]);
  }
  
  function create$8(state) {
    var settingRecord = state[/* settingRecord */1];
    var defaultShaderIndex = getDefaultShaderIndex(/* () */0);
    var defaultDiffuseColor = /* array */[
      1,
      1,
      1
    ];
    var defaultSpecularColor = /* array */[
      1,
      1,
      1
    ];
    var match = _initBufferData$4(getLightMaterialCount(settingRecord), getTextureCountPerMaterial(settingRecord), /* tuple */[
          defaultShaderIndex,
          defaultDiffuseColor,
          defaultSpecularColor,
          32.0
        ]);
    var match$1 = match[1];
    state[/* lightMaterialRecord */17] = /* record */[
      /* index */0,
      /* buffer */match[0],
      /* shaderIndices */match$1[0],
      /* diffuseColors */match$1[1],
      /* specularColors */match$1[2],
      /* shininess */match$1[3],
      /* textureIndices */match$1[4],
      /* diffuseMapUnits */match$1[5],
      /* specularMapUnits */match$1[6],
      /* textureCountMap */createEmpty$2(/* () */0),
      /* defaultDiffuseColor */defaultDiffuseColor,
      /* defaultSpecularColor */defaultSpecularColor,
      /* defaultShininess */32.0,
      /* gameObjectMap */createEmpty$2(/* () */0),
      /* groupCountMap */createEmpty$2(/* () */0),
      /* disposedIndexArray */createEmpty(/* () */0),
      /* nameMap */createEmpty$2(/* () */0),
      /* materialArrayForWorkerInit */createEmpty(/* () */0)
    ];
    return state;
  }
  
  function deepCopyForRestore$4(state) {
    var record = getRecord$3(state);
    var index = record[/* index */0];
    var materialArrayForWorkerInit = record[/* materialArrayForWorkerInit */17];
    var newrecord = caml_array_dup(state);
    newrecord[/* lightMaterialRecord */17] = /* record */[
      /* index */index,
      /* buffer */record[/* buffer */1],
      /* shaderIndices */copyUint32ArrayWithEndIndex(imul(index, getShaderIndicesSize$2(/* () */0)), record[/* shaderIndices */2]),
      /* diffuseColors */copyFloat32ArrayWithEndIndex(imul(index, getDiffuseColorsSize(/* () */0)), record[/* diffuseColors */3]),
      /* specularColors */copyFloat32ArrayWithEndIndex(imul(index, getSpecularColorsSize(/* () */0)), record[/* specularColors */4]),
      /* shininess */copyFloat32ArrayWithEndIndex(imul(index, getShininessSize(/* () */0)), record[/* shininess */5]),
      /* textureIndices */copyUint32ArrayWithEndIndex(imul(index, getTextureIndicesSize(getTextureCountPerMaterial(state[/* settingRecord */1]))), record[/* textureIndices */6]),
      /* diffuseMapUnits */copyUint8ArrayWithEndIndex(imul(index, getMapUnitsSize$1(/* () */0)), record[/* diffuseMapUnits */7]),
      /* specularMapUnits */copyUint8ArrayWithEndIndex(imul(index, getMapUnitsSize$1(/* () */0)), record[/* specularMapUnits */8]),
      /* textureCountMap */copy(record[/* textureCountMap */9]),
      /* defaultDiffuseColor */record[/* defaultDiffuseColor */10],
      /* defaultSpecularColor */record[/* defaultSpecularColor */11],
      /* defaultShininess */record[/* defaultShininess */12],
      /* gameObjectMap */copy(record[/* gameObjectMap */13]),
      /* groupCountMap */copy(record[/* groupCountMap */14]),
      /* disposedIndexArray */record[/* disposedIndexArray */15].slice(),
      /* nameMap */copy(record[/* nameMap */16]),
      /* materialArrayForWorkerInit */materialArrayForWorkerInit.slice()
    ];
    return newrecord;
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function createInitMaterialState$1(param, state) {
    var directionLightRecord = state[/* directionLightRecord */21];
    var pointLightRecord = state[/* pointLightRecord */22];
    var match = getRecord$3(state);
    return /* record */[
            /* materialRecord : record */[
              /* index */param[0],
              /* disposedIndexArray */param[1],
              /* shaderIndices */match[/* shaderIndices */2],
              /* diffuseMapUnits */match[/* diffuseMapUnits */7],
              /* specularMapUnits */match[/* specularMapUnits */8]
            ],
            /* directionLightRecord : record */[/* index */directionLightRecord[/* index */0]],
            /* pointLightRecord : record */[/* index */pointLightRecord[/* index */0]],
            /* renderConfigRecord */getRecord$2(state),
            /* shaderRecord */state[/* shaderRecord */27],
            /* programRecord */state[/* programRecord */29],
            /* glslRecord */state[/* glslRecord */28],
            /* glslSenderRecord */state[/* glslSenderRecord */31],
            /* glslLocationRecord */state[/* glslLocationRecord */30],
            /* glslChunkRecord */state[/* glslChunkRecord */32]
          ];
  }
  
  
  /* RecordRenderConfigMainService-Wonderjs Not a pure module */
  
  function initMaterials$1(materialIndexArr, gl, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var gameObjectMap = getRecord$3(state)[/* gameObjectMap */13];
    var isSupportInstance$$1 = isSupportInstance(state);
    var match = getRecord$3(state);
    reduceOneParam((function (state, materialIndex) {
            return initMaterial$2(gl, /* tuple */[
                        materialIndex,
                        isSourceInstance(materialIndex, gameObjectMap, gameObjectRecord),
                        isSupportInstance$$1
                      ], state);
          }), createInitMaterialState$1(/* tuple */[
              match[/* index */0],
              match[/* disposedIndexArray */15]
            ], state), materialIndexArr);
    return state;
  }
  
  function handleInitComponent$1(materialIndex, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var match = getRecord$3(state);
    var match$1 = isNeedInitMaterial$1(materialIndex, match[/* shaderIndices */2]);
    if (match$1) {
      var match$2 = isUseWorker(state);
      if (match$2) {
        var match$3 = getRecord$3(state);
        var materialArrayForWorkerInit = match$3[/* materialArrayForWorkerInit */17];
        addMaterialToMaterialArrayForWorkerInit(materialIndex, materialArrayForWorkerInit);
        return state;
      } else {
        var gl = unsafeGetGl(state[/* deviceManagerRecord */10]);
        var gameObjectMap = getRecord$3(state)[/* gameObjectMap */13];
        var isSupportInstance$$1 = isSupportInstance(state);
        var match$4 = getRecord$3(state);
        initMaterial$2(gl, /* tuple */[
              materialIndex,
              isSourceInstance(materialIndex, gameObjectMap, gameObjectRecord),
              isSupportInstance$$1
            ], createInitMaterialState$1(/* tuple */[
                  match$4[/* index */0],
                  match$4[/* disposedIndexArray */15]
                ], state));
        return state;
      }
    } else {
      return state;
    }
  }
  
  function reInitComponents(materialIndices, state) {
    return reduceOneParam((function (state, materialIndex) {
                  var gameObjectRecord = state[/* gameObjectRecord */11];
                  var match = getRecord$3(state);
                  var currentShaderIndex = getShaderIndex(materialIndex, match[/* shaderIndices */2]);
                  unuseShaderIndex(currentShaderIndex, state[/* shaderRecord */27]);
                  var match$1 = isUseWorker(state);
                  if (match$1) {
                    return fatal(buildFatalMessage("reInitComponents", "not support worker", "", "", ""));
                  } else {
                    var gl = unsafeGetGl(state[/* deviceManagerRecord */10]);
                    var gameObjectMap = getRecord$3(state)[/* gameObjectMap */13];
                    var isSupportInstance$$1 = isSupportInstance(state);
                    var match$2 = getRecord$3(state);
                    reInitMaterial$1(gl, /* tuple */[
                          materialIndex,
                          isSourceInstance(materialIndex, gameObjectMap, gameObjectRecord),
                          isSupportInstance$$1
                        ], createInitMaterialState$1(/* tuple */[
                              match$2[/* index */0],
                              match$2[/* disposedIndexArray */15]
                            ], state));
                    return state;
                  }
                }), state, materialIndices);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  var getTexture = get$3;
  
  var setTexture = set$1;
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function initTexture$1(gl, texture, glTextureMap) {
    var match = getTexture(texture, glTextureMap);
    if (match !== undefined) {
      return glTextureMap;
    } else {
      return setTexture(texture, gl.createTexture(), glTextureMap);
    }
  }
  
  function initTexturesWithIndexArray(gl, indexInTypeArrayRange, glTextureMap) {
    return reduceOneParam((function (glTextureMap, textureInTypeArray) {
                  return initTexture$1(gl, textureInTypeArray, glTextureMap);
                }), glTextureMap, indexInTypeArrayRange);
  }
  
  var initTextures = initTexturesWithIndexArray;
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  function getArrayBufferViewSourceTextureIndexOffset(basicSourceTextureCount) {
    return basicSourceTextureCount;
  }
  
  function generateBasicSourceTextureIndex(basicSourceTextureIndex) {
    return 0 + basicSourceTextureIndex | 0;
  }
  
  function getArrayBufferViewSourceTextureIndexInTypeArray(arrayBufferViewSourceTextureIndex, arrayBufferViewSourceTextureIndexOffset) {
    return ensureCheck((function (index) {
                  return test(buildAssertMessage("index should >= 0", "is " + (String(index) + "")), (function () {
                                return Operators[/* >= */7](index, 0);
                              }));
                }), getIsDebug(stateData), arrayBufferViewSourceTextureIndex - arrayBufferViewSourceTextureIndexOffset | 0);
  }
  
  function handleByJudgeSourceTextureIndex(textureIndex, arrayBufferViewSourceTextureIndexOffset, funcDataTuple, param) {
    var match = caml_lessthan(textureIndex, arrayBufferViewSourceTextureIndexOffset);
    if (match) {
      return param[0](textureIndex, funcDataTuple);
    } else {
      return param[1](getArrayBufferViewSourceTextureIndexInTypeArray(textureIndex, arrayBufferViewSourceTextureIndexOffset), funcDataTuple);
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function getArrayBufferViewSourceTextureIndexOffset$1(state) {
    return getArrayBufferViewSourceTextureIndexOffset(getBasicSourceTextureCount(state[/* settingRecord */1]));
  }
  
  var generateBasicSourceTextureIndex$1 = generateBasicSourceTextureIndex;
  
  
  /* BufferSettingService-Wonderjs Not a pure module */
  
  function getWrapSsSize() {
    return 1;
  }
  
  function getWrapTsSize() {
    return 1;
  }
  
  function getMagFiltersSize() {
    return 1;
  }
  
  function getMinFiltersSize() {
    return 1;
  }
  
  function getFormatsSize() {
    return 1;
  }
  
  function getTypesSize() {
    return 1;
  }
  
  function getIsNeedUpdatesSize() {
    return 1;
  }
  
  function getFlipYsSize() {
    return 1;
  }
  
  function getWidthsSize() {
    return 1;
  }
  
  function getHeightsSize() {
    return 1;
  }
  
  
  /* No side effect */
  
  function _getBasicSourceTotalByteLength(basicSourceTextureCount) {
    return imul(basicSourceTextureCount, imul(Uint8Array.BYTES_PER_ELEMENT, ((((((getWrapSsSize(/* () */0) + getWrapTsSize(/* () */0) | 0) + getMagFiltersSize(/* () */0) | 0) + getMinFiltersSize(/* () */0) | 0) + getFormatsSize(/* () */0) | 0) + getTypesSize(/* () */0) | 0) + getIsNeedUpdatesSize(/* () */0) | 0) + getFlipYsSize(/* () */0) | 0));
  }
  
  function _getArrayBufferViewSourceTotalByteLength(arrayBufferViewSourceTextureCount) {
    return imul(arrayBufferViewSourceTextureCount, imul(Uint8Array.BYTES_PER_ELEMENT, ((((((getWrapSsSize(/* () */0) + getWrapTsSize(/* () */0) | 0) + getMagFiltersSize(/* () */0) | 0) + getMinFiltersSize(/* () */0) | 0) + getFormatsSize(/* () */0) | 0) + getTypesSize(/* () */0) | 0) + getIsNeedUpdatesSize(/* () */0) | 0) + getFlipYsSize(/* () */0) | 0) + imul(Uint16Array.BYTES_PER_ELEMENT, getWidthsSize(/* () */0) + getHeightsSize(/* () */0) | 0) | 0);
  }
  
  function getBasicSourceTextureOffset() {
    return 0;
  }
  
  var getArrayBufferViewSourceTextureOffset = _getBasicSourceTotalByteLength;
  
  function getTotalByteLength$6(basicSourceTextureCount, arrayBufferViewSourceTextureCount) {
    return _getBasicSourceTotalByteLength(basicSourceTextureCount) + _getArrayBufferViewSourceTotalByteLength(arrayBufferViewSourceTextureCount) | 0;
  }
  
  function createBuffer$6(basicSourceTextureCount, arrayBufferViewSourceTextureCount) {
    return newSharedArrayBuffer(getTotalByteLength$6(basicSourceTextureCount, arrayBufferViewSourceTextureCount));
  }
  
  function getNotNeedUpdate() {
    return /* NOT_NEEDUPDATE */0;
  }
  
  function getDefaultIsNeedUpdate() {
    return /* NEEDUPDATE */1;
  }
  
  function getFlipY() {
    return /* FLIPY */1;
  }
  
  function getDefaultFlipY() {
    return /* FLIPY */1;
  }
  
  function getIsNeedUpdateIndex(index) {
    return imul(index, getIsNeedUpdatesSize(/* () */0));
  }
  
  
  /* Worker-Wonderjs Not a pure module */
  
  function getRecord$5(param) {
    return unsafeGet$2(param[/* sourceTextureRecord */18]);
  }
  
  function create$10(state) {
    var settingRecord = state[/* settingRecord */1];
    var basicSourceTextureCount = getBasicSourceTextureCount(settingRecord);
    getArrayBufferViewSourceTextureCount(settingRecord);
    var arrayBufferViewSourceTextureCount = getArrayBufferViewSourceTextureCount(settingRecord);
    state[/* sourceTextureRecord */18] = /* record */[/* buffer */createBuffer$6(basicSourceTextureCount, arrayBufferViewSourceTextureCount)];
    return state;
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function getUnsignedByte() {
    return 0;
  }
  
  function getGlType(gl, type_) {
    if (type_ === 0) {
      return gl.UNSIGNED_BYTE;
    } else if (type_ === 1) {
      return gl.UNSIGNED_SHORT_5_6_5;
    } else if (type_ === 2) {
      return gl.UNSIGNED_SHORT_4_4_4_4;
    } else {
      return gl.UNSIGNED_SHORT_5_5_5_1;
    }
  }
  
  
  /* No side effect */
  
  function getDefaultWrapS() {
    return /* CLAMP_TO_EDGE */0;
  }
  
  function getDefaultWrapT() {
    return /* CLAMP_TO_EDGE */0;
  }
  
  function getDefaultMagFilter() {
    return /* LINEAR */1;
  }
  
  function getDefaultMinFilter() {
    return /* NEAREST */0;
  }
  
  function getDefaultFormat() {
    return /* RGBA */1;
  }
  
  function getDefaultType() {
    return getUnsignedByte(/* () */0);
  }
  
  function getWrapSsLength(basicSourceTextureCount) {
    return imul(basicSourceTextureCount, getWrapSsSize(/* () */0));
  }
  
  function getWrapSsOffset() {
    return getBasicSourceTextureOffset(/* () */0) + 0 | 0;
  }
  
  function getWrapSIndex(index) {
    return imul(index, getWrapSsSize(/* () */0));
  }
  
  function getWrapTsLength(basicSourceTextureCount) {
    return imul(basicSourceTextureCount, getWrapTsSize(/* () */0));
  }
  
  function getWrapTsOffset(basicSourceTextureCount) {
    return (getBasicSourceTextureOffset(/* () */0) + 0 | 0) + imul(imul(basicSourceTextureCount, getWrapSsSize(/* () */0)), Uint8Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getWrapTIndex(index) {
    return imul(index, getWrapTsSize(/* () */0));
  }
  
  function getMagFiltersLength(basicSourceTextureCount) {
    return imul(basicSourceTextureCount, getMagFiltersSize(/* () */0));
  }
  
  function getMagFiltersOffset(basicSourceTextureCount) {
    return getWrapTsOffset(basicSourceTextureCount) + imul(imul(basicSourceTextureCount, getWrapTsSize(/* () */0)), Uint8Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getMagFilterIndex(index) {
    return imul(index, getMagFiltersSize(/* () */0));
  }
  
  function getMinFiltersLength(basicSourceTextureCount) {
    return imul(basicSourceTextureCount, getMinFiltersSize(/* () */0));
  }
  
  function getMinFiltersOffset(basicSourceTextureCount) {
    return getMagFiltersOffset(basicSourceTextureCount) + imul(imul(basicSourceTextureCount, getMagFiltersSize(/* () */0)), Uint8Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getMinFilterIndex(index) {
    return imul(index, getMinFiltersSize(/* () */0));
  }
  
  function getFormatsLength(basicSourceTextureCount) {
    return imul(basicSourceTextureCount, getFormatsSize(/* () */0));
  }
  
  function getFormatsOffset(basicSourceTextureCount) {
    return getMinFiltersOffset(basicSourceTextureCount) + imul(imul(basicSourceTextureCount, getMinFiltersSize(/* () */0)), Uint8Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getFormatIndex(index) {
    return imul(index, getFormatsSize(/* () */0));
  }
  
  function getTypesLength(basicSourceTextureCount) {
    return imul(basicSourceTextureCount, getTypesSize(/* () */0));
  }
  
  function getTypesOffset(basicSourceTextureCount) {
    return getFormatsOffset(basicSourceTextureCount) + imul(imul(basicSourceTextureCount, getFormatsSize(/* () */0)), Uint8Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getTypeIndex(index) {
    return imul(index, getTypesSize(/* () */0));
  }
  
  function getIsNeedUpdatesLength(basicSourceTextureCount) {
    return imul(basicSourceTextureCount, getIsNeedUpdatesSize(/* () */0));
  }
  
  function getIsNeedUpdatesOffset(basicSourceTextureCount) {
    return getTypesOffset(basicSourceTextureCount) + imul(imul(basicSourceTextureCount, getTypesSize(/* () */0)), Uint8Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getFlipYsLength(basicSourceTextureCount) {
    return imul(basicSourceTextureCount, getFlipYsSize(/* () */0));
  }
  
  function getFlipYsOffset(basicSourceTextureCount) {
    return getIsNeedUpdatesOffset(basicSourceTextureCount) + imul(imul(basicSourceTextureCount, getIsNeedUpdatesSize(/* () */0)), Uint8Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getFlipYIndex(index) {
    return imul(index, getFlipYsSize(/* () */0));
  }
  
  var getDefaultIsNeedUpdate$1 = getDefaultIsNeedUpdate;
  
  var getDefaultFlipY$1 = getDefaultFlipY;
  
  var getIsNeedUpdateIndex$1 = getIsNeedUpdateIndex;
  
  
  /* BufferSourceTextureService-Wonderjs Not a pure module */
  
  function createTypeArrays$5(buffer, basicSourceTextureCount) {
    return /* tuple */[
            new Uint8Array(buffer, getWrapSsOffset(basicSourceTextureCount), getWrapSsLength(basicSourceTextureCount)),
            new Uint8Array(buffer, getWrapTsOffset(basicSourceTextureCount), getWrapTsLength(basicSourceTextureCount)),
            new Uint8Array(buffer, getMagFiltersOffset(basicSourceTextureCount), getMagFiltersLength(basicSourceTextureCount)),
            new Uint8Array(buffer, getMinFiltersOffset(basicSourceTextureCount), getMinFiltersLength(basicSourceTextureCount)),
            new Uint8Array(buffer, getFormatsOffset(basicSourceTextureCount), getFormatsLength(basicSourceTextureCount)),
            new Uint8Array(buffer, getTypesOffset(basicSourceTextureCount), getTypesLength(basicSourceTextureCount)),
            new Uint8Array(buffer, getIsNeedUpdatesOffset(basicSourceTextureCount), getIsNeedUpdatesLength(basicSourceTextureCount)),
            new Uint8Array(buffer, getFlipYsOffset(basicSourceTextureCount), getFlipYsLength(basicSourceTextureCount))
          ];
  }
  
  
  /* BufferBasicSourceTextureService-Wonderjs Not a pure module */
  
  function getWrapS(index, typeArr) {
    return getUint8_1(getWrapSIndex(index), typeArr);
  }
  
  function setWrapS(index, data, typeArr) {
    return setUint8_1(getWrapSIndex(index), data, typeArr);
  }
  
  function getWrapT(index, typeArr) {
    return getUint8_1(getWrapTIndex(index), typeArr);
  }
  
  function setWrapT(index, data, typeArr) {
    return setUint8_1(getWrapTIndex(index), data, typeArr);
  }
  
  function getMagFilter(index, typeArr) {
    return getUint8_1(getMagFilterIndex(index), typeArr);
  }
  
  function setMagFilter(index, data, typeArr) {
    return setUint8_1(getMagFilterIndex(index), data, typeArr);
  }
  
  function getMinFilter(index, typeArr) {
    return getUint8_1(getMinFilterIndex(index), typeArr);
  }
  
  function setMinFilter(index, data, typeArr) {
    return setUint8_1(getMinFilterIndex(index), data, typeArr);
  }
  
  function getIsNeedUpdate(index, typeArr) {
    return getUint8_1(getIsNeedUpdateIndex$1(index), typeArr);
  }
  
  function setIsNeedUpdate(index, data, typeArr) {
    return setUint8_1(getIsNeedUpdateIndex$1(index), data, typeArr);
  }
  
  function setFlipY(index, data, typeArr) {
    return setUint8_1(getFlipYIndex(index), data, typeArr);
  }
  
  function isFlipY(index, typeArr) {
    return getUint8_1(getFlipYIndex(index), typeArr) === getFlipY(/* () */0);
  }
  
  function getFormat(index, typeArr) {
    return getUint8_1(getFormatIndex(index), typeArr);
  }
  
  function setFormat(index, data, typeArr) {
    return setUint8_1(getFormatIndex(index), data, typeArr);
  }
  
  function getType(index, typeArr) {
    return getUint8_1(getTypeIndex(index), typeArr);
  }
  
  function setType(index, data, typeArr) {
    return setUint8_1(getTypeIndex(index), data, typeArr);
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function getRecord$4(param) {
    return unsafeGet$2(param[/* basicSourceTextureRecord */19]);
  }
  
  function setAllTypeArrDataToDefault$5(basicSourceTextureCount, param) {
    var defaultWrapS = getDefaultWrapS(/* () */0);
    var defaultWrapT = getDefaultWrapT(/* () */0);
    var defaultMagFilter = getDefaultMagFilter(/* () */0);
    var defaultMinFilter = getDefaultMinFilter(/* () */0);
    var defaultFormat = getDefaultFormat(/* () */0);
    var defaultType = getDefaultType(/* () */0);
    var defaultIsNeedUpdate = getDefaultIsNeedUpdate$1(/* () */0);
    var defaultFlipY = getDefaultFlipY$1(/* () */0);
    return reduceOneParam((function (param, indexInTypeArray) {
                  return /* tuple */[
                          setWrapS(indexInTypeArray, defaultWrapS, param[0]),
                          setWrapT(indexInTypeArray, defaultWrapT, param[1]),
                          setMagFilter(indexInTypeArray, defaultMagFilter, param[2]),
                          setMinFilter(indexInTypeArray, defaultMinFilter, param[3]),
                          setFormat(indexInTypeArray, defaultFormat, param[4]),
                          setType(indexInTypeArray, defaultType, param[5]),
                          setIsNeedUpdate(indexInTypeArray, defaultIsNeedUpdate, param[6]),
                          setFlipY(indexInTypeArray, defaultFlipY, param[7])
                        ];
                }), /* tuple */[
                param[0],
                param[1],
                param[2],
                param[3],
                param[4],
                param[5],
                param[6],
                param[7]
              ], range(0, basicSourceTextureCount - 1 | 0));
  }
  
  function _initBufferData$5(basicSourceTextureCount, buffer) {
    var match = createTypeArrays$5(buffer, basicSourceTextureCount);
    return setAllTypeArrDataToDefault$5(basicSourceTextureCount, /* tuple */[
                match[0],
                match[1],
                match[2],
                match[3],
                match[4],
                match[5],
                match[6],
                match[7]
              ]);
  }
  
  function create$9(state) {
    var basicSourceTextureCount = getBasicSourceTextureCount(state[/* settingRecord */1]);
    var match = getRecord$5(state);
    var match$1 = _initBufferData$5(basicSourceTextureCount, match[/* buffer */0]);
    state[/* basicSourceTextureRecord */19] = /* record */[
      /* index */0,
      /* wrapSs */match$1[0],
      /* wrapTs */match$1[1],
      /* magFilters */match$1[2],
      /* minFilters */match$1[3],
      /* formats */match$1[4],
      /* types */match$1[5],
      /* isNeedUpdates */match$1[6],
      /* flipYs */match$1[7],
      /* sourceMap */createEmpty$2(/* () */0),
      /* glTextureMap */createEmpty$2(/* () */0),
      /* bindTextureUnitCacheMap */createEmpty$2(/* () */0),
      /* disposedIndexArray */createEmpty(/* () */0),
      /* needAddedSourceArray : array */[],
      /* needInitedTextureIndexArray : array */[],
      /* nameMap */createEmpty$2(/* () */0)
    ];
    return state;
  }
  
  function deepCopyForRestore$5(state) {
    var record = getRecord$4(state);
    var index = record[/* index */0];
    var newrecord = caml_array_dup(state);
    newrecord[/* basicSourceTextureRecord */19] = /* record */[
      /* index */index,
      /* wrapSs */copyUint8ArrayWithEndIndex(imul(index, getWrapSsSize(/* () */0)), record[/* wrapSs */1]),
      /* wrapTs */copyUint8ArrayWithEndIndex(imul(index, getWrapTsSize(/* () */0)), record[/* wrapTs */2]),
      /* magFilters */copyUint8ArrayWithEndIndex(imul(index, getMagFiltersSize(/* () */0)), record[/* magFilters */3]),
      /* minFilters */copyUint8ArrayWithEndIndex(imul(index, getMinFiltersSize(/* () */0)), record[/* minFilters */4]),
      /* formats */copyUint8ArrayWithEndIndex(imul(index, getFormatsSize(/* () */0)), record[/* formats */5]),
      /* types */copyUint8ArrayWithEndIndex(imul(index, getTypesSize(/* () */0)), record[/* types */6]),
      /* isNeedUpdates */copyUint8ArrayWithEndIndex(imul(index, getIsNeedUpdatesSize(/* () */0)), record[/* isNeedUpdates */7]),
      /* flipYs */copyUint8ArrayWithEndIndex(imul(index, getFlipYsSize(/* () */0)), record[/* flipYs */8]),
      /* sourceMap */copy(record[/* sourceMap */9]),
      /* glTextureMap */copy(record[/* glTextureMap */10]),
      /* bindTextureUnitCacheMap */createEmpty$2(/* () */0),
      /* disposedIndexArray */record[/* disposedIndexArray */12].slice(),
      /* needAddedSourceArray */record[/* needAddedSourceArray */13].slice(),
      /* needInitedTextureIndexArray */record[/* needInitedTextureIndexArray */14].slice(),
      /* nameMap */copy(record[/* nameMap */15])
    ];
    return newrecord;
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function getDefaultWrapS$1() {
    return /* CLAMP_TO_EDGE */0;
  }
  
  function getDefaultWrapT$1() {
    return /* CLAMP_TO_EDGE */0;
  }
  
  function getDefaultMagFilter$1() {
    return /* LINEAR */1;
  }
  
  function getDefaultMinFilter$1() {
    return /* NEAREST */0;
  }
  
  function getDefaultFormat$1() {
    return /* RGBA */1;
  }
  
  function getDefaultType$1() {
    return getUnsignedByte(/* () */0);
  }
  
  function getDefaultWidth() {
    return 0;
  }
  
  function getDefaultHeight() {
    return 0;
  }
  
  function getWrapSsLength$1(arrayBufferViewSourceTextureCount) {
    return imul(arrayBufferViewSourceTextureCount, getWrapSsSize(/* () */0));
  }
  
  function getWrapSsOffset$1(basicSourceTextureCount, _) {
    return getArrayBufferViewSourceTextureOffset(basicSourceTextureCount) + 0 | 0;
  }
  
  function getWrapSIndex$1(index) {
    return imul(index, getWrapSsSize(/* () */0));
  }
  
  function getWrapTsLength$1(arrayBufferViewSourceTextureCount) {
    return imul(arrayBufferViewSourceTextureCount, getWrapTsSize(/* () */0));
  }
  
  function getWrapTsOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount) {
    return (getArrayBufferViewSourceTextureOffset(basicSourceTextureCount) + 0 | 0) + imul(imul(arrayBufferViewSourceTextureCount, getWrapSsSize(/* () */0)), Uint8Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getWrapTIndex$1(index) {
    return imul(index, getWrapTsSize(/* () */0));
  }
  
  function getMagFiltersLength$1(arrayBufferViewSourceTextureCount) {
    return imul(arrayBufferViewSourceTextureCount, getMagFiltersSize(/* () */0));
  }
  
  function getMagFiltersOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount) {
    return getWrapTsOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount) + imul(imul(arrayBufferViewSourceTextureCount, getWrapTsSize(/* () */0)), Uint8Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getMagFilterIndex$1(index) {
    return imul(index, getMagFiltersSize(/* () */0));
  }
  
  function getMinFiltersLength$1(arrayBufferViewSourceTextureCount) {
    return imul(arrayBufferViewSourceTextureCount, getMinFiltersSize(/* () */0));
  }
  
  function getMinFiltersOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount) {
    return getMagFiltersOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount) + imul(imul(arrayBufferViewSourceTextureCount, getMagFiltersSize(/* () */0)), Uint8Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getMinFilterIndex$1(index) {
    return imul(index, getMinFiltersSize(/* () */0));
  }
  
  function getFormatsLength$1(arrayBufferViewSourceTextureCount) {
    return imul(arrayBufferViewSourceTextureCount, getFormatsSize(/* () */0));
  }
  
  function getFormatsOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount) {
    return getMinFiltersOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount) + imul(imul(arrayBufferViewSourceTextureCount, getMinFiltersSize(/* () */0)), Uint8Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getFormatIndex$1(index) {
    return imul(index, getFormatsSize(/* () */0));
  }
  
  function getTypesLength$1(arrayBufferViewSourceTextureCount) {
    return imul(arrayBufferViewSourceTextureCount, getTypesSize(/* () */0));
  }
  
  function getTypesOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount) {
    return getFormatsOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount) + imul(imul(arrayBufferViewSourceTextureCount, getFormatsSize(/* () */0)), Uint8Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getTypeIndex$1(index) {
    return imul(index, getTypesSize(/* () */0));
  }
  
  function getIsNeedUpdatesLength$1(arrayBufferViewSourceTextureCount) {
    return imul(arrayBufferViewSourceTextureCount, getIsNeedUpdatesSize(/* () */0));
  }
  
  function getIsNeedUpdatesOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount) {
    return getTypesOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount) + imul(imul(arrayBufferViewSourceTextureCount, getTypesSize(/* () */0)), Uint8Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getFlipYsLength$1(arrayBufferViewSourceTextureCount) {
    return imul(arrayBufferViewSourceTextureCount, getFlipYsSize(/* () */0));
  }
  
  function getFlipYsOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount) {
    return getIsNeedUpdatesOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount) + imul(imul(arrayBufferViewSourceTextureCount, getIsNeedUpdatesSize(/* () */0)), Uint8Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getFlipYIndex$1(index) {
    return imul(index, getFlipYsSize(/* () */0));
  }
  
  function getWidthsLength(arrayBufferViewSourceTextureCount) {
    return imul(arrayBufferViewSourceTextureCount, getWidthsSize(/* () */0));
  }
  
  function getWidthsOffset(basicSourceTextureCount, arrayBufferViewSourceTextureCount) {
    return getFlipYsOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount) + imul(imul(arrayBufferViewSourceTextureCount, getFlipYsSize(/* () */0)), Uint8Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getWidthIndex(index) {
    return imul(index, getWidthsSize(/* () */0));
  }
  
  function getHeightsLength(arrayBufferViewSourceTextureCount) {
    return imul(arrayBufferViewSourceTextureCount, getHeightsSize(/* () */0));
  }
  
  function getHeightsOffset(basicSourceTextureCount, arrayBufferViewSourceTextureCount) {
    return getWidthsOffset(basicSourceTextureCount, arrayBufferViewSourceTextureCount) + imul(imul(arrayBufferViewSourceTextureCount, getWidthsSize(/* () */0)), Uint16Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getHeightIndex(index) {
    return imul(index, getHeightsSize(/* () */0));
  }
  
  var getDefaultIsNeedUpdate$2 = getDefaultIsNeedUpdate;
  
  var getDefaultFlipY$2 = getDefaultFlipY;
  
  var getIsNeedUpdateIndex$2 = getIsNeedUpdateIndex;
  
  
  /* BufferSourceTextureService-Wonderjs Not a pure module */
  
  function createTypeArrays$6(buffer, basicSourceTextureCount, arrayBufferViewSourceTextureCount) {
    return /* tuple */[
            new Uint8Array(buffer, getWrapSsOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount), getWrapSsLength$1(arrayBufferViewSourceTextureCount)),
            new Uint8Array(buffer, getWrapTsOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount), getWrapTsLength$1(arrayBufferViewSourceTextureCount)),
            new Uint8Array(buffer, getMagFiltersOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount), getMagFiltersLength$1(arrayBufferViewSourceTextureCount)),
            new Uint8Array(buffer, getMinFiltersOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount), getMinFiltersLength$1(arrayBufferViewSourceTextureCount)),
            new Uint8Array(buffer, getFormatsOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount), getFormatsLength$1(arrayBufferViewSourceTextureCount)),
            new Uint8Array(buffer, getTypesOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount), getTypesLength$1(arrayBufferViewSourceTextureCount)),
            new Uint8Array(buffer, getIsNeedUpdatesOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount), getIsNeedUpdatesLength$1(arrayBufferViewSourceTextureCount)),
            new Uint8Array(buffer, getFlipYsOffset$1(basicSourceTextureCount, arrayBufferViewSourceTextureCount), getFlipYsLength$1(arrayBufferViewSourceTextureCount)),
            new Uint16Array(buffer, getWidthsOffset(basicSourceTextureCount, arrayBufferViewSourceTextureCount), getWidthsLength(arrayBufferViewSourceTextureCount)),
            new Uint16Array(buffer, getHeightsOffset(basicSourceTextureCount, arrayBufferViewSourceTextureCount), getHeightsLength(arrayBufferViewSourceTextureCount))
          ];
  }
  
  
  /* BufferArrayBufferViewSourceTextureService-Wonderjs Not a pure module */
  
  function getWrapS$1(index, typeArr) {
    return getUint8_1(getWrapSIndex$1(index), typeArr);
  }
  
  function setWrapS$1(index, data, typeArr) {
    return setUint8_1(getWrapSIndex$1(index), data, typeArr);
  }
  
  function getWrapT$1(index, typeArr) {
    return getUint8_1(getWrapTIndex$1(index), typeArr);
  }
  
  function setWrapT$1(index, data, typeArr) {
    return setUint8_1(getWrapTIndex$1(index), data, typeArr);
  }
  
  function getMagFilter$1(index, typeArr) {
    return getUint8_1(getMagFilterIndex$1(index), typeArr);
  }
  
  function setMagFilter$1(index, data, typeArr) {
    return setUint8_1(getMagFilterIndex$1(index), data, typeArr);
  }
  
  function getMinFilter$1(index, typeArr) {
    return getUint8_1(getMinFilterIndex$1(index), typeArr);
  }
  
  function setMinFilter$1(index, data, typeArr) {
    return setUint8_1(getMinFilterIndex$1(index), data, typeArr);
  }
  
  function getIsNeedUpdate$1(index, typeArr) {
    return getUint8_1(getIsNeedUpdateIndex$2(index), typeArr);
  }
  
  function setIsNeedUpdate$1(index, data, typeArr) {
    return setUint8_1(getIsNeedUpdateIndex$2(index), data, typeArr);
  }
  
  function setFlipY$1(index, data, typeArr) {
    return setUint8_1(getFlipYIndex$1(index), data, typeArr);
  }
  
  function isFlipY$1(index, typeArr) {
    return getUint8_1(getFlipYIndex$1(index), typeArr) === getFlipY(/* () */0);
  }
  
  function getFormat$1(index, typeArr) {
    return getUint8_1(getFormatIndex$1(index), typeArr);
  }
  
  function setFormat$1(index, data, typeArr) {
    return setUint8_1(getFormatIndex$1(index), data, typeArr);
  }
  
  function getType$1(index, typeArr) {
    return getUint8_1(getTypeIndex$1(index), typeArr);
  }
  
  function setType$1(index, data, typeArr) {
    return setUint8_1(getTypeIndex$1(index), data, typeArr);
  }
  
  function getWidth(index, typeArr) {
    return getUint16_1(getWidthIndex(index), typeArr);
  }
  
  function setWidth(index, data, typeArr) {
    return setUint16_1(getWidthIndex(index), data, typeArr);
  }
  
  function getHeight(index, typeArr) {
    return getUint16_1(getHeightIndex(index), typeArr);
  }
  
  function setHeight(index, data, typeArr) {
    return setUint16_1(getHeightIndex(index), data, typeArr);
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function getRecord$6(param) {
    return unsafeGet$2(param[/* arrayBufferViewSourceTextureRecord */20]);
  }
  
  function setAllTypeArrDataToDefault$6(arrayBufferViewSourceTextureCount, _, param) {
    var defaultWrapS = getDefaultWrapS$1(/* () */0);
    var defaultWrapT = getDefaultWrapT$1(/* () */0);
    var defaultMagFilter = getDefaultMagFilter$1(/* () */0);
    var defaultMinFilter = getDefaultMinFilter$1(/* () */0);
    var defaultFormat = getDefaultFormat$1(/* () */0);
    var defaultType = getDefaultType$1(/* () */0);
    var defaultIsNeedUpdate = getDefaultIsNeedUpdate$2(/* () */0);
    var defaultFlipY = getDefaultFlipY$2(/* () */0);
    var defaultWidth = getDefaultWidth(/* () */0);
    var defaultHeight = getDefaultHeight(/* () */0);
    return reduceOneParam((function (param, indexInTypeArray) {
                  return /* tuple */[
                          setWrapS$1(indexInTypeArray, defaultWrapS, param[0]),
                          setWrapT$1(indexInTypeArray, defaultWrapT, param[1]),
                          setMagFilter$1(indexInTypeArray, defaultMagFilter, param[2]),
                          setMinFilter$1(indexInTypeArray, defaultMinFilter, param[3]),
                          setFormat$1(indexInTypeArray, defaultFormat, param[4]),
                          setType$1(indexInTypeArray, defaultType, param[5]),
                          setIsNeedUpdate$1(indexInTypeArray, defaultIsNeedUpdate, param[6]),
                          setFlipY$1(indexInTypeArray, defaultFlipY, param[7]),
                          setWidth(indexInTypeArray, defaultWidth, param[8]),
                          setHeight(indexInTypeArray, defaultHeight, param[9])
                        ];
                }), /* tuple */[
                param[0],
                param[1],
                param[2],
                param[3],
                param[4],
                param[5],
                param[6],
                param[7],
                param[8],
                param[9]
              ], range$1(0, arrayBufferViewSourceTextureCount - 1 | 0));
  }
  
  function _initBufferData$6(basicSourceTextureCount, arrayBufferViewSourceTextureCount, buffer, arrayBufferViewSourceTextureIndexOffset) {
    var match = createTypeArrays$6(buffer, basicSourceTextureCount, arrayBufferViewSourceTextureCount);
    return setAllTypeArrDataToDefault$6(arrayBufferViewSourceTextureCount, arrayBufferViewSourceTextureIndexOffset, /* tuple */[
                match[0],
                match[1],
                match[2],
                match[3],
                match[4],
                match[5],
                match[6],
                match[7],
                match[8],
                match[9]
              ]);
  }
  
  function create$11(state) {
    var settingRecord = state[/* settingRecord */1];
    var basicSourceTextureCount = getBasicSourceTextureCount(settingRecord);
    var arrayBufferViewSourceTextureCount = getArrayBufferViewSourceTextureCount(settingRecord);
    var match = getRecord$5(state);
    var match$1 = _initBufferData$6(basicSourceTextureCount, arrayBufferViewSourceTextureCount, match[/* buffer */0], getArrayBufferViewSourceTextureIndexOffset$1(state));
    state[/* arrayBufferViewSourceTextureRecord */20] = /* record */[
      /* index */0,
      /* wrapSs */match$1[0],
      /* wrapTs */match$1[1],
      /* magFilters */match$1[2],
      /* minFilters */match$1[3],
      /* formats */match$1[4],
      /* types */match$1[5],
      /* isNeedUpdates */match$1[6],
      /* flipYs */match$1[7],
      /* widths */match$1[8],
      /* heights */match$1[9],
      /* sourceMap */createEmpty$2(/* () */0),
      /* glTextureMap */createEmpty$2(/* () */0),
      /* bindTextureUnitCacheMap */createEmpty$2(/* () */0),
      /* disposedIndexArray */createEmpty(/* () */0),
      /* needAddedSourceArray : array */[],
      /* needInitedTextureIndexArray : array */[],
      /* nameMap */createEmpty$2(/* () */0)
    ];
    return state;
  }
  
  function deepCopyForRestore$6(state) {
    var record = getRecord$6(state);
    var index = record[/* index */0];
    var newrecord = caml_array_dup(state);
    newrecord[/* arrayBufferViewSourceTextureRecord */20] = /* record */[
      /* index */index,
      /* wrapSs */copyUint8ArrayWithEndIndex(imul(index, getWrapSsSize(/* () */0)), record[/* wrapSs */1]),
      /* wrapTs */copyUint8ArrayWithEndIndex(imul(index, getWrapTsSize(/* () */0)), record[/* wrapTs */2]),
      /* magFilters */copyUint8ArrayWithEndIndex(imul(index, getMagFiltersSize(/* () */0)), record[/* magFilters */3]),
      /* minFilters */copyUint8ArrayWithEndIndex(imul(index, getMinFiltersSize(/* () */0)), record[/* minFilters */4]),
      /* formats */copyUint8ArrayWithEndIndex(imul(index, getFormatsSize(/* () */0)), record[/* formats */5]),
      /* types */copyUint8ArrayWithEndIndex(imul(index, getTypesSize(/* () */0)), record[/* types */6]),
      /* isNeedUpdates */copyUint8ArrayWithEndIndex(imul(index, getIsNeedUpdatesSize(/* () */0)), record[/* isNeedUpdates */7]),
      /* flipYs */copyUint8ArrayWithEndIndex(imul(index, getFlipYsSize(/* () */0)), record[/* flipYs */8]),
      /* widths */copyUint16ArrayWithEndIndex(imul(index, getWidthsSize(/* () */0)), record[/* widths */9]),
      /* heights */copyUint16ArrayWithEndIndex(imul(index, getHeightsSize(/* () */0)), record[/* heights */10]),
      /* sourceMap */copy(record[/* sourceMap */11]),
      /* glTextureMap */copy(record[/* glTextureMap */12]),
      /* bindTextureUnitCacheMap */createEmpty$2(/* () */0),
      /* disposedIndexArray */record[/* disposedIndexArray */14].slice(),
      /* needAddedSourceArray */record[/* needAddedSourceArray */15].slice(),
      /* needInitedTextureIndexArray */record[/* needInitedTextureIndexArray */16].slice(),
      /* nameMap */copy(record[/* nameMap */17])
    ];
    return newrecord;
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function _handleInitTextureWorker(texture, state) {
    if (texture !== undefined) {
      var texture$1 = texture;
      return handleByJudgeSourceTextureIndex(texture$1, getArrayBufferViewSourceTextureIndexOffset$1(state), state, /* tuple */[
                  (function (_, state) {
                      push$1(texture$1, getRecord$4(state)[/* needInitedTextureIndexArray */14]);
                      return state;
                    }),
                  (function (_, state) {
                      push$1(texture$1, getRecord$6(state)[/* needInitedTextureIndexArray */16]);
                      return state;
                    })
                ]);
    } else {
      return state;
    }
  }
  
  function _handleInitTextureNoWorker(texture, state) {
    if (texture !== undefined) {
      return handleByJudgeSourceTextureIndex(texture, getArrayBufferViewSourceTextureIndexOffset$1(state), state, /* tuple */[
                  (function (basicSourceTextureInTypeArray, state) {
                      initTexture$1(unsafeGetGl(state[/* deviceManagerRecord */10]), basicSourceTextureInTypeArray, getRecord$4(state)[/* glTextureMap */10]);
                      return state;
                    }),
                  (function (arrayBufferViewTextureInTypeArray, state) {
                      initTexture$1(unsafeGetGl(state[/* deviceManagerRecord */10]), arrayBufferViewTextureInTypeArray, getRecord$6(state)[/* glTextureMap */12]);
                      return state;
                    })
                ]);
    } else {
      return state;
    }
  }
  
  function initTexture(texture, state) {
    var match = isUseWorker(state);
    if (match) {
      return _handleInitTextureWorker(texture, state);
    } else {
      return _handleInitTextureNoWorker(texture, state);
    }
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function unsafeGetBasicCameraViewComponent(uid, param) {
    var basicCameraViewMap = param[/* basicCameraViewMap */23];
    return unsafeGetComponent(uid, basicCameraViewMap);
  }
  
  function getPerspectiveCameraProjectionComponent(uid, param) {
    var perspectiveCameraProjectionMap = param[/* perspectiveCameraProjectionMap */24];
    return getComponent(uid, perspectiveCameraProjectionMap);
  }
  
  function unsafeGetPerspectiveCameraProjectionComponent(uid, param) {
    var perspectiveCameraProjectionMap = param[/* perspectiveCameraProjectionMap */24];
    return unsafeGetComponent(uid, perspectiveCameraProjectionMap);
  }
  
  function getArcballCameraControllerComponent(uid, param) {
    var arcballCameraControllerMap = param[/* arcballCameraControllerMap */25];
    return getComponent(uid, arcballCameraControllerMap);
  }
  
  function unsafeGetArcballCameraControllerComponent(uid, param) {
    var arcballCameraControllerMap = param[/* arcballCameraControllerMap */25];
    return unsafeGetComponent(uid, arcballCameraControllerMap);
  }
  
  function unsafeGetTransformComponent(uid, param) {
    var transformMap = param[/* transformMap */22];
    return unsafeGetComponent(uid, transformMap);
  }
  
  function unsafeGetGeometryComponentData(uid, param) {
    var geometryDataMap = param[/* geometryDataMap */21];
    return unsafeGetComponentData(uid, geometryDataMap);
  }
  
  function unsafeGetGeometryComponent(uid, param) {
    var geometryDataMap = param[/* geometryDataMap */21];
    return unsafeGetComponentData(uid, geometryDataMap)[0];
  }
  
  function getBasicMaterialComponent(uid, param) {
    var basicMaterialMap = param[/* basicMaterialMap */27];
    return getComponent(uid, basicMaterialMap);
  }
  
  function getLightMaterialComponent(uid, param) {
    var lightMaterialMap = param[/* lightMaterialMap */28];
    return getComponent(uid, lightMaterialMap);
  }
  
  function unsafeGetBasicMaterialComponent(uid, param) {
    var basicMaterialMap = param[/* basicMaterialMap */27];
    return unsafeGetComponent(uid, basicMaterialMap);
  }
  
  function unsafeGetLightMaterialComponent(uid, param) {
    var lightMaterialMap = param[/* lightMaterialMap */28];
    return unsafeGetComponent(uid, lightMaterialMap);
  }
  
  function getMeshRendererComponent(uid, param) {
    var meshRendererMap = param[/* meshRendererMap */26];
    return getComponent(uid, meshRendererMap);
  }
  
  function unsafeGetMeshRendererComponent(uid, param) {
    var meshRendererMap = param[/* meshRendererMap */26];
    return unsafeGetComponent(uid, meshRendererMap);
  }
  
  function unsafeGetDirectionLightComponent(uid, param) {
    var directionLightMap = param[/* directionLightMap */31];
    return unsafeGetComponent(uid, directionLightMap);
  }
  
  function unsafeGetPointLightComponent(uid, param) {
    var pointLightMap = param[/* pointLightMap */32];
    return unsafeGetComponent(uid, pointLightMap);
  }
  
  function getSourceInstanceComponent(uid, param) {
    var sourceInstanceMap = param[/* sourceInstanceMap */29];
    return getComponent(uid, sourceInstanceMap);
  }
  
  
  /* ComponentMapService-Wonderjs Not a pure module */
  
  function getDefaultCount() {
    return 0;
  }
  
  var unsafeGetCount = unsafeGet$1;
  
  var setCount = set$1;
  
  
  /* No side effect */
  
  function getMap$2(material, textureCountPerMaterial, param, param$1) {
    var mapUnit = param[0](material, param$1[1]);
    var match = hasMap(mapUnit);
    if (match) {
      return some(param[1](/* tuple */[
                      material,
                      mapUnit,
                      textureCountPerMaterial
                    ], param$1[0]));
    }
    
  }
  
  function setMap$2(material, texture, param, param$1) {
    var textureCountMap = param$1[3];
    var mapUnits = param$1[2];
    var textureIndices = param$1[1];
    var textureCountPerMaterial = param$1[0];
    var setTextureIndexFunc = param[2];
    var mapUnit = param[0](material, mapUnits);
    var match = hasMap(mapUnit);
    if (match) {
      return /* tuple */[
              setTextureIndexFunc(/* tuple */[
                    material,
                    mapUnit,
                    textureCountPerMaterial
                  ], texture, textureIndices),
              mapUnits,
              textureCountMap
            ];
    } else {
      var mapCount = unsafeGetCount(material, textureCountMap);
      return /* tuple */[
              setTextureIndexFunc(/* tuple */[
                    material,
                    mapCount,
                    textureCountPerMaterial
                  ], texture, textureIndices),
              param[1](material, mapCount, mapUnits),
              setCount(material, mapCount + 1 | 0, textureCountMap)
            ];
    }
  }
  
  
  /* No side effect */
  
  function getMap$1(material, state) {
    var match = getRecord$1(state);
    return getMap$2(material, getTextureCountPerMaterial(state[/* settingRecord */1]), /* tuple */[
                getMapUnit$1,
                getTextureIndex
              ], /* tuple */[
                match[/* textureIndices */4],
                match[/* mapUnits */5]
              ]);
  }
  
  function setMap$1(material, texture, state) {
    var basicMaterialRecord = getRecord$1(state);
    var match = setMap$2(material, texture, /* tuple */[
          getMapUnit$1,
          setMapUnit,
          setTextureIndex
        ], /* tuple */[
          getTextureCountPerMaterial(state[/* settingRecord */1]),
          basicMaterialRecord[/* textureIndices */4],
          basicMaterialRecord[/* mapUnits */5],
          basicMaterialRecord[/* textureCountMap */6]
        ]);
    var newrecord = caml_array_dup(state);
    newrecord[/* basicMaterialRecord */16] = /* record */[
      /* index */basicMaterialRecord[/* index */0],
      /* buffer */basicMaterialRecord[/* buffer */1],
      /* shaderIndices */basicMaterialRecord[/* shaderIndices */2],
      /* colors */basicMaterialRecord[/* colors */3],
      /* textureIndices */match[0],
      /* mapUnits */match[1],
      /* textureCountMap */match[2],
      /* defaultColor */basicMaterialRecord[/* defaultColor */7],
      /* gameObjectMap */basicMaterialRecord[/* gameObjectMap */8],
      /* groupCountMap */basicMaterialRecord[/* groupCountMap */9],
      /* disposedIndexArray */basicMaterialRecord[/* disposedIndexArray */10],
      /* nameMap */basicMaterialRecord[/* nameMap */11],
      /* materialArrayForWorkerInit */basicMaterialRecord[/* materialArrayForWorkerInit */12]
    ];
    return newrecord;
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function getColor$8(material, state) {
    return getColor$2(material, getRecord$1(state)[/* colors */3]);
  }
  
  function setColor$3(material, color, state) {
    var basicMaterialRecord = getRecord$1(state);
    var newrecord = caml_array_dup(state);
    newrecord[/* basicMaterialRecord */16] = /* record */[
      /* index */basicMaterialRecord[/* index */0],
      /* buffer */basicMaterialRecord[/* buffer */1],
      /* shaderIndices */basicMaterialRecord[/* shaderIndices */2],
      /* colors */setColor(material, color, basicMaterialRecord[/* colors */3]),
      /* textureIndices */basicMaterialRecord[/* textureIndices */4],
      /* mapUnits */basicMaterialRecord[/* mapUnits */5],
      /* textureCountMap */basicMaterialRecord[/* textureCountMap */6],
      /* defaultColor */basicMaterialRecord[/* defaultColor */7],
      /* gameObjectMap */basicMaterialRecord[/* gameObjectMap */8],
      /* groupCountMap */basicMaterialRecord[/* groupCountMap */9],
      /* disposedIndexArray */basicMaterialRecord[/* disposedIndexArray */10],
      /* nameMap */basicMaterialRecord[/* nameMap */11],
      /* materialArrayForWorkerInit */basicMaterialRecord[/* materialArrayForWorkerInit */12]
    ];
    return newrecord;
  }
  
  var getMap = getMap$1;
  
  var setMap = setMap$1;
  
  
  /* RecordBasicMaterialMainService-Wonderjs Not a pure module */
  
  function getDiffuseMap$1(material, state) {
    var match = getRecord$3(state);
    return getMap$2(material, getTextureCountPerMaterial(state[/* settingRecord */1]), /* tuple */[
                getDiffuseMapUnit$1,
                getTextureIndex$2
              ], /* tuple */[
                match[/* textureIndices */6],
                match[/* diffuseMapUnits */7]
              ]);
  }
  
  function setDiffuseMap$1(material, texture, state) {
    var lightMaterialRecord = getRecord$3(state);
    var match = setMap$2(material, texture, /* tuple */[
          getDiffuseMapUnit$1,
          setDiffuseMapUnit,
          setTextureIndex$2
        ], /* tuple */[
          getTextureCountPerMaterial(state[/* settingRecord */1]),
          lightMaterialRecord[/* textureIndices */6],
          lightMaterialRecord[/* diffuseMapUnits */7],
          lightMaterialRecord[/* textureCountMap */9]
        ]);
    var newrecord = caml_array_dup(state);
    newrecord[/* lightMaterialRecord */17] = /* record */[
      /* index */lightMaterialRecord[/* index */0],
      /* buffer */lightMaterialRecord[/* buffer */1],
      /* shaderIndices */lightMaterialRecord[/* shaderIndices */2],
      /* diffuseColors */lightMaterialRecord[/* diffuseColors */3],
      /* specularColors */lightMaterialRecord[/* specularColors */4],
      /* shininess */lightMaterialRecord[/* shininess */5],
      /* textureIndices */match[0],
      /* diffuseMapUnits */match[1],
      /* specularMapUnits */lightMaterialRecord[/* specularMapUnits */8],
      /* textureCountMap */match[2],
      /* defaultDiffuseColor */lightMaterialRecord[/* defaultDiffuseColor */10],
      /* defaultSpecularColor */lightMaterialRecord[/* defaultSpecularColor */11],
      /* defaultShininess */lightMaterialRecord[/* defaultShininess */12],
      /* gameObjectMap */lightMaterialRecord[/* gameObjectMap */13],
      /* groupCountMap */lightMaterialRecord[/* groupCountMap */14],
      /* disposedIndexArray */lightMaterialRecord[/* disposedIndexArray */15],
      /* nameMap */lightMaterialRecord[/* nameMap */16],
      /* materialArrayForWorkerInit */lightMaterialRecord[/* materialArrayForWorkerInit */17]
    ];
    return newrecord;
  }
  
  function getSpecularMap$1(material, state) {
    var match = getRecord$3(state);
    return getMap$2(material, getTextureCountPerMaterial(state[/* settingRecord */1]), /* tuple */[
                getSpecularMapUnit$1,
                getTextureIndex$2
              ], /* tuple */[
                match[/* textureIndices */6],
                match[/* specularMapUnits */8]
              ]);
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function getDiffuseColor$2(material, state) {
    return getDiffuseColor$1(material, getRecord$3(state)[/* diffuseColors */3]);
  }
  
  function setDiffuseColor$1(material, color, state) {
    var lightMaterialRecord = getRecord$3(state);
    var newrecord = caml_array_dup(state);
    newrecord[/* lightMaterialRecord */17] = /* record */[
      /* index */lightMaterialRecord[/* index */0],
      /* buffer */lightMaterialRecord[/* buffer */1],
      /* shaderIndices */lightMaterialRecord[/* shaderIndices */2],
      /* diffuseColors */setDiffuseColor(material, color, lightMaterialRecord[/* diffuseColors */3]),
      /* specularColors */lightMaterialRecord[/* specularColors */4],
      /* shininess */lightMaterialRecord[/* shininess */5],
      /* textureIndices */lightMaterialRecord[/* textureIndices */6],
      /* diffuseMapUnits */lightMaterialRecord[/* diffuseMapUnits */7],
      /* specularMapUnits */lightMaterialRecord[/* specularMapUnits */8],
      /* textureCountMap */lightMaterialRecord[/* textureCountMap */9],
      /* defaultDiffuseColor */lightMaterialRecord[/* defaultDiffuseColor */10],
      /* defaultSpecularColor */lightMaterialRecord[/* defaultSpecularColor */11],
      /* defaultShininess */lightMaterialRecord[/* defaultShininess */12],
      /* gameObjectMap */lightMaterialRecord[/* gameObjectMap */13],
      /* groupCountMap */lightMaterialRecord[/* groupCountMap */14],
      /* disposedIndexArray */lightMaterialRecord[/* disposedIndexArray */15],
      /* nameMap */lightMaterialRecord[/* nameMap */16],
      /* materialArrayForWorkerInit */lightMaterialRecord[/* materialArrayForWorkerInit */17]
    ];
    return newrecord;
  }
  
  function getSpecularColor$2(material, state) {
    return getSpecularColor$1(material, getRecord$3(state)[/* specularColors */4]);
  }
  
  function setSpecularColor$1(material, color, state) {
    var lightMaterialRecord = getRecord$3(state);
    var newrecord = caml_array_dup(state);
    newrecord[/* lightMaterialRecord */17] = /* record */[
      /* index */lightMaterialRecord[/* index */0],
      /* buffer */lightMaterialRecord[/* buffer */1],
      /* shaderIndices */lightMaterialRecord[/* shaderIndices */2],
      /* diffuseColors */lightMaterialRecord[/* diffuseColors */3],
      /* specularColors */setSpecularColor(material, color, lightMaterialRecord[/* specularColors */4]),
      /* shininess */lightMaterialRecord[/* shininess */5],
      /* textureIndices */lightMaterialRecord[/* textureIndices */6],
      /* diffuseMapUnits */lightMaterialRecord[/* diffuseMapUnits */7],
      /* specularMapUnits */lightMaterialRecord[/* specularMapUnits */8],
      /* textureCountMap */lightMaterialRecord[/* textureCountMap */9],
      /* defaultDiffuseColor */lightMaterialRecord[/* defaultDiffuseColor */10],
      /* defaultSpecularColor */lightMaterialRecord[/* defaultSpecularColor */11],
      /* defaultShininess */lightMaterialRecord[/* defaultShininess */12],
      /* gameObjectMap */lightMaterialRecord[/* gameObjectMap */13],
      /* groupCountMap */lightMaterialRecord[/* groupCountMap */14],
      /* disposedIndexArray */lightMaterialRecord[/* disposedIndexArray */15],
      /* nameMap */lightMaterialRecord[/* nameMap */16],
      /* materialArrayForWorkerInit */lightMaterialRecord[/* materialArrayForWorkerInit */17]
    ];
    return newrecord;
  }
  
  function getShininess$2(material, state) {
    return getShininess$1(material, getRecord$3(state)[/* shininess */5]);
  }
  
  function setShininess$1(material, value, state) {
    var lightMaterialRecord = getRecord$3(state);
    var newrecord = caml_array_dup(state);
    newrecord[/* lightMaterialRecord */17] = /* record */[
      /* index */lightMaterialRecord[/* index */0],
      /* buffer */lightMaterialRecord[/* buffer */1],
      /* shaderIndices */lightMaterialRecord[/* shaderIndices */2],
      /* diffuseColors */lightMaterialRecord[/* diffuseColors */3],
      /* specularColors */lightMaterialRecord[/* specularColors */4],
      /* shininess */setShininess(material, value, lightMaterialRecord[/* shininess */5]),
      /* textureIndices */lightMaterialRecord[/* textureIndices */6],
      /* diffuseMapUnits */lightMaterialRecord[/* diffuseMapUnits */7],
      /* specularMapUnits */lightMaterialRecord[/* specularMapUnits */8],
      /* textureCountMap */lightMaterialRecord[/* textureCountMap */9],
      /* defaultDiffuseColor */lightMaterialRecord[/* defaultDiffuseColor */10],
      /* defaultSpecularColor */lightMaterialRecord[/* defaultSpecularColor */11],
      /* defaultShininess */lightMaterialRecord[/* defaultShininess */12],
      /* gameObjectMap */lightMaterialRecord[/* gameObjectMap */13],
      /* groupCountMap */lightMaterialRecord[/* groupCountMap */14],
      /* disposedIndexArray */lightMaterialRecord[/* disposedIndexArray */15],
      /* nameMap */lightMaterialRecord[/* nameMap */16],
      /* materialArrayForWorkerInit */lightMaterialRecord[/* materialArrayForWorkerInit */17]
    ];
    return newrecord;
  }
  
  var getDiffuseMap = getDiffuseMap$1;
  
  var setDiffuseMap = setDiffuseMap$1;
  
  var getSpecularMap = getSpecularMap$1;
  
  
  /* RecordLightMaterialMainService-Wonderjs Not a pure module */
  
  function getCanvas(param) {
    return param[/* canvas */0];
  }
  
  function unsafeGetCanvas(record) {
    return unsafeGet$2(record[/* canvas */0]);
  }
  
  function setCanvas(canvas, _) {
    return /* record */[/* canvas */some(canvas)];
  }
  
  var getOffset = function (canvas){
                  var offset = [canvas.offsetLeft,  canvas.offsetTop];
                  var offsetParent = canvas;
  
              while (offsetParent = offsetParent.offsetParent) {
                  offset[0] += offsetParent.offsetLeft;
                  offset[1] += offsetParent.offsetTop;
              }
  
              return offset;
  };
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function getPointDownEventName() {
    return "wd_pointdown";
  }
  
  function getPointUpEventName() {
    return "wd_pointup";
  }
  
  function getPointTapEventName() {
    return "wd_pointtap";
  }
  
  function getPointMoveEventName() {
    return "wd_pointmove";
  }
  
  function getPointScaleEventName() {
    return "wd_pointscale";
  }
  
  function getPointDragEventName() {
    return "wd_pointdrag";
  }
  
  
  /* No side effect */
  
  function _addEventDataByPriority(eventData, arr) {
    return push$1(eventData, arr).sort((function (eventDataA, eventDataB) {
                  return eventDataB[/* priority */0] - eventDataA[/* priority */0] | 0;
                }));
  }
  
  function _addToEventArr(eventName, eventData, eventArrMap) {
    var match = get$2(eventName, eventArrMap);
    if (match !== undefined) {
      return set(eventName, _addEventDataByPriority(eventData, match), eventArrMap);
    } else {
      return set(eventName, /* array */[eventData], eventArrMap);
    }
  }
  
  function bindGlobalEvent(eventName, priority, handleFunc, state) {
    var eventRecord = state[/* eventRecord */42];
    var newrecord = caml_array_dup(state);
    newrecord[/* eventRecord */42] = /* record */[
      /* domEventStreamSubscription */eventRecord[/* domEventStreamSubscription */0],
      /* mouseDomEventDataArrMap */eventRecord[/* mouseDomEventDataArrMap */1],
      /* keyboardDomEventDataArrMap */eventRecord[/* keyboardDomEventDataArrMap */2],
      /* touchDomEventDataArrMap */eventRecord[/* touchDomEventDataArrMap */3],
      /* customGlobalEventArrMap */_addToEventArr(eventName, /* record */[
            /* priority */priority,
            /* handleFunc */handleFunc
          ], eventRecord[/* customGlobalEventArrMap */4]),
      /* customGameObjectEventArrMap */eventRecord[/* customGameObjectEventArrMap */5],
      /* mouseEventData */eventRecord[/* mouseEventData */6],
      /* keyboardEventData */eventRecord[/* keyboardEventData */7],
      /* touchEventData */eventRecord[/* touchEventData */8]
    ];
    return newrecord;
  }
  
  function _removeFromEventArrByHandleFunc(arr, targetHandleFunc) {
    return arr.filter((function (param) {
                  return param[/* handleFunc */1] !== targetHandleFunc;
                }));
  }
  
  function _removeFromEventArrMapByHandleFunc(eventName, handleFunc, eventArrMap) {
    var match = get$2(eventName, eventArrMap);
    if (match !== undefined) {
      return set(eventName, _removeFromEventArrByHandleFunc(match, handleFunc), eventArrMap);
    } else {
      return eventArrMap;
    }
  }
  
  function unbindGlobalEventByHandleFunc(eventName, handleFunc, state) {
    var eventRecord = state[/* eventRecord */42];
    var newrecord = caml_array_dup(state);
    newrecord[/* eventRecord */42] = /* record */[
      /* domEventStreamSubscription */eventRecord[/* domEventStreamSubscription */0],
      /* mouseDomEventDataArrMap */eventRecord[/* mouseDomEventDataArrMap */1],
      /* keyboardDomEventDataArrMap */eventRecord[/* keyboardDomEventDataArrMap */2],
      /* touchDomEventDataArrMap */eventRecord[/* touchDomEventDataArrMap */3],
      /* customGlobalEventArrMap */_removeFromEventArrMapByHandleFunc(eventName, handleFunc, eventRecord[/* customGlobalEventArrMap */4]),
      /* customGameObjectEventArrMap */eventRecord[/* customGameObjectEventArrMap */5],
      /* mouseEventData */eventRecord[/* mouseEventData */6],
      /* keyboardEventData */eventRecord[/* keyboardEventData */7],
      /* touchEventData */eventRecord[/* touchEventData */8]
    ];
    return newrecord;
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function addToEventArr(eventName, eventData, getPriorityFunc, eventArrMap) {
    var match = get$3(eventName, eventArrMap);
    if (match !== undefined) {
      return set$1(eventName, push$1(eventData, match).sort((function (eventDataA, eventDataB) {
                        return _1(getPriorityFunc, eventDataB) - _1(getPriorityFunc, eventDataA) | 0;
                      })), eventArrMap);
    } else {
      return set$1(eventName, /* array */[eventData], eventArrMap);
    }
  }
  
  function removeFromEventArrMapByHandleFunc(eventName, param, eventArrMap) {
    var targetHandleFunc = param[1];
    var getHandleFuncFunc = param[0];
    var match = get$3(eventName, eventArrMap);
    if (match !== undefined) {
      return set$1(eventName, match.filter((function (domEventData) {
                        return _1(getHandleFuncFunc, domEventData) !== targetHandleFunc;
                      })), eventArrMap);
    } else {
      return eventArrMap;
    }
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function _addToEventArr$1(eventName, eventData, eventArrMap) {
    return addToEventArr(eventName, eventData, (function (param) {
                  return param[/* priority */0];
                }), eventArrMap);
  }
  
  function bind$1(eventName, priority, handleFunc, state) {
    var eventRecord = state[/* eventRecord */42];
    var newrecord = caml_array_dup(state);
    newrecord[/* eventRecord */42] = /* record */[
      /* domEventStreamSubscription */eventRecord[/* domEventStreamSubscription */0],
      /* mouseDomEventDataArrMap */_addToEventArr$1(eventName, /* record */[
            /* priority */priority,
            /* handleFunc */handleFunc
          ], eventRecord[/* mouseDomEventDataArrMap */1]),
      /* keyboardDomEventDataArrMap */eventRecord[/* keyboardDomEventDataArrMap */2],
      /* touchDomEventDataArrMap */eventRecord[/* touchDomEventDataArrMap */3],
      /* customGlobalEventArrMap */eventRecord[/* customGlobalEventArrMap */4],
      /* customGameObjectEventArrMap */eventRecord[/* customGameObjectEventArrMap */5],
      /* mouseEventData */eventRecord[/* mouseEventData */6],
      /* keyboardEventData */eventRecord[/* keyboardEventData */7],
      /* touchEventData */eventRecord[/* touchEventData */8]
    ];
    return newrecord;
  }
  
  
  /* BindDomEventMainService-Wonderjs Not a pure module */
  
  function _addToEventArr$2(eventName, eventData, eventArrMap) {
    return addToEventArr(eventName, eventData, (function (param) {
                  return param[/* priority */0];
                }), eventArrMap);
  }
  
  function bind$2(eventName, priority, handleFunc, state) {
    var eventRecord = state[/* eventRecord */42];
    var newrecord = caml_array_dup(state);
    newrecord[/* eventRecord */42] = /* record */[
      /* domEventStreamSubscription */eventRecord[/* domEventStreamSubscription */0],
      /* mouseDomEventDataArrMap */eventRecord[/* mouseDomEventDataArrMap */1],
      /* keyboardDomEventDataArrMap */eventRecord[/* keyboardDomEventDataArrMap */2],
      /* touchDomEventDataArrMap */_addToEventArr$2(eventName, /* record */[
            /* priority */priority,
            /* handleFunc */handleFunc
          ], eventRecord[/* touchDomEventDataArrMap */3]),
      /* customGlobalEventArrMap */eventRecord[/* customGlobalEventArrMap */4],
      /* customGameObjectEventArrMap */eventRecord[/* customGameObjectEventArrMap */5],
      /* mouseEventData */eventRecord[/* mouseEventData */6],
      /* keyboardEventData */eventRecord[/* keyboardEventData */7],
      /* touchEventData */eventRecord[/* touchEventData */8]
    ];
    return newrecord;
  }
  
  
  /* BindDomEventMainService-Wonderjs Not a pure module */
  
  function _triggerHandleFunc(customEvent, arr, state) {
    return reduceOneParam((function (param, param$1) {
                  var customEvent = param[1];
                  var state = param[0];
                  var match = customEvent[/* isStopPropagation */2];
                  if (match) {
                    return /* tuple */[
                            state,
                            customEvent
                          ];
                  } else {
                    return param$1[/* handleFunc */1](customEvent, state);
                  }
                }), /* tuple */[
                state,
                customEvent
              ], arr);
  }
  
  function triggerGlobalEvent(customEvent, state) {
    var match = get$2(customEvent[/* name */0], state[/* eventRecord */42][/* customGlobalEventArrMap */4]);
    if (match !== undefined) {
      return _triggerHandleFunc(customEvent, match, state);
    } else {
      return /* tuple */[
              state,
              customEvent
            ];
    }
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  function _addToEventArr$3(eventName, eventData, eventArrMap) {
    return addToEventArr(eventName, eventData, (function (param) {
                  return param[/* priority */0];
                }), eventArrMap);
  }
  
  function _removeFromEventArrMapByHandleFunc$3(eventName, targetHandleFunc, eventArrMap) {
    return removeFromEventArrMapByHandleFunc(eventName, /* tuple */[
                (function (param) {
                    return param[/* handleFunc */1];
                  }),
                targetHandleFunc
              ], eventArrMap);
  }
  
  function bind$3(eventName, priority, handleFunc, state) {
    var eventRecord = state[/* eventRecord */42];
    var newrecord = caml_array_dup(state);
    newrecord[/* eventRecord */42] = /* record */[
      /* domEventStreamSubscription */eventRecord[/* domEventStreamSubscription */0],
      /* mouseDomEventDataArrMap */eventRecord[/* mouseDomEventDataArrMap */1],
      /* keyboardDomEventDataArrMap */_addToEventArr$3(eventName, /* record */[
            /* priority */priority,
            /* handleFunc */handleFunc
          ], eventRecord[/* keyboardDomEventDataArrMap */2]),
      /* touchDomEventDataArrMap */eventRecord[/* touchDomEventDataArrMap */3],
      /* customGlobalEventArrMap */eventRecord[/* customGlobalEventArrMap */4],
      /* customGameObjectEventArrMap */eventRecord[/* customGameObjectEventArrMap */5],
      /* mouseEventData */eventRecord[/* mouseEventData */6],
      /* keyboardEventData */eventRecord[/* keyboardEventData */7],
      /* touchEventData */eventRecord[/* touchEventData */8]
    ];
    return newrecord;
  }
  
  function unbindByHandleFunc$2(eventName, handleFunc, state) {
    var eventRecord = state[/* eventRecord */42];
    var newrecord = caml_array_dup(state);
    newrecord[/* eventRecord */42] = /* record */[
      /* domEventStreamSubscription */eventRecord[/* domEventStreamSubscription */0],
      /* mouseDomEventDataArrMap */eventRecord[/* mouseDomEventDataArrMap */1],
      /* keyboardDomEventDataArrMap */_removeFromEventArrMapByHandleFunc$3(eventName, handleFunc, eventRecord[/* keyboardDomEventDataArrMap */2]),
      /* touchDomEventDataArrMap */eventRecord[/* touchDomEventDataArrMap */3],
      /* customGlobalEventArrMap */eventRecord[/* customGlobalEventArrMap */4],
      /* customGameObjectEventArrMap */eventRecord[/* customGameObjectEventArrMap */5],
      /* mouseEventData */eventRecord[/* mouseEventData */6],
      /* keyboardEventData */eventRecord[/* keyboardEventData */7],
      /* touchEventData */eventRecord[/* touchEventData */8]
    ];
    return newrecord;
  }
  
  
  /* BindDomEventMainService-Wonderjs Not a pure module */
  
  function onMouseEvent(eventName, handleFunc, state, $staropt$star, _) {
    var priority = $staropt$star !== undefined ? $staropt$star : 0;
    return bind$1(eventName, priority, handleFunc, state);
  }
  
  function onKeyboardEvent(eventName, handleFunc, state, $staropt$star, _) {
    var priority = $staropt$star !== undefined ? $staropt$star : 0;
    return bind$3(eventName, priority, handleFunc, state);
  }
  
  function onTouchEvent(eventName, handleFunc, state, $staropt$star, _) {
    var priority = $staropt$star !== undefined ? $staropt$star : 0;
    return bind$2(eventName, priority, handleFunc, state);
  }
  
  var offKeyboardEventByHandleFunc = unbindByHandleFunc$2;
  
  function onCustomGlobalEvent(eventName, handleFunc, state, $staropt$star, _) {
    var priority = $staropt$star !== undefined ? $staropt$star : 0;
    return bindGlobalEvent(eventName, priority, handleFunc, state);
  }
  
  var offCustomGlobalEventByHandleFunc = unbindGlobalEventByHandleFunc;
  
  var triggerCustomGlobalEvent = triggerGlobalEvent;
  
  function setDomEventStreamSubscription(domEventStreamSubscription, state) {
    var eventRecord = state[/* eventRecord */42];
    var newrecord = caml_array_dup(state);
    newrecord[/* eventRecord */42] = /* record */[
      /* domEventStreamSubscription */some(domEventStreamSubscription),
      /* mouseDomEventDataArrMap */eventRecord[/* mouseDomEventDataArrMap */1],
      /* keyboardDomEventDataArrMap */eventRecord[/* keyboardDomEventDataArrMap */2],
      /* touchDomEventDataArrMap */eventRecord[/* touchDomEventDataArrMap */3],
      /* customGlobalEventArrMap */eventRecord[/* customGlobalEventArrMap */4],
      /* customGameObjectEventArrMap */eventRecord[/* customGameObjectEventArrMap */5],
      /* mouseEventData */eventRecord[/* mouseEventData */6],
      /* keyboardEventData */eventRecord[/* keyboardEventData */7],
      /* touchEventData */eventRecord[/* touchEventData */8]
    ];
    return newrecord;
  }
  
  
  /* BindCustomEventMainService-Wonderjs Not a pure module */
  
  var _isFirefox = (
      function(){
        var userAgent = navigator.userAgent.toLowerCase();
  
          return userAgent.indexOf("firefox") > -1 && userAgent.indexOf("mobile") === -1;
      }
      );
  
  var _isChrome = (
      function(){
        var userAgent = navigator.userAgent.toLowerCase();
  
          return userAgent.indexOf("chrome") > -1 && userAgent.indexOf("mobile") === -1;
      }
      );
  
  var _isAndroid = (
      function(){
          return /Android/i.test(navigator.userAgent)
      }
      );
  
  var _isIOS = (
      function(){
          return /iPhone|iPad|iPod/i.test(navigator.userAgent)
      }
      );
  
  function detect$2(state) {
    var newrecord = caml_array_dup(state);
    var match = _1(_isFirefox, /* () */0) === true;
    var tmp;
    if (match) {
      tmp = /* Firefox */1;
    } else {
      var match$1 = _1(_isChrome, /* () */0) === true;
      if (match$1) {
        tmp = /* Chrome */0;
      } else {
        var match$2 = _1(_isAndroid, /* () */0);
        if (match$2) {
          tmp = /* Android */2;
        } else {
          var match$3 = _1(_isIOS, /* () */0);
          tmp = match$3 ? /* IOS */3 : /* Unknown */4;
        }
      }
    }
    newrecord[/* browserDetectRecord */41] = /* record */[/* browser */tmp];
    return newrecord;
  }
  
  function isMobile(state) {
    var match = state[/* browserDetectRecord */41][/* browser */0];
    return match === 3 || match === 2;
  }
  
  
  /* _isFirefox Not a pure module */
  
  var preventDefault$2 = function (event){
      if (event.cancelable) {
        if (!event.defaultPrevented) {
            event.preventDefault();
        }
    }
  
    event.stopPropagation();
    };
  
  
  /* No side effect */
  
  function getLocationInView(domEvent, getLocationFunc, state) {
    var viewRecord = state[/* viewRecord */9];
    var match = getCanvas(viewRecord);
    if (match !== undefined) {
      var match$1 = getOffset(unsafeGetCanvas(viewRecord));
      var match$2 = _2(getLocationFunc, domEvent, state);
      return /* tuple */[
              match$2[0] - match$1[0] | 0,
              match$2[1] - match$1[1] | 0
            ];
    } else {
      return /* tuple */[
              0,
              0
            ];
    }
  }
  
  function getMovementDelta($$location, lastXYTuple, _) {
    var match = lastXYTuple[0];
    var exit = 0;
    if (match !== undefined) {
      var match$1 = lastXYTuple[1];
      if (match$1 !== undefined) {
        return /* tuple */[
                $$location[0] - match | 0,
                $$location[1] - match$1 | 0
              ];
      } else {
        exit = 1;
      }
    } else if (lastXYTuple[1] !== undefined) {
      exit = 1;
    } else {
      return /* tuple */[
              0,
              0
            ];
    }
    if (exit === 1) {
      return fatal(buildFatalMessage("getMovementDelta", "lastX, lastY should all be None or all be Some", "", "", ""));
    }
    
  }
  
  var preventDefault$1 = preventDefault$2;
  
  
  /* Log-WonderLog Not a pure module */
  
  function create$12() {
    return createEmpty(/* () */0);
  }
  
  var addToDirtyArray = push$1;
  
  function getCount(dirtyArray) {
    return dirtyArray.length;
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function unsafeGetDistance(cameraController, record) {
    return unsafeGet$2(get$3(cameraController, record[/* distanceMap */7]));
  }
  
  function unsafeGetWheelSpeed(cameraController, record) {
    return unsafeGet$2(get$3(cameraController, record[/* wheelSpeedMap */16]));
  }
  
  function unsafeGetMinDistance(cameraController, record) {
    return unsafeGet$2(get$3(cameraController, record[/* minDistanceMap */8]));
  }
  
  function setDistance(cameraController, distance, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* pointDownEventHandleFuncMap */record[/* pointDownEventHandleFuncMap */1],
            /* pointUpEventHandleFuncMap */record[/* pointUpEventHandleFuncMap */2],
            /* pointDragEventHandleFuncMap */record[/* pointDragEventHandleFuncMap */3],
            /* pointScaleEventHandleFuncMap */record[/* pointScaleEventHandleFuncMap */4],
            /* keydownEventHandleFuncMap */record[/* keydownEventHandleFuncMap */5],
            /* dirtyArray */addToDirtyArray(cameraController, record[/* dirtyArray */6]),
            /* distanceMap */set$1(cameraController, bigThan(distance, unsafeGetMinDistance(cameraController, record)), record[/* distanceMap */7]),
            /* minDistanceMap */record[/* minDistanceMap */8],
            /* phiMap */record[/* phiMap */9],
            /* thetaMap */record[/* thetaMap */10],
            /* thetaMarginMap */record[/* thetaMarginMap */11],
            /* targetMap */record[/* targetMap */12],
            /* moveSpeedXMap */record[/* moveSpeedXMap */13],
            /* moveSpeedYMap */record[/* moveSpeedYMap */14],
            /* rotateSpeedMap */record[/* rotateSpeedMap */15],
            /* wheelSpeedMap */record[/* wheelSpeedMap */16],
            /* gameObjectMap */record[/* gameObjectMap */17],
            /* disposedIndexArray */record[/* disposedIndexArray */18]
          ];
  }
  
  function setDistanceByEvent(cameraController, pointEvent, record) {
    var match = pointEvent[/* wheel */4];
    if (match !== undefined) {
      return setDistance(cameraController, unsafeGetDistance(cameraController, record) - unsafeGetWheelSpeed(cameraController, record) * match, record);
    } else {
      return record;
    }
  }
  
  function setMinDistance(cameraController, minDistance, record) {
    var record_000 = /* index */record[/* index */0];
    var record_001 = /* pointDownEventHandleFuncMap */record[/* pointDownEventHandleFuncMap */1];
    var record_002 = /* pointUpEventHandleFuncMap */record[/* pointUpEventHandleFuncMap */2];
    var record_003 = /* pointDragEventHandleFuncMap */record[/* pointDragEventHandleFuncMap */3];
    var record_004 = /* pointScaleEventHandleFuncMap */record[/* pointScaleEventHandleFuncMap */4];
    var record_005 = /* keydownEventHandleFuncMap */record[/* keydownEventHandleFuncMap */5];
    var record_006 = /* dirtyArray */addToDirtyArray(cameraController, record[/* dirtyArray */6]);
    var record_007 = /* distanceMap */record[/* distanceMap */7];
    var record_008 = /* minDistanceMap */set$1(cameraController, minDistance, record[/* minDistanceMap */8]);
    var record_009 = /* phiMap */record[/* phiMap */9];
    var record_010 = /* thetaMap */record[/* thetaMap */10];
    var record_011 = /* thetaMarginMap */record[/* thetaMarginMap */11];
    var record_012 = /* targetMap */record[/* targetMap */12];
    var record_013 = /* moveSpeedXMap */record[/* moveSpeedXMap */13];
    var record_014 = /* moveSpeedYMap */record[/* moveSpeedYMap */14];
    var record_015 = /* rotateSpeedMap */record[/* rotateSpeedMap */15];
    var record_016 = /* wheelSpeedMap */record[/* wheelSpeedMap */16];
    var record_017 = /* gameObjectMap */record[/* gameObjectMap */17];
    var record_018 = /* disposedIndexArray */record[/* disposedIndexArray */18];
    var record$1 = /* record */[
      record_000,
      record_001,
      record_002,
      record_003,
      record_004,
      record_005,
      record_006,
      record_007,
      record_008,
      record_009,
      record_010,
      record_011,
      record_012,
      record_013,
      record_014,
      record_015,
      record_016,
      record_017,
      record_018
    ];
    var match = minDistance > unsafeGetDistance(cameraController, record$1);
    if (match) {
      return setDistance(cameraController, minDistance, record$1);
    } else {
      return record$1;
    }
  }
  
  function unsafeGetPhi(cameraController, record) {
    return unsafeGet$2(get$3(cameraController, record[/* phiMap */9]));
  }
  
  function setPhi(cameraController, phi, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* pointDownEventHandleFuncMap */record[/* pointDownEventHandleFuncMap */1],
            /* pointUpEventHandleFuncMap */record[/* pointUpEventHandleFuncMap */2],
            /* pointDragEventHandleFuncMap */record[/* pointDragEventHandleFuncMap */3],
            /* pointScaleEventHandleFuncMap */record[/* pointScaleEventHandleFuncMap */4],
            /* keydownEventHandleFuncMap */record[/* keydownEventHandleFuncMap */5],
            /* dirtyArray */addToDirtyArray(cameraController, record[/* dirtyArray */6]),
            /* distanceMap */record[/* distanceMap */7],
            /* minDistanceMap */record[/* minDistanceMap */8],
            /* phiMap */set$1(cameraController, phi, record[/* phiMap */9]),
            /* thetaMap */record[/* thetaMap */10],
            /* thetaMarginMap */record[/* thetaMarginMap */11],
            /* targetMap */record[/* targetMap */12],
            /* moveSpeedXMap */record[/* moveSpeedXMap */13],
            /* moveSpeedYMap */record[/* moveSpeedYMap */14],
            /* rotateSpeedMap */record[/* rotateSpeedMap */15],
            /* wheelSpeedMap */record[/* wheelSpeedMap */16],
            /* gameObjectMap */record[/* gameObjectMap */17],
            /* disposedIndexArray */record[/* disposedIndexArray */18]
          ];
  }
  
  function _constrainTheta(theta, thetaMargin) {
    return clamp(theta, thetaMargin, Math.PI - thetaMargin);
  }
  
  function unsafeGetTheta(cameraController, record) {
    return unsafeGet$2(get$3(cameraController, record[/* thetaMap */10]));
  }
  
  function unsafeGetThetaMargin(cameraController, record) {
    return unsafeGet$2(get$3(cameraController, record[/* thetaMarginMap */11]));
  }
  
  function setTheta(cameraController, theta, record) {
    var thetaMargin = unsafeGetThetaMargin(cameraController, record);
    return /* record */[
            /* index */record[/* index */0],
            /* pointDownEventHandleFuncMap */record[/* pointDownEventHandleFuncMap */1],
            /* pointUpEventHandleFuncMap */record[/* pointUpEventHandleFuncMap */2],
            /* pointDragEventHandleFuncMap */record[/* pointDragEventHandleFuncMap */3],
            /* pointScaleEventHandleFuncMap */record[/* pointScaleEventHandleFuncMap */4],
            /* keydownEventHandleFuncMap */record[/* keydownEventHandleFuncMap */5],
            /* dirtyArray */addToDirtyArray(cameraController, record[/* dirtyArray */6]),
            /* distanceMap */record[/* distanceMap */7],
            /* minDistanceMap */record[/* minDistanceMap */8],
            /* phiMap */record[/* phiMap */9],
            /* thetaMap */set$1(cameraController, _constrainTheta(theta, thetaMargin), record[/* thetaMap */10]),
            /* thetaMarginMap */record[/* thetaMarginMap */11],
            /* targetMap */record[/* targetMap */12],
            /* moveSpeedXMap */record[/* moveSpeedXMap */13],
            /* moveSpeedYMap */record[/* moveSpeedYMap */14],
            /* rotateSpeedMap */record[/* rotateSpeedMap */15],
            /* wheelSpeedMap */record[/* wheelSpeedMap */16],
            /* gameObjectMap */record[/* gameObjectMap */17],
            /* disposedIndexArray */record[/* disposedIndexArray */18]
          ];
  }
  
  function unsafeGetTarget(cameraController, record) {
    return unsafeGet$2(get$3(cameraController, record[/* targetMap */12]));
  }
  
  function setTarget(cameraController, target, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* pointDownEventHandleFuncMap */record[/* pointDownEventHandleFuncMap */1],
            /* pointUpEventHandleFuncMap */record[/* pointUpEventHandleFuncMap */2],
            /* pointDragEventHandleFuncMap */record[/* pointDragEventHandleFuncMap */3],
            /* pointScaleEventHandleFuncMap */record[/* pointScaleEventHandleFuncMap */4],
            /* keydownEventHandleFuncMap */record[/* keydownEventHandleFuncMap */5],
            /* dirtyArray */addToDirtyArray(cameraController, record[/* dirtyArray */6]),
            /* distanceMap */record[/* distanceMap */7],
            /* minDistanceMap */record[/* minDistanceMap */8],
            /* phiMap */record[/* phiMap */9],
            /* thetaMap */record[/* thetaMap */10],
            /* thetaMarginMap */record[/* thetaMarginMap */11],
            /* targetMap */set$1(cameraController, target, record[/* targetMap */12]),
            /* moveSpeedXMap */record[/* moveSpeedXMap */13],
            /* moveSpeedYMap */record[/* moveSpeedYMap */14],
            /* rotateSpeedMap */record[/* rotateSpeedMap */15],
            /* wheelSpeedMap */record[/* wheelSpeedMap */16],
            /* gameObjectMap */record[/* gameObjectMap */17],
            /* disposedIndexArray */record[/* disposedIndexArray */18]
          ];
  }
  
  function unsafeGetMoveSpeedX(cameraController, record) {
    return unsafeGet$2(get$3(cameraController, record[/* moveSpeedXMap */13]));
  }
  
  function unsafeGetMoveSpeedY(cameraController, record) {
    return unsafeGet$2(get$3(cameraController, record[/* moveSpeedYMap */14]));
  }
  
  function unsafeGetRotateSpeed(cameraController, record) {
    return unsafeGet$2(get$3(cameraController, record[/* rotateSpeedMap */15]));
  }
  
  
  /* NumberService-Wonderjs Not a pure module */
  
  function unsafeGetGameObject$2(cameraController, param) {
    return unsafeGetGameObject$1(cameraController, param[/* gameObjectMap */17]);
  }
  
  
  /* GameObjectMapService-Wonderjs Not a pure module */
  
  function _computeTarget(cameraController, param, state) {
    var dy = param[1];
    var dx = param[0];
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var arcballCameraControllerRecord = state[/* arcballCameraControllerRecord */26];
    var target = unsafeGetTarget(cameraController, arcballCameraControllerRecord);
    var transform = unsafeGetTransformComponent(unsafeGetGameObject$2(cameraController, arcballCameraControllerRecord), gameObjectRecord);
    var match = getRecord(state);
    var localToWorldMatrices = match[/* localToWorldMatrices */2];
    var localToWorldMatrixCacheMap = match[/* localToWorldMatrixCacheMap */19];
    var localToWorldMatrixTypeArray = getLocalToWorldMatrixTypeArray$1(transform, localToWorldMatrices, localToWorldMatrixCacheMap);
    var match$1 = normalize(getX(localToWorldMatrixTypeArray));
    var match$2 = normalize(getY(localToWorldMatrixTypeArray));
    var __x = add$1(/* Float */0, target, /* tuple */[
          match$1[0] * dx,
          0,
          match$1[2] * dx
        ]);
    return add$1(/* Float */0, __x, /* tuple */[
                match$2[0] * dy,
                match$2[1] * dy,
                0
              ]);
  }
  
  function setTargetByKeyboardEvent(cameraController, keyboardEvent, state) {
    var arcballCameraControllerRecord = state[/* arcballCameraControllerRecord */26];
    var moveSpeedX = unsafeGetMoveSpeedX(cameraController, arcballCameraControllerRecord);
    var moveSpeedY = unsafeGetMoveSpeedY(cameraController, arcballCameraControllerRecord);
    var match = keyboardEvent[/* key */6];
    var match$1;
    switch (match) {
      case "a" : 
      case "left" : 
          match$1 = /* tuple */[
            -moveSpeedX,
            0
          ];
          break;
      case "d" : 
      case "right" : 
          match$1 = /* tuple */[
            moveSpeedX,
            0
          ];
          break;
      case "down" : 
      case "s" : 
          match$1 = /* tuple */[
            0,
            -moveSpeedY
          ];
          break;
      case "up" : 
      case "w" : 
          match$1 = /* tuple */[
            0,
            moveSpeedY
          ];
          break;
      default:
        match$1 = /* tuple */[
          0,
          0
        ];
    }
    var dy = match$1[1];
    var dx = match$1[0];
    var exit = 0;
    if (dx !== 0 || dy !== 0) {
      exit = 1;
    } else {
      return state;
    }
    if (exit === 1) {
      var newrecord = caml_array_dup(state);
      newrecord[/* arcballCameraControllerRecord */26] = setTarget(cameraController, _computeTarget(cameraController, /* tuple */[
                dx,
                dy
              ], state), arcballCameraControllerRecord);
      return newrecord;
    }
    
  }
  
  
  /* Matrix4Service-Wonderjs Not a pure module */
  
  function _setEventHandleFunc(cameraController, handleFunc, eventHandleFuncMap) {
    var match = length$1(getValidValues(eventHandleFuncMap)) > 0;
    if (match) {
      warn("expect only has one arcballCameraController, but actual > 1. please dispose others.");
    }
    return set$1(cameraController, handleFunc, eventHandleFuncMap);
  }
  
  function _setPointDownEventHandleFunc(cameraController, handleFunc, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* pointDownEventHandleFuncMap */_setEventHandleFunc(cameraController, handleFunc, record[/* pointDownEventHandleFuncMap */1]),
            /* pointUpEventHandleFuncMap */record[/* pointUpEventHandleFuncMap */2],
            /* pointDragEventHandleFuncMap */record[/* pointDragEventHandleFuncMap */3],
            /* pointScaleEventHandleFuncMap */record[/* pointScaleEventHandleFuncMap */4],
            /* keydownEventHandleFuncMap */record[/* keydownEventHandleFuncMap */5],
            /* dirtyArray */record[/* dirtyArray */6],
            /* distanceMap */record[/* distanceMap */7],
            /* minDistanceMap */record[/* minDistanceMap */8],
            /* phiMap */record[/* phiMap */9],
            /* thetaMap */record[/* thetaMap */10],
            /* thetaMarginMap */record[/* thetaMarginMap */11],
            /* targetMap */record[/* targetMap */12],
            /* moveSpeedXMap */record[/* moveSpeedXMap */13],
            /* moveSpeedYMap */record[/* moveSpeedYMap */14],
            /* rotateSpeedMap */record[/* rotateSpeedMap */15],
            /* wheelSpeedMap */record[/* wheelSpeedMap */16],
            /* gameObjectMap */record[/* gameObjectMap */17],
            /* disposedIndexArray */record[/* disposedIndexArray */18]
          ];
  }
  
  function _setPointUpEventHandleFunc(cameraController, handleFunc, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* pointDownEventHandleFuncMap */record[/* pointDownEventHandleFuncMap */1],
            /* pointUpEventHandleFuncMap */_setEventHandleFunc(cameraController, handleFunc, record[/* pointUpEventHandleFuncMap */2]),
            /* pointDragEventHandleFuncMap */record[/* pointDragEventHandleFuncMap */3],
            /* pointScaleEventHandleFuncMap */record[/* pointScaleEventHandleFuncMap */4],
            /* keydownEventHandleFuncMap */record[/* keydownEventHandleFuncMap */5],
            /* dirtyArray */record[/* dirtyArray */6],
            /* distanceMap */record[/* distanceMap */7],
            /* minDistanceMap */record[/* minDistanceMap */8],
            /* phiMap */record[/* phiMap */9],
            /* thetaMap */record[/* thetaMap */10],
            /* thetaMarginMap */record[/* thetaMarginMap */11],
            /* targetMap */record[/* targetMap */12],
            /* moveSpeedXMap */record[/* moveSpeedXMap */13],
            /* moveSpeedYMap */record[/* moveSpeedYMap */14],
            /* rotateSpeedMap */record[/* rotateSpeedMap */15],
            /* wheelSpeedMap */record[/* wheelSpeedMap */16],
            /* gameObjectMap */record[/* gameObjectMap */17],
            /* disposedIndexArray */record[/* disposedIndexArray */18]
          ];
  }
  
  function _setPointDragEventHandleFunc(cameraController, handleFunc, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* pointDownEventHandleFuncMap */record[/* pointDownEventHandleFuncMap */1],
            /* pointUpEventHandleFuncMap */record[/* pointUpEventHandleFuncMap */2],
            /* pointDragEventHandleFuncMap */_setEventHandleFunc(cameraController, handleFunc, record[/* pointDragEventHandleFuncMap */3]),
            /* pointScaleEventHandleFuncMap */record[/* pointScaleEventHandleFuncMap */4],
            /* keydownEventHandleFuncMap */record[/* keydownEventHandleFuncMap */5],
            /* dirtyArray */record[/* dirtyArray */6],
            /* distanceMap */record[/* distanceMap */7],
            /* minDistanceMap */record[/* minDistanceMap */8],
            /* phiMap */record[/* phiMap */9],
            /* thetaMap */record[/* thetaMap */10],
            /* thetaMarginMap */record[/* thetaMarginMap */11],
            /* targetMap */record[/* targetMap */12],
            /* moveSpeedXMap */record[/* moveSpeedXMap */13],
            /* moveSpeedYMap */record[/* moveSpeedYMap */14],
            /* rotateSpeedMap */record[/* rotateSpeedMap */15],
            /* wheelSpeedMap */record[/* wheelSpeedMap */16],
            /* gameObjectMap */record[/* gameObjectMap */17],
            /* disposedIndexArray */record[/* disposedIndexArray */18]
          ];
  }
  
  function _setPointScaleEventHandleFunc(cameraController, handleFunc, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* pointDownEventHandleFuncMap */record[/* pointDownEventHandleFuncMap */1],
            /* pointUpEventHandleFuncMap */record[/* pointUpEventHandleFuncMap */2],
            /* pointDragEventHandleFuncMap */record[/* pointDragEventHandleFuncMap */3],
            /* pointScaleEventHandleFuncMap */_setEventHandleFunc(cameraController, handleFunc, record[/* pointScaleEventHandleFuncMap */4]),
            /* keydownEventHandleFuncMap */record[/* keydownEventHandleFuncMap */5],
            /* dirtyArray */record[/* dirtyArray */6],
            /* distanceMap */record[/* distanceMap */7],
            /* minDistanceMap */record[/* minDistanceMap */8],
            /* phiMap */record[/* phiMap */9],
            /* thetaMap */record[/* thetaMap */10],
            /* thetaMarginMap */record[/* thetaMarginMap */11],
            /* targetMap */record[/* targetMap */12],
            /* moveSpeedXMap */record[/* moveSpeedXMap */13],
            /* moveSpeedYMap */record[/* moveSpeedYMap */14],
            /* rotateSpeedMap */record[/* rotateSpeedMap */15],
            /* wheelSpeedMap */record[/* wheelSpeedMap */16],
            /* gameObjectMap */record[/* gameObjectMap */17],
            /* disposedIndexArray */record[/* disposedIndexArray */18]
          ];
  }
  
  function _setKeydownEventHandleFunc(cameraController, handleFunc, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* pointDownEventHandleFuncMap */record[/* pointDownEventHandleFuncMap */1],
            /* pointUpEventHandleFuncMap */record[/* pointUpEventHandleFuncMap */2],
            /* pointDragEventHandleFuncMap */record[/* pointDragEventHandleFuncMap */3],
            /* pointScaleEventHandleFuncMap */record[/* pointScaleEventHandleFuncMap */4],
            /* keydownEventHandleFuncMap */_setEventHandleFunc(cameraController, handleFunc, record[/* keydownEventHandleFuncMap */5]),
            /* dirtyArray */record[/* dirtyArray */6],
            /* distanceMap */record[/* distanceMap */7],
            /* minDistanceMap */record[/* minDistanceMap */8],
            /* phiMap */record[/* phiMap */9],
            /* thetaMap */record[/* thetaMap */10],
            /* thetaMarginMap */record[/* thetaMarginMap */11],
            /* targetMap */record[/* targetMap */12],
            /* moveSpeedXMap */record[/* moveSpeedXMap */13],
            /* moveSpeedYMap */record[/* moveSpeedYMap */14],
            /* rotateSpeedMap */record[/* rotateSpeedMap */15],
            /* wheelSpeedMap */record[/* wheelSpeedMap */16],
            /* gameObjectMap */record[/* gameObjectMap */17],
            /* disposedIndexArray */record[/* disposedIndexArray */18]
          ];
  }
  
  function _changeOrbit(cameraController, param, arcballCameraControllerRecord) {
    var movementDelta = param[/* movementDelta */5];
    var rotateSpeed = unsafeGetRotateSpeed(cameraController, arcballCameraControllerRecord);
    return setTheta(cameraController, unsafeGetTheta(cameraController, arcballCameraControllerRecord) - movementDelta[1] / (100 / rotateSpeed), setPhi(cameraController, unsafeGetPhi(cameraController, arcballCameraControllerRecord) + movementDelta[0] / (100 / rotateSpeed), arcballCameraControllerRecord));
  }
  
  function bindEvent(cameraController, state) {
    var pointDownHandleFunc = function ($$event, state) {
      var viewRecord = state[/* viewRecord */9];
      var match = isMobile(state);
      if (match) {
        return /* tuple */[
                state,
                $$event
              ];
      } else {
        var canvas = unsafeGetCanvas(viewRecord);
        requestPointerLock(canvas);
        return /* tuple */[
                state,
                $$event
              ];
      }
    };
    var pointUpHandleFunc = function ($$event, state) {
      var viewRecord = state[/* viewRecord */9];
      var match = isMobile(state);
      if (match) {
        return /* tuple */[
                state,
                $$event
              ];
      } else {
        var canvas = unsafeGetCanvas(viewRecord);
        var $$document$1 = document;
        var match$1 = $$document$1.pointerLockElement === canvas;
        if (match$1) {
          _1(exitPointerLock, /* () */0);
        }
        return /* tuple */[
                state,
                $$event
              ];
      }
    };
    var pointDragHandleFunc = function ($$event, state) {
      var newrecord = caml_array_dup(state);
      return /* tuple */[
              (newrecord[/* arcballCameraControllerRecord */26] = _changeOrbit(cameraController, unsafeGet$2($$event[/* userData */4]), state[/* arcballCameraControllerRecord */26]), newrecord),
              $$event
            ];
    };
    var pointScaleHandleFunc = function ($$event, state) {
      var pointEvent = unsafeGet$2($$event[/* userData */4]);
      preventDefault$1(pointEvent[/* event */6]);
      var newrecord = caml_array_dup(state);
      return /* tuple */[
              (newrecord[/* arcballCameraControllerRecord */26] = setDistanceByEvent(cameraController, pointEvent, state[/* arcballCameraControllerRecord */26]), newrecord),
              $$event
            ];
    };
    var keydownHandleFunc = function ($$event, state) {
      return setTargetByKeyboardEvent(cameraController, $$event, state);
    };
    var newrecord = caml_array_dup(state);
    newrecord[/* arcballCameraControllerRecord */26] = _setKeydownEventHandleFunc(cameraController, keydownHandleFunc, _setPointScaleEventHandleFunc(cameraController, pointScaleHandleFunc, _setPointDragEventHandleFunc(cameraController, pointDragHandleFunc, _setPointUpEventHandleFunc(cameraController, pointUpHandleFunc, _setPointDownEventHandleFunc(cameraController, pointDownHandleFunc, state[/* arcballCameraControllerRecord */26])))));
    var state$1 = onCustomGlobalEvent(getPointDownEventName(/* () */0), pointDownHandleFunc, newrecord, undefined, /* () */0);
    var state$2 = onCustomGlobalEvent(getPointUpEventName(/* () */0), pointUpHandleFunc, state$1, undefined, /* () */0);
    var state$3 = onCustomGlobalEvent(getPointDragEventName(/* () */0), pointDragHandleFunc, state$2, undefined, /* () */0);
    var state$4 = onCustomGlobalEvent(getPointScaleEventName(/* () */0), pointScaleHandleFunc, state$3, undefined, /* () */0);
    return onKeyboardEvent(/* KeyDown */8, keydownHandleFunc, state$4, undefined, /* () */0);
  }
  
  function _disposePointDownEventHandleFuncMap(cameraController, state) {
    var arcballCameraControllerRecord = state[/* arcballCameraControllerRecord */26];
    var pointDownEventHandleFuncMap = arcballCameraControllerRecord[/* pointDownEventHandleFuncMap */1];
    var match = get$3(cameraController, pointDownEventHandleFuncMap);
    if (match !== undefined) {
      var eventName = getPointDownEventName(/* () */0);
      var state$1 = offCustomGlobalEventByHandleFunc(eventName, valFromOption(match), state);
      var newrecord = caml_array_dup(state$1);
      newrecord[/* arcballCameraControllerRecord */26] = /* record */[
        /* index */arcballCameraControllerRecord[/* index */0],
        /* pointDownEventHandleFuncMap */disposeSparseMapData(cameraController, pointDownEventHandleFuncMap),
        /* pointUpEventHandleFuncMap */arcballCameraControllerRecord[/* pointUpEventHandleFuncMap */2],
        /* pointDragEventHandleFuncMap */arcballCameraControllerRecord[/* pointDragEventHandleFuncMap */3],
        /* pointScaleEventHandleFuncMap */arcballCameraControllerRecord[/* pointScaleEventHandleFuncMap */4],
        /* keydownEventHandleFuncMap */arcballCameraControllerRecord[/* keydownEventHandleFuncMap */5],
        /* dirtyArray */arcballCameraControllerRecord[/* dirtyArray */6],
        /* distanceMap */arcballCameraControllerRecord[/* distanceMap */7],
        /* minDistanceMap */arcballCameraControllerRecord[/* minDistanceMap */8],
        /* phiMap */arcballCameraControllerRecord[/* phiMap */9],
        /* thetaMap */arcballCameraControllerRecord[/* thetaMap */10],
        /* thetaMarginMap */arcballCameraControllerRecord[/* thetaMarginMap */11],
        /* targetMap */arcballCameraControllerRecord[/* targetMap */12],
        /* moveSpeedXMap */arcballCameraControllerRecord[/* moveSpeedXMap */13],
        /* moveSpeedYMap */arcballCameraControllerRecord[/* moveSpeedYMap */14],
        /* rotateSpeedMap */arcballCameraControllerRecord[/* rotateSpeedMap */15],
        /* wheelSpeedMap */arcballCameraControllerRecord[/* wheelSpeedMap */16],
        /* gameObjectMap */arcballCameraControllerRecord[/* gameObjectMap */17],
        /* disposedIndexArray */arcballCameraControllerRecord[/* disposedIndexArray */18]
      ];
      return newrecord;
    } else {
      return state;
    }
  }
  
  function _disposePointUpEventHandleFuncMap(cameraController, state) {
    var arcballCameraControllerRecord = state[/* arcballCameraControllerRecord */26];
    var pointUpEventHandleFuncMap = arcballCameraControllerRecord[/* pointUpEventHandleFuncMap */2];
    var match = get$3(cameraController, pointUpEventHandleFuncMap);
    if (match !== undefined) {
      var eventName = getPointUpEventName(/* () */0);
      var state$1 = offCustomGlobalEventByHandleFunc(eventName, valFromOption(match), state);
      var newrecord = caml_array_dup(state$1);
      newrecord[/* arcballCameraControllerRecord */26] = /* record */[
        /* index */arcballCameraControllerRecord[/* index */0],
        /* pointDownEventHandleFuncMap */arcballCameraControllerRecord[/* pointDownEventHandleFuncMap */1],
        /* pointUpEventHandleFuncMap */disposeSparseMapData(cameraController, pointUpEventHandleFuncMap),
        /* pointDragEventHandleFuncMap */arcballCameraControllerRecord[/* pointDragEventHandleFuncMap */3],
        /* pointScaleEventHandleFuncMap */arcballCameraControllerRecord[/* pointScaleEventHandleFuncMap */4],
        /* keydownEventHandleFuncMap */arcballCameraControllerRecord[/* keydownEventHandleFuncMap */5],
        /* dirtyArray */arcballCameraControllerRecord[/* dirtyArray */6],
        /* distanceMap */arcballCameraControllerRecord[/* distanceMap */7],
        /* minDistanceMap */arcballCameraControllerRecord[/* minDistanceMap */8],
        /* phiMap */arcballCameraControllerRecord[/* phiMap */9],
        /* thetaMap */arcballCameraControllerRecord[/* thetaMap */10],
        /* thetaMarginMap */arcballCameraControllerRecord[/* thetaMarginMap */11],
        /* targetMap */arcballCameraControllerRecord[/* targetMap */12],
        /* moveSpeedXMap */arcballCameraControllerRecord[/* moveSpeedXMap */13],
        /* moveSpeedYMap */arcballCameraControllerRecord[/* moveSpeedYMap */14],
        /* rotateSpeedMap */arcballCameraControllerRecord[/* rotateSpeedMap */15],
        /* wheelSpeedMap */arcballCameraControllerRecord[/* wheelSpeedMap */16],
        /* gameObjectMap */arcballCameraControllerRecord[/* gameObjectMap */17],
        /* disposedIndexArray */arcballCameraControllerRecord[/* disposedIndexArray */18]
      ];
      return newrecord;
    } else {
      return state;
    }
  }
  
  function _disposePointDragEventHandleFuncMap(cameraController, state) {
    var arcballCameraControllerRecord = state[/* arcballCameraControllerRecord */26];
    var pointDragEventHandleFuncMap = arcballCameraControllerRecord[/* pointDragEventHandleFuncMap */3];
    var match = get$3(cameraController, pointDragEventHandleFuncMap);
    if (match !== undefined) {
      var eventName = getPointDragEventName(/* () */0);
      var state$1 = offCustomGlobalEventByHandleFunc(eventName, valFromOption(match), state);
      var newrecord = caml_array_dup(state$1);
      newrecord[/* arcballCameraControllerRecord */26] = /* record */[
        /* index */arcballCameraControllerRecord[/* index */0],
        /* pointDownEventHandleFuncMap */arcballCameraControllerRecord[/* pointDownEventHandleFuncMap */1],
        /* pointUpEventHandleFuncMap */arcballCameraControllerRecord[/* pointUpEventHandleFuncMap */2],
        /* pointDragEventHandleFuncMap */disposeSparseMapData(cameraController, pointDragEventHandleFuncMap),
        /* pointScaleEventHandleFuncMap */arcballCameraControllerRecord[/* pointScaleEventHandleFuncMap */4],
        /* keydownEventHandleFuncMap */arcballCameraControllerRecord[/* keydownEventHandleFuncMap */5],
        /* dirtyArray */arcballCameraControllerRecord[/* dirtyArray */6],
        /* distanceMap */arcballCameraControllerRecord[/* distanceMap */7],
        /* minDistanceMap */arcballCameraControllerRecord[/* minDistanceMap */8],
        /* phiMap */arcballCameraControllerRecord[/* phiMap */9],
        /* thetaMap */arcballCameraControllerRecord[/* thetaMap */10],
        /* thetaMarginMap */arcballCameraControllerRecord[/* thetaMarginMap */11],
        /* targetMap */arcballCameraControllerRecord[/* targetMap */12],
        /* moveSpeedXMap */arcballCameraControllerRecord[/* moveSpeedXMap */13],
        /* moveSpeedYMap */arcballCameraControllerRecord[/* moveSpeedYMap */14],
        /* rotateSpeedMap */arcballCameraControllerRecord[/* rotateSpeedMap */15],
        /* wheelSpeedMap */arcballCameraControllerRecord[/* wheelSpeedMap */16],
        /* gameObjectMap */arcballCameraControllerRecord[/* gameObjectMap */17],
        /* disposedIndexArray */arcballCameraControllerRecord[/* disposedIndexArray */18]
      ];
      return newrecord;
    } else {
      return state;
    }
  }
  
  function _disposePointScaleEventHandleFuncMap(cameraController, state) {
    var arcballCameraControllerRecord = state[/* arcballCameraControllerRecord */26];
    var pointScaleEventHandleFuncMap = arcballCameraControllerRecord[/* pointScaleEventHandleFuncMap */4];
    var match = get$3(cameraController, pointScaleEventHandleFuncMap);
    if (match !== undefined) {
      var eventName = getPointScaleEventName(/* () */0);
      var state$1 = offCustomGlobalEventByHandleFunc(eventName, valFromOption(match), state);
      var newrecord = caml_array_dup(state$1);
      newrecord[/* arcballCameraControllerRecord */26] = /* record */[
        /* index */arcballCameraControllerRecord[/* index */0],
        /* pointDownEventHandleFuncMap */arcballCameraControllerRecord[/* pointDownEventHandleFuncMap */1],
        /* pointUpEventHandleFuncMap */arcballCameraControllerRecord[/* pointUpEventHandleFuncMap */2],
        /* pointDragEventHandleFuncMap */arcballCameraControllerRecord[/* pointDragEventHandleFuncMap */3],
        /* pointScaleEventHandleFuncMap */disposeSparseMapData(cameraController, pointScaleEventHandleFuncMap),
        /* keydownEventHandleFuncMap */arcballCameraControllerRecord[/* keydownEventHandleFuncMap */5],
        /* dirtyArray */arcballCameraControllerRecord[/* dirtyArray */6],
        /* distanceMap */arcballCameraControllerRecord[/* distanceMap */7],
        /* minDistanceMap */arcballCameraControllerRecord[/* minDistanceMap */8],
        /* phiMap */arcballCameraControllerRecord[/* phiMap */9],
        /* thetaMap */arcballCameraControllerRecord[/* thetaMap */10],
        /* thetaMarginMap */arcballCameraControllerRecord[/* thetaMarginMap */11],
        /* targetMap */arcballCameraControllerRecord[/* targetMap */12],
        /* moveSpeedXMap */arcballCameraControllerRecord[/* moveSpeedXMap */13],
        /* moveSpeedYMap */arcballCameraControllerRecord[/* moveSpeedYMap */14],
        /* rotateSpeedMap */arcballCameraControllerRecord[/* rotateSpeedMap */15],
        /* wheelSpeedMap */arcballCameraControllerRecord[/* wheelSpeedMap */16],
        /* gameObjectMap */arcballCameraControllerRecord[/* gameObjectMap */17],
        /* disposedIndexArray */arcballCameraControllerRecord[/* disposedIndexArray */18]
      ];
      return newrecord;
    } else {
      return state;
    }
  }
  
  function _disposeKeyDownEventHandleFuncMap(cameraController, state) {
    var arcballCameraControllerRecord = state[/* arcballCameraControllerRecord */26];
    var keydownEventHandleFuncMap = arcballCameraControllerRecord[/* keydownEventHandleFuncMap */5];
    var match = get$3(cameraController, keydownEventHandleFuncMap);
    if (match !== undefined) {
      var state$1 = offKeyboardEventByHandleFunc(/* KeyDown */8, valFromOption(match), state);
      var newrecord = caml_array_dup(state$1);
      newrecord[/* arcballCameraControllerRecord */26] = /* record */[
        /* index */arcballCameraControllerRecord[/* index */0],
        /* pointDownEventHandleFuncMap */arcballCameraControllerRecord[/* pointDownEventHandleFuncMap */1],
        /* pointUpEventHandleFuncMap */arcballCameraControllerRecord[/* pointUpEventHandleFuncMap */2],
        /* pointDragEventHandleFuncMap */arcballCameraControllerRecord[/* pointDragEventHandleFuncMap */3],
        /* pointScaleEventHandleFuncMap */arcballCameraControllerRecord[/* pointScaleEventHandleFuncMap */4],
        /* keydownEventHandleFuncMap */disposeSparseMapData(cameraController, keydownEventHandleFuncMap),
        /* dirtyArray */arcballCameraControllerRecord[/* dirtyArray */6],
        /* distanceMap */arcballCameraControllerRecord[/* distanceMap */7],
        /* minDistanceMap */arcballCameraControllerRecord[/* minDistanceMap */8],
        /* phiMap */arcballCameraControllerRecord[/* phiMap */9],
        /* thetaMap */arcballCameraControllerRecord[/* thetaMap */10],
        /* thetaMarginMap */arcballCameraControllerRecord[/* thetaMarginMap */11],
        /* targetMap */arcballCameraControllerRecord[/* targetMap */12],
        /* moveSpeedXMap */arcballCameraControllerRecord[/* moveSpeedXMap */13],
        /* moveSpeedYMap */arcballCameraControllerRecord[/* moveSpeedYMap */14],
        /* rotateSpeedMap */arcballCameraControllerRecord[/* rotateSpeedMap */15],
        /* wheelSpeedMap */arcballCameraControllerRecord[/* wheelSpeedMap */16],
        /* gameObjectMap */arcballCameraControllerRecord[/* gameObjectMap */17],
        /* disposedIndexArray */arcballCameraControllerRecord[/* disposedIndexArray */18]
      ];
      return newrecord;
    } else {
      return state;
    }
  }
  
  function unbindEvent(cameraController, state) {
    return _disposeKeyDownEventHandleFuncMap(cameraController, _disposePointScaleEventHandleFuncMap(cameraController, _disposePointDragEventHandleFuncMap(cameraController, _disposePointUpEventHandleFuncMap(cameraController, _disposePointDownEventHandleFuncMap(cameraController, state)))));
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  var initArcballCameraController = bindEvent;
  
  function init$3(state) {
    return reduceOneParam((function (state, dirtyIndex) {
                  return bindEvent(dirtyIndex, state);
                }), state, removeDuplicateItems(state[/* arcballCameraControllerRecord */26][/* dirtyArray */6]));
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  function unsafeGetPMatrix(index, pMatrixMap) {
    return ensureCheck((function (pMatrix) {
                  return test(buildAssertMessage("pMatrix exist", "not"), (function () {
                                return assertNullableExist(pMatrix);
                              }));
                }), getIsDebug(stateData), unsafeGet$1(index, pMatrixMap));
  }
  
  function setDefaultPMatrix(index, pMatrixMap) {
    return set$1(index, createIdentityMatrix4(/* () */0), pMatrixMap);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function _setMapValue(cameraProjection, dirtyArray, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* dirtyArray */addToDirtyArray(cameraProjection, dirtyArray),
            /* pMatrixMap */record[/* pMatrixMap */2],
            /* nearMap */record[/* nearMap */3],
            /* farMap */record[/* farMap */4],
            /* fovyMap */record[/* fovyMap */5],
            /* aspectMap */record[/* aspectMap */6],
            /* gameObjectMap */record[/* gameObjectMap */7],
            /* disposedIndexArray */record[/* disposedIndexArray */8]
          ];
  }
  
  function getFovy(cameraProjection, record) {
    return get$3(cameraProjection, record[/* fovyMap */5]);
  }
  
  function setFovy(cameraProjection, fovy, record) {
    return _setMapValue(cameraProjection, record[/* dirtyArray */1], /* record */[
                /* index */record[/* index */0],
                /* dirtyArray */record[/* dirtyArray */1],
                /* pMatrixMap */record[/* pMatrixMap */2],
                /* nearMap */record[/* nearMap */3],
                /* farMap */record[/* farMap */4],
                /* fovyMap */set$1(cameraProjection, fovy, record[/* fovyMap */5]),
                /* aspectMap */record[/* aspectMap */6],
                /* gameObjectMap */record[/* gameObjectMap */7],
                /* disposedIndexArray */record[/* disposedIndexArray */8]
              ]);
  }
  
  function getAspect(cameraProjection, record) {
    return get$3(cameraProjection, record[/* aspectMap */6]);
  }
  
  function setAspect(cameraProjection, aspect, record) {
    return _setMapValue(cameraProjection, record[/* dirtyArray */1], /* record */[
                /* index */record[/* index */0],
                /* dirtyArray */record[/* dirtyArray */1],
                /* pMatrixMap */record[/* pMatrixMap */2],
                /* nearMap */record[/* nearMap */3],
                /* farMap */record[/* farMap */4],
                /* fovyMap */record[/* fovyMap */5],
                /* aspectMap */set$1(cameraProjection, aspect, record[/* aspectMap */6]),
                /* gameObjectMap */record[/* gameObjectMap */7],
                /* disposedIndexArray */record[/* disposedIndexArray */8]
              ]);
  }
  
  function getNear(cameraProjection, record) {
    return get$3(cameraProjection, record[/* nearMap */3]);
  }
  
  function setNear(cameraProjection, near, record) {
    return _setMapValue(cameraProjection, record[/* dirtyArray */1], /* record */[
                /* index */record[/* index */0],
                /* dirtyArray */record[/* dirtyArray */1],
                /* pMatrixMap */record[/* pMatrixMap */2],
                /* nearMap */set$1(cameraProjection, near, record[/* nearMap */3]),
                /* farMap */record[/* farMap */4],
                /* fovyMap */record[/* fovyMap */5],
                /* aspectMap */record[/* aspectMap */6],
                /* gameObjectMap */record[/* gameObjectMap */7],
                /* disposedIndexArray */record[/* disposedIndexArray */8]
              ]);
  }
  
  function getFar(cameraProjection, record) {
    return get$3(cameraProjection, record[/* farMap */4]);
  }
  
  function setFar(cameraProjection, far, record) {
    return _setMapValue(cameraProjection, record[/* dirtyArray */1], /* record */[
                /* index */record[/* index */0],
                /* dirtyArray */record[/* dirtyArray */1],
                /* pMatrixMap */record[/* pMatrixMap */2],
                /* nearMap */record[/* nearMap */3],
                /* farMap */set$1(cameraProjection, far, record[/* farMap */4]),
                /* fovyMap */record[/* fovyMap */5],
                /* aspectMap */record[/* aspectMap */6],
                /* gameObjectMap */record[/* gameObjectMap */7],
                /* disposedIndexArray */record[/* disposedIndexArray */8]
              ]);
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function updateCameraProjection(index, state) {
    var viewRecord = state[/* viewRecord */9];
    var perspectiveCameraProjectionRecord = state[/* perspectiveCameraProjectionRecord */15];
    var newrecord = caml_array_dup(state);
    var match = getFovy(index, perspectiveCameraProjectionRecord);
    var match$1 = getNear(index, perspectiveCameraProjectionRecord);
    var match$2 = getFar(index, perspectiveCameraProjectionRecord);
    var tmp;
    var exit = 0;
    if (match !== undefined && match$1 !== undefined && match$2 !== undefined) {
      var match$3 = getAspect(index, perspectiveCameraProjectionRecord);
      var match$4;
      if (match$3 !== undefined) {
        match$4 = /* tuple */[
          perspectiveCameraProjectionRecord,
          match$3
        ];
      } else {
        var canvas = unsafeGetCanvas(viewRecord);
        var aspect = canvas.width / canvas.height;
        match$4 = /* tuple */[
          setAspect(index, aspect, perspectiveCameraProjectionRecord),
          aspect
        ];
      }
      var perspectiveCameraProjectionRecord$1 = match$4[0];
      buildPerspective(/* tuple */[
            match,
            match$4[1],
            match$1,
            match$2
          ], unsafeGetPMatrix(index, perspectiveCameraProjectionRecord$1[/* pMatrixMap */2]));
      tmp = perspectiveCameraProjectionRecord$1;
    } else {
      exit = 1;
    }
    if (exit === 1) {
      fatal(buildFatalMessage("update", "fovy,near,far should all exist", "", "", "cameraProjection: " + (String(index) + "")));
      tmp = perspectiveCameraProjectionRecord;
    }
    newrecord[/* perspectiveCameraProjectionRecord */15] = tmp;
    return newrecord;
  }
  
  function _clearDirtyArray(state) {
    var perspectiveCameraProjectionRecord = state[/* perspectiveCameraProjectionRecord */15];
    var newrecord = caml_array_dup(state);
    newrecord[/* perspectiveCameraProjectionRecord */15] = /* record */[
      /* index */perspectiveCameraProjectionRecord[/* index */0],
      /* dirtyArray */create$12(/* () */0),
      /* pMatrixMap */perspectiveCameraProjectionRecord[/* pMatrixMap */2],
      /* nearMap */perspectiveCameraProjectionRecord[/* nearMap */3],
      /* farMap */perspectiveCameraProjectionRecord[/* farMap */4],
      /* fovyMap */perspectiveCameraProjectionRecord[/* fovyMap */5],
      /* aspectMap */perspectiveCameraProjectionRecord[/* aspectMap */6],
      /* gameObjectMap */perspectiveCameraProjectionRecord[/* gameObjectMap */7],
      /* disposedIndexArray */perspectiveCameraProjectionRecord[/* disposedIndexArray */8]
    ];
    return newrecord;
  }
  
  function update$1(state) {
    var perspectiveCameraProjectionRecord = state[/* perspectiveCameraProjectionRecord */15];
    return _clearDirtyArray(reduceOneParam((function (state, dirtyIndex) {
                      return updateCameraProjection(dirtyIndex, state);
                    }), state, removeDuplicateItems(perspectiveCameraProjectionRecord[/* dirtyArray */1])));
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  var initPerspepctiveCameraProjection = updateCameraProjection;
  
  function init$4(state) {
    var perspectiveCameraProjectionRecord = state[/* perspectiveCameraProjectionRecord */15];
    var dirtyArray = perspectiveCameraProjectionRecord[/* dirtyArray */1];
    var match = getCount(dirtyArray);
    if (match !== 0) {
      return reduceOneParam((function (state, dirtyIndex) {
                    return updateCameraProjection(dirtyIndex, state);
                  }), state, removeDuplicateItems(dirtyArray));
    } else {
      return state;
    }
  }
  
  
  /* DirtyArrayService-Wonderjs Not a pure module */
  
  function _initMaterialComponent(uid, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var match = getBasicMaterialComponent(uid, gameObjectRecord);
    var state$1;
    if (match !== undefined) {
      var material = match;
      var state$2 = handleInitComponent(material, state);
      state$1 = initTexture(getMap(material, state$2), state$2);
    } else {
      state$1 = state;
    }
    var match$1 = getLightMaterialComponent(uid, gameObjectRecord);
    if (match$1 !== undefined) {
      var material$1 = match$1;
      var state$3 = handleInitComponent$1(material$1, state$1);
      var state$4 = initTexture(getDiffuseMap(material$1, state$3), state$3);
      return initTexture(getSpecularMap(material$1, state$4), state$4);
    } else {
      return state$1;
    }
  }
  
  function initGameObject$2(uid, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var state$1 = _initMaterialComponent(uid, state);
    var match = getPerspectiveCameraProjectionComponent(uid, gameObjectRecord);
    var state$2 = match !== undefined ? initPerspepctiveCameraProjection(match, state$1) : state$1;
    var match$1 = getArcballCameraControllerComponent(uid, gameObjectRecord);
    if (match$1 !== undefined) {
      return initArcballCameraController(match$1, state$2);
    } else {
      return state$2;
    }
  }
  
  
  /* InitBasicMaterialMainService-Wonderjs Not a pure module */
  
  function unsafeGetName$1(id, nameMap) {
    return unsafeGet$2(get$3(id, nameMap));
  }
  
  var setName$1 = set$1;
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function unsafeGetName(uid, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    return unsafeGetName$1(uid, gameObjectRecord[/* nameMap */1]);
  }
  
  function setName(uid, name, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var newrecord = caml_array_dup(state);
    var newrecord$1 = caml_array_dup(gameObjectRecord);
    newrecord$1[/* nameMap */1] = setName$1(uid, name, gameObjectRecord[/* nameMap */1]);
    newrecord[/* gameObjectRecord */11] = newrecord$1;
    return newrecord;
  }
  
  
  /* NameService-Wonderjs Not a pure module */
  
  function isAlive$3(uid, param) {
    var gameObjectRecord = param[/* gameObjectRecord */11];
    var disposedUidMap = gameObjectRecord[/* disposedUidMap */3];
    var transformMap = gameObjectRecord[/* transformMap */22];
    var match = has$1(uid, disposedUidMap);
    if (match) {
      return false;
    } else {
      var match$1 = has$1(uid, transformMap);
      if (match$1) {
        return true;
      } else {
        return false;
      }
    }
  }
  
  
  /* No side effect */
  
  function reduceState(func, state, arr) {
    var mutableState = state;
    for(var i = 0 ,i_finish = arr.length - 1 | 0; i <= i_finish; ++i){
      mutableState = func(mutableState, arr[i]);
    }
    return mutableState;
  }
  
  
  /* No side effect */
  
  function increase(uid) {
    return uid + 1 | 0;
  }
  
  
  /* No side effect */
  
  function create$13(record) {
    var uid = record[/* uid */0];
    var aliveUidArray = record[/* aliveUidArray */20];
    record[/* uid */0] = increase(uid);
    aliveUidArray.push(uid);
    return /* tuple */[
            record,
            uid
          ];
  }
  
  
  /* No side effect */
  
  /* ArrayService-Wonderjs Not a pure module */
  
  var getMappedIndex = unsafeGet$1;
  
  var setMappedIndex = set$1;
  
  function markDisposed(index, mappedIndexMap) {
    return set$1(index, -1, mappedIndexMap);
  }
  
  function isComponentAlive(component, mappedIndexMap) {
    return unsafeGet$1(component, mappedIndexMap) !== -1;
  }
  
  
  /* No side effect */
  
  function create$14(record) {
    var index = record[/* index */0];
    return checkNotExceedMaxCount(getBufferMaxCount$1(/* () */0), /* tuple */[
                /* record */[
                  /* index */index + 1 | 0,
                  /* buffer */record[/* buffer */1],
                  /* colors */record[/* colors */2],
                  /* intensities */record[/* intensities */3],
                  /* constants */record[/* constants */4],
                  /* linears */record[/* linears */5],
                  /* quadratics */record[/* quadratics */6],
                  /* ranges */record[/* ranges */7],
                  /* mappedIndexMap */setMappedIndex(index, index, record[/* mappedIndexMap */8]),
                  /* gameObjectMap */record[/* gameObjectMap */9]
                ],
                index
              ]);
  }
  
  
  /* BufferService-Wonderjs Not a pure module */
  
  function getColor$9(mappedIndex, param) {
    return getColor$4(mappedIndex, param[/* colors */2]);
  }
  
  function setColor$4(mappedIndex, color, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* buffer */record[/* buffer */1],
            /* colors */setColor$1(mappedIndex, color, record[/* colors */2]),
            /* intensities */record[/* intensities */3],
            /* constants */record[/* constants */4],
            /* linears */record[/* linears */5],
            /* quadratics */record[/* quadratics */6],
            /* ranges */record[/* ranges */7],
            /* mappedIndexMap */record[/* mappedIndexMap */8],
            /* gameObjectMap */record[/* gameObjectMap */9]
          ];
  }
  
  function getIntensity$4(mappedIndex, param) {
    return getIntensity$1(mappedIndex, param[/* intensities */3]);
  }
  
  function setIntensity$2(mappedIndex, intensity, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* buffer */record[/* buffer */1],
            /* colors */record[/* colors */2],
            /* intensities */setIntensity(mappedIndex, intensity, record[/* intensities */3]),
            /* constants */record[/* constants */4],
            /* linears */record[/* linears */5],
            /* quadratics */record[/* quadratics */6],
            /* ranges */record[/* ranges */7],
            /* mappedIndexMap */record[/* mappedIndexMap */8],
            /* gameObjectMap */record[/* gameObjectMap */9]
          ];
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  /* CloneLightService-Wonderjs Not a pure module */
  
  /* No side effect */
  
  /* ArrayService-Wonderjs Not a pure module */
  
  /* No side effect */
  
  function create$15(record) {
    var index = record[/* index */0];
    return checkNotExceedMaxCount(getBufferMaxCount(/* () */0), /* tuple */[
                /* record */[
                  /* index */index + 1 | 0,
                  /* buffer */record[/* buffer */1],
                  /* colors */record[/* colors */2],
                  /* intensities */record[/* intensities */3],
                  /* mappedIndexMap */setMappedIndex(index, index, record[/* mappedIndexMap */4]),
                  /* gameObjectMap */record[/* gameObjectMap */5]
                ],
                index
              ]);
  }
  
  
  /* BufferService-Wonderjs Not a pure module */
  
  function getColor$10(mappedIndex, param) {
    return getColor$7(mappedIndex, param[/* colors */2]);
  }
  
  function setColor$5(mappedIndex, color, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* buffer */record[/* buffer */1],
            /* colors */setColor$2(mappedIndex, color, record[/* colors */2]),
            /* intensities */record[/* intensities */3],
            /* mappedIndexMap */record[/* mappedIndexMap */4],
            /* gameObjectMap */record[/* gameObjectMap */5]
          ];
  }
  
  function getIntensity$5(mappedIndex, param) {
    return getIntensity$3(mappedIndex, param[/* intensities */3]);
  }
  
  function setIntensity$3(mappedIndex, intensity, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* buffer */record[/* buffer */1],
            /* colors */record[/* colors */2],
            /* intensities */setIntensity$1(mappedIndex, intensity, record[/* intensities */3]),
            /* mappedIndexMap */record[/* mappedIndexMap */4],
            /* gameObjectMap */record[/* gameObjectMap */5]
          ];
  }
  
  
  /* RecordDirectionLightMainService-Wonderjs Not a pure module */
  
  /* CloneLightService-Wonderjs Not a pure module */
  
  function create$16(record) {
    var match = generateIndex(record[/* index */0], record[/* disposedIndexArray */2]);
    return /* tuple */[
            /* record */[
              /* index */match[1],
              /* gameObjectMap */record[/* gameObjectMap */1],
              /* disposedIndexArray */match[2]
            ],
            match[0]
          ];
  }
  
  
  /* No side effect */
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function getDefaultDrawMode() {
    return /* Triangles */4;
  }
  
  function getDrawModesSize() {
    return 1;
  }
  
  function getDrawModesLength(meshRendererCount) {
    return (meshRendererCount << 0);
  }
  
  function getDrawModesOffset() {
    return 0;
  }
  
  function getDrawModeIndex(index) {
    return (index << 0);
  }
  
  function getTotalByteLength$9(meshRendererCount) {
    return (imul(meshRendererCount, Uint8Array.BYTES_PER_ELEMENT) << 0);
  }
  
  function createBuffer$7(meshRendererCount) {
    return newSharedArrayBuffer(getTotalByteLength$9(meshRendererCount));
  }
  
  
  /* Worker-Wonderjs Not a pure module */
  
  function createTypeArrays$7(buffer, meshRendererCount) {
    return new Uint8Array(buffer, getDrawModesOffset(meshRendererCount), getDrawModesLength(meshRendererCount));
  }
  
  
  /* BufferMeshRendererService-Wonderjs Not a pure module */
  
  function getDrawMode(index, typeArr) {
    return getUint8_1(getDrawModeIndex(index), typeArr);
  }
  
  function setDrawMode(index, data, typeArr) {
    return setUint8_1(getDrawModeIndex(index), data, typeArr);
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function getRecord$7(param) {
    return unsafeGet$2(param[/* meshRendererRecord */25]);
  }
  
  function setAllTypeArrDataToDefault$7(meshRendererCount, defaultDrawMode, drawModes) {
    return reduceOneParam((function (drawModes, index) {
                  return setDrawMode(index, defaultDrawMode, drawModes);
                }), drawModes, range(0, meshRendererCount - 1 | 0));
  }
  
  function _setAllTypeArrDataToDefault$5(meshRendererCount, defaultDrawMode, param) {
    return /* tuple */[
            param[0],
            setAllTypeArrDataToDefault$7(meshRendererCount, defaultDrawMode, param[1])
          ];
  }
  
  function _initBufferData$7(meshRendererCount, defaultDrawMode) {
    var buffer = createBuffer$7(meshRendererCount);
    var drawModes = createTypeArrays$7(buffer, meshRendererCount);
    return _setAllTypeArrDataToDefault$5(meshRendererCount, defaultDrawMode, /* tuple */[
                buffer,
                drawModes
              ]);
  }
  
  function create$18(state) {
    var defaultDrawMode = getDefaultDrawMode(/* () */0);
    var match = _initBufferData$7(getMeshRendererCount(state[/* settingRecord */1]), defaultDrawMode);
    state[/* meshRendererRecord */25] = /* record */[
      /* index */0,
      /* buffer */match[0],
      /* drawModes */match[1],
      /* basicMaterialRenderGameObjectMap */createEmpty$2(/* () */0),
      /* lightMaterialRenderGameObjectMap */createEmpty$2(/* () */0),
      /* gameObjectMap */createEmpty$2(/* () */0),
      /* disposedIndexArray */createEmpty(/* () */0)
    ];
    return state;
  }
  
  function deepCopyForRestore$7(state) {
    var record = getRecord$7(state);
    var index = record[/* index */0];
    var newrecord = caml_array_dup(state);
    newrecord[/* meshRendererRecord */25] = /* record */[
      /* index */index,
      /* buffer */record[/* buffer */1],
      /* drawModes */copyUint8ArrayWithEndIndex(imul(index, getDrawModesSize(/* () */0)), record[/* drawModes */2]),
      /* basicMaterialRenderGameObjectMap */copy(record[/* basicMaterialRenderGameObjectMap */3]),
      /* lightMaterialRenderGameObjectMap */copy(record[/* lightMaterialRenderGameObjectMap */4]),
      /* gameObjectMap */copy(record[/* gameObjectMap */5]),
      /* disposedIndexArray */record[/* disposedIndexArray */6].slice()
    ];
    return newrecord;
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function create$17(state) {
    var meshRendererRecord = getRecord$7(state);
    var match = generateIndex(meshRendererRecord[/* index */0], meshRendererRecord[/* disposedIndexArray */6]);
    state[/* meshRendererRecord */25] = /* record */[
      /* index */match[1],
      /* buffer */meshRendererRecord[/* buffer */1],
      /* drawModes */meshRendererRecord[/* drawModes */2],
      /* basicMaterialRenderGameObjectMap */meshRendererRecord[/* basicMaterialRenderGameObjectMap */3],
      /* lightMaterialRenderGameObjectMap */meshRendererRecord[/* lightMaterialRenderGameObjectMap */4],
      /* gameObjectMap */meshRendererRecord[/* gameObjectMap */5],
      /* disposedIndexArray */match[2]
    ];
    return checkNotExceedMaxCount(getMeshRendererCount(state[/* settingRecord */1]), /* tuple */[
                state,
                match[0]
              ]);
  }
  
  
  /* BufferService-Wonderjs Not a pure module */
  
  function setDrawMode$1(meshRenderer, drawMode, state) {
    var meshRendererRecord = getRecord$7(state);
    var newrecord = caml_array_dup(state);
    newrecord[/* meshRendererRecord */25] = /* record */[
      /* index */meshRendererRecord[/* index */0],
      /* buffer */meshRendererRecord[/* buffer */1],
      /* drawModes */setDrawMode(meshRenderer, drawMode, meshRendererRecord[/* drawModes */2]),
      /* basicMaterialRenderGameObjectMap */meshRendererRecord[/* basicMaterialRenderGameObjectMap */3],
      /* lightMaterialRenderGameObjectMap */meshRendererRecord[/* lightMaterialRenderGameObjectMap */4],
      /* gameObjectMap */meshRendererRecord[/* gameObjectMap */5],
      /* disposedIndexArray */meshRendererRecord[/* disposedIndexArray */6]
    ];
    return newrecord;
  }
  
  
  /* RecordMeshRendererMainService-Wonderjs Not a pure module */
  
  /* ArrayService-Wonderjs Not a pure module */
  
  /* ArrayService-Wonderjs Not a pure module */
  
  /* NameService-Wonderjs Not a pure module */
  
  function _initDataWhenCreate$1(index, basicMaterialRecord) {
    return /* record */[
            /* index */basicMaterialRecord[/* index */0],
            /* buffer */basicMaterialRecord[/* buffer */1],
            /* shaderIndices */basicMaterialRecord[/* shaderIndices */2],
            /* colors */basicMaterialRecord[/* colors */3],
            /* textureIndices */basicMaterialRecord[/* textureIndices */4],
            /* mapUnits */basicMaterialRecord[/* mapUnits */5],
            /* textureCountMap */setCount(index, getDefaultCount(/* () */0), basicMaterialRecord[/* textureCountMap */6]),
            /* defaultColor */basicMaterialRecord[/* defaultColor */7],
            /* gameObjectMap */basicMaterialRecord[/* gameObjectMap */8],
            /* groupCountMap */basicMaterialRecord[/* groupCountMap */9],
            /* disposedIndexArray */basicMaterialRecord[/* disposedIndexArray */10],
            /* nameMap */basicMaterialRecord[/* nameMap */11],
            /* materialArrayForWorkerInit */basicMaterialRecord[/* materialArrayForWorkerInit */12]
          ];
  }
  
  function create$19(state) {
    var basicMaterialRecord = getRecord$1(state);
    var match = generateIndex(basicMaterialRecord[/* index */0], basicMaterialRecord[/* disposedIndexArray */10]);
    var index = match[0];
    var basicMaterialRecord$1 = _initDataWhenCreate$1(index, basicMaterialRecord);
    state[/* basicMaterialRecord */16] = /* record */[
      /* index */match[1],
      /* buffer */basicMaterialRecord$1[/* buffer */1],
      /* shaderIndices */basicMaterialRecord$1[/* shaderIndices */2],
      /* colors */basicMaterialRecord$1[/* colors */3],
      /* textureIndices */basicMaterialRecord$1[/* textureIndices */4],
      /* mapUnits */basicMaterialRecord$1[/* mapUnits */5],
      /* textureCountMap */basicMaterialRecord$1[/* textureCountMap */6],
      /* defaultColor */basicMaterialRecord$1[/* defaultColor */7],
      /* gameObjectMap */basicMaterialRecord$1[/* gameObjectMap */8],
      /* groupCountMap */basicMaterialRecord$1[/* groupCountMap */9],
      /* disposedIndexArray */match[2],
      /* nameMap */basicMaterialRecord$1[/* nameMap */11],
      /* materialArrayForWorkerInit */basicMaterialRecord$1[/* materialArrayForWorkerInit */12]
    ];
    return checkNotExceedMaxCount(getBasicMaterialCount(state[/* settingRecord */1]), /* tuple */[
                state,
                index
              ]);
  }
  
  
  /* BufferService-Wonderjs Not a pure module */
  
  /* ShaderIndicesService-Wonderjs Not a pure module */
  
  /* CloneMaterialMainService-Wonderjs Not a pure module */
  
  /* NameService-Wonderjs Not a pure module */
  
  function _initDataWhenCreate$2(index, lightMaterialRecord) {
    return /* record */[
            /* index */lightMaterialRecord[/* index */0],
            /* buffer */lightMaterialRecord[/* buffer */1],
            /* shaderIndices */lightMaterialRecord[/* shaderIndices */2],
            /* diffuseColors */lightMaterialRecord[/* diffuseColors */3],
            /* specularColors */lightMaterialRecord[/* specularColors */4],
            /* shininess */lightMaterialRecord[/* shininess */5],
            /* textureIndices */lightMaterialRecord[/* textureIndices */6],
            /* diffuseMapUnits */lightMaterialRecord[/* diffuseMapUnits */7],
            /* specularMapUnits */lightMaterialRecord[/* specularMapUnits */8],
            /* textureCountMap */setCount(index, getDefaultCount(/* () */0), lightMaterialRecord[/* textureCountMap */9]),
            /* defaultDiffuseColor */lightMaterialRecord[/* defaultDiffuseColor */10],
            /* defaultSpecularColor */lightMaterialRecord[/* defaultSpecularColor */11],
            /* defaultShininess */lightMaterialRecord[/* defaultShininess */12],
            /* gameObjectMap */lightMaterialRecord[/* gameObjectMap */13],
            /* groupCountMap */lightMaterialRecord[/* groupCountMap */14],
            /* disposedIndexArray */lightMaterialRecord[/* disposedIndexArray */15],
            /* nameMap */lightMaterialRecord[/* nameMap */16],
            /* materialArrayForWorkerInit */lightMaterialRecord[/* materialArrayForWorkerInit */17]
          ];
  }
  
  function create$20(state) {
    var lightMaterialRecord = getRecord$3(state);
    var match = generateIndex(lightMaterialRecord[/* index */0], lightMaterialRecord[/* disposedIndexArray */15]);
    var index = match[0];
    var lightMaterialRecord$1 = _initDataWhenCreate$2(index, lightMaterialRecord);
    state[/* lightMaterialRecord */17] = /* record */[
      /* index */match[1],
      /* buffer */lightMaterialRecord$1[/* buffer */1],
      /* shaderIndices */lightMaterialRecord$1[/* shaderIndices */2],
      /* diffuseColors */lightMaterialRecord$1[/* diffuseColors */3],
      /* specularColors */lightMaterialRecord$1[/* specularColors */4],
      /* shininess */lightMaterialRecord$1[/* shininess */5],
      /* textureIndices */lightMaterialRecord$1[/* textureIndices */6],
      /* diffuseMapUnits */lightMaterialRecord$1[/* diffuseMapUnits */7],
      /* specularMapUnits */lightMaterialRecord$1[/* specularMapUnits */8],
      /* textureCountMap */lightMaterialRecord$1[/* textureCountMap */9],
      /* defaultDiffuseColor */lightMaterialRecord$1[/* defaultDiffuseColor */10],
      /* defaultSpecularColor */lightMaterialRecord$1[/* defaultSpecularColor */11],
      /* defaultShininess */lightMaterialRecord$1[/* defaultShininess */12],
      /* gameObjectMap */lightMaterialRecord$1[/* gameObjectMap */13],
      /* groupCountMap */lightMaterialRecord$1[/* groupCountMap */14],
      /* disposedIndexArray */match[2],
      /* nameMap */lightMaterialRecord$1[/* nameMap */16],
      /* materialArrayForWorkerInit */lightMaterialRecord$1[/* materialArrayForWorkerInit */17]
    ];
    return checkNotExceedMaxCount(getBasicMaterialCount(state[/* settingRecord */1]), /* tuple */[
                state,
                index
              ]);
  }
  
  
  /* BufferService-Wonderjs Not a pure module */
  
  /* ShaderIndicesService-Wonderjs Not a pure module */
  
  /* CloneMaterialMainService-Wonderjs Not a pure module */
  
  function _setDefaultValue(index, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* pointDownEventHandleFuncMap */record[/* pointDownEventHandleFuncMap */1],
            /* pointUpEventHandleFuncMap */record[/* pointUpEventHandleFuncMap */2],
            /* pointDragEventHandleFuncMap */record[/* pointDragEventHandleFuncMap */3],
            /* pointScaleEventHandleFuncMap */record[/* pointScaleEventHandleFuncMap */4],
            /* keydownEventHandleFuncMap */record[/* keydownEventHandleFuncMap */5],
            /* dirtyArray */record[/* dirtyArray */6],
            /* distanceMap */set$1(index, 10, record[/* distanceMap */7]),
            /* minDistanceMap */set$1(index, 0.05, record[/* minDistanceMap */8]),
            /* phiMap */set$1(index, Math.PI / 2, record[/* phiMap */9]),
            /* thetaMap */set$1(index, Math.PI / 2, record[/* thetaMap */10]),
            /* thetaMarginMap */set$1(index, 0.05, record[/* thetaMarginMap */11]),
            /* targetMap */set$1(index, /* tuple */[
                  0,
                  0,
                  0
                ], record[/* targetMap */12]),
            /* moveSpeedXMap */set$1(index, 1, record[/* moveSpeedXMap */13]),
            /* moveSpeedYMap */set$1(index, 1, record[/* moveSpeedYMap */14]),
            /* rotateSpeedMap */set$1(index, 1, record[/* rotateSpeedMap */15]),
            /* wheelSpeedMap */set$1(index, 1, record[/* wheelSpeedMap */16]),
            /* gameObjectMap */record[/* gameObjectMap */17],
            /* disposedIndexArray */record[/* disposedIndexArray */18]
          ];
  }
  
  function create$21(record) {
    var match = generateIndex(record[/* index */0], record[/* disposedIndexArray */18]);
    var index = match[0];
    var record$1 = _setDefaultValue(index, record);
    return /* tuple */[
            /* record */[
              /* index */match[1],
              /* pointDownEventHandleFuncMap */record$1[/* pointDownEventHandleFuncMap */1],
              /* pointUpEventHandleFuncMap */record$1[/* pointUpEventHandleFuncMap */2],
              /* pointDragEventHandleFuncMap */record$1[/* pointDragEventHandleFuncMap */3],
              /* pointScaleEventHandleFuncMap */record$1[/* pointScaleEventHandleFuncMap */4],
              /* keydownEventHandleFuncMap */record$1[/* keydownEventHandleFuncMap */5],
              /* dirtyArray */addToDirtyArray(index, record[/* dirtyArray */6]),
              /* distanceMap */record$1[/* distanceMap */7],
              /* minDistanceMap */record$1[/* minDistanceMap */8],
              /* phiMap */record$1[/* phiMap */9],
              /* thetaMap */record$1[/* thetaMap */10],
              /* thetaMarginMap */record$1[/* thetaMarginMap */11],
              /* targetMap */record$1[/* targetMap */12],
              /* moveSpeedXMap */record$1[/* moveSpeedXMap */13],
              /* moveSpeedYMap */record$1[/* moveSpeedYMap */14],
              /* rotateSpeedMap */record$1[/* rotateSpeedMap */15],
              /* wheelSpeedMap */record$1[/* wheelSpeedMap */16],
              /* gameObjectMap */record$1[/* gameObjectMap */17],
              /* disposedIndexArray */match[2]
            ],
            index
          ];
  }
  
  
  /* DirtyArrayService-Wonderjs Not a pure module */
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function create$22(record) {
    var match = generateIndex(record[/* index */0], record[/* disposedIndexArray */8]);
    var index = match[0];
    return /* tuple */[
            /* record */[
              /* index */match[1],
              /* dirtyArray */addToDirtyArray(index, record[/* dirtyArray */1]),
              /* pMatrixMap */setDefaultPMatrix(index, record[/* pMatrixMap */2]),
              /* nearMap */record[/* nearMap */3],
              /* farMap */record[/* farMap */4],
              /* fovyMap */record[/* fovyMap */5],
              /* aspectMap */record[/* aspectMap */6],
              /* gameObjectMap */record[/* gameObjectMap */7],
              /* disposedIndexArray */match[2]
            ],
            index
          ];
  }
  
  
  /* PMatrixService-Wonderjs Not a pure module */
  
  /* ArrayService-Wonderjs Not a pure module */
  
  /* ClonePointLightService-Wonderjs Not a pure module */
  
  var addComponentToGameObjectMap = set$1;
  
  
  /* No side effect */
  
  function handleAddComponent(transform, gameObjectUid, record) {
    var gameObjectMap = record[/* gameObjectMap */17];
    var newrecord = caml_array_dup(record);
    newrecord[/* gameObjectMap */17] = addComponentToGameObjectMap(transform, gameObjectUid, gameObjectMap);
    return newrecord;
  }
  
  
  /* No side effect */
  
  function handleAddComponent$1(light, gameObjectUid, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* buffer */record[/* buffer */1],
            /* colors */record[/* colors */2],
            /* intensities */record[/* intensities */3],
            /* constants */record[/* constants */4],
            /* linears */record[/* linears */5],
            /* quadratics */record[/* quadratics */6],
            /* ranges */record[/* ranges */7],
            /* mappedIndexMap */record[/* mappedIndexMap */8],
            /* gameObjectMap */addComponentToGameObjectMap(light, gameObjectUid, record[/* gameObjectMap */9])
          ];
  }
  
  
  /* No side effect */
  
  function handleAddComponent$2(geometry, gameObjectUid, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* vertices */record[/* vertices */1],
            /* texCoords */record[/* texCoords */2],
            /* normals */record[/* normals */3],
            /* indices */record[/* indices */4],
            /* gameObjectMap */addComponentToGameObjectMap(geometry, gameObjectUid, record[/* gameObjectMap */5]),
            /* groupCountMap */record[/* groupCountMap */6],
            /* disposedIndexArray */record[/* disposedIndexArray */7]
          ];
  }
  
  
  /* No side effect */
  
  function handleAddComponent$3(material, gameObjectUid, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* buffer */record[/* buffer */1],
            /* shaderIndices */record[/* shaderIndices */2],
            /* colors */record[/* colors */3],
            /* textureIndices */record[/* textureIndices */4],
            /* mapUnits */record[/* mapUnits */5],
            /* textureCountMap */record[/* textureCountMap */6],
            /* defaultColor */record[/* defaultColor */7],
            /* gameObjectMap */addComponentToGameObjectMap(material, gameObjectUid, record[/* gameObjectMap */8]),
            /* groupCountMap */record[/* groupCountMap */9],
            /* disposedIndexArray */record[/* disposedIndexArray */10],
            /* nameMap */record[/* nameMap */11],
            /* materialArrayForWorkerInit */record[/* materialArrayForWorkerInit */12]
          ];
  }
  
  
  /* No side effect */
  
  function handleAddComponent$4(material, gameObjectUid, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* buffer */record[/* buffer */1],
            /* shaderIndices */record[/* shaderIndices */2],
            /* diffuseColors */record[/* diffuseColors */3],
            /* specularColors */record[/* specularColors */4],
            /* shininess */record[/* shininess */5],
            /* textureIndices */record[/* textureIndices */6],
            /* diffuseMapUnits */record[/* diffuseMapUnits */7],
            /* specularMapUnits */record[/* specularMapUnits */8],
            /* textureCountMap */record[/* textureCountMap */9],
            /* defaultDiffuseColor */record[/* defaultDiffuseColor */10],
            /* defaultSpecularColor */record[/* defaultSpecularColor */11],
            /* defaultShininess */record[/* defaultShininess */12],
            /* gameObjectMap */addComponentToGameObjectMap(material, gameObjectUid, record[/* gameObjectMap */13]),
            /* groupCountMap */record[/* groupCountMap */14],
            /* disposedIndexArray */record[/* disposedIndexArray */15],
            /* nameMap */record[/* nameMap */16],
            /* materialArrayForWorkerInit */record[/* materialArrayForWorkerInit */17]
          ];
  }
  
  
  /* No side effect */
  
  function getGroupCount$1(component, groupCountMap) {
    var match = get$3(component, groupCountMap);
    if (match !== undefined) {
      return match;
    } else {
      return 0;
    }
  }
  
  function isGroupComponent(component, groupCountMap) {
    return getGroupCount$1(component, groupCountMap) > 0;
  }
  
  function increaseGroupCount$1(component, groupCountMap) {
    return set$1(component, getGroupCount$1(component, groupCountMap) + 1 | 0, groupCountMap);
  }
  
  function decreaseGroupCount$1(component, groupCountMap) {
    return set$1(component, getGroupCount$1(component, groupCountMap) - 1 | 0, groupCountMap);
  }
  
  
  /* No side effect */
  
  function isGroupGeometry(geometry, record) {
    return isGroupComponent(geometry, record[/* groupCountMap */6]);
  }
  
  function increaseGroupCount(geometry, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* vertices */record[/* vertices */1],
            /* texCoords */record[/* texCoords */2],
            /* normals */record[/* normals */3],
            /* indices */record[/* indices */4],
            /* gameObjectMap */record[/* gameObjectMap */5],
            /* groupCountMap */increaseGroupCount$1(geometry, record[/* groupCountMap */6]),
            /* disposedIndexArray */record[/* disposedIndexArray */7]
          ];
  }
  
  function decreaseGroupCount(geometry, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* vertices */record[/* vertices */1],
            /* texCoords */record[/* texCoords */2],
            /* normals */record[/* normals */3],
            /* indices */record[/* indices */4],
            /* gameObjectMap */record[/* gameObjectMap */5],
            /* groupCountMap */decreaseGroupCount$1(geometry, record[/* groupCountMap */6]),
            /* disposedIndexArray */record[/* disposedIndexArray */7]
          ];
  }
  
  
  /* No side effect */
  
  function handleAddComponent$5(geometry, gameObjectUid, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* buffer */record[/* buffer */1],
            /* vertices */record[/* vertices */2],
            /* texCoords */record[/* texCoords */3],
            /* normals */record[/* normals */4],
            /* indices */record[/* indices */5],
            /* verticesInfos */record[/* verticesInfos */6],
            /* texCoordsInfos */record[/* texCoordsInfos */7],
            /* normalsInfos */record[/* normalsInfos */8],
            /* indicesInfos */record[/* indicesInfos */9],
            /* verticesOffset */record[/* verticesOffset */10],
            /* texCoordsOffset */record[/* texCoordsOffset */11],
            /* normalsOffset */record[/* normalsOffset */12],
            /* indicesOffset */record[/* indicesOffset */13],
            /* disposeCount */record[/* disposeCount */14],
            /* gameObjectMap */addComponentToGameObjectMap(geometry, gameObjectUid, record[/* gameObjectMap */15]),
            /* groupCountMap */record[/* groupCountMap */16],
            /* disposedIndexArray */record[/* disposedIndexArray */17],
            /* disposedIndexMap */record[/* disposedIndexMap */18],
            /* aliveIndexArray */record[/* aliveIndexArray */19]
          ];
  }
  
  
  /* No side effect */
  
  function getMappedIndexMap(param) {
    return param[/* mappedIndexMap */4];
  }
  
  
  /* No side effect */
  
  function handleAddComponent$6(light, gameObjectUid, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* buffer */record[/* buffer */1],
            /* colors */record[/* colors */2],
            /* intensities */record[/* intensities */3],
            /* mappedIndexMap */record[/* mappedIndexMap */4],
            /* gameObjectMap */addComponentToGameObjectMap(getMappedIndex(light, getMappedIndexMap(record)), gameObjectUid, record[/* gameObjectMap */5])
          ];
  }
  
  
  /* No side effect */
  
  function handleAddComponent$7(cameraView, gameObjectUid, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* gameObjectMap */addComponentToGameObjectMap(cameraView, gameObjectUid, record[/* gameObjectMap */1]),
            /* disposedIndexArray */record[/* disposedIndexArray */2]
          ];
  }
  
  
  /* No side effect */
  
  function isGroupMaterial(material, record) {
    return isGroupComponent(material, record[/* groupCountMap */9]);
  }
  
  function increaseGroupCount$2(material, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* buffer */record[/* buffer */1],
            /* shaderIndices */record[/* shaderIndices */2],
            /* colors */record[/* colors */3],
            /* textureIndices */record[/* textureIndices */4],
            /* mapUnits */record[/* mapUnits */5],
            /* textureCountMap */record[/* textureCountMap */6],
            /* defaultColor */record[/* defaultColor */7],
            /* gameObjectMap */record[/* gameObjectMap */8],
            /* groupCountMap */increaseGroupCount$1(material, record[/* groupCountMap */9]),
            /* disposedIndexArray */record[/* disposedIndexArray */10],
            /* nameMap */record[/* nameMap */11],
            /* materialArrayForWorkerInit */record[/* materialArrayForWorkerInit */12]
          ];
  }
  
  function decreaseGroupCount$2(material, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* buffer */record[/* buffer */1],
            /* shaderIndices */record[/* shaderIndices */2],
            /* colors */record[/* colors */3],
            /* textureIndices */record[/* textureIndices */4],
            /* mapUnits */record[/* mapUnits */5],
            /* textureCountMap */record[/* textureCountMap */6],
            /* defaultColor */record[/* defaultColor */7],
            /* gameObjectMap */record[/* gameObjectMap */8],
            /* groupCountMap */decreaseGroupCount$1(material, record[/* groupCountMap */9]),
            /* disposedIndexArray */record[/* disposedIndexArray */10],
            /* nameMap */record[/* nameMap */11],
            /* materialArrayForWorkerInit */record[/* materialArrayForWorkerInit */12]
          ];
  }
  
  
  /* No side effect */
  
  function isGroupMaterial$1(material, record) {
    return isGroupComponent(material, record[/* groupCountMap */14]);
  }
  
  function increaseGroupCount$3(material, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* buffer */record[/* buffer */1],
            /* shaderIndices */record[/* shaderIndices */2],
            /* diffuseColors */record[/* diffuseColors */3],
            /* specularColors */record[/* specularColors */4],
            /* shininess */record[/* shininess */5],
            /* textureIndices */record[/* textureIndices */6],
            /* diffuseMapUnits */record[/* diffuseMapUnits */7],
            /* specularMapUnits */record[/* specularMapUnits */8],
            /* textureCountMap */record[/* textureCountMap */9],
            /* defaultDiffuseColor */record[/* defaultDiffuseColor */10],
            /* defaultSpecularColor */record[/* defaultSpecularColor */11],
            /* defaultShininess */record[/* defaultShininess */12],
            /* gameObjectMap */record[/* gameObjectMap */13],
            /* groupCountMap */increaseGroupCount$1(material, record[/* groupCountMap */14]),
            /* disposedIndexArray */record[/* disposedIndexArray */15],
            /* nameMap */record[/* nameMap */16],
            /* materialArrayForWorkerInit */record[/* materialArrayForWorkerInit */17]
          ];
  }
  
  function decreaseGroupCount$3(material, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* buffer */record[/* buffer */1],
            /* shaderIndices */record[/* shaderIndices */2],
            /* diffuseColors */record[/* diffuseColors */3],
            /* specularColors */record[/* specularColors */4],
            /* shininess */record[/* shininess */5],
            /* textureIndices */record[/* textureIndices */6],
            /* diffuseMapUnits */record[/* diffuseMapUnits */7],
            /* specularMapUnits */record[/* specularMapUnits */8],
            /* textureCountMap */record[/* textureCountMap */9],
            /* defaultDiffuseColor */record[/* defaultDiffuseColor */10],
            /* defaultSpecularColor */record[/* defaultSpecularColor */11],
            /* defaultShininess */record[/* defaultShininess */12],
            /* gameObjectMap */record[/* gameObjectMap */13],
            /* groupCountMap */decreaseGroupCount$1(material, record[/* groupCountMap */14]),
            /* disposedIndexArray */record[/* disposedIndexArray */15],
            /* nameMap */record[/* nameMap */16],
            /* materialArrayForWorkerInit */record[/* materialArrayForWorkerInit */17]
          ];
  }
  
  
  /* No side effect */
  
  function handleAddComponent$8(meshRenderer, gameObjectUid, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var meshRendererRecord = getRecord$7(state);
    var lightMaterialRenderGameObjectMap = meshRendererRecord[/* lightMaterialRenderGameObjectMap */4];
    var basicMaterialRenderGameObjectMap = meshRendererRecord[/* basicMaterialRenderGameObjectMap */3];
    var match = hasBasicMaterialComponent(gameObjectUid, gameObjectRecord);
    var basicMaterialRenderGameObjectMap$1 = match ? set$1(meshRenderer, gameObjectUid, basicMaterialRenderGameObjectMap) : basicMaterialRenderGameObjectMap;
    var match$1 = hasLightMaterialComponent(gameObjectUid, gameObjectRecord);
    var lightMaterialRenderGameObjectMap$1 = match$1 ? set$1(meshRenderer, gameObjectUid, lightMaterialRenderGameObjectMap) : lightMaterialRenderGameObjectMap;
    var newrecord = caml_array_dup(state);
    return ensureCheck((function (state) {
                  return test(buildAssertMessage("should add material component before add meshRenderer component", "not(the gameObjectUid is " + (String(gameObjectUid) + ")")), (function () {
                                var match = getRecord$7(state);
                                return assertTrue(match[/* basicMaterialRenderGameObjectMap */3].includes(gameObjectUid) || match[/* lightMaterialRenderGameObjectMap */4].includes(gameObjectUid));
                              }));
                }), getIsDebug(stateData), (newrecord[/* meshRendererRecord */25] = /* record */[
                  /* index */meshRendererRecord[/* index */0],
                  /* buffer */meshRendererRecord[/* buffer */1],
                  /* drawModes */meshRendererRecord[/* drawModes */2],
                  /* basicMaterialRenderGameObjectMap */basicMaterialRenderGameObjectMap$1,
                  /* lightMaterialRenderGameObjectMap */lightMaterialRenderGameObjectMap$1,
                  /* gameObjectMap */addComponentToGameObjectMap(meshRenderer, gameObjectUid, meshRendererRecord[/* gameObjectMap */5]),
                  /* disposedIndexArray */meshRendererRecord[/* disposedIndexArray */6]
                ], newrecord));
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function isGroupGeometry$1(geometry, record) {
    return isGroupComponent(geometry, record[/* groupCountMap */16]);
  }
  
  function increaseGroupCount$4(geometry, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* buffer */record[/* buffer */1],
            /* vertices */record[/* vertices */2],
            /* texCoords */record[/* texCoords */3],
            /* normals */record[/* normals */4],
            /* indices */record[/* indices */5],
            /* verticesInfos */record[/* verticesInfos */6],
            /* texCoordsInfos */record[/* texCoordsInfos */7],
            /* normalsInfos */record[/* normalsInfos */8],
            /* indicesInfos */record[/* indicesInfos */9],
            /* verticesOffset */record[/* verticesOffset */10],
            /* texCoordsOffset */record[/* texCoordsOffset */11],
            /* normalsOffset */record[/* normalsOffset */12],
            /* indicesOffset */record[/* indicesOffset */13],
            /* disposeCount */record[/* disposeCount */14],
            /* gameObjectMap */record[/* gameObjectMap */15],
            /* groupCountMap */increaseGroupCount$1(geometry, record[/* groupCountMap */16]),
            /* disposedIndexArray */record[/* disposedIndexArray */17],
            /* disposedIndexMap */record[/* disposedIndexMap */18],
            /* aliveIndexArray */record[/* aliveIndexArray */19]
          ];
  }
  
  function decreaseGroupCount$4(geometry, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* buffer */record[/* buffer */1],
            /* vertices */record[/* vertices */2],
            /* texCoords */record[/* texCoords */3],
            /* normals */record[/* normals */4],
            /* indices */record[/* indices */5],
            /* verticesInfos */record[/* verticesInfos */6],
            /* texCoordsInfos */record[/* texCoordsInfos */7],
            /* normalsInfos */record[/* normalsInfos */8],
            /* indicesInfos */record[/* indicesInfos */9],
            /* verticesOffset */record[/* verticesOffset */10],
            /* texCoordsOffset */record[/* texCoordsOffset */11],
            /* normalsOffset */record[/* normalsOffset */12],
            /* indicesOffset */record[/* indicesOffset */13],
            /* disposeCount */record[/* disposeCount */14],
            /* gameObjectMap */record[/* gameObjectMap */15],
            /* groupCountMap */decreaseGroupCount$1(geometry, record[/* groupCountMap */16]),
            /* disposedIndexArray */record[/* disposedIndexArray */17],
            /* disposedIndexMap */record[/* disposedIndexMap */18],
            /* aliveIndexArray */record[/* aliveIndexArray */19]
          ];
  }
  
  
  /* No side effect */
  
  function getRecord$8(param) {
    return param[/* boxGeometryRecord */23];
  }
  
  function create$23() {
    var match = generateAllFaces(/* () */0);
    return /* record */[
            /* index */0,
            /* vertices */new Float32Array(match[0]),
            /* texCoords */new Float32Array(match[1]),
            /* normals */new Float32Array(match[2]),
            /* indices */new Uint16Array(match[3]),
            /* gameObjectMap */createEmpty$2(/* () */0),
            /* groupCountMap */createEmpty$2(/* () */0),
            /* disposedIndexArray */createEmpty(/* () */0)
          ];
  }
  
  function deepCopyForRestore$8(state) {
    var match = getRecord$8(state);
    var disposedIndexArray = match[/* disposedIndexArray */7];
    var newrecord = caml_array_dup(state);
    newrecord[/* boxGeometryRecord */23] = /* record */[
      /* index */match[/* index */0],
      /* vertices */match[/* vertices */1],
      /* texCoords */match[/* texCoords */2],
      /* normals */match[/* normals */3],
      /* indices */match[/* indices */4],
      /* gameObjectMap */copy(match[/* gameObjectMap */5]),
      /* groupCountMap */copy(match[/* groupCountMap */6]),
      /* disposedIndexArray */disposedIndexArray.slice()
    ];
    return newrecord;
  }
  
  
  /* SparseMapService-Wonderjs Not a pure module */
  
  function createTypeArrays$8(buffer, customGeometryPointCount, customGeometryCount) {
    return /* tuple */[
            new Float32Array(buffer, getVerticesOffset(customGeometryPointCount), getVertexLength(customGeometryPointCount)),
            new Float32Array(buffer, getTexCoordsOffset(customGeometryPointCount), getTexCoordsLength(customGeometryPointCount)),
            new Float32Array(buffer, getNormalsOffset(customGeometryPointCount), getVertexLength(customGeometryPointCount)),
            new Uint16Array(buffer, getIndicesOffset(customGeometryPointCount), getIndicesLength(customGeometryPointCount)),
            new Uint32Array(buffer, getVerticesInfosOffset(customGeometryPointCount), getVerticesInfosLength(customGeometryCount)),
            new Uint32Array(buffer, getTexCoordsInfosOffset(customGeometryPointCount, customGeometryCount), getTexCoordsInfosLength(customGeometryCount)),
            new Uint32Array(buffer, getNormalsInfosOffset(customGeometryPointCount, customGeometryCount), getNormalsInfosLength(customGeometryCount)),
            new Uint32Array(buffer, getIndicesInfosOffset(customGeometryPointCount, customGeometryCount), getIndicesInfosLength(customGeometryCount))
          ];
  }
  
  
  /* BufferCustomGeometryService-Wonderjs Not a pure module */
  
  function getRecord$9(param) {
    return unsafeGet$2(param[/* customGeometryRecord */24]);
  }
  
  function setAllTypeArrDataToDefault$8(geometryCount, geometryPointCount, param) {
    return /* tuple */[
            param[0].fill(0, 0, imul(imul(geometryCount, geometryPointCount), getVertexSize(/* () */0))),
            param[1].fill(0, 0, imul(imul(geometryCount, geometryPointCount), getTexCoordsSize(/* () */0))),
            param[2].fill(0, 0, imul(imul(geometryCount, geometryPointCount), getVertexSize(/* () */0))),
            param[3].fill(0, 0, imul(imul(geometryCount, geometryPointCount), getIndexSize(/* () */0)))
          ];
  }
  
  function _initBufferData$8(geometryPointCount, geometryCount) {
    var buffer = createBuffer$1(geometryPointCount, geometryCount);
    var match = createTypeArrays$8(buffer, geometryPointCount, geometryCount);
    return /* tuple */[
            buffer,
            match[0],
            match[1],
            match[2],
            match[3],
            match[4],
            match[5],
            match[6],
            match[7]
          ];
  }
  
  function create$24(state) {
    var settingRecord = state[/* settingRecord */1];
    var geometryPointCount = getCustomGeometryPointCount(settingRecord);
    var geometryCount = getCustomGeometryCount(settingRecord);
    var match = _initBufferData$8(geometryPointCount, geometryCount);
    state[/* customGeometryRecord */24] = /* record */[
      /* index */0,
      /* buffer */match[0],
      /* vertices */match[1],
      /* texCoords */match[2],
      /* normals */match[3],
      /* indices */match[4],
      /* verticesInfos */match[5],
      /* texCoordsInfos */match[6],
      /* normalsInfos */match[7],
      /* indicesInfos */match[8],
      /* verticesOffset */0,
      /* texCoordsOffset */0,
      /* normalsOffset */0,
      /* indicesOffset */0,
      /* disposeCount */0,
      /* gameObjectMap */createEmpty$2(/* () */0),
      /* groupCountMap */createEmpty$2(/* () */0),
      /* disposedIndexArray */createEmpty(/* () */0),
      /* disposedIndexMap */createEmpty$2(/* () */0),
      /* aliveIndexArray */createEmpty(/* () */0)
    ];
    return state;
  }
  
  function deepCopyForRestore$9(state) {
    var record = getRecord$9(state);
    var verticesOffset = record[/* verticesOffset */10];
    var texCoordsOffset = record[/* texCoordsOffset */11];
    var normalsOffset = record[/* normalsOffset */12];
    var indicesOffset = record[/* indicesOffset */13];
    var disposeCount = record[/* disposeCount */14];
    var disposedIndexArray = record[/* disposedIndexArray */17];
    var disposedIndexMap = record[/* disposedIndexMap */18];
    var newrecord = caml_array_dup(state);
    newrecord[/* customGeometryRecord */24] = /* record */[
      /* index */record[/* index */0],
      /* buffer */record[/* buffer */1],
      /* vertices */copyFloat32ArrayWithEndIndex(verticesOffset, record[/* vertices */2]),
      /* texCoords */copyFloat32ArrayWithEndIndex(texCoordsOffset, record[/* texCoords */3]),
      /* normals */copyFloat32ArrayWithEndIndex(normalsOffset, record[/* normals */4]),
      /* indices */copyUint16ArrayWithEndIndex(indicesOffset, record[/* indices */5]),
      /* verticesInfos */record[/* verticesInfos */6],
      /* texCoordsInfos */record[/* texCoordsInfos */7],
      /* normalsInfos */record[/* normalsInfos */8],
      /* indicesInfos */record[/* indicesInfos */9],
      /* verticesOffset */verticesOffset,
      /* texCoordsOffset */texCoordsOffset,
      /* normalsOffset */normalsOffset,
      /* indicesOffset */indicesOffset,
      /* disposeCount */disposeCount,
      /* gameObjectMap */copy(record[/* gameObjectMap */15]),
      /* groupCountMap */copy(record[/* groupCountMap */16]),
      /* disposedIndexArray */disposedIndexArray.slice(),
      /* disposedIndexMap */copy(disposedIndexMap),
      /* aliveIndexArray */record[/* aliveIndexArray */19].slice()
    ];
    return newrecord;
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function handleAddComponent$9(cameraController, gameObjectUid, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* pointDownEventHandleFuncMap */record[/* pointDownEventHandleFuncMap */1],
            /* pointUpEventHandleFuncMap */record[/* pointUpEventHandleFuncMap */2],
            /* pointDragEventHandleFuncMap */record[/* pointDragEventHandleFuncMap */3],
            /* pointScaleEventHandleFuncMap */record[/* pointScaleEventHandleFuncMap */4],
            /* keydownEventHandleFuncMap */record[/* keydownEventHandleFuncMap */5],
            /* dirtyArray */record[/* dirtyArray */6],
            /* distanceMap */record[/* distanceMap */7],
            /* minDistanceMap */record[/* minDistanceMap */8],
            /* phiMap */record[/* phiMap */9],
            /* thetaMap */record[/* thetaMap */10],
            /* thetaMarginMap */record[/* thetaMarginMap */11],
            /* targetMap */record[/* targetMap */12],
            /* moveSpeedXMap */record[/* moveSpeedXMap */13],
            /* moveSpeedYMap */record[/* moveSpeedYMap */14],
            /* rotateSpeedMap */record[/* rotateSpeedMap */15],
            /* wheelSpeedMap */record[/* wheelSpeedMap */16],
            /* gameObjectMap */addComponentToGameObjectMap(cameraController, gameObjectUid, record[/* gameObjectMap */17]),
            /* disposedIndexArray */record[/* disposedIndexArray */18]
          ];
  }
  
  
  /* No side effect */
  
  function handleAddComponent$10(cameraProjection, gameObjectUid, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* dirtyArray */record[/* dirtyArray */1],
            /* pMatrixMap */record[/* pMatrixMap */2],
            /* nearMap */record[/* nearMap */3],
            /* farMap */record[/* farMap */4],
            /* fovyMap */record[/* fovyMap */5],
            /* aspectMap */record[/* aspectMap */6],
            /* gameObjectMap */addComponentToGameObjectMap(cameraProjection, gameObjectUid, record[/* gameObjectMap */7]),
            /* disposedIndexArray */record[/* disposedIndexArray */8]
          ];
  }
  
  
  /* No side effect */
  
  /* Log-WonderLog Not a pure module */
  
  /* GetComponentGameObjectService-Wonderjs Not a pure module */
  
  /* Log-WonderLog Not a pure module */
  
  /* No side effect */
  
  /* No side effect */
  
  function getGameObject$3(geometry, param) {
    return getGameObject$1(geometry, param[/* gameObjectMap */5]);
  }
  
  
  /* GameObjectMapService-Wonderjs Not a pure module */
  
  function getGameObject$4(material, param) {
    return getGameObject$1(material, param[/* gameObjectMap */8]);
  }
  
  
  /* GameObjectMapService-Wonderjs Not a pure module */
  
  function getGameObject$5(material, param) {
    return getGameObject$1(material, param[/* gameObjectMap */13]);
  }
  
  
  /* GameObjectMapService-Wonderjs Not a pure module */
  
  function getGameObject$6(geometry, param) {
    return getGameObject$1(geometry, param[/* gameObjectMap */15]);
  }
  
  
  /* GameObjectMapService-Wonderjs Not a pure module */
  
  function getObjectInstanceTransformCollectionsSize(objectInstanceCountPerSourceInstance) {
    return objectInstanceCountPerSourceInstance;
  }
  
  var getObjectInstanceTransformCollectionsLength = imul;
  
  function getObjectInstanceTransformCollectionsOffset(_, _$1) {
    return 0;
  }
  
  function getIsTransformStaticsSize() {
    return 1;
  }
  
  function getIsTransformStaticsLength(sourceInstanceCount) {
    return (sourceInstanceCount << 0);
  }
  
  function getIsTransformStaticsOffset(sourceInstanceCount, objectInstanceCountPerSourceInstance) {
    return 0 + imul(imul(sourceInstanceCount, objectInstanceCountPerSourceInstance), Uint32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  var getObjectInstanceTransformCollectionsIndex = imul;
  
  function getIsTransformStaticsIndex(sourceInstance) {
    return (sourceInstance << 0);
  }
  
  function getObjectInstanceTransformIndex(sourceInstance, objectInstanceTransformIndex, objectInstanceCountPerSourceInstance) {
    return imul(sourceInstance, objectInstanceCountPerSourceInstance) + objectInstanceTransformIndex | 0;
  }
  
  function getTotalByteLength$10(sourceInstanceCount, objectInstanceCountPerSourceInstance) {
    return imul(sourceInstanceCount, imul(Uint32Array.BYTES_PER_ELEMENT, objectInstanceCountPerSourceInstance) + (Uint8Array.BYTES_PER_ELEMENT << 0) | 0);
  }
  
  function createBuffer$8(sourceInstanceCount, objectInstanceCountPerSourceInstance) {
    return newSharedArrayBuffer(getTotalByteLength$10(sourceInstanceCount, objectInstanceCountPerSourceInstance));
  }
  
  
  /* Worker-Wonderjs Not a pure module */
  
  function getDefault() {
    return 1;
  }
  
  function setModelMatrixIsStatic(sourceInstance, isStatic, isTransformStatics) {
    return setUint8_1(getIsTransformStaticsIndex(sourceInstance), isStatic, isTransformStatics);
  }
  
  function isTransformStatic(sourceInstance, isTransformStatics) {
    return getUint8_1(getIsTransformStaticsIndex(sourceInstance), isTransformStatics) === 1;
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function createTypeArrays$9(buffer, sourceInstanceCount, objectInstanceCountPerSourceInstance) {
    return /* tuple */[
            new Uint32Array(buffer, getObjectInstanceTransformCollectionsOffset(sourceInstanceCount, objectInstanceCountPerSourceInstance), getObjectInstanceTransformCollectionsLength(sourceInstanceCount, objectInstanceCountPerSourceInstance)),
            new Uint8Array(buffer, getIsTransformStaticsOffset(sourceInstanceCount, objectInstanceCountPerSourceInstance), getIsTransformStaticsLength(sourceInstanceCount))
          ];
  }
  
  
  /* BufferSourceInstanceService-Wonderjs Not a pure module */
  
  function getRecord$10(param) {
    return unsafeGet$2(param[/* sourceInstanceRecord */7]);
  }
  
  function setAllTypeArrDataToDefault$9(sourceInstanceCount, defaultIsTransformStatic, param) {
    return /* tuple */[
            param[0].fill(0),
            reduceOneParam((function (isTransformStatics, index) {
                    return setModelMatrixIsStatic(index, defaultIsTransformStatic, isTransformStatics);
                  }), param[1], range(0, sourceInstanceCount - 1 | 0))
          ];
  }
  
  function _setAllTypeArrDataToDefault$6(sourceInstanceCount, defaultIsTransformStatic, param) {
    return /* tuple */[
            param[0],
            setAllTypeArrDataToDefault$9(sourceInstanceCount, defaultIsTransformStatic, /* tuple */[
                  param[1],
                  param[2]
                ])
          ];
  }
  
  function _initBufferData$9(sourceInstanceCount, objectInstanceCountPerSourceInstance, defaultIsTransformStatic) {
    var buffer = createBuffer$8(sourceInstanceCount, objectInstanceCountPerSourceInstance);
    var match = createTypeArrays$9(buffer, sourceInstanceCount, objectInstanceCountPerSourceInstance);
    return _setAllTypeArrDataToDefault$6(sourceInstanceCount, defaultIsTransformStatic, /* tuple */[
                buffer,
                match[0],
                match[1]
              ]);
  }
  
  function create$26(state) {
    var settingRecord = state[/* settingRecord */1];
    var sourceInstanceCount = getSourceInstanceCount(settingRecord);
    var objectInstanceCountPerSourceInstance = getObjectInstanceCountPerSourceInstance(settingRecord);
    var defaultIsTransformStatic = getDefault(/* () */0);
    var match = _initBufferData$9(sourceInstanceCount, objectInstanceCountPerSourceInstance, defaultIsTransformStatic);
    var match$1 = match[1];
    state[/* sourceInstanceRecord */7] = /* record */[
      /* index */0,
      /* objectInstanceTransformIndexMap */createEmpty$2(/* () */0),
      /* buffer */match[0],
      /* isTransformStatics */match$1[1],
      /* objectInstanceTransformCollections */match$1[0],
      /* matrixInstanceBufferCapacityMap */createEmpty$2(/* () */0),
      /* matrixFloat32ArrayMap */createEmpty$2(/* () */0),
      /* isSendTransformMatrixDataMap */createEmpty$2(/* () */0),
      /* disposedIndexArray */createEmpty(/* () */0),
      /* gameObjectMap */createEmpty$2(/* () */0)
    ];
    return state;
  }
  
  function deepCopyForRestore$10(state) {
    var record = getRecord$10(state);
    var index = record[/* index */0];
    var newrecord = caml_array_dup(state);
    newrecord[/* sourceInstanceRecord */7] = /* record */[
      /* index */index,
      /* objectInstanceTransformIndexMap */copy(record[/* objectInstanceTransformIndexMap */1]),
      /* buffer */record[/* buffer */2],
      /* isTransformStatics */copyUint8ArrayWithEndIndex(imul(index, getIsTransformStaticsSize(/* () */0)), record[/* isTransformStatics */3]),
      /* objectInstanceTransformCollections */copyUint32ArrayWithEndIndex(imul(index, getObjectInstanceTransformCollectionsSize(getObjectInstanceCountPerSourceInstance(state[/* settingRecord */1]))), record[/* objectInstanceTransformCollections */4]),
      /* matrixInstanceBufferCapacityMap */copy(record[/* matrixInstanceBufferCapacityMap */5]),
      /* matrixFloat32ArrayMap */deepCopyFloat32ArrayArray(record[/* matrixFloat32ArrayMap */6]),
      /* isSendTransformMatrixDataMap */record[/* isSendTransformMatrixDataMap */7],
      /* disposedIndexArray */record[/* disposedIndexArray */8].slice(),
      /* gameObjectMap */copy(record[/* gameObjectMap */9])
    ];
    return newrecord;
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function _addComponent(param, handleAddComponentFunc, componentRecord) {
    var component = param[1];
    var uid = param[0];
    addComponent(uid, component, param[2]);
    return handleAddComponentFunc(component, uid, componentRecord);
  }
  
  function _addComponentWithState(param, handleAddComponentFunc, state) {
    var component = param[1];
    var uid = param[0];
    addComponent(uid, component, param[2]);
    return handleAddComponentFunc(component, uid, state);
  }
  
  function _addSharableComponent(param, param$1, componentRecord) {
    var component = param[1];
    var uid = param[0];
    addComponent(uid, component, param[2]);
    if (param[3] !== undefined) {
      return param$1[0](component, componentRecord);
    } else {
      return param$1[1](component, uid, componentRecord);
    }
  }
  
  function addBasicCameraViewComponent(uid, component, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var basicCameraViewRecord = state[/* basicCameraViewRecord */14];
    state[/* basicCameraViewRecord */14] = _addComponent(/* tuple */[
          uid,
          component,
          gameObjectRecord[/* basicCameraViewMap */23]
        ], handleAddComponent$7, basicCameraViewRecord);
    return state;
  }
  
  function addPerspectiveCameraProjectionComponent(uid, component, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var perspectiveCameraProjectionRecord = state[/* perspectiveCameraProjectionRecord */15];
    state[/* perspectiveCameraProjectionRecord */15] = _addComponent(/* tuple */[
          uid,
          component,
          gameObjectRecord[/* perspectiveCameraProjectionMap */24]
        ], handleAddComponent$10, perspectiveCameraProjectionRecord);
    return state;
  }
  
  function addArcballCameraControllerComponent(uid, component, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var newrecord = caml_array_dup(state);
    newrecord[/* arcballCameraControllerRecord */26] = _addComponent(/* tuple */[
          uid,
          component,
          gameObjectRecord[/* arcballCameraControllerMap */25]
        ], handleAddComponent$9, state[/* arcballCameraControllerRecord */26]);
    return newrecord;
  }
  
  function addTransformComponent(uid, component, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    state[/* transformRecord */12] = _addComponent(/* tuple */[
          uid,
          component,
          gameObjectRecord[/* transformMap */22]
        ], handleAddComponent, getRecord(state));
    return state;
  }
  
  function _addSharableGeometryComponent(param, param$1, componentRecord) {
    var component = param[1];
    if (param[2] !== undefined) {
      return param$1[0](component, componentRecord);
    } else {
      return param$1[1](component, param[0], componentRecord);
    }
  }
  
  function _addCurrentBoxGeometryComponentData(uid, component, param) {
    var geometryDataMap = param[/* geometryDataMap */21];
    return addToMap(uid, /* tuple */[
                component,
                getBoxGeometryType(/* () */0)
              ], geometryDataMap);
  }
  
  function addBoxGeometryComponent(uid, component, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    _addCurrentBoxGeometryComponentData(uid, component, gameObjectRecord);
    var boxGeometryRecord = getRecord$8(state);
    state[/* boxGeometryRecord */23] = _addSharableGeometryComponent(/* tuple */[
          uid,
          component,
          getGameObject$3(component, boxGeometryRecord)
        ], /* tuple */[
          increaseGroupCount,
          handleAddComponent$2
        ], boxGeometryRecord);
    return state;
  }
  
  function _addCurrentCustomGeometryComponentData(uid, component, param) {
    var geometryDataMap = param[/* geometryDataMap */21];
    return addToMap(uid, /* tuple */[
                component,
                getCustomGeometryType(/* () */0)
              ], geometryDataMap);
  }
  
  function addCustomGeometryComponent(uid, component, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    _addCurrentCustomGeometryComponentData(uid, component, gameObjectRecord);
    var customGeometryRecord = getRecord$9(state);
    state[/* customGeometryRecord */24] = _addSharableGeometryComponent(/* tuple */[
          uid,
          component,
          getGameObject$6(component, customGeometryRecord)
        ], /* tuple */[
          increaseGroupCount$4,
          handleAddComponent$5
        ], customGeometryRecord);
    return state;
  }
  
  function addBasicMaterialComponent(uid, component, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var basicMaterialRecord = getRecord$1(state);
    state[/* basicMaterialRecord */16] = _addSharableComponent(/* tuple */[
          uid,
          component,
          gameObjectRecord[/* basicMaterialMap */27],
          getGameObject$4(component, basicMaterialRecord)
        ], /* tuple */[
          increaseGroupCount$2,
          handleAddComponent$3
        ], basicMaterialRecord);
    return state;
  }
  
  function addLightMaterialComponent(uid, component, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var lightMaterialRecord = getRecord$3(state);
    state[/* lightMaterialRecord */17] = _addSharableComponent(/* tuple */[
          uid,
          component,
          gameObjectRecord[/* lightMaterialMap */28],
          getGameObject$5(component, lightMaterialRecord)
        ], /* tuple */[
          increaseGroupCount$3,
          handleAddComponent$4
        ], lightMaterialRecord);
    return state;
  }
  
  function addMeshRendererComponent(uid, component, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    return _addComponentWithState(/* tuple */[
                uid,
                component,
                gameObjectRecord[/* meshRendererMap */26]
              ], handleAddComponent$8, state);
  }
  
  function addDirectionLightComponent(uid, component, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var directionLightRecord = state[/* directionLightRecord */21];
    state[/* directionLightRecord */21] = _addComponent(/* tuple */[
          uid,
          component,
          gameObjectRecord[/* directionLightMap */31]
        ], handleAddComponent$6, directionLightRecord);
    return state;
  }
  
  function addPointLightComponent(uid, component, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var pointLightRecord = state[/* pointLightRecord */22];
    state[/* pointLightRecord */22] = _addComponent(/* tuple */[
          uid,
          component,
          gameObjectRecord[/* pointLightMap */32]
        ], handleAddComponent$1, pointLightRecord);
    return state;
  }
  
  
  /* ComponentMapService-Wonderjs Not a pure module */
  
  function create$25(state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var match = create$13(gameObjectRecord);
    var uid = match[1];
    state[/* gameObjectRecord */11] = match[0];
    var match$1 = create$1(state);
    return /* tuple */[
            addTransformComponent(uid, match$1[1], match$1[0]),
            uid
          ];
  }
  
  
  /* CreateTransformMainService-Wonderjs Not a pure module */
  
  function getMaxDisposeCount(record) {
    return unsafeGetMemory(record)[/* maxDisposeCount */0];
  }
  
  function getMaxTypeArrayPoolSize(record) {
    return unsafeGetMemory(record)[/* maxTypeArrayPoolSize */1];
  }
  
  function getMaxBigTypeArrayPoolSize(record) {
    return unsafeGetMemory(record)[/* maxBigTypeArrayPoolSize */2];
  }
  
  
  /* OperateSettingService-Wonderjs Not a pure module */
  
  var isAlive$5 = isComponentAlive;
  
  function _deleteBySwapGameObjectMapData(mappedSourceIndex, lastComponentIndex, gameObjectMap) {
    var lastGameObject = unsafeGet$1(lastComponentIndex, gameObjectMap);
    undefined_to_opt(set$1(mappedSourceIndex, lastGameObject, set$1(lastComponentIndex, unsafeGet$1(mappedSourceIndex, gameObjectMap), gameObjectMap)).pop());
    return gameObjectMap;
  }
  
  var disposeData$1 = _deleteBySwapGameObjectMapData;
  
  function _swapIndex(mappedSourceIndex, lastComponentIndex, mappedIndexMap) {
    var match = mappedSourceIndex >= lastComponentIndex;
    if (match) {
      return mappedIndexMap;
    } else {
      return setMappedIndex(lastComponentIndex, mappedSourceIndex, mappedIndexMap);
    }
  }
  
  function swapData(param, param$1, deleteBySwapAndResetTypeArrFunc, typeArr) {
    var dataSize = param$1[1];
    var lastComponentIndex = param[1];
    var mappedSourceIndex = param[0];
    var match = mappedSourceIndex >= lastComponentIndex;
    if (match) {
      return typeArr;
    } else {
      return deleteBySwapAndResetTypeArrFunc(/* tuple */[
                  imul(mappedSourceIndex, dataSize),
                  imul(lastComponentIndex, dataSize)
                ], typeArr, dataSize, param$1[2]);
    }
  }
  
  function setMappedIndexMap(sourceIndex, mappedSourceIndex, lastComponentIndex, mappedIndexMap) {
    return markDisposed(sourceIndex, _swapIndex(mappedSourceIndex, lastComponentIndex, mappedIndexMap));
  }
  
  function handleBatchDisposeComponent$2(lightArray, param, record) {
    var handleDisposeFunc = param[1];
    var isAliveFunc = param[0];
    requireCheck((function () {
            return checkComponentShouldAliveWithBatchDispose(lightArray, isAliveFunc, record);
          }), getIsDebug(stateData));
    return reduceOneParam((function (record, light) {
                  return handleDisposeFunc(light, record);
                }), record, lightArray);
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  function getMappedIndexMap$1(param) {
    return param[/* mappedIndexMap */8];
  }
  
  
  /* No side effect */
  
  function isAlive$4(light, record) {
    return isAlive$5(light, getMappedIndexMap$1(record));
  }
  
  function _disposeData$1(sourceIndex, record) {
    var mappedIndexMap = record[/* mappedIndexMap */8];
    var index = record[/* index */0];
    var lastComponentIndex = index - 1 | 0;
    var mappedSourceIndex = getMappedIndex(sourceIndex, mappedIndexMap);
    var gameObjectMap = disposeData$1(mappedSourceIndex, lastComponentIndex, record[/* gameObjectMap */9]);
    return /* record */[
            /* index */index - 1 | 0,
            /* buffer */record[/* buffer */1],
            /* colors */swapData(/* tuple */[
                  mappedSourceIndex,
                  lastComponentIndex
                ], /* tuple */[
                  mappedIndexMap,
                  getColorsSize$2(/* () */0),
                  getDefaultColor(/* () */0)
                ], deleteBySwapAndResetFloat32TypeArr, record[/* colors */2]),
            /* intensities */swapData(/* tuple */[
                  mappedSourceIndex,
                  lastComponentIndex
                ], /* tuple */[
                  mappedIndexMap,
                  getIntensitiesSize$1(/* () */0),
                  getDefaultIntensity(/* () */0)
                ], deleteSingleValueBySwapAndResetFloat32TypeArr, record[/* intensities */3]),
            /* constants */swapData(/* tuple */[
                  mappedSourceIndex,
                  lastComponentIndex
                ], /* tuple */[
                  mappedIndexMap,
                  getConstantsSize(/* () */0),
                  getDefaultConstant(/* () */0)
                ], deleteSingleValueBySwapAndResetFloat32TypeArr, record[/* constants */4]),
            /* linears */swapData(/* tuple */[
                  mappedSourceIndex,
                  lastComponentIndex
                ], /* tuple */[
                  mappedIndexMap,
                  getLinearsSize(/* () */0),
                  getDefaultLinear(/* () */0)
                ], deleteSingleValueBySwapAndResetFloat32TypeArr, record[/* linears */5]),
            /* quadratics */swapData(/* tuple */[
                  mappedSourceIndex,
                  lastComponentIndex
                ], /* tuple */[
                  mappedIndexMap,
                  getQuadraticsSize(/* () */0),
                  getDefaultQuadratic(/* () */0)
                ], deleteSingleValueBySwapAndResetFloat32TypeArr, record[/* quadratics */6]),
            /* ranges */swapData(/* tuple */[
                  mappedSourceIndex,
                  lastComponentIndex
                ], /* tuple */[
                  mappedIndexMap,
                  getRangesSize(/* () */0),
                  getDefaultRange(/* () */0)
                ], deleteSingleValueBySwapAndResetFloat32TypeArr, record[/* ranges */7]),
            /* mappedIndexMap */setMappedIndexMap(sourceIndex, mappedSourceIndex, lastComponentIndex, mappedIndexMap),
            /* gameObjectMap */gameObjectMap
          ];
  }
  
  function handleBatchDisposeComponent$1(lightArray, record) {
    return handleBatchDisposeComponent$2(lightArray, /* tuple */[
                isAlive$4,
                _disposeData$1
              ], record);
  }
  
  
  /* DisposeLightService-Wonderjs Not a pure module */
  
  function isAlive$6(meshRenderer, param) {
    return isAlive$1(meshRenderer, param[/* disposedIndexArray */6]);
  }
  
  function _disposeData$2(meshRenderer, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* buffer */record[/* buffer */1],
            /* drawModes */deleteAndResetUint8(meshRenderer, getDefaultDrawMode(/* () */0), record[/* drawModes */2]),
            /* basicMaterialRenderGameObjectMap */disposeSparseMapData(meshRenderer, record[/* basicMaterialRenderGameObjectMap */3]),
            /* lightMaterialRenderGameObjectMap */disposeSparseMapData(meshRenderer, record[/* lightMaterialRenderGameObjectMap */4]),
            /* gameObjectMap */disposeSparseMapData(meshRenderer, record[/* gameObjectMap */5]),
            /* disposedIndexArray */record[/* disposedIndexArray */6]
          ];
  }
  
  function handleBatchDisposeComponent$3(meshRendererArray, record) {
    requireCheck((function () {
            return checkComponentShouldAliveWithBatchDispose(meshRendererArray, isAlive$6, record);
          }), getIsDebug(stateData));
    var match = meshRendererArray.length;
    if (match !== 0) {
      var record_000 = /* index */record[/* index */0];
      var record_001 = /* buffer */record[/* buffer */1];
      var record_002 = /* drawModes */record[/* drawModes */2];
      var record_003 = /* basicMaterialRenderGameObjectMap */record[/* basicMaterialRenderGameObjectMap */3];
      var record_004 = /* lightMaterialRenderGameObjectMap */record[/* lightMaterialRenderGameObjectMap */4];
      var record_005 = /* gameObjectMap */record[/* gameObjectMap */5];
      var record_006 = /* disposedIndexArray */record[/* disposedIndexArray */6].concat(meshRendererArray);
      var record$1 = /* record */[
        record_000,
        record_001,
        record_002,
        record_003,
        record_004,
        record_005,
        record_006
      ];
      return reduceOneParam((function (record, meshRenderer) {
                    return _disposeData$2(meshRenderer, record);
                  }), record$1, meshRendererArray);
    } else {
      return record;
    }
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  function isAlive$7(light, record) {
    return isAlive$5(light, getMappedIndexMap(record));
  }
  
  function _disposeData$3(sourceIndex, record) {
    var mappedIndexMap = record[/* mappedIndexMap */4];
    var index = record[/* index */0];
    var lastComponentIndex = index - 1 | 0;
    var mappedSourceIndex = getMappedIndex(sourceIndex, mappedIndexMap);
    var gameObjectMap = disposeData$1(mappedSourceIndex, lastComponentIndex, record[/* gameObjectMap */5]);
    return /* record */[
            /* index */index - 1 | 0,
            /* buffer */record[/* buffer */1],
            /* colors */swapData(/* tuple */[
                  mappedSourceIndex,
                  lastComponentIndex
                ], /* tuple */[
                  mappedIndexMap,
                  getColorsSize$1(/* () */0),
                  getDefaultColor$1(/* () */0)
                ], deleteBySwapAndResetFloat32TypeArr, record[/* colors */2]),
            /* intensities */swapData(/* tuple */[
                  mappedSourceIndex,
                  lastComponentIndex
                ], /* tuple */[
                  mappedIndexMap,
                  getIntensitiesSize(/* () */0),
                  getDefaultIntensity$1(/* () */0)
                ], deleteSingleValueBySwapAndResetFloat32TypeArr, record[/* intensities */3]),
            /* mappedIndexMap */setMappedIndexMap(sourceIndex, mappedSourceIndex, lastComponentIndex, mappedIndexMap),
            /* gameObjectMap */gameObjectMap
          ];
  }
  
  function handleBatchDisposeComponent$4(lightArray, record) {
    return handleBatchDisposeComponent$2(lightArray, /* tuple */[
                isAlive$7,
                _disposeData$3
              ], record);
  }
  
  
  /* DisposeLightService-Wonderjs Not a pure module */
  
  function isAlive$8(cameraView, param) {
    return isAlive$1(cameraView, param[/* disposedIndexArray */2]);
  }
  
  function _disposeData$4(cameraView, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* gameObjectMap */disposeSparseMapData(cameraView, record[/* gameObjectMap */1]),
            /* disposedIndexArray */record[/* disposedIndexArray */2]
          ];
  }
  
  function handleBatchDisposeComponent$5(cameraViewArray, record) {
    requireCheck((function () {
            return checkComponentShouldAliveWithBatchDispose(cameraViewArray, isAlive$8, record);
          }), getIsDebug(stateData));
    return reduceOneParam((function (record, cameraView) {
                  return _disposeData$4(cameraView, record);
                }), /* record */[
                /* index */record[/* index */0],
                /* gameObjectMap */record[/* gameObjectMap */1],
                /* disposedIndexArray */record[/* disposedIndexArray */2].concat(cameraViewArray)
              ], cameraViewArray);
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  function isAlive$9(geometry, param) {
    var disposedIndexArray = param[/* disposedIndexArray */7];
    return isAlive$1(geometry, disposedIndexArray);
  }
  
  function _disposeData$5(geometry, boxGeometryRecord) {
    var disposedIndexArray = boxGeometryRecord[/* disposedIndexArray */7];
    return /* record */[
            /* index */boxGeometryRecord[/* index */0],
            /* vertices */boxGeometryRecord[/* vertices */1],
            /* texCoords */boxGeometryRecord[/* texCoords */2],
            /* normals */boxGeometryRecord[/* normals */3],
            /* indices */boxGeometryRecord[/* indices */4],
            /* gameObjectMap */disposeSparseMapData(geometry, boxGeometryRecord[/* gameObjectMap */5]),
            /* groupCountMap */disposeSparseMapData(geometry, boxGeometryRecord[/* groupCountMap */6]),
            /* disposedIndexArray */push$1(geometry, disposedIndexArray)
          ];
  }
  
  function handleBatchDisposeComponent$6(geometryArray, state) {
    requireCheck((function () {
            return checkComponentShouldAliveWithBatchDispose(geometryArray, isAlive$9, getRecord$8(state));
          }), getIsDebug(stateData));
    var boxGeometryRecord = getRecord$8(state);
    var match = reduceOneParam((function (param, geometry) {
            var boxGeometryRecord = param[1];
            var geometryNeedDisposeVboBufferArr = param[0];
            var match = isGroupGeometry(geometry, boxGeometryRecord);
            if (match) {
              return /* tuple */[
                      geometryNeedDisposeVboBufferArr,
                      decreaseGroupCount(geometry, boxGeometryRecord)
                    ];
            } else {
              return /* tuple */[
                      push$1(geometry, geometryNeedDisposeVboBufferArr),
                      _disposeData$5(geometry, boxGeometryRecord)
                    ];
            }
          }), /* tuple */[
          /* array */[],
          boxGeometryRecord
        ], geometryArray);
    var newrecord = caml_array_dup(state);
    return /* tuple */[
            (newrecord[/* boxGeometryRecord */23] = match[1], newrecord),
            match[0]
          ];
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  function disposeTextureIndices(material, textureCountPerMaterial, textureIndices) {
    var sourceIndex = getTextureIndicesIndex$1(material, textureCountPerMaterial);
    var defaultIndex = getDefaultTextureIndex(/* () */0);
    for(var i = 0 ,i_finish = getTextureIndicesSize(textureCountPerMaterial) - 1 | 0; i <= i_finish; ++i){
      textureIndices[sourceIndex + i | 0] = defaultIndex;
    }
    return textureIndices;
  }
  
  
  /* No side effect */
  
  function isAlive$10(material, param) {
    return isAlive$1(material, param[/* disposedIndexArray */10]);
  }
  
  function _disposeData$6(material, textureCountPerMaterial, basicMaterialRecord) {
    var match = disposeData(material, /* tuple */[
          basicMaterialRecord[/* shaderIndices */2],
          basicMaterialRecord[/* groupCountMap */9],
          basicMaterialRecord[/* gameObjectMap */8]
        ], getDefaultShaderIndex(/* () */0));
    return /* record */[
            /* index */basicMaterialRecord[/* index */0],
            /* buffer */basicMaterialRecord[/* buffer */1],
            /* shaderIndices */match[0],
            /* colors */deleteAndResetFloat32TypeArr(getColorIndex(material), getColorsSize(/* () */0), basicMaterialRecord[/* defaultColor */7], basicMaterialRecord[/* colors */3]),
            /* textureIndices */disposeTextureIndices(material, textureCountPerMaterial, basicMaterialRecord[/* textureIndices */4]),
            /* mapUnits */deleteAndResetUint8(getMapUnitIndex(material), getDefaultUnit(/* () */0), basicMaterialRecord[/* mapUnits */5]),
            /* textureCountMap */setCount(material, getDefaultCount(/* () */0), basicMaterialRecord[/* textureCountMap */6]),
            /* defaultColor */basicMaterialRecord[/* defaultColor */7],
            /* gameObjectMap */match[2],
            /* groupCountMap */match[1],
            /* disposedIndexArray */basicMaterialRecord[/* disposedIndexArray */10],
            /* nameMap */disposeSparseMapData(material, basicMaterialRecord[/* nameMap */11]),
            /* materialArrayForWorkerInit */basicMaterialRecord[/* materialArrayForWorkerInit */12]
          ];
  }
  
  function _handleDispose(disposedIndexArray, material, textureCountPerMaterial, basicMaterialRecord) {
    var match = isGroupMaterial(material, basicMaterialRecord);
    if (match) {
      return decreaseGroupCount$2(material, basicMaterialRecord);
    } else {
      var init = _disposeData$6(material, textureCountPerMaterial, basicMaterialRecord);
      return /* record */[
              /* index */init[/* index */0],
              /* buffer */init[/* buffer */1],
              /* shaderIndices */init[/* shaderIndices */2],
              /* colors */init[/* colors */3],
              /* textureIndices */init[/* textureIndices */4],
              /* mapUnits */init[/* mapUnits */5],
              /* textureCountMap */init[/* textureCountMap */6],
              /* defaultColor */init[/* defaultColor */7],
              /* gameObjectMap */init[/* gameObjectMap */8],
              /* groupCountMap */init[/* groupCountMap */9],
              /* disposedIndexArray */addDisposeIndex(material, disposedIndexArray),
              /* nameMap */init[/* nameMap */11],
              /* materialArrayForWorkerInit */init[/* materialArrayForWorkerInit */12]
            ];
    }
  }
  
  function handleBatchDisposeComponent$7(materialArray, state) {
    requireCheck((function () {
            return checkComponentShouldAliveWithBatchDispose(materialArray, isAlive$10, getRecord$1(state));
          }), getIsDebug(stateData));
    var basicMaterialRecord = getRecord$1(state);
    var disposedIndexArray = basicMaterialRecord[/* disposedIndexArray */10];
    var textureCountPerMaterial = getTextureCountPerMaterial(state[/* settingRecord */1]);
    reduceOneParam((function (basicMaterialRecord, material) {
            return _handleDispose(disposedIndexArray, material, textureCountPerMaterial, basicMaterialRecord);
          }), basicMaterialRecord, materialArray);
    return state;
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  function isAlive$11(material, param) {
    return isAlive$1(material, param[/* disposedIndexArray */15]);
  }
  
  function _disposeData$7(material, textureCountPerMaterial, lightMaterialRecord) {
    var match = disposeData(material, /* tuple */[
          lightMaterialRecord[/* shaderIndices */2],
          lightMaterialRecord[/* groupCountMap */14],
          lightMaterialRecord[/* gameObjectMap */13]
        ], getDefaultShaderIndex(/* () */0));
    return /* record */[
            /* index */lightMaterialRecord[/* index */0],
            /* buffer */lightMaterialRecord[/* buffer */1],
            /* shaderIndices */match[0],
            /* diffuseColors */deleteAndResetFloat32TypeArr(getDiffuseColorIndex(material), getDiffuseColorsSize(/* () */0), lightMaterialRecord[/* defaultDiffuseColor */10], lightMaterialRecord[/* diffuseColors */3]),
            /* specularColors */deleteAndResetFloat32TypeArr(getSpecularColorIndex(material), getSpecularColorsSize(/* () */0), lightMaterialRecord[/* defaultSpecularColor */11], lightMaterialRecord[/* specularColors */4]),
            /* shininess */deleteAndResetFloat32(getShininessIndex(material), lightMaterialRecord[/* defaultShininess */12], lightMaterialRecord[/* shininess */5]),
            /* textureIndices */disposeTextureIndices(material, textureCountPerMaterial, lightMaterialRecord[/* textureIndices */6]),
            /* diffuseMapUnits */deleteAndResetUint8(getDiffuseMapUnitIndex(material), getDefaultUnit(/* () */0), lightMaterialRecord[/* diffuseMapUnits */7]),
            /* specularMapUnits */deleteAndResetUint8(getDiffuseMapUnitIndex(material), getDefaultUnit(/* () */0), lightMaterialRecord[/* specularMapUnits */8]),
            /* textureCountMap */setCount(material, getDefaultCount(/* () */0), lightMaterialRecord[/* textureCountMap */9]),
            /* defaultDiffuseColor */lightMaterialRecord[/* defaultDiffuseColor */10],
            /* defaultSpecularColor */lightMaterialRecord[/* defaultSpecularColor */11],
            /* defaultShininess */lightMaterialRecord[/* defaultShininess */12],
            /* gameObjectMap */match[2],
            /* groupCountMap */match[1],
            /* disposedIndexArray */lightMaterialRecord[/* disposedIndexArray */15],
            /* nameMap */disposeSparseMapData(material, lightMaterialRecord[/* nameMap */16]),
            /* materialArrayForWorkerInit */lightMaterialRecord[/* materialArrayForWorkerInit */17]
          ];
  }
  
  function _handleDispose$1(disposedIndexArray, material, textureCountPerMaterial, lightMaterialRecord) {
    var match = isGroupMaterial$1(material, lightMaterialRecord);
    if (match) {
      return decreaseGroupCount$3(material, lightMaterialRecord);
    } else {
      var init = _disposeData$7(material, textureCountPerMaterial, lightMaterialRecord);
      return /* record */[
              /* index */init[/* index */0],
              /* buffer */init[/* buffer */1],
              /* shaderIndices */init[/* shaderIndices */2],
              /* diffuseColors */init[/* diffuseColors */3],
              /* specularColors */init[/* specularColors */4],
              /* shininess */init[/* shininess */5],
              /* textureIndices */init[/* textureIndices */6],
              /* diffuseMapUnits */init[/* diffuseMapUnits */7],
              /* specularMapUnits */init[/* specularMapUnits */8],
              /* textureCountMap */init[/* textureCountMap */9],
              /* defaultDiffuseColor */init[/* defaultDiffuseColor */10],
              /* defaultSpecularColor */init[/* defaultSpecularColor */11],
              /* defaultShininess */init[/* defaultShininess */12],
              /* gameObjectMap */init[/* gameObjectMap */13],
              /* groupCountMap */init[/* groupCountMap */14],
              /* disposedIndexArray */addDisposeIndex(material, disposedIndexArray),
              /* nameMap */init[/* nameMap */16],
              /* materialArrayForWorkerInit */init[/* materialArrayForWorkerInit */17]
            ];
    }
  }
  
  function handleBatchDisposeComponent$8(materialArray, state) {
    requireCheck((function () {
            return checkComponentShouldAliveWithBatchDispose(materialArray, isAlive$11, getRecord$3(state));
          }), getIsDebug(stateData));
    var lightMaterialRecord = getRecord$3(state);
    var disposedIndexArray = lightMaterialRecord[/* disposedIndexArray */15];
    var textureCountPerMaterial = getTextureCountPerMaterial(state[/* settingRecord */1]);
    reduceOneParam((function (lightMaterialRecord, material) {
            return _handleDispose$1(disposedIndexArray, material, textureCountPerMaterial, lightMaterialRecord);
          }), lightMaterialRecord, materialArray);
    return state;
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  function isAlive$12(geometry, param) {
    var disposedIndexArray = param[/* disposedIndexArray */17];
    return isAlive$1(geometry, disposedIndexArray);
  }
  
  function _disposeData$8(geometry, customGeometryRecord) {
    var disposeCount = customGeometryRecord[/* disposeCount */14];
    var disposedIndexArray = customGeometryRecord[/* disposedIndexArray */17];
    var disposedIndexMap = customGeometryRecord[/* disposedIndexMap */18];
    return /* record */[
            /* index */customGeometryRecord[/* index */0],
            /* buffer */customGeometryRecord[/* buffer */1],
            /* vertices */customGeometryRecord[/* vertices */2],
            /* texCoords */customGeometryRecord[/* texCoords */3],
            /* normals */customGeometryRecord[/* normals */4],
            /* indices */customGeometryRecord[/* indices */5],
            /* verticesInfos */customGeometryRecord[/* verticesInfos */6],
            /* texCoordsInfos */customGeometryRecord[/* texCoordsInfos */7],
            /* normalsInfos */customGeometryRecord[/* normalsInfos */8],
            /* indicesInfos */customGeometryRecord[/* indicesInfos */9],
            /* verticesOffset */customGeometryRecord[/* verticesOffset */10],
            /* texCoordsOffset */customGeometryRecord[/* texCoordsOffset */11],
            /* normalsOffset */customGeometryRecord[/* normalsOffset */12],
            /* indicesOffset */customGeometryRecord[/* indicesOffset */13],
            /* disposeCount */disposeCount + 1 | 0,
            /* gameObjectMap */disposeSparseMapData(geometry, customGeometryRecord[/* gameObjectMap */15]),
            /* groupCountMap */disposeSparseMapData(geometry, customGeometryRecord[/* groupCountMap */16]),
            /* disposedIndexArray */push$1(geometry, disposedIndexArray),
            /* disposedIndexMap */set$1(geometry, true, disposedIndexMap),
            /* aliveIndexArray */customGeometryRecord[/* aliveIndexArray */19]
          ];
  }
  
  function handleBatchDisposeComponent$9(geometryArray, state) {
    requireCheck((function () {
            return checkComponentShouldAliveWithBatchDispose(geometryArray, isAlive$12, getRecord$9(state));
          }), getIsDebug(stateData));
    var customGeometryRecord = getRecord$9(state);
    var match = reduceOneParam((function (param, geometry) {
            var customGeometryRecord = param[1];
            var geometryNeedDisposeVboBufferArr = param[0];
            var match = isGroupGeometry$1(geometry, customGeometryRecord);
            if (match) {
              return /* tuple */[
                      geometryNeedDisposeVboBufferArr,
                      decreaseGroupCount$4(geometry, customGeometryRecord)
                    ];
            } else {
              return /* tuple */[
                      push$1(geometry, geometryNeedDisposeVboBufferArr),
                      _disposeData$8(geometry, customGeometryRecord)
                    ];
            }
          }), /* tuple */[
          /* array */[],
          customGeometryRecord
        ], geometryArray);
    var newrecord = caml_array_dup(state);
    return /* tuple */[
            (newrecord[/* customGeometryRecord */24] = match[1], newrecord),
            match[0]
          ];
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  function unsafeGetGameObject$7(objectInstance, param) {
    return unsafeGetGameObject$1(objectInstance, param[/* gameObjectMap */3]);
  }
  
  
  /* GameObjectMapService-Wonderjs Not a pure module */
  
  var getObjectInstanceTransformIndex$1 = unsafeGet$1;
  
  function getObjectInstanceTransformCount(objectInstanceTransformIndex) {
    return objectInstanceTransformIndex;
  }
  
  function _getStartIndexAndEndIndex(sourceInstance, objectInstanceCountPerSourceInstance, objectInstanceTransformIndex, objectInstanceTransformCollections) {
    var startIndex = getObjectInstanceTransformCollectionsIndex(sourceInstance, objectInstanceCountPerSourceInstance);
    return ensureCheck((function (param) {
                  var endIndex = param[1];
                  var startIndex = param[0];
                  test(buildAssertMessage("endIndex should <= objectInstanceTransformCollections->length", "not"), (function () {
                          return Operators[/* <= */11](endIndex, objectInstanceTransformCollections.length);
                        }));
                  return test(buildAssertMessage("endIndex + 1 should >= startIndex", "not"), (function () {
                                return Operators[/* >= */7](endIndex + 1 | 0, startIndex);
                              }));
                }), getIsDebug(stateData), /* tuple */[
                startIndex,
                startIndex + (objectInstanceTransformIndex - 1 | 0) | 0
              ]);
  }
  
  function reduceObjectInstanceTransformCollection(param, initialValue, reduceFunc) {
    var objectInstanceTransformCollections = param[3];
    var result = initialValue;
    var match = _getStartIndexAndEndIndex(param[0], param[1], param[2], objectInstanceTransformCollections);
    for(var i = match[0] ,i_finish = match[1]; i <= i_finish; ++i){
      result = reduceFunc(result, getUint32_1(i, objectInstanceTransformCollections));
    }
    return result;
  }
  
  function getObjectInstanceTransformArray(sourceInstance, objectInstanceCountPerSourceInstance, objectInstanceTransformIndexMap, objectInstanceTransformCollections) {
    var objectInstanceTransformIndex = unsafeGet$1(sourceInstance, objectInstanceTransformIndexMap);
    return reduceObjectInstanceTransformCollection(/* tuple */[
                sourceInstance,
                objectInstanceCountPerSourceInstance,
                objectInstanceTransformIndex,
                objectInstanceTransformCollections
              ], /* array */[], (function (objectInstanceTransformArray, objectInstanceTransform) {
                  return push$1(objectInstanceTransform, objectInstanceTransformArray);
                }));
  }
  
  function resetObjectInstanceTransformIndexMap(sourceInstance, objectInstanceTransformIndexMap) {
    return set$1(sourceInstance, 0, objectInstanceTransformIndexMap);
  }
  
  function batchRemoveObjectInstanceTransform(sourceInstance, objectInstanceTransformArray, objectInstanceCountPerSourceInstance, param) {
    var objectInstanceTransformCollections = param[1];
    var objectInstanceTransformIndexMap = param[0];
    var objectInstanceTransformIndex = unsafeGet$1(sourceInstance, objectInstanceTransformIndexMap);
    return ensureCheck((function (param) {
                  var objectInstanceTransformIndex = unsafeGet$1(sourceInstance, param[0]);
                  return test(buildAssertMessage("objectInstanceTransformIndex should >= 0", "is " + (String(objectInstanceTransformIndex) + "")), (function () {
                                return Operators[/* >= */7](objectInstanceTransformIndex, 0);
                              }));
                }), getIsDebug(stateData), objectInstanceTransformIndex !== 0 ? /* tuple */[
                  set$1(sourceInstance, objectInstanceTransformIndex - objectInstanceTransformArray.length | 0, objectInstanceTransformIndexMap),
                  objectInstanceTransformArray.reduce((function (objectInstanceTransformCollections, objectInstanceTransform, i) {
                          return deleteSingleValueBySwapUint32TypeArr(objectInstanceTransformCollections.indexOf(objectInstanceTransform), getObjectInstanceTransformIndex(sourceInstance, objectInstanceTransformIndex - i | 0, objectInstanceCountPerSourceInstance), objectInstanceTransformCollections);
                        }), objectInstanceTransformCollections)
                ] : /* tuple */[
                  objectInstanceTransformIndexMap,
                  objectInstanceTransformCollections
                ]);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function isAlive$13(objectInstance, objectInstanceRecord) {
    return isAlive$1(objectInstance, objectInstanceRecord[/* disposedIndexArray */2]);
  }
  
  function _unsafeGetSourceInstance(objectInstance, param) {
    return ensureCheck((function (sourceInstance) {
                  return test(buildAssertMessage("souceInstance exist", "not"), (function () {
                                return assertNullableExist(sourceInstance);
                              }));
                }), getIsDebug(stateData), unsafeGet$1(objectInstance, param[/* sourceInstanceMap */1]));
  }
  
  function _disposeData$9(objectInstance, state) {
    var objectInstanceRecord = state[/* objectInstanceRecord */8];
    var newrecord = caml_array_dup(state);
    newrecord[/* objectInstanceRecord */8] = /* record */[
      /* index */objectInstanceRecord[/* index */0],
      /* sourceInstanceMap */disposeSparseMapData(objectInstance, objectInstanceRecord[/* sourceInstanceMap */1]),
      /* disposedIndexArray */objectInstanceRecord[/* disposedIndexArray */2],
      /* gameObjectMap */disposeSparseMapData(objectInstance, objectInstanceRecord[/* gameObjectMap */3])
    ];
    return newrecord;
  }
  
  function _batchDisposeObjectInstance(sourceInstance, objectInstanceTransformArray, state) {
    var match = getRecord$10(state);
    var objectInstanceCountPerSourceInstance = getObjectInstanceCountPerSourceInstance(state[/* settingRecord */1]);
    batchRemoveObjectInstanceTransform(sourceInstance, objectInstanceTransformArray, objectInstanceCountPerSourceInstance, /* tuple */[
          match[/* objectInstanceTransformIndexMap */1],
          match[/* objectInstanceTransformCollections */4]
        ]);
    return state;
  }
  
  function handleBatchDisposeComponent$10(objectInstanceArray, state) {
    var objectInstanceRecord = state[/* objectInstanceRecord */8];
    var gameObjectRecord = state[/* gameObjectRecord */11];
    requireCheck((function () {
            var objectInstanceLen = objectInstanceArray.length;
            checkComponentShouldAliveWithBatchDispose(objectInstanceArray, isAlive$13, objectInstanceRecord);
            test(buildAssertMessage("objectInstanceArray has one objectInstance at least", "" + (String(objectInstanceLen) + "")), (function () {
                    return Operators[/* > */5](objectInstanceLen, 0);
                  }));
            return test(buildAssertMessage("all objectInstance belong to the same sourceInstance", "not"), (function () {
                          var sourceInstance = _unsafeGetSourceInstance(caml_array_get(objectInstanceArray, 0), objectInstanceRecord);
                          return forEach((function (objectInstance) {
                                        return Operators[/* = */0](_unsafeGetSourceInstance(objectInstance, objectInstanceRecord), sourceInstance);
                                      }), objectInstanceArray);
                        }));
          }), getIsDebug(stateData));
    var objectInstanceRecord_000 = /* index */objectInstanceRecord[/* index */0];
    var objectInstanceRecord_001 = /* sourceInstanceMap */objectInstanceRecord[/* sourceInstanceMap */1];
    var objectInstanceRecord_002 = /* disposedIndexArray */objectInstanceRecord[/* disposedIndexArray */2].concat(objectInstanceArray);
    var objectInstanceRecord_003 = /* gameObjectMap */objectInstanceRecord[/* gameObjectMap */3];
    var objectInstanceRecord$1 = /* record */[
      objectInstanceRecord_000,
      objectInstanceRecord_001,
      objectInstanceRecord_002,
      objectInstanceRecord_003
    ];
    var objectInstanceTransformArray = objectInstanceArray.map((function (objectInstance) {
            return unsafeGetTransformComponent(unsafeGetGameObject$7(objectInstance, objectInstanceRecord$1), gameObjectRecord);
          }));
    var sourceInstance = _unsafeGetSourceInstance(caml_array_get(objectInstanceArray, 0), objectInstanceRecord$1);
    var newrecord = caml_array_dup(state);
    newrecord[/* objectInstanceRecord */8] = objectInstanceRecord$1;
    var state$1 = _batchDisposeObjectInstance(sourceInstance, objectInstanceTransformArray, newrecord);
    return reduceState((function (state, objectInstance) {
                  return _disposeData$9(objectInstance, state);
                }), state$1, objectInstanceArray);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function getFloat32ArrayPoolMap(record) {
    return record[/* float32ArrayPoolMap */0];
  }
  
  function getUint16ArrayPoolMap(record) {
    return record[/* uint16ArrayPoolMap */1];
  }
  
  function _addTypeArrayToPool(count, typeArray, maxSize, map) {
    var match = get$3(count, map);
    if (match !== undefined) {
      var arr = match;
      var len = arr.length;
      if (len >= maxSize) {
        return map;
      } else {
        arr.push(typeArray);
        return map;
      }
    } else {
      return set$1(count, /* array */[typeArray], map);
    }
  }
  
  function addFloat32TypeArrayToPool(typeArray, maxSize, map) {
    return _addTypeArrayToPool(typeArray.length, typeArray, maxSize, map);
  }
  
  function _getTypeArrayFromPool(count, map) {
    var match = get$3(count, map);
    if (match !== undefined) {
      var arr = match;
      var match$1 = arr.length;
      if (match$1 !== 0) {
        return undefined_to_opt(arr.pop());
      } else {
        return undefined;
      }
    }
    
  }
  
  function getFloat32TypeArrayFromPool(count, record) {
    return _getTypeArrayFromPool(count, record[/* float32ArrayPoolMap */0]);
  }
  
  function _addAllTypeArrayToPool(typeArrayMap, maxSize, map, addTypeArrayToPoolFunc) {
    forEachValid((function (typeArray) {
            addTypeArrayToPoolFunc(typeArray, maxSize, map);
            return /* () */0;
          }), typeArrayMap);
    return map;
  }
  
  function addAllFloat32TypeArrayToPool(typeArrayMap, maxSize, map) {
    return _addAllTypeArrayToPool(typeArrayMap, maxSize, map, addFloat32TypeArrayToPool);
  }
  
  
  /* SparseMapService-Wonderjs Not a pure module */
  
  function disposeMatrixFloat32ArrayMap(sourceInstance, maxBigTypeArrayPoolSize, matrixFloat32ArrayMap, typeArrayPoolRecord) {
    var match = get$3(sourceInstance, matrixFloat32ArrayMap);
    if (match !== undefined) {
      addFloat32TypeArrayToPool(valFromOption(match), maxBigTypeArrayPoolSize, getFloat32ArrayPoolMap(typeArrayPoolRecord));
    }
    return disposeSparseMapData(sourceInstance, matrixFloat32ArrayMap);
  }
  
  var disposeMatrixInstanceBufferCapacityMap = disposeSparseMapData;
  
  var disposeIsSendTransformMatrixDataMap = disposeSparseMapData;
  
  
  /* TypeArrayPoolService-Wonderjs Not a pure module */
  
  function getObjectInstanceTransformArray$1(sourceInstance, state) {
    var match = getRecord$10(state);
    return getObjectInstanceTransformArray(sourceInstance, getObjectInstanceCountPerSourceInstance(state[/* settingRecord */1]), match[/* objectInstanceTransformIndexMap */1], match[/* objectInstanceTransformCollections */4]);
  }
  
  function getObjectInstanceArray(sourceInstance, state) {
    var transformRecord = getRecord(state);
    return getObjectInstanceTransformArray$1(sourceInstance, state).map((function (transform) {
                  return unsafeGetGameObject(transform, transformRecord);
                }));
  }
  
  
  /* BufferSettingService-Wonderjs Not a pure module */
  
  function isAlive$14(sourceInstance, param) {
    return isAlive$1(sourceInstance, param[/* disposedIndexArray */8]);
  }
  
  function _disposeObjectInstanceGameObject(objectInstanceGameObjectArr, isKeepOrder, batchDisposeGameObjectFunc, state) {
    return ensureCheck((function (param) {
                  var sourceInstanceNeedDisposeVboBufferArr = param[3];
                  var customGeometryNeedDisposeVboBufferArr = param[2];
                  var boxGeometryNeedDisposeVboBufferArr = param[1];
                  test(buildAssertMessage("boxGeometryNeedDisposeVboBufferArr from object instance gameObject should be empty", "is " + (String(boxGeometryNeedDisposeVboBufferArr) + "")), (function () {
                          return Operators[/* = */0](boxGeometryNeedDisposeVboBufferArr.length, 0);
                        }));
                  test(buildAssertMessage("customGeometryNeedDisposeVboBufferArr from object instance gameObject should be empty", "is " + (String(customGeometryNeedDisposeVboBufferArr) + "")), (function () {
                          return Operators[/* = */0](customGeometryNeedDisposeVboBufferArr.length, 0);
                        }));
                  return test(buildAssertMessage("sourceInstanceNeedDisposeVboBufferArr from object instance gameObject should be empty", "is " + (String(sourceInstanceNeedDisposeVboBufferArr) + "")), (function () {
                                return Operators[/* = */0](sourceInstanceNeedDisposeVboBufferArr.length, 0);
                              }));
                }), getIsDebug(stateData), _3(batchDisposeGameObjectFunc, objectInstanceGameObjectArr, isKeepOrder, state));
  }
  
  function _disposeData$10(sourceInstance, isKeepOrder, batchDisposeGameObjectFunc, state) {
    var record = getRecord$10(state);
    var objectInstanceGameObjectArr = getObjectInstanceArray(sourceInstance, state);
    var newrecord = caml_array_dup(state);
    newrecord[/* sourceInstanceRecord */7] = /* record */[
      /* index */record[/* index */0],
      /* objectInstanceTransformIndexMap */resetObjectInstanceTransformIndexMap(sourceInstance, record[/* objectInstanceTransformIndexMap */1]),
      /* buffer */record[/* buffer */2],
      /* isTransformStatics */deleteAndResetUint8(sourceInstance, getDefault(/* () */0), record[/* isTransformStatics */3]),
      /* objectInstanceTransformCollections */record[/* objectInstanceTransformCollections */4],
      /* matrixInstanceBufferCapacityMap */disposeMatrixInstanceBufferCapacityMap(sourceInstance, record[/* matrixInstanceBufferCapacityMap */5]),
      /* matrixFloat32ArrayMap */disposeMatrixFloat32ArrayMap(sourceInstance, getMaxBigTypeArrayPoolSize(state[/* settingRecord */1]), record[/* matrixFloat32ArrayMap */6], state[/* typeArrayPoolRecord */37]),
      /* isSendTransformMatrixDataMap */disposeIsSendTransformMatrixDataMap(sourceInstance, record[/* isSendTransformMatrixDataMap */7]),
      /* disposedIndexArray */record[/* disposedIndexArray */8],
      /* gameObjectMap */disposeSparseMapData(sourceInstance, record[/* gameObjectMap */9])
    ];
    return _disposeObjectInstanceGameObject(objectInstanceGameObjectArr, isKeepOrder, batchDisposeGameObjectFunc, newrecord)[0];
  }
  
  function handleBatchDisposeComponent$11(sourceInstanceArray, isKeepOrder, batchDisposeGameObjectFunc, state) {
    requireCheck((function () {
            return checkComponentShouldAliveWithBatchDispose(sourceInstanceArray, isAlive$14, getRecord$10(state));
          }), getIsDebug(stateData));
    var sourceInstanceRecord = getRecord$10(state);
    var newrecord = caml_array_dup(state);
    newrecord[/* sourceInstanceRecord */7] = /* record */[
      /* index */sourceInstanceRecord[/* index */0],
      /* objectInstanceTransformIndexMap */sourceInstanceRecord[/* objectInstanceTransformIndexMap */1],
      /* buffer */sourceInstanceRecord[/* buffer */2],
      /* isTransformStatics */sourceInstanceRecord[/* isTransformStatics */3],
      /* objectInstanceTransformCollections */sourceInstanceRecord[/* objectInstanceTransformCollections */4],
      /* matrixInstanceBufferCapacityMap */sourceInstanceRecord[/* matrixInstanceBufferCapacityMap */5],
      /* matrixFloat32ArrayMap */sourceInstanceRecord[/* matrixFloat32ArrayMap */6],
      /* isSendTransformMatrixDataMap */sourceInstanceRecord[/* isSendTransformMatrixDataMap */7],
      /* disposedIndexArray */sourceInstanceRecord[/* disposedIndexArray */8].concat(sourceInstanceArray),
      /* gameObjectMap */sourceInstanceRecord[/* gameObjectMap */9]
    ];
    return /* tuple */[
            reduceOneParam((function (state, sourceInstance) {
                    return _disposeData$10(sourceInstance, isKeepOrder, batchDisposeGameObjectFunc, state);
                  }), newrecord, sourceInstanceArray),
            sourceInstanceArray.slice()
          ];
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function isAlive$15(cameraController, param) {
    return isAlive$1(cameraController, param[/* disposedIndexArray */18]);
  }
  
  function _disposeData$11(cameraController, state) {
    var state$1 = unbindEvent(cameraController, state);
    var arcballCameraControllerRecord = state$1[/* arcballCameraControllerRecord */26];
    var newrecord = caml_array_dup(state$1);
    newrecord[/* arcballCameraControllerRecord */26] = /* record */[
      /* index */arcballCameraControllerRecord[/* index */0],
      /* pointDownEventHandleFuncMap */arcballCameraControllerRecord[/* pointDownEventHandleFuncMap */1],
      /* pointUpEventHandleFuncMap */arcballCameraControllerRecord[/* pointUpEventHandleFuncMap */2],
      /* pointDragEventHandleFuncMap */arcballCameraControllerRecord[/* pointDragEventHandleFuncMap */3],
      /* pointScaleEventHandleFuncMap */arcballCameraControllerRecord[/* pointScaleEventHandleFuncMap */4],
      /* keydownEventHandleFuncMap */arcballCameraControllerRecord[/* keydownEventHandleFuncMap */5],
      /* dirtyArray */removeFromArray(cameraController, arcballCameraControllerRecord[/* dirtyArray */6]),
      /* distanceMap */disposeSparseMapData(cameraController, arcballCameraControllerRecord[/* distanceMap */7]),
      /* minDistanceMap */disposeSparseMapData(cameraController, arcballCameraControllerRecord[/* minDistanceMap */8]),
      /* phiMap */disposeSparseMapData(cameraController, arcballCameraControllerRecord[/* phiMap */9]),
      /* thetaMap */disposeSparseMapData(cameraController, arcballCameraControllerRecord[/* thetaMap */10]),
      /* thetaMarginMap */disposeSparseMapData(cameraController, arcballCameraControllerRecord[/* thetaMarginMap */11]),
      /* targetMap */disposeSparseMapData(cameraController, arcballCameraControllerRecord[/* targetMap */12]),
      /* moveSpeedXMap */disposeSparseMapData(cameraController, arcballCameraControllerRecord[/* moveSpeedXMap */13]),
      /* moveSpeedYMap */disposeSparseMapData(cameraController, arcballCameraControllerRecord[/* moveSpeedYMap */14]),
      /* rotateSpeedMap */disposeSparseMapData(cameraController, arcballCameraControllerRecord[/* rotateSpeedMap */15]),
      /* wheelSpeedMap */disposeSparseMapData(cameraController, arcballCameraControllerRecord[/* wheelSpeedMap */16]),
      /* gameObjectMap */disposeSparseMapData(cameraController, arcballCameraControllerRecord[/* gameObjectMap */17]),
      /* disposedIndexArray */arcballCameraControllerRecord[/* disposedIndexArray */18]
    ];
    return newrecord;
  }
  
  function handleBatchDisposeComponent$12(cameraControllerArray, state) {
    var arcballCameraControllerRecord = state[/* arcballCameraControllerRecord */26];
    requireCheck((function () {
            return checkComponentShouldAliveWithBatchDispose(cameraControllerArray, isAlive$15, arcballCameraControllerRecord);
          }), getIsDebug(stateData));
    var newrecord = caml_array_dup(state);
    newrecord[/* arcballCameraControllerRecord */26] = /* record */[
      /* index */arcballCameraControllerRecord[/* index */0],
      /* pointDownEventHandleFuncMap */arcballCameraControllerRecord[/* pointDownEventHandleFuncMap */1],
      /* pointUpEventHandleFuncMap */arcballCameraControllerRecord[/* pointUpEventHandleFuncMap */2],
      /* pointDragEventHandleFuncMap */arcballCameraControllerRecord[/* pointDragEventHandleFuncMap */3],
      /* pointScaleEventHandleFuncMap */arcballCameraControllerRecord[/* pointScaleEventHandleFuncMap */4],
      /* keydownEventHandleFuncMap */arcballCameraControllerRecord[/* keydownEventHandleFuncMap */5],
      /* dirtyArray */arcballCameraControllerRecord[/* dirtyArray */6],
      /* distanceMap */arcballCameraControllerRecord[/* distanceMap */7],
      /* minDistanceMap */arcballCameraControllerRecord[/* minDistanceMap */8],
      /* phiMap */arcballCameraControllerRecord[/* phiMap */9],
      /* thetaMap */arcballCameraControllerRecord[/* thetaMap */10],
      /* thetaMarginMap */arcballCameraControllerRecord[/* thetaMarginMap */11],
      /* targetMap */arcballCameraControllerRecord[/* targetMap */12],
      /* moveSpeedXMap */arcballCameraControllerRecord[/* moveSpeedXMap */13],
      /* moveSpeedYMap */arcballCameraControllerRecord[/* moveSpeedYMap */14],
      /* rotateSpeedMap */arcballCameraControllerRecord[/* rotateSpeedMap */15],
      /* wheelSpeedMap */arcballCameraControllerRecord[/* wheelSpeedMap */16],
      /* gameObjectMap */arcballCameraControllerRecord[/* gameObjectMap */17],
      /* disposedIndexArray */arcballCameraControllerRecord[/* disposedIndexArray */18].concat(cameraControllerArray)
    ];
    return reduceOneParam((function (state, cameraController) {
                  return _disposeData$11(cameraController, state);
                }), newrecord, cameraControllerArray);
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  function isAlive$16(cameraProjection, param) {
    return isAlive$1(cameraProjection, param[/* disposedIndexArray */8]);
  }
  
  function _disposeData$12(cameraProjection, record) {
    return /* record */[
            /* index */record[/* index */0],
            /* dirtyArray */removeFromArray(cameraProjection, record[/* dirtyArray */1]),
            /* pMatrixMap */disposeSparseMapData(cameraProjection, record[/* pMatrixMap */2]),
            /* nearMap */disposeSparseMapData(cameraProjection, record[/* nearMap */3]),
            /* farMap */disposeSparseMapData(cameraProjection, record[/* farMap */4]),
            /* fovyMap */disposeSparseMapData(cameraProjection, record[/* fovyMap */5]),
            /* aspectMap */disposeSparseMapData(cameraProjection, record[/* aspectMap */6]),
            /* gameObjectMap */disposeSparseMapData(cameraProjection, record[/* gameObjectMap */7]),
            /* disposedIndexArray */record[/* disposedIndexArray */8]
          ];
  }
  
  function handleBatchDisposeComponent$13(cameraProjectionArray, record) {
    requireCheck((function () {
            return checkComponentShouldAliveWithBatchDispose(cameraProjectionArray, isAlive$16, record);
          }), getIsDebug(stateData));
    return reduceOneParam((function (record, cameraProjection) {
                  return _disposeData$12(cameraProjection, record);
                }), /* record */[
                /* index */record[/* index */0],
                /* dirtyArray */record[/* dirtyArray */1],
                /* pMatrixMap */record[/* pMatrixMap */2],
                /* nearMap */record[/* nearMap */3],
                /* farMap */record[/* farMap */4],
                /* fovyMap */record[/* fovyMap */5],
                /* aspectMap */record[/* aspectMap */6],
                /* gameObjectMap */record[/* gameObjectMap */7],
                /* disposedIndexArray */record[/* disposedIndexArray */8].concat(cameraProjectionArray)
              ], cameraProjectionArray);
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  function deferDisposeBasicCameraViewComponent(uid, component, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var newrecord = caml_array_dup(state);
    var newrecord$1 = caml_array_dup(gameObjectRecord);
    newrecord$1[/* disposedBasicCameraViewArray */6] = push$1(component, state[/* gameObjectRecord */11][/* disposedBasicCameraViewArray */6]);
    newrecord$1[/* basicCameraViewMap */23] = removeComponent(uid, gameObjectRecord[/* basicCameraViewMap */23]);
    newrecord[/* gameObjectRecord */11] = newrecord$1;
    return newrecord;
  }
  
  function deferDisposePerspectiveCameraProjectionComponent(uid, component, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var newrecord = caml_array_dup(state);
    var newrecord$1 = caml_array_dup(gameObjectRecord);
    newrecord$1[/* disposedPerspectiveCameraProjectionArray */9] = push$1(component, gameObjectRecord[/* disposedPerspectiveCameraProjectionArray */9]);
    newrecord$1[/* perspectiveCameraProjectionMap */24] = removeComponent(uid, gameObjectRecord[/* perspectiveCameraProjectionMap */24]);
    newrecord[/* gameObjectRecord */11] = newrecord$1;
    return newrecord;
  }
  
  function deferDisposeArcballCameraControllerComponent(uid, component, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var newrecord = caml_array_dup(state);
    var newrecord$1 = caml_array_dup(gameObjectRecord);
    newrecord$1[/* disposedArcballCameraControllerArray */10] = push$1(component, gameObjectRecord[/* disposedArcballCameraControllerArray */10]);
    newrecord$1[/* arcballCameraControllerMap */25] = removeComponent(uid, gameObjectRecord[/* arcballCameraControllerMap */25]);
    newrecord[/* gameObjectRecord */11] = newrecord$1;
    return newrecord;
  }
  
  function deferDisposeBasicMaterialComponent(uid, component, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var newrecord = caml_array_dup(state);
    var newrecord$1 = caml_array_dup(gameObjectRecord);
    newrecord$1[/* disposedBasicMaterialArray */11] = push$1(component, gameObjectRecord[/* disposedBasicMaterialArray */11]);
    newrecord$1[/* basicMaterialMap */27] = removeComponent(uid, gameObjectRecord[/* basicMaterialMap */27]);
    newrecord[/* gameObjectRecord */11] = newrecord$1;
    return newrecord;
  }
  
  function deferDisposeLightMaterialComponent(uid, component, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var newrecord = caml_array_dup(state);
    var newrecord$1 = caml_array_dup(gameObjectRecord);
    newrecord$1[/* disposedLightMaterialArray */12] = push$1(component, gameObjectRecord[/* disposedLightMaterialArray */12]);
    newrecord$1[/* lightMaterialMap */28] = removeComponent(uid, gameObjectRecord[/* lightMaterialMap */28]);
    newrecord[/* gameObjectRecord */11] = newrecord$1;
    return newrecord;
  }
  
  function deferDisposeDirectionLightComponent(uid, component, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var newrecord = caml_array_dup(state);
    var newrecord$1 = caml_array_dup(gameObjectRecord);
    newrecord$1[/* disposedDirectionLightArray */17] = push$1(component, gameObjectRecord[/* disposedDirectionLightArray */17]);
    newrecord$1[/* directionLightMap */31] = removeComponent(uid, gameObjectRecord[/* directionLightMap */31]);
    newrecord[/* gameObjectRecord */11] = newrecord$1;
    return newrecord;
  }
  
  function deferDisposePointLightComponent(uid, component, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var newrecord = caml_array_dup(state);
    var newrecord$1 = caml_array_dup(gameObjectRecord);
    newrecord$1[/* disposedPointLightArray */18] = push$1(component, gameObjectRecord[/* disposedPointLightArray */18]);
    newrecord$1[/* pointLightMap */32] = removeComponent(uid, gameObjectRecord[/* pointLightMap */32]);
    newrecord[/* gameObjectRecord */11] = newrecord$1;
    return newrecord;
  }
  
  function deferDisposeMeshRendererComponent(uid, component, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var newrecord = caml_array_dup(state);
    var newrecord$1 = caml_array_dup(gameObjectRecord);
    newrecord$1[/* disposedMeshRendererComponentArray */19] = push$1(component, gameObjectRecord[/* disposedMeshRendererComponentArray */19]);
    newrecord$1[/* meshRendererMap */26] = removeComponent(uid, gameObjectRecord[/* meshRendererMap */26]);
    newrecord[/* gameObjectRecord */11] = newrecord$1;
    return newrecord;
  }
  
  function batchDisposeBasicCameraViewComponent(state, componentArray) {
    var basicCameraViewRecord = state[/* basicCameraViewRecord */14];
    var newrecord = caml_array_dup(state);
    newrecord[/* basicCameraViewRecord */14] = batchDisposeComponent(basicCameraViewRecord, handleBatchDisposeComponent$5, componentArray);
    return newrecord;
  }
  
  function batchDisposePerspectiveCameraProjectionComponent(state, componentArray) {
    var perspectiveCameraProjectionRecord = state[/* perspectiveCameraProjectionRecord */15];
    var newrecord = caml_array_dup(state);
    newrecord[/* perspectiveCameraProjectionRecord */15] = batchDisposeComponent(perspectiveCameraProjectionRecord, handleBatchDisposeComponent$13, componentArray);
    return newrecord;
  }
  
  function batchDisposeArcballCameraControllerComponent(state, componentArray) {
    return handleBatchDisposeComponent$12(componentArray, state);
  }
  
  function batchDisposeMeshRendererComponent(state, componentArray) {
    var newrecord = caml_array_dup(state);
    newrecord[/* meshRendererRecord */25] = handleBatchDisposeComponent$3(componentArray, getRecord$7(state));
    return newrecord;
  }
  
  function batchDisposeTransformComponent(state, isKeepOrder, componentArray) {
    return handleBatchDisposeComponent(componentArray, getMaxTypeArrayPoolSize(state[/* settingRecord */1]), isKeepOrder, state);
  }
  
  function batchDisposeBoxGeometryComponent(state, componentArray) {
    return handleBatchDisposeComponent$6(componentArray, state);
  }
  
  function batchDisposeCustomGeometryComponent(state, componentArray) {
    return handleBatchDisposeComponent$9(componentArray, state);
  }
  
  function batchDisposeBasicMaterialComponent(state, componentArray) {
    return handleBatchDisposeComponent$7(componentArray, state);
  }
  
  function batchDisposeLightMaterialComponentForWorker(state, componentArray) {
    var state$1 = handleBatchDisposeComponent$8(componentArray, state);
    var record = getRecord$3(state$1);
    var materialArrayForWorkerInit = record[/* materialArrayForWorkerInit */17];
    var newrecord = caml_array_dup(state$1);
    newrecord[/* lightMaterialRecord */17] = /* record */[
      /* index */record[/* index */0],
      /* buffer */record[/* buffer */1],
      /* shaderIndices */record[/* shaderIndices */2],
      /* diffuseColors */record[/* diffuseColors */3],
      /* specularColors */record[/* specularColors */4],
      /* shininess */record[/* shininess */5],
      /* textureIndices */record[/* textureIndices */6],
      /* diffuseMapUnits */record[/* diffuseMapUnits */7],
      /* specularMapUnits */record[/* specularMapUnits */8],
      /* textureCountMap */record[/* textureCountMap */9],
      /* defaultDiffuseColor */record[/* defaultDiffuseColor */10],
      /* defaultSpecularColor */record[/* defaultSpecularColor */11],
      /* defaultShininess */record[/* defaultShininess */12],
      /* gameObjectMap */record[/* gameObjectMap */13],
      /* groupCountMap */record[/* groupCountMap */14],
      /* disposedIndexArray */record[/* disposedIndexArray */15],
      /* nameMap */record[/* nameMap */16],
      /* materialArrayForWorkerInit */removeDisposedOnesFromMaterialArrayForWorkerInit(componentArray, materialArrayForWorkerInit)
    ];
    return newrecord;
  }
  
  function batchDisposeDirectionLightComponent(state, componentArray) {
    var directionLightRecord = state[/* directionLightRecord */21];
    var newrecord = caml_array_dup(state);
    newrecord[/* directionLightRecord */21] = batchDisposeComponent(directionLightRecord, handleBatchDisposeComponent$4, componentArray);
    return newrecord;
  }
  
  function batchDisposePointLightComponent(state, componentArray) {
    var pointLightRecord = state[/* pointLightRecord */22];
    var newrecord = caml_array_dup(state);
    newrecord[/* pointLightRecord */22] = batchDisposeComponent(pointLightRecord, handleBatchDisposeComponent$1, componentArray);
    return newrecord;
  }
  
  function batchDisposeSourceInstanceComponent(state, isKeepOrder, disposeGameObjectFunc, componentArray) {
    return handleBatchDisposeComponent$11(componentArray, isKeepOrder, disposeGameObjectFunc, state);
  }
  
  function batchDisposeObjectInstanceComponent(state, componentArray) {
    var match = componentArray.length;
    if (match !== 0) {
      return handleBatchDisposeComponent$10(componentArray, state);
    } else {
      return state;
    }
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function batchGetBasicCameraViewComponent(uidArray, param) {
    var gameObjectRecord = param[/* gameObjectRecord */11];
    return batchGetComponent(uidArray, gameObjectRecord[/* basicCameraViewMap */23]);
  }
  
  function batchGetPerspectiveCameraProjectionComponent(uidArray, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    return batchGetComponent(uidArray, gameObjectRecord[/* perspectiveCameraProjectionMap */24]);
  }
  
  function batchGetArcballCameraControllerComponent(uidArray, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    return batchGetComponent(uidArray, gameObjectRecord[/* arcballCameraControllerMap */25]);
  }
  
  function batchGetTransformComponent(uidArray, param) {
    var gameObjectRecord = param[/* gameObjectRecord */11];
    return batchGetComponent(uidArray, gameObjectRecord[/* transformMap */22]);
  }
  
  function batchGetGeometryComponentData(uidArray, param) {
    var gameObjectRecord = param[/* gameObjectRecord */11];
    var geometryDataMap = gameObjectRecord[/* geometryDataMap */21];
    var boxGeometryType = getBoxGeometryType(/* () */0);
    var customGeometryType = getCustomGeometryType(/* () */0);
    return reduceOneParam((function (arrTuple, uid) {
                  var match = getComponentData(uid, geometryDataMap);
                  if (match !== undefined) {
                    var match$1 = match;
                    var type_ = match$1[1];
                    var component = match$1[0];
                    if (type_ === boxGeometryType) {
                      push$1(component, arrTuple[0]);
                    } else if (type_ === customGeometryType) {
                      push$1(component, arrTuple[1]);
                    } else {
                      fatal(buildFatalMessage("unknown type_", "", "", "", "type_: " + (String(type_) + "")));
                    }
                    return arrTuple;
                  } else {
                    return arrTuple;
                  }
                }), /* tuple */[
                /* array */[],
                /* array */[]
              ], uidArray);
  }
  
  function batchGetBasicMaterialComponent(uidArray, param) {
    var gameObjectRecord = param[/* gameObjectRecord */11];
    return batchGetComponent(uidArray, gameObjectRecord[/* basicMaterialMap */27]);
  }
  
  function batchGetLightMaterialComponent(uidArray, param) {
    var gameObjectRecord = param[/* gameObjectRecord */11];
    return batchGetComponent(uidArray, gameObjectRecord[/* lightMaterialMap */28]);
  }
  
  function batchGetMeshRendererComponent(uidArray, param) {
    var gameObjectRecord = param[/* gameObjectRecord */11];
    return batchGetComponent(uidArray, gameObjectRecord[/* meshRendererMap */26]);
  }
  
  function batchGetDirectionLightComponent(uidArray, param) {
    var gameObjectRecord = param[/* gameObjectRecord */11];
    return batchGetComponent(uidArray, gameObjectRecord[/* directionLightMap */31]);
  }
  
  function batchGetPointLightComponent(uidArray, param) {
    var gameObjectRecord = param[/* gameObjectRecord */11];
    return batchGetComponent(uidArray, gameObjectRecord[/* pointLightMap */32]);
  }
  
  function batchGetSourceInstanceComponent(uidArray, param) {
    var gameObjectRecord = param[/* gameObjectRecord */11];
    return batchGetComponent(uidArray, gameObjectRecord[/* sourceInstanceMap */29]);
  }
  
  function batchGetObjectInstanceComponent(uidArray, param) {
    var gameObjectRecord = param[/* gameObjectRecord */11];
    return batchGetComponent(uidArray, gameObjectRecord[/* objectInstanceMap */30]);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function _batchDisposeGeometryComponent(uidArray, state) {
    var match = batchGetGeometryComponentData(uidArray, state);
    var match$1 = batchDisposeBoxGeometryComponent(state, match[0]);
    var match$2 = batchDisposeCustomGeometryComponent(match$1[0], match[1]);
    return /* tuple */[
            match$2[0],
            match$1[1],
            match$2[1]
          ];
  }
  
  function batchDispose$1(param, param$1, state) {
    var batchDisposeLightMaterialComponentFunc = param$1[1];
    var batchDisposeBasicMaterialComponentFunc = param$1[0];
    var isKeepOrder = param[1];
    var uidArray = param[0];
    var state$1 = batchDisposeTransformComponent(state, isKeepOrder, batchGetTransformComponent(uidArray, state));
    var match = _batchDisposeGeometryComponent(uidArray, state$1);
    var state$2 = match[0];
    var state$3 = batchDisposeBasicCameraViewComponent(state$2, batchGetBasicCameraViewComponent(uidArray, state$2));
    var state$4 = batchDisposePerspectiveCameraProjectionComponent(state$3, batchGetPerspectiveCameraProjectionComponent(uidArray, state$3));
    var state$5 = batchDisposeArcballCameraControllerComponent(state$4, batchGetArcballCameraControllerComponent(uidArray, state$4));
    var state$6 = batchDisposeMeshRendererComponent(state$5, batchGetMeshRendererComponent(uidArray, state$5));
    var state$7 = _2(batchDisposeBasicMaterialComponentFunc, state$6, batchGetBasicMaterialComponent(uidArray, state$6));
    var state$8 = _2(batchDisposeLightMaterialComponentFunc, state$7, batchGetLightMaterialComponent(uidArray, state$7));
    var state$9 = batchDisposeDirectionLightComponent(state$8, batchGetDirectionLightComponent(uidArray, state$8));
    var state$10 = batchDisposePointLightComponent(state$9, batchGetPointLightComponent(uidArray, state$9));
    var match$1 = batchDisposeSourceInstanceComponent(state$10, isKeepOrder, _1(param$1[2], /* tuple */[
              batchDisposeBasicMaterialComponentFunc,
              batchDisposeLightMaterialComponentFunc
            ]), batchGetSourceInstanceComponent(uidArray, state$10));
    var state$11 = match$1[0];
    var state$12 = batchDisposeObjectInstanceComponent(state$11, batchGetObjectInstanceComponent(uidArray, state$11));
    return /* tuple */[
            state$12,
            match[1],
            match[2],
            match$1[1]
          ];
  }
  
  
  /* DisposeComponentGameObjectMainService-Wonderjs Not a pure module */
  
  function _disposeNameMap(uidArray, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    gameObjectRecord[/* nameMap */1] = reduceOneParam((function (nameMap, uid) {
            return disposeSparseMapData(uid, nameMap);
          }), gameObjectRecord[/* nameMap */1], uidArray);
    state[/* gameObjectRecord */11] = gameObjectRecord;
    return state;
  }
  
  function _setDisposedUidMap(uidArray, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var newrecord = caml_array_dup(state);
    var newrecord$1 = caml_array_dup(gameObjectRecord);
    newrecord$1[/* disposedUidMap */3] = buildMapFromArray(uidArray, gameObjectRecord[/* disposedUidMap */3]);
    newrecord[/* gameObjectRecord */11] = newrecord$1;
    return newrecord;
  }
  
  function batchDispose(param, uidArray, isKeepOrder, state) {
    var state$1 = _setDisposedUidMap(uidArray, _disposeNameMap(uidArray, state));
    var record = state$1[/* gameObjectRecord */11];
    var disposeCount = record[/* disposeCount */2];
    record[/* disposeCount */2] = disposeCount + uidArray.length | 0;
    var match = batchDispose$1(/* tuple */[
          uidArray,
          isKeepOrder
        ], /* tuple */[
          param[0],
          param[1],
          batchDispose
        ], state$1);
    return /* tuple */[
            match[0],
            match[1],
            match[2],
            match[3]
          ];
  }
  
  function deferBatchDisposeKeepOrder(uidArray, state) {
    state[/* gameObjectRecord */11][/* disposedUidArrayForKeepOrder */5] = state[/* gameObjectRecord */11][/* disposedUidArrayForKeepOrder */5].concat(uidArray);
    return state;
  }
  
  function clearDeferDisposeData(state) {
    var newrecord = caml_array_dup(state);
    var init = state[/* gameObjectRecord */11];
    newrecord[/* gameObjectRecord */11] = /* record */[
      /* uid */init[/* uid */0],
      /* nameMap */init[/* nameMap */1],
      /* disposeCount */init[/* disposeCount */2],
      /* disposedUidMap */init[/* disposedUidMap */3],
      /* disposedUidArray */createEmpty(/* () */0),
      /* disposedUidArrayForKeepOrder */createEmpty(/* () */0),
      /* disposedBasicCameraViewArray */createEmpty(/* () */0),
      /* disposedTransformArray */createEmpty(/* () */0),
      /* disposedTransformArrayForKeepOrder */createEmpty(/* () */0),
      /* disposedPerspectiveCameraProjectionArray */createEmpty(/* () */0),
      /* disposedArcballCameraControllerArray */init[/* disposedArcballCameraControllerArray */10],
      /* disposedBasicMaterialArray */createEmpty(/* () */0),
      /* disposedLightMaterialArray */createEmpty(/* () */0),
      /* disposedBoxGeometryArray */createEmpty(/* () */0),
      /* disposedCustomGeometryArray */createEmpty(/* () */0),
      /* disposedSourceInstanceArray */createEmpty(/* () */0),
      /* disposedObjectInstanceArray */createEmpty(/* () */0),
      /* disposedDirectionLightArray */createEmpty(/* () */0),
      /* disposedPointLightArray */createEmpty(/* () */0),
      /* disposedMeshRendererComponentArray */createEmpty(/* () */0),
      /* aliveUidArray */init[/* aliveUidArray */20],
      /* geometryDataMap */init[/* geometryDataMap */21],
      /* transformMap */init[/* transformMap */22],
      /* basicCameraViewMap */init[/* basicCameraViewMap */23],
      /* perspectiveCameraProjectionMap */init[/* perspectiveCameraProjectionMap */24],
      /* arcballCameraControllerMap */init[/* arcballCameraControllerMap */25],
      /* meshRendererMap */init[/* meshRendererMap */26],
      /* basicMaterialMap */init[/* basicMaterialMap */27],
      /* lightMaterialMap */init[/* lightMaterialMap */28],
      /* sourceInstanceMap */init[/* sourceInstanceMap */29],
      /* objectInstanceMap */init[/* objectInstanceMap */30],
      /* directionLightMap */init[/* directionLightMap */31],
      /* pointLightMap */init[/* pointLightMap */32]
    ];
    return newrecord;
  }
  
  function deferDisposeKeepOrder(uid, state) {
    return deferBatchDisposeKeepOrder(/* array */[uid], state);
  }
  
  
  /* DisposeECSService-Wonderjs Not a pure module */
  
  var createGameObject = create$25;
  
  function _checkGameObjectShouldAlive(gameObject, state) {
    return test(buildAssertMessage("gameObject alive", "not"), (function () {
                  return assertTrue(isAlive$3(gameObject, state));
                }));
  }
  
  function addGameObjectBasicCameraViewComponent(gameObject, component, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return addBasicCameraViewComponent(gameObject, component, state);
  }
  
  function disposeGameObjectBasicCameraViewComponent(gameObject, component, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return deferDisposeBasicCameraViewComponent(gameObject, component, state);
  }
  
  function unsafeGetGameObjectBasicCameraViewComponent(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return unsafeGetBasicCameraViewComponent(gameObject, state[/* gameObjectRecord */11]);
  }
  
  function hasGameObjectBasicCameraViewComponent(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return hasBasicCameraViewComponent(gameObject, state[/* gameObjectRecord */11]);
  }
  
  function addGameObjectPerspectiveCameraProjectionComponent(gameObject, component, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return addPerspectiveCameraProjectionComponent(gameObject, component, state);
  }
  
  function disposeGameObjectPerspectiveCameraProjectionComponent(gameObject, component, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return deferDisposePerspectiveCameraProjectionComponent(gameObject, component, state);
  }
  
  function unsafeGetGameObjectPerspectiveCameraProjectionComponent(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return unsafeGetPerspectiveCameraProjectionComponent(gameObject, state[/* gameObjectRecord */11]);
  }
  
  function hasGameObjectPerspectiveCameraProjectionComponent(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return hasPerspectiveCameraProjectionComponent(gameObject, state[/* gameObjectRecord */11]);
  }
  
  function addGameObjectArcballCameraControllerComponent(gameObject, component, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return addArcballCameraControllerComponent(gameObject, component, state);
  }
  
  function disposeGameObjectArcballCameraControllerComponent(gameObject, component, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return deferDisposeArcballCameraControllerComponent(gameObject, component, state);
  }
  
  function unsafeGetGameObjectArcballCameraControllerComponent(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return unsafeGetArcballCameraControllerComponent(gameObject, state[/* gameObjectRecord */11]);
  }
  
  function hasGameObjectArcballCameraControllerComponent(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return hasArcballCameraControllerComponent(gameObject, state[/* gameObjectRecord */11]);
  }
  
  function unsafeGetGameObjectTransformComponent(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return unsafeGetTransformComponent(gameObject, state[/* gameObjectRecord */11]);
  }
  
  function addGameObjectBoxGeometryComponent(gameObject, component, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return addBoxGeometryComponent(gameObject, component, state);
  }
  
  function hasGameObjectBoxGeometryComponent(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return hasBoxGeometryComponent(gameObject, state[/* gameObjectRecord */11]);
  }
  
  function addGameObjectCustomGeometryComponent(gameObject, component, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return addCustomGeometryComponent(gameObject, component, state);
  }
  
  function unsafeGetGameObjectGeometryComponent(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return unsafeGetGeometryComponent(gameObject, state[/* gameObjectRecord */11]);
  }
  
  function addGameObjectBasicMaterialComponent(gameObject, component, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return addBasicMaterialComponent(gameObject, component, state);
  }
  
  function disposeGameObjectBasicMaterialComponent(gameObject, component, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return deferDisposeBasicMaterialComponent(gameObject, component, state);
  }
  
  function unsafeGetGameObjectBasicMaterialComponent(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return unsafeGetBasicMaterialComponent(gameObject, state[/* gameObjectRecord */11]);
  }
  
  function hasGameObjectBasicMaterialComponent(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return hasBasicMaterialComponent(gameObject, state[/* gameObjectRecord */11]);
  }
  
  function addGameObjectLightMaterialComponent(gameObject, component, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return addLightMaterialComponent(gameObject, component, state);
  }
  
  function disposeGameObjectLightMaterialComponent(gameObject, component, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return deferDisposeLightMaterialComponent(gameObject, component, state);
  }
  
  function unsafeGetGameObjectLightMaterialComponent(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return unsafeGetLightMaterialComponent(gameObject, state[/* gameObjectRecord */11]);
  }
  
  function hasGameObjectLightMaterialComponent(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return hasLightMaterialComponent(gameObject, state[/* gameObjectRecord */11]);
  }
  
  function addGameObjectMeshRendererComponent(gameObject, component, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return addMeshRendererComponent(gameObject, component, state);
  }
  
  function disposeGameObjectMeshRendererComponent(gameObject, component, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return deferDisposeMeshRendererComponent(gameObject, component, state);
  }
  
  function unsafeGetGameObjectMeshRendererComponent(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return unsafeGetMeshRendererComponent(gameObject, state[/* gameObjectRecord */11]);
  }
  
  function hasGameObjectMeshRendererComponent(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return hasMeshRendererComponent(gameObject, state[/* gameObjectRecord */11]);
  }
  
  function addGameObjectDirectionLightComponent(gameObject, component, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return addDirectionLightComponent(gameObject, component, state);
  }
  
  function disposeGameObjectDirectionLightComponent(gameObject, component, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return deferDisposeDirectionLightComponent(gameObject, component, state);
  }
  
  function unsafeGetGameObjectDirectionLightComponent(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return unsafeGetDirectionLightComponent(gameObject, state[/* gameObjectRecord */11]);
  }
  
  function hasGameObjectDirectionLightComponent(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return hasDirectionLightComponent(gameObject, state[/* gameObjectRecord */11]);
  }
  
  function addGameObjectPointLightComponent(gameObject, component, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return addPointLightComponent(gameObject, component, state);
  }
  
  function disposeGameObjectPointLightComponent(gameObject, component, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return deferDisposePointLightComponent(gameObject, component, state);
  }
  
  function unsafeGetGameObjectPointLightComponent(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return unsafeGetPointLightComponent(gameObject, state[/* gameObjectRecord */11]);
  }
  
  function hasGameObjectPointLightComponent(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return hasPointLightComponent(gameObject, state[/* gameObjectRecord */11]);
  }
  
  function disposeGameObjectKeepOrder$1(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return deferDisposeKeepOrder(gameObject, state);
  }
  
  function initGameObject$1(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return initGameObject$2(gameObject, state);
  }
  
  function unsafeGetGameObjectName$1(gameObject, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return unsafeGetName(gameObject, state);
  }
  
  function setGameObjectName$1(gameObject, name, state) {
    requireCheck((function () {
            return _checkGameObjectShouldAlive(gameObject, state);
          }), getIsDebug(stateData));
    return setName(gameObject, name, state);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function setGameObjectName(name, gameObject, engineState) {
    return setGameObjectName$1(gameObject, name, engineState);
  }
  
  function unsafeGetGameObjectChildren(gameObject, engineState) {
    return unsafeGetTransformChildren(unsafeGetGameObjectTransformComponent(gameObject, engineState), engineState).map((function (transform) {
                  return unsafeGetTransformGameObject(transform, engineState);
                }));
  }
  
  function getAllLightMaterials(gameObject, engineState) {
    var _iterate = function (gameObjectArr, resultArr) {
      return reduceOneParam((function (resultArr, gameObject) {
                    var match = hasGameObjectLightMaterialComponent(gameObject, engineState);
                    return _iterate(unsafeGetGameObjectChildren(gameObject, engineState), match ? push$1(unsafeGetGameObjectLightMaterialComponent(gameObject, engineState), resultArr) : resultArr);
                  }), resultArr, gameObjectArr);
    };
    return _iterate(/* array */[gameObject], /* array */[]);
  }
  
  var initGameObject = initGameObject$1;
  
  var disposeGameObjectKeepOrder = disposeGameObjectKeepOrder$1;
  
  var unsafeGetGameObjectName = unsafeGetGameObjectName$1;
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  var getGeometryComponent = unsafeGetGameObjectGeometryComponent;
  
  var hasLightMaterialComponent$1 = hasGameObjectLightMaterialComponent;
  
  var getLightMaterialComponent$1 = unsafeGetGameObjectLightMaterialComponent;
  
  var addLightMaterialComponent$1 = addGameObjectLightMaterialComponent;
  
  var disposeLightMaterialComponent = disposeGameObjectLightMaterialComponent;
  
  var hasBasicMaterialComponent$1 = hasGameObjectBasicMaterialComponent;
  
  var getBasicMaterialComponent$1 = unsafeGetGameObjectBasicMaterialComponent;
  
  var addBasicMaterialComponent$1 = addGameObjectBasicMaterialComponent;
  
  var disposeBasicMaterialComponent = disposeGameObjectBasicMaterialComponent;
  
  var getMeshRendererComponent$1 = unsafeGetGameObjectMeshRendererComponent;
  
  var hasMeshRendererComponent$1 = hasGameObjectMeshRendererComponent;
  
  var hasBoxGeometryComponent$1 = hasGameObjectBoxGeometryComponent;
  
  var hasPerspectiveCameraProjectionComponent$1 = hasGameObjectPerspectiveCameraProjectionComponent;
  
  var getPerspectiveCameraProjectionComponent$1 = unsafeGetGameObjectPerspectiveCameraProjectionComponent;
  
  var hasBasicCameraViewComponent$1 = hasGameObjectBasicCameraViewComponent;
  
  var getBasicCameraViewComponent$1 = unsafeGetGameObjectBasicCameraViewComponent;
  
  var getTransformComponent$1 = unsafeGetGameObjectTransformComponent;
  
  var addDirectionLightComponent$1 = addGameObjectDirectionLightComponent;
  
  var disposeDirectionLightComponent = disposeGameObjectDirectionLightComponent;
  
  var getDirectionLightComponent$1 = unsafeGetGameObjectDirectionLightComponent;
  
  var hasDirectionLightComponent$1 = hasGameObjectDirectionLightComponent;
  
  var addPointLightComponent$1 = addGameObjectPointLightComponent;
  
  var disposePointLightComponent = disposeGameObjectPointLightComponent;
  
  var getPointLightComponent$1 = unsafeGetGameObjectPointLightComponent;
  
  var hasPointLightComponent$1 = hasGameObjectPointLightComponent;
  
  var getArcballCameraControllerComponent$1 = unsafeGetGameObjectArcballCameraControllerComponent;
  
  var hasArcballCameraControllerComponent$1 = hasGameObjectArcballCameraControllerComponent;
  
  
  /* GameObjectAPI-Wonderjs Not a pure module */
  
  function setParentKeepOrder(parent, child, engineState) {
    return setParentKeepOrder$1(getTransformComponent$1(parent, engineState), getTransformComponent$1(child, engineState), engineState);
  }
  
  function getChildren(gameObject, engineState) {
    return getChildren$1(getTransformComponent$1(gameObject, engineState), engineState).map((function (transform) {
                  return getGameObjectByTransform(transform, engineState);
                }));
  }
  
  function hasChildren(gameObject, engineState) {
    return getChildren(gameObject, engineState).length > 0;
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  var unsafeGet$3 = unsafeGet$2;
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function getUnsafeGetStateFunc(state) {
    return state[/* stateRecord */0][/* unsafeGetStateFunc */0];
  }
  
  function setUnsafeGetStateFunc$2(unsafeGetStateFunc, state) {
    var newrecord = caml_array_dup(state);
    var init = state[/* stateRecord */0];
    newrecord[/* stateRecord */0] = /* record */[
      /* unsafeGetStateFunc */unsafeGetStateFunc,
      /* setStateFunc */init[/* setStateFunc */1]
    ];
    return newrecord;
  }
  
  function getSetStateFunc(state) {
    return state[/* stateRecord */0][/* setStateFunc */1];
  }
  
  function setSetStateFunc$2(setStateFunc, state) {
    var newrecord = caml_array_dup(state);
    var init = state[/* stateRecord */0];
    newrecord[/* stateRecord */0] = /* record */[
      /* unsafeGetStateFunc */init[/* unsafeGetStateFunc */0],
      /* setStateFunc */setStateFunc
    ];
    return newrecord;
  }
  
  
  /* No side effect */
  
  function unsafeGetState$1(stateData) {
    return unsafeGet$2(stateData[/* state */0]);
  }
  
  function setState$2(stateData, state) {
    stateData[/* state */0] = state;
    return state;
  }
  
  function unsafeGetStateByFunc(state) {
    return getUnsafeGetStateFunc(state)();
  }
  
  function setStateByFunc(state) {
    var setStateFunc = getSetStateFunc(state);
    return setStateFunc(state);
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function create$28() {
    return /* record */[
            /* noWorkerInitJobList : [] */0,
            /* noWorkerLoopJobList : [] */0,
            /* workerCustomMainInitTargetJobMap */createEmpty$1(/* () */0),
            /* workerCustomMainInitSourceJobMap */createEmpty$1(/* () */0),
            /* workerCustomMainInitRemovedDefaultJobMap */createEmpty$1(/* () */0),
            /* workerCustomMainLoopTargetJobMap */createEmpty$1(/* () */0),
            /* workerCustomMainLoopSourceJobMap */createEmpty$1(/* () */0),
            /* workerCustomMainLoopRemovedDefaultJobMap */createEmpty$1(/* () */0)
          ];
  }
  
  
  /* HashMapService-WonderCommonlib Not a pure module */
  
  function create$29() {
    return /* record */[/* precision */undefined];
  }
  
  function deepCopyForRestore$13(param) {
    var precision = param[/* precision */0];
    return /* record */[/* precision */precision];
  }
  
  
  /* No side effect */
  
  function create$30() {
    return /* record */[/* canvas */undefined];
  }
  
  
  /* No side effect */
  
  function copy$1(map) {
    return reduceOneParam((function (newMap, param) {
                  return set(param[0], param[1], newMap);
                }), createEmpty$1(/* () */0), entries(map));
  }
  
  
  /* Js_dict Not a pure module */
  
  function create$31() {
    return /* record */[
            /* index */0,
            /* shaderIndexMap */createEmpty$1(/* () */0),
            /* usedShaderIndexArray : array */[]
          ];
  }
  
  function deepCopyForRestore$14(param) {
    var index = param[/* index */0];
    var shaderIndexMap = param[/* shaderIndexMap */1];
    var usedShaderIndexArray = param[/* usedShaderIndexArray */2];
    return /* record */[
            /* index */index,
            /* shaderIndexMap */copy$1(shaderIndexMap),
            /* usedShaderIndexArray */usedShaderIndexArray.slice()
          ];
  }
  
  
  /* HashMapService-Wonderjs Not a pure module */
  
  function transformMat4Tuple$1(param, mat4) {
    var w = param[3];
    var z = param[2];
    var y = param[1];
    var x = param[0];
    return /* tuple */[
            mat4[0] * x + mat4[4] * y + mat4[8] * z + mat4[12] * w,
            mat4[1] * x + mat4[5] * y + mat4[9] * z + mat4[13] * w,
            mat4[2] * x + mat4[6] * y + mat4[10] * z + mat4[14] * w,
            mat4[3] * x + mat4[7] * y + mat4[11] * z + mat4[15] * w
          ];
  }
  
  
  /* No side effect */
  
  function getWorldToCameraMatrix(cameraToWorldMatrix) {
    return invert(cameraToWorldMatrix, createIdentityMatrix4(/* () */0));
  }
  
  
  /* Matrix4Service-Wonderjs Not a pure module */
  
  function getGameObject$8(cameraView, param) {
    return getGameObject$1(cameraView, param[/* gameObjectMap */1]);
  }
  
  function unsafeGetGameObject$8(cameraView, param) {
    return unsafeGetGameObject$1(cameraView, param[/* gameObjectMap */1]);
  }
  
  function _isValidComponent(cameraView, maxIndex) {
    if (cameraView >= 0) {
      return cameraView < maxIndex;
    } else {
      return false;
    }
  }
  
  function _getGameObject(index, record) {
    var match = getGameObject$8(index, record);
    if (match !== undefined) {
      return match;
    }
    
  }
  
  function _findFirstBasicCameraView(_index, maxIndex, record) {
    while(true) {
      var index = _index;
      var match = _isValidComponent(index, maxIndex);
      if (match) {
        var match$1 = isAlive$8(index, record);
        if (match$1) {
          return _getGameObject(index, record);
        } else {
          _index = index + 1 | 0;
          continue ;
        }
      } else {
        return undefined;
      }
    }
  }
  
  function findFirstGameObject(record) {
    return _findFirstBasicCameraView(0, record[/* index */0], record);
  }
  
  
  /* GameObjectMapService-Wonderjs Not a pure module */
  
  function getBasicCameraViewWorldToCameraMatrix(cameraView, state) {
    var match = getRecord(state);
    var localToWorldMatrices = match[/* localToWorldMatrices */2];
    var localToWorldMatrixCacheMap = match[/* localToWorldMatrixCacheMap */19];
    return getWorldToCameraMatrix(getLocalToWorldMatrixTypeArray$1(unsafeGetTransformComponent(unsafeGetGameObject$8(cameraView, state[/* basicCameraViewRecord */14]), state[/* gameObjectRecord */11]), localToWorldMatrices, localToWorldMatrixCacheMap));
  }
  
  
  /* VMatrixService-Wonderjs Not a pure module */
  
  function convertWorldToScreen$1(cameraView, cameraProjection, param, state) {
    var normalizedDeviceCoordinate = transformMat4Tuple$1(/* tuple */[
          param[0],
          param[1],
          param[2],
          1
        ], multiply(unsafeGetPMatrix(cameraProjection, state[/* perspectiveCameraProjectionRecord */15][/* pMatrixMap */2]), getBasicCameraViewWorldToCameraMatrix(cameraView, state), createIdentityMatrix4(/* () */0)));
    var w = normalizedDeviceCoordinate[3];
    var ndcSpacePos_000 = normalizedDeviceCoordinate[0] / w;
    var ndcSpacePos_001 = normalizedDeviceCoordinate[1] / w;
    return /* tuple */[
            Math.round((ndcSpacePos_000 + 1) / 2 * param[3]),
            Math.round((1 - ndcSpacePos_001) / 2 * param[4])
          ];
  }
  
  
  /* Matrix4Service-Wonderjs Not a pure module */
  
  function convertWorldToScreen(cameraView, cameraProjection, param, state) {
    return convertWorldToScreen$1(cameraView, cameraProjection, /* tuple */[
                param[0],
                param[1],
                param[2],
                param[3],
                param[4]
              ], state);
  }
  
  
  /* CoordinateMainService-Wonderjs Not a pure module */
  
  function createLightMaterial(state) {
    return create$20(state);
  }
  
  function getLightMaterialDiffuseColor(material, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(material, isAlive$11, getRecord$3(state));
          }), getIsDebug(stateData));
    return getDiffuseColor$2(material, state);
  }
  
  function setLightMaterialDiffuseColor(material, color, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(material, isAlive$11, getRecord$3(state));
          }), getIsDebug(stateData));
    return setDiffuseColor$1(material, color, state);
  }
  
  function getLightMaterialSpecularColor(material, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(material, isAlive$11, getRecord$3(state));
          }), getIsDebug(stateData));
    return getSpecularColor$2(material, state);
  }
  
  function setLightMaterialSpecularColor(material, color, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(material, isAlive$11, getRecord$3(state));
          }), getIsDebug(stateData));
    return setSpecularColor$1(material, color, state);
  }
  
  function getLightMaterialShininess(material, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(material, isAlive$11, getRecord$3(state));
          }), getIsDebug(stateData));
    return getShininess$2(material, state);
  }
  
  function setLightMaterialShininess(material, shininess, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(material, isAlive$11, getRecord$3(state));
          }), getIsDebug(stateData));
    return setShininess$1(material, shininess, state);
  }
  
  function setLightMaterialDiffuseMap(material, texture, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(material, isAlive$11, getRecord$3(state));
          }), getIsDebug(stateData));
    return setDiffuseMap(material, texture, state);
  }
  
  function reInitMaterials(materials, state) {
    requireCheck((function () {
            return forEach((function (material) {
                          return checkComponentShouldAlive(material, isAlive$11, getRecord$3(state));
                        }), materials);
          }), getIsDebug(stateData));
    return reInitComponents(materials, state);
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  function getRenderWorkerCustomData(state) {
    return state[/* workerDataRecord */39][/* renderWorkerData */1][/* customDataFromRenderWorkerToMainWorker */0];
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function range$3(a, b) {
    var result = createEmpty(/* () */0);
    for(var i = a; i <= b; ++i){
      result.push(i);
    }
    return result;
  }
  
  function push$3(item, arr) {
    arr.push(item);
    return arr;
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function beginGroup$2(position, record) {
    var groupData = record[/* layoutData */8][/* groupData */0];
    groupData[/* positionArr */0][groupData[/* index */1]] = position;
    return /* record */[
            /* setting */record[/* setting */0],
            /* assetData */record[/* assetData */1],
            /* fontData */record[/* fontData */2],
            /* webglData */record[/* webglData */3],
            /* drawData */record[/* drawData */4],
            /* imguiFuncData */record[/* imguiFuncData */5],
            /* controlData */record[/* controlData */6],
            /* ioData */record[/* ioData */7],
            /* layoutData : record */[/* groupData : record */[
                /* positionArr */groupData[/* positionArr */0],
                /* index */groupData[/* index */1] + 1 | 0
              ]]
          ];
  }
  
  function endGroup$2(record) {
    var groupData = record[/* layoutData */8][/* groupData */0];
    return /* record */[
            /* setting */record[/* setting */0],
            /* assetData */record[/* assetData */1],
            /* fontData */record[/* fontData */2],
            /* webglData */record[/* webglData */3],
            /* drawData */record[/* drawData */4],
            /* imguiFuncData */record[/* imguiFuncData */5],
            /* controlData */record[/* controlData */6],
            /* ioData */record[/* ioData */7],
            /* layoutData : record */[/* groupData : record */[
                /* positionArr */groupData[/* positionArr */0],
                /* index */groupData[/* index */1] - 1 | 0
              ]]
          ];
  }
  
  function _getGroupPosition(record) {
    var groupData = record[/* layoutData */8][/* groupData */0];
    var match = groupData[/* index */1] <= 0;
    if (match) {
      return undefined;
    } else {
      var match$1 = reduceOneParam((function (param, index) {
              var match = param[1];
              var positionArr = param[0];
              var match$1 = positionArr[index];
              return /* tuple */[
                      positionArr,
                      /* tuple */[
                        match[0] + match$1[0] | 0,
                        match[1] + match$1[1] | 0
                      ]
                    ];
            }), /* tuple */[
            groupData[/* positionArr */0],
            /* tuple */[
              0,
              0
            ]
          ], range$3(0, groupData[/* index */1] - 1 | 0));
      return match$1[1];
    }
  }
  
  function computeRectBasedOnTopLeftOfView(rect, record) {
    var match = _getGroupPosition(record);
    if (match !== undefined) {
      var match$1 = match;
      return /* tuple */[
              rect[0] + match$1[0] | 0,
              rect[1] + match$1[1] | 0,
              rect[2],
              rect[3]
            ];
    } else {
      return rect;
    }
  }
  
  
  /* ArrayService-WonderImgui Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  var beginGroup$1 = beginGroup$2;
  
  var endGroup$1 = endGroup$2;
  
  
  /* GroupLayoutIMGUIService-WonderImgui Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  
  var vs = "\nprecision mediump float;\n\nattribute vec2 a_position;\nattribute vec3 a_color;\nattribute vec2 a_texCoord;\n\nuniform mat4 u_projectionMat;\n\nvarying vec3 v_color;\nvarying vec2 v_texCoord;\n\nvoid main() {\n  gl_Position = u_projectionMat * vec4(a_position, 0, 1);\n  v_color = a_color;\n  v_texCoord = a_texCoord;\n}\n    ";
  
  var fs = "\nprecision mediump float;\n\nvarying vec3 v_color;\nvarying vec2 v_texCoord;\n\nuniform sampler2D u_sampler2D;\n\nvoid main() {\n  vec4 sample = texture2D(u_sampler2D, v_texCoord);\n\n  //gl_FragColor = vec4(v_color.xyz * sample.xyz, sample.x * vColor.a );\n  gl_FragColor = vec4(v_color * sample.xyz, sample.w);\n}\n    ";
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function unsafeGet$4(optionData) {
    requireCheck((function () {
            return test(buildAssertMessage("data exist(get by getExn)", "not"), (function () {
                          return assertExist(optionData);
                        }));
          }), true);
    return getExn(optionData);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function _compileShader$1(gl, glslSource, shader) {
    gl.shaderSource(shader, glslSource);
    gl.compileShader(shader);
    debugWithFunc((function () {
            var match = gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false;
            if (match) {
              var message = gl.getShaderInfoLog(shader);
              var partial_arg = "" + (String(message) + "");
              debug((function (param) {
                      return buildDebugMessage("shader info log", partial_arg, param);
                    }), true);
              var partial_arg$1 = "" + (String(glslSource) + "");
              return debug((function (param) {
                            return buildDebugMessage("glsl source", partial_arg$1, param);
                          }), true);
            } else {
              return /* () */0;
            }
          }), true);
    return shader;
  }
  
  function _linkProgram$1(program, gl) {
    gl.linkProgram(program);
    debugWithFunc((function () {
            var match = gl.getProgramParameter(program, gl.LINK_STATUS) === false;
            if (match) {
              var message = gl.getProgramInfoLog(program);
              return fatal(buildFatalMessage("link program error", "" + (String(message) + ""), "", "", ""));
            } else {
              return /* () */0;
            }
          }), true);
    return /* () */0;
  }
  
  function initShader$1(vsSource, fsSource, gl, program) {
    var vs = _compileShader$1(gl, vsSource, gl.createShader(gl.VERTEX_SHADER));
    var fs = _compileShader$1(gl, fsSource, gl.createShader(gl.FRAGMENT_SHADER));
    gl.attachShader(program, vs);
    gl.attachShader(program, fs);
    gl.bindAttribLocation(program, 0, "a_position");
    _linkProgram$1(program, gl);
    gl.deleteShader(vs);
    gl.deleteShader(fs);
    return program;
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function Stream (source) {
    this.source = source;
  }
  
  Stream.prototype.run = function (sink, scheduler) {
    return this.source.run(sink, scheduler)
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  
  // Non-mutating array operations
  
  // cons :: a -> [a] -> [a]
  // a with x prepended
  function cons(x, a) {
    var l = a.length;
    var b = new Array(l + 1);
    b[0] = x;
    for (var i = 0; i < l; ++i) {
      b[i + 1] = a[i];
    }
    return b;
  }
  
  // append :: a -> [a] -> [a]
  // a with x appended
  function append(x, a) {
    var l = a.length;
    var b = new Array(l + 1);
    for (var i = 0; i < l; ++i) {
      b[i] = a[i];
    }
  
    b[l] = x;
    return b;
  }
  
  // drop :: Int -> [a] -> [a]
  // drop first n elements
  function drop(n, a) {
    // eslint-disable-line complexity
    if (n < 0) {
      throw new TypeError('n must be >= 0');
    }
  
    var l = a.length;
    if (n === 0 || l === 0) {
      return a;
    }
  
    if (n >= l) {
      return [];
    }
  
    return unsafeDrop(n, a, l - n);
  }
  
  // unsafeDrop :: Int -> [a] -> Int -> [a]
  // Internal helper for drop
  function unsafeDrop(n, a, l) {
    var b = new Array(l);
    for (var i = 0; i < l; ++i) {
      b[i] = a[n + i];
    }
    return b;
  }
  
  // tail :: [a] -> [a]
  // drop head element
  function tail(a) {
    return drop(1, a);
  }
  
  // copy :: [a] -> [a]
  // duplicate a (shallow duplication)
  function copy$2(a) {
    var l = a.length;
    var b = new Array(l);
    for (var i = 0; i < l; ++i) {
      b[i] = a[i];
    }
    return b;
  }
  
  // map :: (a -> b) -> [a] -> [b]
  // transform each element with f
  function map$2(f, a) {
    var l = a.length;
    var b = new Array(l);
    for (var i = 0; i < l; ++i) {
      b[i] = f(a[i]);
    }
    return b;
  }
  
  // reduce :: (a -> b -> a) -> a -> [b] -> a
  // accumulate via left-fold
  function reduce(f, z, a) {
    var r = z;
    for (var i = 0, l = a.length; i < l; ++i) {
      r = f(r, a[i], i);
    }
    return r;
  }
  
  // replace :: a -> Int -> [a]
  // replace element at index
  function replace(x, i, a) {
    // eslint-disable-line complexity
    if (i < 0) {
      throw new TypeError('i must be >= 0');
    }
  
    var l = a.length;
    var b = new Array(l);
    for (var j = 0; j < l; ++j) {
      b[j] = i === j ? x : a[j];
    }
    return b;
  }
  
  // remove :: Int -> [a] -> [a]
  // remove element at index
  function remove(i, a) {
    // eslint-disable-line complexity
    if (i < 0) {
      throw new TypeError('i must be >= 0');
    }
  
    var l = a.length;
    if (l === 0 || i >= l) {
      // exit early if index beyond end of array
      return a;
    }
  
    if (l === 1) {
      // exit early if index in bounds and length === 1
      return [];
    }
  
    return unsafeRemove(i, a, l - 1);
  }
  
  // unsafeRemove :: Int -> [a] -> Int -> [a]
  // Internal helper to remove element at index
  function unsafeRemove(i, a, l) {
    var b = new Array(l);
    var j = void 0;
    for (j = 0; j < i; ++j) {
      b[j] = a[j];
    }
    for (j = i; j < l; ++j) {
      b[j] = a[j + 1];
    }
  
    return b;
  }
  
  // removeAll :: (a -> boolean) -> [a] -> [a]
  // remove all elements matching a predicate
  // @deprecated
  function removeAll(f, a) {
    var l = a.length;
    var b = new Array(l);
    var j = 0;
    for (var x, i = 0; i < l; ++i) {
      x = a[i];
      if (!f(x)) {
        b[j] = x;
        ++j;
      }
    }
  
    b.length = j;
    return b;
  }
  
  // findIndex :: a -> [a] -> Int
  // find index of x in a, from the left
  function findIndex(x, a) {
    for (var i = 0, l = a.length; i < l; ++i) {
      if (x === a[i]) {
        return i;
      }
    }
    return -1;
  }
  
  // isArrayLike :: * -> boolean
  // Return true iff x is array-like
  function isArrayLike(x) {
    return x != null && typeof x.length === 'number' && typeof x !== 'function';
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  
  // id :: a -> a
  var id$1 = function id(x) {
    return x;
  };
  
  // compose :: (b -> c) -> (a -> b) -> (a -> c)
  var compose = function compose(f, g) {
    return function (x) {
      return f(g(x));
    };
  };
  
  // apply :: (a -> b) -> a -> b
  var apply$1 = function apply(f, x) {
    return f(x);
  };
  
  // curry2 :: ((a, b) -> c) -> (a -> b -> c)
  function curry2(f) {
    function curried(a, b) {
      switch (arguments.length) {
        case 0:
          return curried;
        case 1:
          return function (b) {
            return f(a, b);
          };
        default:
          return f(a, b);
      }
    }
    return curried;
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Create a new Disposable which will dispose its underlying resource.
   * @param {function} dispose function
   * @param {*?} data any data to be passed to disposer function
   * @constructor
   */
  function Disposable (dispose, data) {
    this._dispose = dispose;
    this._data = data;
  }
  
  Disposable.prototype.dispose = function () {
    return this._dispose(this._data)
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function SettableDisposable () {
    this.disposable = void 0;
    this.disposed = false;
    this._resolve = void 0;
  
    var self = this;
    this.result = new Promise(function (resolve) {
      self._resolve = resolve;
    });
  }
  
  SettableDisposable.prototype.setDisposable = function (disposable) {
    if (this.disposable !== void 0) {
      throw new Error('setDisposable called more than once')
    }
  
    this.disposable = disposable;
  
    if (this.disposed) {
      this._resolve(disposable.dispose());
    }
  };
  
  SettableDisposable.prototype.dispose = function () {
    if (this.disposed) {
      return this.result
    }
  
    this.disposed = true;
  
    if (this.disposable !== void 0) {
      this.result = this.disposable.dispose();
    }
  
    return this.result
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function isPromise (p) {
    return p !== null && typeof p === 'object' && typeof p.then === 'function'
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  var map$3 = map$2;
  var identity$2 = id$1;
  
  /**
   * Call disposable.dispose.  If it returns a promise, catch promise
   * error and forward it through the provided sink.
   * @param {number} t time
   * @param {{dispose: function}} disposable
   * @param {{error: function}} sink
   * @return {*} result of disposable.dispose
   */
  function tryDispose (t, disposable, sink) {
    var result = disposeSafely(disposable);
    return isPromise(result)
      ? result.catch(function (e) {
        sink.error(t, e);
      })
      : result
  }
  
  /**
   * Create a new Disposable which will dispose its underlying resource
   * at most once.
   * @param {function} dispose function
   * @param {*?} data any data to be passed to disposer function
   * @return {Disposable}
   */
  function create$33 (dispose, data) {
    return once(new Disposable(dispose, data))
  }
  
  /**
   * Create a noop disposable. Can be used to satisfy a Disposable
   * requirement when no actual resource needs to be disposed.
   * @return {Disposable|exports|module.exports}
   */
  function empty$1 () {
    return new Disposable(identity$2, void 0)
  }
  
  /**
   * Create a disposable that will dispose all input disposables in parallel.
   * @param {Array<Disposable>} disposables
   * @return {Disposable}
   */
  function all (disposables) {
    return create$33(disposeAll, disposables)
  }
  
  function disposeAll (disposables) {
    return Promise.all(map$3(disposeSafely, disposables))
  }
  
  function disposeSafely (disposable) {
    try {
      return disposable.dispose()
    } catch (e) {
      return Promise.reject(e)
    }
  }
  
  /**
   * Create a disposable from a promise for another disposable
   * @param {Promise<Disposable>} disposablePromise
   * @return {Disposable}
   */
  
  
  /**
   * Create a disposable proxy that allows its underlying disposable to
   * be set later.
   * @return {SettableDisposable}
   */
  function settable () {
    return new SettableDisposable()
  }
  
  /**
   * Wrap an existing disposable (which may not already have been once()d)
   * so that it will only dispose its underlying resource at most once.
   * @param {{ dispose: function() }} disposable
   * @return {Disposable} wrapped disposable
   */
  function once (disposable) {
    return new Disposable(disposeMemoized, memoized(disposable))
  }
  
  function disposeMemoized (memoized) {
    if (!memoized.disposed) {
      memoized.disposed = true;
      memoized.value = disposeSafely(memoized.disposable);
      memoized.disposable = void 0;
    }
  
    return memoized.value
  }
  
  function memoized (disposable) {
    return { disposed: false, disposable: disposable, value: void 0 }
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function fatalError (e) {
    setTimeout(function () {
      throw e
    }, 0);
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function PropagateTask (run, value, sink) {
    this._run = run;
    this.value = value;
    this.sink = sink;
    this.active = true;
  }
  
  PropagateTask.event = function (value, sink) {
    return new PropagateTask(emit, value, sink)
  };
  
  PropagateTask.end = function (value, sink) {
    return new PropagateTask(end, value, sink)
  };
  
  PropagateTask.error = function (value, sink) {
    return new PropagateTask(error$1, value, sink)
  };
  
  PropagateTask.prototype.dispose = function () {
    this.active = false;
  };
  
  PropagateTask.prototype.run = function (t) {
    if (!this.active) {
      return
    }
    this._run(t, this.value, this.sink);
  };
  
  PropagateTask.prototype.error = function (t, e) {
    if (!this.active) {
      return fatalError(e)
    }
    this.sink.error(t, e);
  };
  
  function error$1 (t, e, sink) {
    sink.error(t, e);
  }
  
  function emit (t, x, sink) {
    sink.event(t, x);
  }
  
  function end (t, x, sink) {
    sink.end(t, x);
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Stream containing only x
   * @param {*} x
   * @returns {Stream}
   */
  function of (x) {
    return new Stream(new Just(x))
  }
  
  function Just (x) {
    this.value = x;
  }
  
  Just.prototype.run = function (sink, scheduler) {
    return scheduler.asap(new PropagateTask(runJust, this.value, sink))
  };
  
  function runJust (t, x, sink) {
    sink.event(t, x);
    sink.end(t, void 0);
  }
  
  /**
   * Stream containing no events and ends immediately
   * @returns {Stream}
   */
  function empty () {
    return EMPTY
  }
  
  function EmptySource () {}
  
  EmptySource.prototype.run = function (sink, scheduler) {
    var task = PropagateTask.end(void 0, sink);
    scheduler.asap(task);
  
    return create$33(disposeEmpty, task)
  };
  
  function disposeEmpty (task) {
    return task.dispose()
  }
  
  var EMPTY = new Stream(new EmptySource());
  
  /**
   * Stream containing no events and never ends
   * @returns {Stream}
   */
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function fromArray$1 (a) {
    return new Stream(new ArraySource(a))
  }
  
  function ArraySource (a) {
    this.array = a;
  }
  
  ArraySource.prototype.run = function (sink, scheduler) {
    return scheduler.asap(new PropagateTask(runProducer, this.array, sink))
  };
  
  function runProducer (t, array, sink) {
    for (var i = 0, l = array.length; i < l && this.active; ++i) {
      sink.event(t, array[i]);
    }
  
    this.active && sink.end(t);
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /* global Set, Symbol */
  var iteratorSymbol;
  // Firefox ships a partial implementation using the name @@iterator.
  // https://bugzilla.mozilla.org/show_bug.cgi?id=907077#c14
  if (typeof Set === 'function' && typeof new Set()['@@iterator'] === 'function') {
    iteratorSymbol = '@@iterator';
  } else {
    iteratorSymbol = typeof Symbol === 'function' ? Symbol.iterator
    : '_es6shim_iterator_';
  }
  
  function isIterable (o) {
    return typeof o[iteratorSymbol] === 'function'
  }
  
  function getIterator (o) {
    return o[iteratorSymbol]()
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function fromIterable (iterable) {
    return new Stream(new IterableSource(iterable))
  }
  
  function IterableSource (iterable) {
    this.iterable = iterable;
  }
  
  IterableSource.prototype.run = function (sink, scheduler) {
    return scheduler.asap(new PropagateTask(runProducer$1, getIterator(this.iterable), sink))
  };
  
  function runProducer$1 (t, iterator, sink) {
    var r = iterator.next();
  
    while (!r.done && this.active) {
      sink.event(t, r.value);
      r = iterator.next();
    }
  
    sink.end(t, r.value);
  }
  
  function symbolObservablePonyfill(root) {
    var result;
    var Symbol = root.Symbol;
  
    if (typeof Symbol === 'function') {
      if (Symbol.observable) {
        result = Symbol.observable;
      } else {
        result = Symbol('observable');
        Symbol.observable = result;
      }
    } else {
      result = '@@observable';
    }
  
    return result;
  }
  
  /* global window */
  var root;
  
  if (typeof self !== 'undefined') {
    root = self;
  } else if (typeof window !== 'undefined') {
    root = window;
  } else if (typeof global !== 'undefined') {
    root = global;
  } else if (typeof module !== 'undefined') {
    root = module;
  } else {
    root = Function('return this')();
  }
  
  var result = symbolObservablePonyfill(root);
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function getObservable (o) { // eslint-disable-line complexity
    var obs = null;
    if (o) {
    // Access foreign method only once
      var method = o[result];
      if (typeof method === 'function') {
        obs = method.call(o);
        if (!(obs && typeof obs.subscribe === 'function')) {
          throw new TypeError('invalid observable ' + obs)
        }
      }
    }
  
    return obs
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function tryEvent (t, x, sink) {
    try {
      sink.event(t, x);
    } catch (e) {
      sink.error(t, e);
    }
  }
  
  function tryEnd (t, x, sink) {
    try {
      sink.end(t, x);
    } catch (e) {
      sink.error(t, e);
    }
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function fromObservable (observable) {
    return new Stream(new ObservableSource(observable))
  }
  
  function ObservableSource (observable) {
    this.observable = observable;
  }
  
  ObservableSource.prototype.run = function (sink, scheduler) {
    var sub = this.observable.subscribe(new SubscriberSink(sink, scheduler));
    if (typeof sub === 'function') {
      return create$33(sub)
    } else if (sub && typeof sub.unsubscribe === 'function') {
      return create$33(unsubscribe, sub)
    }
  
    throw new TypeError('Observable returned invalid subscription ' + String(sub))
  };
  
  function SubscriberSink (sink, scheduler) {
    this.sink = sink;
    this.scheduler = scheduler;
  }
  
  SubscriberSink.prototype.next = function (x) {
    tryEvent(this.scheduler.now(), x, this.sink);
  };
  
  SubscriberSink.prototype.complete = function (x) {
    tryEnd(this.scheduler.now(), x, this.sink);
  };
  
  SubscriberSink.prototype.error = function (e) {
    this.sink.error(this.scheduler.now(), e);
  };
  
  function unsubscribe (subscription) {
    return subscription.unsubscribe()
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function from (a) { // eslint-disable-line complexity
    if (a instanceof Stream) {
      return a
    }
  
    var observable = getObservable(a);
    if (observable != null) {
      return fromObservable(observable)
    }
  
    if (Array.isArray(a) || isArrayLike(a)) {
      return fromArray$1(a)
    }
  
    if (isIterable(a)) {
      return fromIterable(a)
    }
  
    throw new TypeError('from(x) must be observable, iterable, or array-like: ' + a)
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Create a stream that emits the current time periodically
   * @param {Number} period periodicity of events in millis
   * @param {*} deprecatedValue @deprecated value to emit each period
   * @returns {Stream} new stream that emits the current time every period
   */
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function ScheduledTask (delay, period, task, scheduler) {
    this.time = delay;
    this.period = period;
    this.task = task;
    this.scheduler = scheduler;
    this.active = true;
  }
  
  ScheduledTask.prototype.run = function () {
    return this.task.run(this.time)
  };
  
  ScheduledTask.prototype.error = function (e) {
    return this.task.error(this.time, e)
  };
  
  ScheduledTask.prototype.dispose = function () {
    this.scheduler.cancel(this);
    return this.task.dispose()
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function defer (task) {
    return Promise.resolve(task).then(runTask)
  }
  
  function runTask (task) {
    try {
      return task.run()
    } catch (e) {
      return task.error(e)
    }
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function Scheduler (timer, timeline) {
    this.timer = timer;
    this.timeline = timeline;
  
    this._timer = null;
    this._nextArrival = Infinity;
  
    var self = this;
    this._runReadyTasksBound = function () {
      self._runReadyTasks(self.now());
    };
  }
  
  Scheduler.prototype.now = function () {
    return this.timer.now()
  };
  
  Scheduler.prototype.asap = function (task) {
    return this.schedule(0, -1, task)
  };
  
  Scheduler.prototype.delay = function (delay, task) {
    return this.schedule(delay, -1, task)
  };
  
  Scheduler.prototype.periodic = function (period, task) {
    return this.schedule(0, period, task)
  };
  
  Scheduler.prototype.schedule = function (delay, period, task) {
    var now = this.now();
    var st = new ScheduledTask(now + Math.max(0, delay), period, task, this);
  
    this.timeline.add(st);
    this._scheduleNextRun(now);
    return st
  };
  
  Scheduler.prototype.cancel = function (task) {
    task.active = false;
    if (this.timeline.remove(task)) {
      this._reschedule();
    }
  };
  
  Scheduler.prototype.cancelAll = function (f) {
    this.timeline.removeAll(f);
    this._reschedule();
  };
  
  Scheduler.prototype._reschedule = function () {
    if (this.timeline.isEmpty()) {
      this._unschedule();
    } else {
      this._scheduleNextRun(this.now());
    }
  };
  
  Scheduler.prototype._unschedule = function () {
    this.timer.clearTimer(this._timer);
    this._timer = null;
  };
  
  Scheduler.prototype._scheduleNextRun = function (now) { // eslint-disable-line complexity
    if (this.timeline.isEmpty()) {
      return
    }
  
    var nextArrival = this.timeline.nextArrival();
  
    if (this._timer === null) {
      this._scheduleNextArrival(nextArrival, now);
    } else if (nextArrival < this._nextArrival) {
      this._unschedule();
      this._scheduleNextArrival(nextArrival, now);
    }
  };
  
  Scheduler.prototype._scheduleNextArrival = function (nextArrival, now) {
    this._nextArrival = nextArrival;
    var delay = Math.max(0, nextArrival - now);
    this._timer = this.timer.setTimer(this._runReadyTasksBound, delay);
  };
  
  Scheduler.prototype._runReadyTasks = function (now) {
    this._timer = null;
    this.timeline.runTasks(now, runTask);
    this._scheduleNextRun(this.now());
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /* global setTimeout, clearTimeout */
  
  function ClockTimer () {}
  
  ClockTimer.prototype.now = Date.now;
  
  ClockTimer.prototype.setTimer = function (f, dt) {
    return dt <= 0 ? runAsap(f) : setTimeout(f, dt)
  };
  
  ClockTimer.prototype.clearTimer = function (t) {
    return t instanceof Asap ? t.cancel() : clearTimeout(t)
  };
  
  function Asap (f) {
    this.f = f;
    this.active = true;
  }
  
  Asap.prototype.run = function () {
    return this.active && this.f()
  };
  
  Asap.prototype.error = function (e) {
    throw e
  };
  
  Asap.prototype.cancel = function () {
    this.active = false;
  };
  
  function runAsap (f) {
    var task = new Asap(f);
    defer(task);
    return task
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function Timeline () {
    this.tasks = [];
  }
  
  Timeline.prototype.nextArrival = function () {
    return this.isEmpty() ? Infinity : this.tasks[0].time
  };
  
  Timeline.prototype.isEmpty = function () {
    return this.tasks.length === 0
  };
  
  Timeline.prototype.add = function (st) {
    insertByTime(st, this.tasks);
  };
  
  Timeline.prototype.remove = function (st) {
    var i = binarySearch(st.time, this.tasks);
  
    if (i >= 0 && i < this.tasks.length) {
      var at = findIndex(st, this.tasks[i].events);
      if (at >= 0) {
        this.tasks[i].events.splice(at, 1);
        return true
      }
    }
  
    return false
  };
  
  Timeline.prototype.removeAll = function (f) {
    for (var i = 0, l = this.tasks.length; i < l; ++i) {
      removeAllFrom(f, this.tasks[i]);
    }
  };
  
  Timeline.prototype.runTasks = function (t, runTask) {
    var tasks = this.tasks;
    var l = tasks.length;
    var i = 0;
  
    while (i < l && tasks[i].time <= t) {
      ++i;
    }
  
    this.tasks = tasks.slice(i);
  
    // Run all ready tasks
    for (var j = 0; j < i; ++j) {
      this.tasks = runTasks(runTask, tasks[j], this.tasks);
    }
  };
  
  function runTasks (runTask, timeslot, tasks) { // eslint-disable-line complexity
    var events = timeslot.events;
    for (var i = 0; i < events.length; ++i) {
      var task = events[i];
  
      if (task.active) {
        runTask(task);
  
        // Reschedule periodic repeating tasks
        // Check active again, since a task may have canceled itself
        if (task.period >= 0 && task.active) {
          task.time = task.time + task.period;
          insertByTime(task, tasks);
        }
      }
    }
  
    return tasks
  }
  
  function insertByTime (task, timeslots) { // eslint-disable-line complexity
    var l = timeslots.length;
  
    if (l === 0) {
      timeslots.push(newTimeslot(task.time, [task]));
      return
    }
  
    var i = binarySearch(task.time, timeslots);
  
    if (i >= l) {
      timeslots.push(newTimeslot(task.time, [task]));
    } else if (task.time === timeslots[i].time) {
      timeslots[i].events.push(task);
    } else {
      timeslots.splice(i, 0, newTimeslot(task.time, [task]));
    }
  }
  
  function removeAllFrom (f, timeslot) {
    timeslot.events = removeAll(f, timeslot.events);
  }
  
  function binarySearch (t, sortedArray) { // eslint-disable-line complexity
    var lo = 0;
    var hi = sortedArray.length;
    var mid, y;
  
    while (lo < hi) {
      mid = Math.floor((lo + hi) / 2);
      y = sortedArray[mid];
  
      if (t === y.time) {
        return mid
      } else if (t < y.time) {
        hi = mid;
      } else {
        lo = mid + 1;
      }
    }
    return hi
  }
  
  function newTimeslot (t, events) {
    return { time: t, events: events }
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  var defaultScheduler = new Scheduler(new ClockTimer(), new Timeline());
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function subscribe (subscriber, stream) {
    if (Object(subscriber) !== subscriber) {
      throw new TypeError('subscriber must be an object')
    }
  
    var disposable = settable();
    var observer = new SubscribeObserver(fatalError, subscriber, disposable);
  
    disposable.setDisposable(stream.source.run(observer, defaultScheduler));
  
    return new Subscription(disposable)
  }
  
  function SubscribeObserver (fatalError$$1, subscriber, disposable) {
    this.fatalError = fatalError$$1;
    this.subscriber = subscriber;
    this.disposable = disposable;
  }
  
  SubscribeObserver.prototype.event = function (t, x) {
    if (!this.disposable.disposed && typeof this.subscriber.next === 'function') {
      this.subscriber.next(x);
    }
  };
  
  SubscribeObserver.prototype.end = function (t, x) {
    if (!this.disposable.disposed) {
      var s = this.subscriber;
      var fatalError$$1 = this.fatalError;
      Promise.resolve(this.disposable.dispose()).then(function () {
        if (typeof s.complete === 'function') {
          s.complete(x);
        }
      }).catch(function (e) {
        throwError(e, s, fatalError$$1);
      });
    }
  };
  
  SubscribeObserver.prototype.error = function (t, e) {
    var s = this.subscriber;
    var fatalError$$1 = this.fatalError;
    Promise.resolve(this.disposable.dispose()).then(function () {
      throwError(e, s, fatalError$$1);
    });
  };
  
  function Subscription (disposable) {
    this.disposable = disposable;
  }
  
  Subscription.prototype.unsubscribe = function () {
    this.disposable.dispose();
  };
  
  function throwError (e1, subscriber, throwError) {
    if (typeof subscriber.error === 'function') {
      try {
        subscriber.error(e1);
      } catch (e2) {
        throwError(e2);
      }
    } else {
      throwError(e1);
    }
  }
  
  /** @license MIT License (c) copyright 2010-2017 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function thru (f, stream) {
    return f(stream)
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function EventTargetSource (event, source, capture) {
    this.event = event;
    this.source = source;
    this.capture = capture;
  }
  
  EventTargetSource.prototype.run = function (sink, scheduler) {
    function addEvent (e) {
      tryEvent(scheduler.now(), e, sink);
    }
  
    this.source.addEventListener(this.event, addEvent, this.capture);
  
    return create$33(disposeEventTarget,
      { target: this, addEvent: addEvent })
  };
  
  function disposeEventTarget (info) {
    var target = info.target;
    target.source.removeEventListener(target.event, info.addEvent, target.capture);
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function DeferredSink (sink) {
    this.sink = sink;
    this.events = [];
    this.active = true;
  }
  
  DeferredSink.prototype.event = function (t, x) {
    if (!this.active) {
      return
    }
  
    if (this.events.length === 0) {
      defer(new PropagateAllTask(this.sink, t, this.events));
    }
  
    this.events.push({ time: t, value: x });
  };
  
  DeferredSink.prototype.end = function (t, x) {
    if (!this.active) {
      return
    }
  
    this._end(new EndTask(t, x, this.sink));
  };
  
  DeferredSink.prototype.error = function (t, e) {
    this._end(new ErrorTask(t, e, this.sink));
  };
  
  DeferredSink.prototype._end = function (task) {
    this.active = false;
    defer(task);
  };
  
  function PropagateAllTask (sink, time, events) {
    this.sink = sink;
    this.events = events;
    this.time = time;
  }
  
  PropagateAllTask.prototype.run = function () {
    var events = this.events;
    var sink = this.sink;
    var event;
  
    for (var i = 0, l = events.length; i < l; ++i) {
      event = events[i];
      this.time = event.time;
      sink.event(event.time, event.value);
    }
  
    events.length = 0;
  };
  
  PropagateAllTask.prototype.error = function (e) {
    this.sink.error(this.time, e);
  };
  
  function EndTask (t, x, sink) {
    this.time = t;
    this.value = x;
    this.sink = sink;
  }
  
  EndTask.prototype.run = function () {
    this.sink.end(this.time, this.value);
  };
  
  EndTask.prototype.error = function (e) {
    this.sink.error(this.time, e);
  };
  
  function ErrorTask (t, e, sink) {
    this.time = t;
    this.value = e;
    this.sink = sink;
  }
  
  ErrorTask.prototype.run = function () {
    this.sink.error(this.time, this.value);
  };
  
  ErrorTask.prototype.error = function (e) {
    throw e
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function EventEmitterSource (event, source) {
    this.event = event;
    this.source = source;
  }
  
  EventEmitterSource.prototype.run = function (sink, scheduler) {
    // NOTE: Because EventEmitter allows events in the same call stack as
    // a listener is added, use a DeferredSink to buffer events
    // until the stack clears, then propagate.  This maintains most.js's
    // invariant that no event will be delivered in the same call stack
    // as an observer begins observing.
    var dsink = new DeferredSink(sink);
  
    function addEventVariadic (a) {
      var l = arguments.length;
      if (l > 1) {
        var arr = new Array(l);
        for (var i = 0; i < l; ++i) {
          arr[i] = arguments[i];
        }
        tryEvent(scheduler.now(), arr, dsink);
      } else {
        tryEvent(scheduler.now(), a, dsink);
      }
    }
  
    this.source.addListener(this.event, addEventVariadic);
  
    return create$33(disposeEventEmitter, { target: this, addEvent: addEventVariadic })
  };
  
  function disposeEventEmitter (info) {
    var target = info.target;
    target.source.removeListener(target.event, info.addEvent);
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Create a stream from an EventTarget, such as a DOM Node, or EventEmitter.
   * @param {String} event event type name, e.g. 'click'
   * @param {EventTarget|EventEmitter} source EventTarget or EventEmitter
   * @param {*?} capture for DOM events, whether to use
   *  capturing--passed as 3rd parameter to addEventListener.
   * @returns {Stream} stream containing all events of the specified type
   * from the source.
   */
  function fromEvent (event, source, capture) { // eslint-disable-line complexity
    var s;
  
    if (typeof source.addEventListener === 'function' && typeof source.removeEventListener === 'function') {
      if (arguments.length < 3) {
        capture = false;
      }
  
      s = new EventTargetSource(event, source, capture);
    } else if (typeof source.addListener === 'function' && typeof source.removeListener === 'function') {
      s = new EventEmitterSource(event, source);
    } else {
      throw new Error('source must support addEventListener/removeEventListener or addListener/removeListener')
    }
  
    return new Stream(s)
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function withDefaultScheduler (source) {
    return withScheduler(source, defaultScheduler)
  }
  
  function withScheduler (source, scheduler) {
    return new Promise(function (resolve, reject) {
      runSource(source, scheduler, resolve, reject);
    })
  }
  
  function runSource (source, scheduler, resolve, reject) {
    var disposable = settable();
    var observer = new Drain(resolve, reject, disposable);
  
    disposable.setDisposable(source.run(observer, scheduler));
  }
  
  function Drain (end, error, disposable) {
    this._end = end;
    this._error = error;
    this._disposable = disposable;
    this.active = true;
  }
  
  Drain.prototype.event = function (t, x) {};
  
  Drain.prototype.end = function (t, x) {
    if (!this.active) {
      return
    }
    this.active = false;
    disposeThen(this._end, this._error, this._disposable, x);
  };
  
  Drain.prototype.error = function (t, e) {
    this.active = false;
    disposeThen(this._error, this._error, this._disposable, e);
  };
  
  function disposeThen (end, error, disposable, x) {
    Promise.resolve(disposable.dispose()).then(function () {
      end(x);
    }, error);
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * A sink mixin that simply forwards event, end, and error to
   * another sink.
   * @param sink
   * @constructor
   */
  function Pipe (sink) {
    this.sink = sink;
  }
  
  Pipe.prototype.event = function (t, x) {
    return this.sink.event(t, x)
  };
  
  Pipe.prototype.end = function (t, x) {
    return this.sink.end(t, x)
  };
  
  Pipe.prototype.error = function (t, e) {
    return this.sink.error(t, e)
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function Filter (p, source) {
    this.p = p;
    this.source = source;
  }
  
  /**
   * Create a filtered source, fusing adjacent filter.filter if possible
   * @param {function(x:*):boolean} p filtering predicate
   * @param {{run:function}} source source to filter
   * @returns {Filter} filtered source
   */
  Filter.create = function createFilter (p, source) {
    if (source instanceof Filter) {
      return new Filter(and(source.p, p), source.source)
    }
  
    return new Filter(p, source)
  };
  
  Filter.prototype.run = function (sink, scheduler) {
    return this.source.run(new FilterSink(this.p, sink), scheduler)
  };
  
  function FilterSink (p, sink) {
    this.p = p;
    this.sink = sink;
  }
  
  FilterSink.prototype.end = Pipe.prototype.end;
  FilterSink.prototype.error = Pipe.prototype.error;
  
  FilterSink.prototype.event = function (t, x) {
    var p = this.p;
    p(x) && this.sink.event(t, x);
  };
  
  function and (p, q) {
    return function (x) {
      return p(x) && q(x)
    }
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function FilterMap (p, f, source) {
    this.p = p;
    this.f = f;
    this.source = source;
  }
  
  FilterMap.prototype.run = function (sink, scheduler) {
    return this.source.run(new FilterMapSink(this.p, this.f, sink), scheduler)
  };
  
  function FilterMapSink (p, f, sink) {
    this.p = p;
    this.f = f;
    this.sink = sink;
  }
  
  FilterMapSink.prototype.event = function (t, x) {
    var f = this.f;
    var p = this.p;
    p(x) && this.sink.event(t, f(x));
  };
  
  FilterMapSink.prototype.end = Pipe.prototype.end;
  FilterMapSink.prototype.error = Pipe.prototype.error;
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function Map$1 (f, source) {
    this.f = f;
    this.source = source;
  }
  
  /**
   * Create a mapped source, fusing adjacent map.map, filter.map,
   * and filter.map.map if possible
   * @param {function(*):*} f mapping function
   * @param {{run:function}} source source to map
   * @returns {Map|FilterMap} mapped source, possibly fused
   */
  Map$1.create = function createMap (f, source) {
    if (source instanceof Map$1) {
      return new Map$1(compose(f, source.f), source.source)
    }
  
    if (source instanceof Filter) {
      return new FilterMap(source.p, f, source.source)
    }
  
    return new Map$1(f, source)
  };
  
  Map$1.prototype.run = function (sink, scheduler) { // eslint-disable-line no-extend-native
    return this.source.run(new MapSink(this.f, sink), scheduler)
  };
  
  function MapSink (f, sink) {
    this.f = f;
    this.sink = sink;
  }
  
  MapSink.prototype.end = Pipe.prototype.end;
  MapSink.prototype.error = Pipe.prototype.error;
  
  MapSink.prototype.event = function (t, x) {
    var f = this.f;
    this.sink.event(t, f(x));
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Transform each value in the stream by applying f to each
   * @param {function(*):*} f mapping function
   * @param {Stream} stream stream to map
   * @returns {Stream} stream containing items transformed by f
   */
  function map$4 (f, stream) {
    return new Stream(Map$1.create(f, stream.source))
  }
  
  /**
  * Replace each value in the stream with x
  * @param {*} x
  * @param {Stream} stream
  * @returns {Stream} stream containing items replaced with x
  */
  function constant (x, stream) {
    return map$4(function () {
      return x
    }, stream)
  }
  
  /**
  * Perform a side effect for each item in the stream
  * @param {function(x:*):*} f side effect to execute for each item. The
  *  return value will be discarded.
  * @param {Stream} stream stream to tap
  * @returns {Stream} new stream containing the same items as this stream
  */
  function tap (f, stream) {
    return new Stream(new Tap(f, stream.source))
  }
  
  function Tap (f, source) {
    this.source = source;
    this.f = f;
  }
  
  Tap.prototype.run = function (sink, scheduler) {
    return this.source.run(new TapSink(this.f, sink), scheduler)
  };
  
  function TapSink (f, sink) {
    this.sink = sink;
    this.f = f;
  }
  
  TapSink.prototype.end = Pipe.prototype.end;
  TapSink.prototype.error = Pipe.prototype.error;
  
  TapSink.prototype.event = function (t, x) {
    var f = this.f;
    f(x);
    this.sink.event(t, x);
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Observe all the event values in the stream in time order. The
   * provided function `f` will be called for each event value
   * @param {function(x:T):*} f function to call with each event value
   * @param {Stream<T>} stream stream to observe
   * @return {Promise} promise that fulfills after the stream ends without
   *  an error, or rejects if the stream ends with an error.
   */
  function observe (f, stream) {
    return drain(tap(f, stream))
  }
  
  /**
   * "Run" a stream by creating demand and consuming all events
   * @param {Stream<T>} stream stream to drain
   * @return {Promise} promise that fulfills after the stream ends without
   *  an error, or rejects if the stream ends with an error.
   */
  function drain (stream) {
    return withDefaultScheduler(stream.source)
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Generalized feedback loop. Call a stepper function for each event. The stepper
   * will be called with 2 params: the current seed and the an event value.  It must
   * return a new { seed, value } pair. The `seed` will be fed back into the next
   * invocation of stepper, and the `value` will be propagated as the event value.
   * @param {function(seed:*, value:*):{seed:*, value:*}} stepper loop step function
   * @param {*} seed initial seed value passed to first stepper call
   * @param {Stream} stream event stream
   * @returns {Stream} new stream whose values are the `value` field of the objects
   * returned by the stepper
   */
  function loop (stepper, seed, stream) {
    return new Stream(new Loop(stepper, seed, stream.source))
  }
  
  function Loop (stepper, seed, source) {
    this.step = stepper;
    this.seed = seed;
    this.source = source;
  }
  
  Loop.prototype.run = function (sink, scheduler) {
    return this.source.run(new LoopSink(this.step, this.seed, sink), scheduler)
  };
  
  function LoopSink (stepper, seed, sink) {
    this.step = stepper;
    this.seed = seed;
    this.sink = sink;
  }
  
  LoopSink.prototype.error = Pipe.prototype.error;
  
  LoopSink.prototype.event = function (t, x) {
    var result = this.step(this.seed, x);
    this.seed = result.seed;
    this.sink.event(t, result.value);
  };
  
  LoopSink.prototype.end = function (t) {
    this.sink.end(t, this.seed);
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Create a stream containing successive reduce results of applying f to
   * the previous reduce result and the current stream item.
   * @param {function(result:*, x:*):*} f reducer function
   * @param {*} initial initial value
   * @param {Stream} stream stream to scan
   * @returns {Stream} new stream containing successive reduce results
   */
  function scan (f, initial, stream) {
    return new Stream(new Scan(f, initial, stream.source))
  }
  
  function Scan (f, z, source) {
    this.source = source;
    this.f = f;
    this.value = z;
  }
  
  Scan.prototype.run = function (sink, scheduler) {
    var d1 = scheduler.asap(PropagateTask.event(this.value, sink));
    var d2 = this.source.run(new ScanSink(this.f, this.value, sink), scheduler);
    return all([d1, d2])
  };
  
  function ScanSink (f, z, sink) {
    this.f = f;
    this.value = z;
    this.sink = sink;
  }
  
  ScanSink.prototype.event = function (t, x) {
    var f = this.f;
    this.value = f(this.value, x);
    this.sink.event(t, this.value);
  };
  
  ScanSink.prototype.error = Pipe.prototype.error;
  ScanSink.prototype.end = Pipe.prototype.end;
  
  /**
  * Reduce a stream to produce a single result.  Note that reducing an infinite
  * stream will return a Promise that never fulfills, but that may reject if an error
  * occurs.
  * @param {function(result:*, x:*):*} f reducer function
  * @param {*} initial initial value
  * @param {Stream} stream to reduce
  * @returns {Promise} promise for the file result of the reduce
  */
  function reduce$1 (f, initial, stream) {
    return withDefaultScheduler(new Reduce(f, initial, stream.source))
  }
  
  function Reduce (f, z, source) {
    this.source = source;
    this.f = f;
    this.value = z;
  }
  
  Reduce.prototype.run = function (sink, scheduler) {
    return this.source.run(new ReduceSink(this.f, this.value, sink), scheduler)
  };
  
  function ReduceSink (f, z, sink) {
    this.f = f;
    this.value = z;
    this.sink = sink;
  }
  
  ReduceSink.prototype.event = function (t, x) {
    var f = this.f;
    this.value = f(this.value, x);
    this.sink.event(t, this.value);
  };
  
  ReduceSink.prototype.error = Pipe.prototype.error;
  
  ReduceSink.prototype.end = function (t) {
    this.sink.end(t, this.value);
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Compute a stream by unfolding tuples of future values from a seed value
   * Event times may be controlled by returning a Promise from f
   * @param {function(seed:*):{value:*, seed:*, done:boolean}|Promise<{value:*, seed:*, done:boolean}>} f unfolding function accepts
   *  a seed and returns a new tuple with a value, new seed, and boolean done flag.
   *  If tuple.done is true, the stream will end.
   * @param {*} seed seed value
   * @returns {Stream} stream containing all value of all tuples produced by the
   *  unfolding function.
   */
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Compute a stream by iteratively calling f to produce values
   * Event times may be controlled by returning a Promise from f
   * @param {function(x:*):*|Promise<*>} f
   * @param {*} x initial value
   * @returns {Stream}
   */
  
  /** @license MIT License (c) copyright 2010-2014 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Compute a stream using an *async* generator, which yields promises
   * to control event times.
   * @param f
   * @returns {Stream}
   */
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function continueWith (f, stream) {
    return new Stream(new ContinueWith(f, stream.source))
  }
  
  function ContinueWith (f, source) {
    this.f = f;
    this.source = source;
  }
  
  ContinueWith.prototype.run = function (sink, scheduler) {
    return new ContinueWithSink(this.f, this.source, sink, scheduler)
  };
  
  function ContinueWithSink (f, source, sink, scheduler) {
    this.f = f;
    this.sink = sink;
    this.scheduler = scheduler;
    this.active = true;
    this.disposable = once(source.run(this, scheduler));
  }
  
  ContinueWithSink.prototype.error = Pipe.prototype.error;
  
  ContinueWithSink.prototype.event = function (t, x) {
    if (!this.active) {
      return
    }
    this.sink.event(t, x);
  };
  
  ContinueWithSink.prototype.end = function (t, x) {
    if (!this.active) {
      return
    }
  
    tryDispose(t, this.disposable, this.sink);
    this._startNext(t, x, this.sink);
  };
  
  ContinueWithSink.prototype._startNext = function (t, x, sink) {
    try {
      this.disposable = this._continue(this.f, x, sink);
    } catch (e) {
      sink.error(t, e);
    }
  };
  
  ContinueWithSink.prototype._continue = function (f, x, sink) {
    return f(x).source.run(sink, this.scheduler)
  };
  
  ContinueWithSink.prototype.dispose = function () {
    this.active = false;
    return this.disposable.dispose()
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * @param {*} x value to prepend
   * @param {Stream} stream
   * @returns {Stream} new stream with x prepended
   */
  function cons$1 (x, stream) {
    return concat(of(x), stream)
  }
  
  /**
  * @param {Stream} left
  * @param {Stream} right
  * @returns {Stream} new stream containing all events in left followed by all
  *  events in right.  This *timeshifts* right to the end of left.
  */
  function concat (left, right) {
    return continueWith(function () {
      return right
    }, left)
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function IndexSink (i, sink) {
    this.sink = sink;
    this.index = i;
    this.active = true;
    this.value = void 0;
  }
  
  IndexSink.prototype.event = function (t, x) {
    if (!this.active) {
      return
    }
    this.value = x;
    this.sink.event(t, this);
  };
  
  IndexSink.prototype.end = function (t, x) {
    if (!this.active) {
      return
    }
    this.active = false;
    this.sink.end(t, { index: this.index, value: x });
  };
  
  IndexSink.prototype.error = Pipe.prototype.error;
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function invoke (f, args) {
    /* eslint complexity: [2,7] */
    switch (args.length) {
      case 0: return f()
      case 1: return f(args[0])
      case 2: return f(args[0], args[1])
      case 3: return f(args[0], args[1], args[2])
      case 4: return f(args[0], args[1], args[2], args[3])
      case 5: return f(args[0], args[1], args[2], args[3], args[4])
      default:
        return f.apply(void 0, args)
    }
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  var map$5 = map$2;
  var tail$1 = tail;
  
  /**
   * Combine latest events from all input streams
   * @param {function(...events):*} f function to combine most recent events
   * @returns {Stream} stream containing the result of applying f to the most recent
   *  event of each input stream, whenever a new event arrives on any stream.
   */
  function combine$1 (f /*, ...streams */) {
    return combineArray(f, tail$1(arguments))
  }
  
  /**
  * Combine latest events from all input streams
  * @param {function(...events):*} f function to combine most recent events
  * @param {[Stream]} streams most recent events
  * @returns {Stream} stream containing the result of applying f to the most recent
  *  event of each input stream, whenever a new event arrives on any stream.
  */
  function combineArray (f, streams) {
    var l = streams.length;
    return l === 0 ? empty()
    : l === 1 ? map$4(f, streams[0])
    : new Stream(combineSources(f, streams))
  }
  
  function combineSources (f, streams) {
    return new Combine(f, map$5(getSource, streams))
  }
  
  function getSource (stream) {
    return stream.source
  }
  
  function Combine (f, sources) {
    this.f = f;
    this.sources = sources;
  }
  
  Combine.prototype.run = function (sink, scheduler) {
    var l = this.sources.length;
    var disposables = new Array(l);
    var sinks = new Array(l);
  
    var mergeSink = new CombineSink(disposables, sinks, sink, this.f);
  
    for (var indexSink, i = 0; i < l; ++i) {
      indexSink = sinks[i] = new IndexSink(i, mergeSink);
      disposables[i] = this.sources[i].run(indexSink, scheduler);
    }
  
    return all(disposables)
  };
  
  function CombineSink (disposables, sinks, sink, f) {
    this.sink = sink;
    this.disposables = disposables;
    this.sinks = sinks;
    this.f = f;
  
    var l = sinks.length;
    this.awaiting = l;
    this.values = new Array(l);
    this.hasValue = new Array(l);
    for (var i = 0; i < l; ++i) {
      this.hasValue[i] = false;
    }
  
    this.activeCount = sinks.length;
  }
  
  CombineSink.prototype.error = Pipe.prototype.error;
  
  CombineSink.prototype.event = function (t, indexedValue) {
    var i = indexedValue.index;
    var awaiting = this._updateReady(i);
  
    this.values[i] = indexedValue.value;
    if (awaiting === 0) {
      this.sink.event(t, invoke(this.f, this.values));
    }
  };
  
  CombineSink.prototype._updateReady = function (index) {
    if (this.awaiting > 0) {
      if (!this.hasValue[index]) {
        this.hasValue[index] = true;
        this.awaiting -= 1;
      }
    }
    return this.awaiting
  };
  
  CombineSink.prototype.end = function (t, indexedValue) {
    tryDispose(t, this.disposables[indexedValue.index], this.sink);
    if (--this.activeCount === 0) {
      this.sink.end(t, indexedValue.value);
    }
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Assume fs is a stream containing functions, and apply the latest function
   * in fs to the latest value in xs.
   * fs:         --f---------g--------h------>
   * xs:         -a-------b-------c-------d-->
   * ap(fs, xs): --fa-----fb-gb---gc--hc--hd->
   * @param {Stream} fs stream of functions to apply to the latest x
   * @param {Stream} xs stream of values to which to apply all the latest f
   * @returns {Stream} stream containing all the applications of fs to xs
   */
  function ap (fs, xs) {
    return combine$1(apply$1, fs, xs)
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Transform a stream by passing its events through a transducer.
   * @param  {function} transducer transducer function
   * @param  {Stream} stream stream whose events will be passed through the
   *  transducer
   * @return {Stream} stream of events transformed by the transducer
   */
  function transduce (transducer, stream) {
    return new Stream(new Transduce(transducer, stream.source))
  }
  
  function Transduce (transducer, source) {
    this.transducer = transducer;
    this.source = source;
  }
  
  Transduce.prototype.run = function (sink, scheduler) {
    var xf = this.transducer(new Transformer(sink));
    return this.source.run(new TransduceSink(getTxHandler(xf), sink), scheduler)
  };
  
  function TransduceSink (adapter, sink) {
    this.xf = adapter;
    this.sink = sink;
  }
  
  TransduceSink.prototype.event = function (t, x) {
    var next = this.xf.step(t, x);
  
    return this.xf.isReduced(next)
      ? this.sink.end(t, this.xf.getResult(next))
      : next
  };
  
  TransduceSink.prototype.end = function (t, x) {
    return this.xf.result(x)
  };
  
  TransduceSink.prototype.error = function (t, e) {
    return this.sink.error(t, e)
  };
  
  function Transformer (sink) {
    this.time = -Infinity;
    this.sink = sink;
  }
  
  Transformer.prototype['@@transducer/init'] = Transformer.prototype.init = function () {};
  
  Transformer.prototype['@@transducer/step'] = Transformer.prototype.step = function (t, x) {
    if (!isNaN(t)) {
      this.time = Math.max(t, this.time);
    }
    return this.sink.event(this.time, x)
  };
  
  Transformer.prototype['@@transducer/result'] = Transformer.prototype.result = function (x) {
    return this.sink.end(this.time, x)
  };
  
  /**
  * Given an object supporting the new or legacy transducer protocol,
  * create an adapter for it.
  * @param {object} tx transform
  * @returns {TxAdapter|LegacyTxAdapter}
  */
  function getTxHandler (tx) {
    return typeof tx['@@transducer/step'] === 'function'
      ? new TxAdapter(tx)
      : new LegacyTxAdapter(tx)
  }
  
  /**
  * Adapter for new official transducer protocol
  * @param {object} tx transform
  * @constructor
  */
  function TxAdapter (tx) {
    this.tx = tx;
  }
  
  TxAdapter.prototype.step = function (t, x) {
    return this.tx['@@transducer/step'](t, x)
  };
  TxAdapter.prototype.result = function (x) {
    return this.tx['@@transducer/result'](x)
  };
  TxAdapter.prototype.isReduced = function (x) {
    return x != null && x['@@transducer/reduced']
  };
  TxAdapter.prototype.getResult = function (x) {
    return x['@@transducer/value']
  };
  
  /**
  * Adapter for older transducer protocol
  * @param {object} tx transform
  * @constructor
  */
  function LegacyTxAdapter (tx) {
    this.tx = tx;
  }
  
  LegacyTxAdapter.prototype.step = function (t, x) {
    return this.tx.step(t, x)
  };
  LegacyTxAdapter.prototype.result = function (x) {
    return this.tx.result(x)
  };
  LegacyTxAdapter.prototype.isReduced = function (x) {
    return x != null && x.__transducers_reduced__
  };
  LegacyTxAdapter.prototype.getResult = function (x) {
    return x.value
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Doubly linked list
   * @constructor
   */
  function LinkedList () {
    this.head = null;
    this.length = 0;
  }
  
  /**
   * Add a node to the end of the list
   * @param {{prev:Object|null, next:Object|null, dispose:function}} x node to add
   */
  LinkedList.prototype.add = function (x) {
    if (this.head !== null) {
      this.head.prev = x;
      x.next = this.head;
    }
    this.head = x;
    ++this.length;
  };
  
  /**
   * Remove the provided node from the list
   * @param {{prev:Object|null, next:Object|null, dispose:function}} x node to remove
   */
  LinkedList.prototype.remove = function (x) { // eslint-disable-line  complexity
    --this.length;
    if (x === this.head) {
      this.head = this.head.next;
    }
    if (x.next !== null) {
      x.next.prev = x.prev;
      x.next = null;
    }
    if (x.prev !== null) {
      x.prev.next = x.next;
      x.prev = null;
    }
  };
  
  /**
   * @returns {boolean} true iff there are no nodes in the list
   */
  LinkedList.prototype.isEmpty = function () {
    return this.length === 0
  };
  
  /**
   * Dispose all nodes
   * @returns {Promise} promise that fulfills when all nodes have been disposed,
   *  or rejects if an error occurs while disposing
   */
  LinkedList.prototype.dispose = function () {
    if (this.isEmpty()) {
      return Promise.resolve()
    }
  
    var promises = [];
    var x = this.head;
    this.head = null;
    this.length = 0;
  
    while (x !== null) {
      promises.push(x.dispose());
      x = x.next;
    }
  
    return Promise.all(promises)
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function mergeConcurrently (concurrency, stream) {
    return mergeMapConcurrently(id$1, concurrency, stream)
  }
  
  function mergeMapConcurrently (f, concurrency, stream) {
    return new Stream(new MergeConcurrently(f, concurrency, stream.source))
  }
  
  function MergeConcurrently (f, concurrency, source) {
    this.f = f;
    this.concurrency = concurrency;
    this.source = source;
  }
  
  MergeConcurrently.prototype.run = function (sink, scheduler) {
    return new Outer(this.f, this.concurrency, this.source, sink, scheduler)
  };
  
  function Outer (f, concurrency, source, sink, scheduler) {
    this.f = f;
    this.concurrency = concurrency;
    this.sink = sink;
    this.scheduler = scheduler;
    this.pending = [];
    this.current = new LinkedList();
    this.disposable = once(source.run(this, scheduler));
    this.active = true;
  }
  
  Outer.prototype.event = function (t, x) {
    this._addInner(t, x);
  };
  
  Outer.prototype._addInner = function (t, x) {
    if (this.current.length < this.concurrency) {
      this._startInner(t, x);
    } else {
      this.pending.push(x);
    }
  };
  
  Outer.prototype._startInner = function (t, x) {
    try {
      this._initInner(t, x);
    } catch (e) {
      this.error(t, e);
    }
  };
  
  Outer.prototype._initInner = function (t, x) {
    var innerSink = new Inner(t, this, this.sink);
    innerSink.disposable = mapAndRun(this.f, x, innerSink, this.scheduler);
    this.current.add(innerSink);
  };
  
  function mapAndRun (f, x, sink, scheduler) {
    return f(x).source.run(sink, scheduler)
  }
  
  Outer.prototype.end = function (t, x) {
    this.active = false;
    tryDispose(t, this.disposable, this.sink);
    this._checkEnd(t, x);
  };
  
  Outer.prototype.error = function (t, e) {
    this.active = false;
    this.sink.error(t, e);
  };
  
  Outer.prototype.dispose = function () {
    this.active = false;
    this.pending.length = 0;
    return Promise.all([this.disposable.dispose(), this.current.dispose()])
  };
  
  Outer.prototype._endInner = function (t, x, inner) {
    this.current.remove(inner);
    tryDispose(t, inner, this);
  
    if (this.pending.length === 0) {
      this._checkEnd(t, x);
    } else {
      this._startInner(t, this.pending.shift());
    }
  };
  
  Outer.prototype._checkEnd = function (t, x) {
    if (!this.active && this.current.isEmpty()) {
      this.sink.end(t, x);
    }
  };
  
  function Inner (time, outer, sink) {
    this.prev = this.next = null;
    this.time = time;
    this.outer = outer;
    this.sink = sink;
    this.disposable = void 0;
  }
  
  Inner.prototype.event = function (t, x) {
    this.sink.event(Math.max(t, this.time), x);
  };
  
  Inner.prototype.end = function (t, x) {
    this.outer._endInner(Math.max(t, this.time), x, this);
  };
  
  Inner.prototype.error = function (t, e) {
    this.outer.error(Math.max(t, this.time), e);
  };
  
  Inner.prototype.dispose = function () {
    return this.disposable.dispose()
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Map each value in the stream to a new stream, and merge it into the
   * returned outer stream. Event arrival times are preserved.
   * @param {function(x:*):Stream} f chaining function, must return a Stream
   * @param {Stream} stream
   * @returns {Stream} new stream containing all events from each stream returned by f
   */
  function flatMap (f, stream) {
    return mergeMapConcurrently(f, Infinity, stream)
  }
  
  /**
   * Monadic join. Flatten a Stream<Stream<X>> to Stream<X> by merging inner
   * streams to the outer. Event arrival times are preserved.
   * @param {Stream<Stream<X>>} stream stream of streams
   * @returns {Stream<X>} new stream containing all events of all inner streams
   */
  function join$1 (stream) {
    return mergeConcurrently(Infinity, stream)
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Map each value in stream to a new stream, and concatenate them all
   * stream:              -a---b---cX
   * f(a):                 1-1-1-1X
   * f(b):                        -2-2-2-2X
   * f(c):                                -3-3-3-3X
   * stream.concatMap(f): -1-1-1-1-2-2-2-2-3-3-3-3X
   * @param {function(x:*):Stream} f function to map each value to a stream
   * @param {Stream} stream
   * @returns {Stream} new stream containing all events from each stream returned by f
   */
  function concatMap (f, stream) {
    return mergeMapConcurrently(f, 1, stream)
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  var copy$3 = copy$2;
  var reduce$2 = reduce;
  
  /**
   * @returns {Stream} stream containing events from all streams in the argument
   * list in time order.  If two events are simultaneous they will be merged in
   * arbitrary order.
   */
  function merge (/* ...streams */) {
    return mergeArray(copy$3(arguments))
  }
  
  /**
   * @param {Array} streams array of stream to merge
   * @returns {Stream} stream containing events from all input observables
   * in time order.  If two events are simultaneous they will be merged in
   * arbitrary order.
   */
  function mergeArray (streams) {
    var l = streams.length;
    return l === 0 ? empty()
      : l === 1 ? streams[0]
      : new Stream(mergeSources(streams))
  }
  
  /**
   * This implements fusion/flattening for merge.  It will
   * fuse adjacent merge operations.  For example:
   * - a.merge(b).merge(c) effectively becomes merge(a, b, c)
   * - merge(a, merge(b, c)) effectively becomes merge(a, b, c)
   * It does this by concatenating the sources arrays of
   * any nested Merge sources, in effect "flattening" nested
   * merge operations into a single merge.
   */
  function mergeSources (streams) {
    return new Merge(reduce$2(appendSources, [], streams))
  }
  
  function appendSources (sources, stream) {
    var source = stream.source;
    return source instanceof Merge
      ? sources.concat(source.sources)
      : sources.concat(source)
  }
  
  function Merge (sources) {
    this.sources = sources;
  }
  
  Merge.prototype.run = function (sink, scheduler) {
    var l = this.sources.length;
    var disposables = new Array(l);
    var sinks = new Array(l);
  
    var mergeSink = new MergeSink(disposables, sinks, sink);
  
    for (var indexSink, i = 0; i < l; ++i) {
      indexSink = sinks[i] = new IndexSink(i, mergeSink);
      disposables[i] = this.sources[i].run(indexSink, scheduler);
    }
  
    return all(disposables)
  };
  
  function MergeSink (disposables, sinks, sink) {
    this.sink = sink;
    this.disposables = disposables;
    this.activeCount = sinks.length;
  }
  
  MergeSink.prototype.error = Pipe.prototype.error;
  
  MergeSink.prototype.event = function (t, indexValue) {
    this.sink.event(t, indexValue.value);
  };
  
  MergeSink.prototype.end = function (t, indexedValue) {
    tryDispose(t, this.disposables[indexedValue.index], this.sink);
    if (--this.activeCount === 0) {
      this.sink.end(t, indexedValue.value);
    }
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * When an event arrives on sampler, emit the result of calling f with the latest
   * values of all streams being sampled
   * @param {function(...values):*} f function to apply to each set of sampled values
   * @param {Stream} sampler streams will be sampled whenever an event arrives
   *  on sampler
   * @returns {Stream} stream of sampled and transformed values
   */
  
  
  /**
   * When an event arrives on sampler, emit the latest event value from stream.
   * @param {Stream} sampler stream of events at whose arrival time
   *  stream's latest value will be propagated
   * @param {Stream} stream stream of values
   * @returns {Stream} sampled stream of values
   */
  function sampleWith (sampler, stream) {
    return new Stream(new Sampler(id$1, sampler.source, [stream.source]))
  }
  
  function sampleArray (f, sampler, streams) {
    return new Stream(new Sampler(f, sampler.source, map$2(getSource$1, streams)))
  }
  
  function getSource$1 (stream) {
    return stream.source
  }
  
  function Sampler (f, sampler, sources) {
    this.f = f;
    this.sampler = sampler;
    this.sources = sources;
  }
  
  Sampler.prototype.run = function (sink, scheduler) {
    var l = this.sources.length;
    var disposables = new Array(l + 1);
    var sinks = new Array(l);
  
    var sampleSink = new SampleSink(this.f, sinks, sink);
  
    for (var hold, i = 0; i < l; ++i) {
      hold = sinks[i] = new Hold(sampleSink);
      disposables[i] = this.sources[i].run(hold, scheduler);
    }
  
    disposables[i] = this.sampler.run(sampleSink, scheduler);
  
    return all(disposables)
  };
  
  function Hold (sink) {
    this.sink = sink;
    this.hasValue = false;
  }
  
  Hold.prototype.event = function (t, x) {
    this.value = x;
    this.hasValue = true;
    this.sink._notify(this);
  };
  
  Hold.prototype.end = function () {};
  Hold.prototype.error = Pipe.prototype.error;
  
  function SampleSink (f, sinks, sink) {
    this.f = f;
    this.sinks = sinks;
    this.sink = sink;
    this.active = false;
  }
  
  SampleSink.prototype._notify = function () {
    if (!this.active) {
      this.active = this.sinks.every(hasValue);
    }
  };
  
  SampleSink.prototype.event = function (t) {
    if (this.active) {
      this.sink.event(t, invoke(this.f, map$2(getValue, this.sinks)));
    }
  };
  
  SampleSink.prototype.end = Pipe.prototype.end;
  SampleSink.prototype.error = Pipe.prototype.error;
  
  function hasValue (hold) {
    return hold.hasValue
  }
  
  function getValue (hold) {
    return hold.value
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  // Based on https://github.com/petkaantonov/deque
  
  function Queue (capPow2) {
    this._capacity = capPow2 || 32;
    this._length = 0;
    this._head = 0;
  }
  
  Queue.prototype.push = function (x) {
    var len = this._length;
    this._checkCapacity(len + 1);
  
    var i = (this._head + len) & (this._capacity - 1);
    this[i] = x;
    this._length = len + 1;
  };
  
  Queue.prototype.shift = function () {
    var head = this._head;
    var x = this[head];
  
    this[head] = void 0;
    this._head = (head + 1) & (this._capacity - 1);
    this._length--;
    return x
  };
  
  Queue.prototype.isEmpty = function () {
    return this._length === 0
  };
  
  Queue.prototype.length = function () {
    return this._length
  };
  
  Queue.prototype._checkCapacity = function (size) {
    if (this._capacity < size) {
      this._ensureCapacity(this._capacity << 1);
    }
  };
  
  Queue.prototype._ensureCapacity = function (capacity) {
    var oldCapacity = this._capacity;
    this._capacity = capacity;
  
    var last = this._head + this._length;
  
    if (last > oldCapacity) {
      copy$4(this, 0, this, oldCapacity, last & (oldCapacity - 1));
    }
  };
  
  function copy$4 (src, srcIndex, dst, dstIndex, len) {
    for (var j = 0; j < len; ++j) {
      dst[j + dstIndex] = src[j + srcIndex];
      src[j + srcIndex] = void 0;
    }
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  var map$6 = map$2;
  /**
   * Combine streams pairwise (or tuple-wise) by index by applying f to values
   * at corresponding indices.  The returned stream ends when any of the input
   * streams ends.
   * @param {function} f function to combine values
   * @returns {Stream} new stream with items at corresponding indices combined
   *  using f
   */
  
  
  /**
  * Combine streams pairwise (or tuple-wise) by index by applying f to values
  * at corresponding indices.  The returned stream ends when any of the input
  * streams ends.
  * @param {function} f function to combine values
  * @param {[Stream]} streams streams to zip using f
  * @returns {Stream} new stream with items at corresponding indices combined
  *  using f
  */
  function zipArray (f, streams) {
    return streams.length === 0 ? empty()
  : streams.length === 1 ? map$4(f, streams[0])
  : new Stream(new Zip(f, map$6(getSource$2, streams)))
  }
  
  function getSource$2 (stream) {
    return stream.source
  }
  
  function Zip (f, sources) {
    this.f = f;
    this.sources = sources;
  }
  
  Zip.prototype.run = function (sink, scheduler) {
    var l = this.sources.length;
    var disposables = new Array(l);
    var sinks = new Array(l);
    var buffers = new Array(l);
  
    var zipSink = new ZipSink(this.f, buffers, sinks, sink);
  
    for (var indexSink, i = 0; i < l; ++i) {
      buffers[i] = new Queue();
      indexSink = sinks[i] = new IndexSink(i, zipSink);
      disposables[i] = this.sources[i].run(indexSink, scheduler);
    }
  
    return all(disposables)
  };
  
  function ZipSink (f, buffers, sinks, sink) {
    this.f = f;
    this.sinks = sinks;
    this.sink = sink;
    this.buffers = buffers;
  }
  
  ZipSink.prototype.event = function (t, indexedValue) { // eslint-disable-line complexity
    var buffers = this.buffers;
    var buffer = buffers[indexedValue.index];
  
    buffer.push(indexedValue.value);
  
    if (buffer.length() === 1) {
      if (!ready(this.buffers)) {
        return
      }
  
      emitZipped(this.f, t, buffers, this.sink);
  
      if (ended(this.buffers, this.sinks)) {
        this.sink.end(t, void 0);
      }
    }
  };
  
  ZipSink.prototype.end = function (t, indexedValue) {
    var buffer = this.buffers[indexedValue.index];
    if (buffer.isEmpty()) {
      this.sink.end(t, indexedValue.value);
    }
  };
  
  ZipSink.prototype.error = Pipe.prototype.error;
  
  function emitZipped (f, t, buffers, sink) {
    sink.event(t, invoke(f, map$6(head, buffers)));
  }
  
  function head (buffer) {
    return buffer.shift()
  }
  
  function ended (buffers, sinks) {
    for (var i = 0, l = buffers.length; i < l; ++i) {
      if (buffers[i].isEmpty() && !sinks[i].active) {
        return true
      }
    }
    return false
  }
  
  function ready (buffers) {
    for (var i = 0, l = buffers.length; i < l; ++i) {
      if (buffers[i].isEmpty()) {
        return false
      }
    }
    return true
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Given a stream of streams, return a new stream that adopts the behavior
   * of the most recent inner stream.
   * @param {Stream} stream of streams on which to switch
   * @returns {Stream} switching stream
   */
  function switchLatest (stream) {
    return new Stream(new Switch(stream.source))
  }
  
  function Switch (source) {
    this.source = source;
  }
  
  Switch.prototype.run = function (sink, scheduler) {
    var switchSink = new SwitchSink(sink, scheduler);
    return all([switchSink, this.source.run(switchSink, scheduler)])
  };
  
  function SwitchSink (sink, scheduler) {
    this.sink = sink;
    this.scheduler = scheduler;
    this.current = null;
    this.ended = false;
  }
  
  SwitchSink.prototype.event = function (t, stream) {
    this._disposeCurrent(t); // TODO: capture the result of this dispose
    this.current = new Segment(t, Infinity, this, this.sink);
    this.current.disposable = stream.source.run(this.current, this.scheduler);
  };
  
  SwitchSink.prototype.end = function (t, x) {
    this.ended = true;
    this._checkEnd(t, x);
  };
  
  SwitchSink.prototype.error = function (t, e) {
    this.ended = true;
    this.sink.error(t, e);
  };
  
  SwitchSink.prototype.dispose = function () {
    return this._disposeCurrent(this.scheduler.now())
  };
  
  SwitchSink.prototype._disposeCurrent = function (t) {
    if (this.current !== null) {
      return this.current._dispose(t)
    }
  };
  
  SwitchSink.prototype._disposeInner = function (t, inner) {
    inner._dispose(t); // TODO: capture the result of this dispose
    if (inner === this.current) {
      this.current = null;
    }
  };
  
  SwitchSink.prototype._checkEnd = function (t, x) {
    if (this.ended && this.current === null) {
      this.sink.end(t, x);
    }
  };
  
  SwitchSink.prototype._endInner = function (t, x, inner) {
    this._disposeInner(t, inner);
    this._checkEnd(t, x);
  };
  
  SwitchSink.prototype._errorInner = function (t, e, inner) {
    this._disposeInner(t, inner);
    this.sink.error(t, e);
  };
  
  function Segment (min, max, outer, sink) {
    this.min = min;
    this.max = max;
    this.outer = outer;
    this.sink = sink;
    this.disposable = empty$1();
  }
  
  Segment.prototype.event = function (t, x) {
    if (t < this.max) {
      this.sink.event(Math.max(t, this.min), x);
    }
  };
  
  Segment.prototype.end = function (t, x) {
    this.outer._endInner(Math.max(t, this.min), x, this);
  };
  
  Segment.prototype.error = function (t, e) {
    this.outer._errorInner(Math.max(t, this.min), e, this);
  };
  
  Segment.prototype._dispose = function (t) {
    this.max = t;
    tryDispose(t, this.disposable, this.sink);
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Retain only items matching a predicate
   * @param {function(x:*):boolean} p filtering predicate called for each item
   * @param {Stream} stream stream to filter
   * @returns {Stream} stream containing only items for which predicate returns truthy
   */
  function filter$1 (p, stream) {
    return new Stream(Filter.create(p, stream.source))
  }
  
  /**
   * Skip repeated events, using === to detect duplicates
   * @param {Stream} stream stream from which to omit repeated events
   * @returns {Stream} stream without repeated events
   */
  function skipRepeats (stream) {
    return skipRepeatsWith(same, stream)
  }
  
  /**
   * Skip repeated events using the provided equals function to detect duplicates
   * @param {function(a:*, b:*):boolean} equals optional function to compare items
   * @param {Stream} stream stream from which to omit repeated events
   * @returns {Stream} stream without repeated events
   */
  function skipRepeatsWith (equals, stream) {
    return new Stream(new SkipRepeats(equals, stream.source))
  }
  
  function SkipRepeats (equals, source) {
    this.equals = equals;
    this.source = source;
  }
  
  SkipRepeats.prototype.run = function (sink, scheduler) {
    return this.source.run(new SkipRepeatsSink(this.equals, sink), scheduler)
  };
  
  function SkipRepeatsSink (equals, sink) {
    this.equals = equals;
    this.sink = sink;
    this.value = void 0;
    this.init = true;
  }
  
  SkipRepeatsSink.prototype.end = Pipe.prototype.end;
  SkipRepeatsSink.prototype.error = Pipe.prototype.error;
  
  SkipRepeatsSink.prototype.event = function (t, x) {
    if (this.init) {
      this.init = false;
      this.value = x;
      this.sink.event(t, x);
    } else if (!this.equals(this.value, x)) {
      this.value = x;
      this.sink.event(t, x);
    }
  };
  
  function same (a, b) {
    return a === b
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * @param {number} n
   * @param {Stream} stream
   * @returns {Stream} new stream containing only up to the first n items from stream
   */
  function take (n, stream) {
    return slice(0, n, stream)
  }
  
  /**
   * @param {number} n
   * @param {Stream} stream
   * @returns {Stream} new stream with the first n items removed
   */
  function skip (n, stream) {
    return slice(n, Infinity, stream)
  }
  
  /**
   * Slice a stream by index. Negative start/end indexes are not supported
   * @param {number} start
   * @param {number} end
   * @param {Stream} stream
   * @returns {Stream} stream containing items where start <= index < end
   */
  function slice (start, end, stream) {
    return end <= start ? empty()
      : new Stream(sliceSource(start, end, stream.source))
  }
  
  function sliceSource (start, end, source) {
    return source instanceof Map$1 ? commuteMapSlice(start, end, source)
      : source instanceof Slice ? fuseSlice(start, end, source)
      : new Slice(start, end, source)
  }
  
  function commuteMapSlice (start, end, source) {
    return Map$1.create(source.f, sliceSource(start, end, source.source))
  }
  
  function fuseSlice (start, end, source) {
    start += source.min;
    end = Math.min(end + source.min, source.max);
    return new Slice(start, end, source.source)
  }
  
  function Slice (min, max, source) {
    this.source = source;
    this.min = min;
    this.max = max;
  }
  
  Slice.prototype.run = function (sink, scheduler) {
    var disposable = settable();
    var sliceSink = new SliceSink(this.min, this.max - this.min, sink, disposable);
  
    disposable.setDisposable(this.source.run(sliceSink, scheduler));
    return disposable
  };
  
  function SliceSink (skip, take, sink, disposable) {
    this.sink = sink;
    this.skip = skip;
    this.take = take;
    this.disposable = disposable;
  }
  
  SliceSink.prototype.end = Pipe.prototype.end;
  SliceSink.prototype.error = Pipe.prototype.error;
  
  SliceSink.prototype.event = function (t, x) {
    /* eslint complexity: [1, 4] */
    if (this.skip > 0) {
      this.skip -= 1;
      return
    }
  
    if (this.take === 0) {
      return
    }
  
    this.take -= 1;
    this.sink.event(t, x);
    if (this.take === 0) {
      this.disposable.dispose();
      this.sink.end(t, x);
    }
  };
  
  function takeWhile (p, stream) {
    return new Stream(new TakeWhile(p, stream.source))
  }
  
  function TakeWhile (p, source) {
    this.p = p;
    this.source = source;
  }
  
  TakeWhile.prototype.run = function (sink, scheduler) {
    var disposable = settable();
    var takeWhileSink = new TakeWhileSink(this.p, sink, disposable);
  
    disposable.setDisposable(this.source.run(takeWhileSink, scheduler));
    return disposable
  };
  
  function TakeWhileSink (p, sink, disposable) {
    this.p = p;
    this.sink = sink;
    this.active = true;
    this.disposable = disposable;
  }
  
  TakeWhileSink.prototype.end = Pipe.prototype.end;
  TakeWhileSink.prototype.error = Pipe.prototype.error;
  
  TakeWhileSink.prototype.event = function (t, x) {
    if (!this.active) {
      return
    }
  
    var p = this.p;
    this.active = p(x);
    if (this.active) {
      this.sink.event(t, x);
    } else {
      this.disposable.dispose();
      this.sink.end(t, x);
    }
  };
  
  function skipWhile (p, stream) {
    return new Stream(new SkipWhile(p, stream.source))
  }
  
  function SkipWhile (p, source) {
    this.p = p;
    this.source = source;
  }
  
  SkipWhile.prototype.run = function (sink, scheduler) {
    return this.source.run(new SkipWhileSink(this.p, sink), scheduler)
  };
  
  function SkipWhileSink (p, sink) {
    this.p = p;
    this.sink = sink;
    this.skipping = true;
  }
  
  SkipWhileSink.prototype.end = Pipe.prototype.end;
  SkipWhileSink.prototype.error = Pipe.prototype.error;
  
  SkipWhileSink.prototype.event = function (t, x) {
    if (this.skipping) {
      var p = this.p;
      this.skipping = p(x);
      if (this.skipping) {
        return
      }
    }
  
    this.sink.event(t, x);
  };
  
  function skipAfter (p, stream) {
    return new Stream(new SkipAfter(p, stream.source))
  }
  
  function SkipAfter (p, source) {
    this.p = p;
    this.source = source;
  }
  
  SkipAfter.prototype.run = function run (sink, scheduler) {
    return this.source.run(new SkipAfterSink(this.p, sink), scheduler)
  };
  
  function SkipAfterSink (p, sink) {
    this.p = p;
    this.sink = sink;
    this.skipping = false;
  }
  
  SkipAfterSink.prototype.event = function event (t, x) {
    if (this.skipping) {
      return
    }
  
    var p = this.p;
    this.skipping = p(x);
    this.sink.event(t, x);
  
    if (this.skipping) {
      this.sink.end(t, x);
    }
  };
  
  SkipAfterSink.prototype.end = Pipe.prototype.end;
  SkipAfterSink.prototype.error = Pipe.prototype.error;
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function takeUntil (signal, stream) {
    return new Stream(new Until(signal.source, stream.source))
  }
  
  function skipUntil (signal, stream) {
    return new Stream(new Since(signal.source, stream.source))
  }
  
  function during (timeWindow, stream) {
    return takeUntil(join$1(timeWindow), skipUntil(timeWindow, stream))
  }
  
  function Until (maxSignal, source) {
    this.maxSignal = maxSignal;
    this.source = source;
  }
  
  Until.prototype.run = function (sink, scheduler) {
    var min = new Bound(-Infinity, sink);
    var max = new UpperBound(this.maxSignal, sink, scheduler);
    var disposable = this.source.run(new TimeWindowSink(min, max, sink), scheduler);
  
    return all([min, max, disposable])
  };
  
  function Since (minSignal, source) {
    this.minSignal = minSignal;
    this.source = source;
  }
  
  Since.prototype.run = function (sink, scheduler) {
    var min = new LowerBound(this.minSignal, sink, scheduler);
    var max = new Bound(Infinity, sink);
    var disposable = this.source.run(new TimeWindowSink(min, max, sink), scheduler);
  
    return all([min, max, disposable])
  };
  
  function Bound (value, sink) {
    this.value = value;
    this.sink = sink;
  }
  
  Bound.prototype.error = Pipe.prototype.error;
  Bound.prototype.event = noop;
  Bound.prototype.end = noop;
  Bound.prototype.dispose = noop;
  
  function TimeWindowSink (min, max, sink) {
    this.min = min;
    this.max = max;
    this.sink = sink;
  }
  
  TimeWindowSink.prototype.event = function (t, x) {
    if (t >= this.min.value && t < this.max.value) {
      this.sink.event(t, x);
    }
  };
  
  TimeWindowSink.prototype.error = Pipe.prototype.error;
  TimeWindowSink.prototype.end = Pipe.prototype.end;
  
  function LowerBound (signal, sink, scheduler) {
    this.value = Infinity;
    this.sink = sink;
    this.disposable = signal.run(this, scheduler);
  }
  
  LowerBound.prototype.event = function (t /*, x */) {
    if (t < this.value) {
      this.value = t;
    }
  };
  
  LowerBound.prototype.end = noop;
  LowerBound.prototype.error = Pipe.prototype.error;
  
  LowerBound.prototype.dispose = function () {
    return this.disposable.dispose()
  };
  
  function UpperBound (signal, sink, scheduler) {
    this.value = Infinity;
    this.sink = sink;
    this.disposable = signal.run(this, scheduler);
  }
  
  UpperBound.prototype.event = function (t, x) {
    if (t < this.value) {
      this.value = t;
      this.sink.end(t, x);
    }
  };
  
  UpperBound.prototype.end = noop;
  UpperBound.prototype.error = Pipe.prototype.error;
  
  UpperBound.prototype.dispose = function () {
    return this.disposable.dispose()
  };
  
  function noop () {}
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * @param {Number} delayTime milliseconds to delay each item
   * @param {Stream} stream
   * @returns {Stream} new stream containing the same items, but delayed by ms
   */
  function delay (delayTime, stream) {
    return delayTime <= 0 ? stream
      : new Stream(new Delay(delayTime, stream.source))
  }
  
  function Delay (dt, source) {
    this.dt = dt;
    this.source = source;
  }
  
  Delay.prototype.run = function (sink, scheduler) {
    var delaySink = new DelaySink(this.dt, sink, scheduler);
    return all([delaySink, this.source.run(delaySink, scheduler)])
  };
  
  function DelaySink (dt, sink, scheduler) {
    this.dt = dt;
    this.sink = sink;
    this.scheduler = scheduler;
  }
  
  DelaySink.prototype.dispose = function () {
    var self = this;
    this.scheduler.cancelAll(function (scheduledTask) {
      return scheduledTask.task.sink === self.sink
    });
  };
  
  DelaySink.prototype.event = function (t, x) {
    this.scheduler.delay(this.dt, PropagateTask.event(x, this.sink));
  };
  
  DelaySink.prototype.end = function (t, x) {
    this.scheduler.delay(this.dt, PropagateTask.end(x, this.sink));
  };
  
  DelaySink.prototype.error = Pipe.prototype.error;
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function timestamp (stream) {
    return new Stream(new Timestamp(stream.source))
  }
  
  function Timestamp (source) {
    this.source = source;
  }
  
  Timestamp.prototype.run = function (sink, scheduler) {
    return this.source.run(new TimestampSink(sink), scheduler)
  };
  
  function TimestampSink (sink) {
    this.sink = sink;
  }
  
  TimestampSink.prototype.end = Pipe.prototype.end;
  TimestampSink.prototype.error = Pipe.prototype.error;
  
  TimestampSink.prototype.event = function (t, x) {
    this.sink.event(t, { time: t, value: x });
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Limit the rate of events by suppressing events that occur too often
   * @param {Number} period time to suppress events
   * @param {Stream} stream
   * @returns {Stream}
   */
  function throttle (period, stream) {
    return new Stream(throttleSource(period, stream.source))
  }
  
  function throttleSource (period, source) {
    return source instanceof Map$1 ? commuteMapThrottle(period, source)
      : source instanceof Throttle ? fuseThrottle(period, source)
      : new Throttle(period, source)
  }
  
  function commuteMapThrottle (period, source) {
    return Map$1.create(source.f, throttleSource(period, source.source))
  }
  
  function fuseThrottle (period, source) {
    return new Throttle(Math.max(period, source.period), source.source)
  }
  
  function Throttle (period, source) {
    this.period = period;
    this.source = source;
  }
  
  Throttle.prototype.run = function (sink, scheduler) {
    return this.source.run(new ThrottleSink(this.period, sink), scheduler)
  };
  
  function ThrottleSink (period, sink) {
    this.time = 0;
    this.period = period;
    this.sink = sink;
  }
  
  ThrottleSink.prototype.event = function (t, x) {
    if (t >= this.time) {
      this.time = t + this.period;
      this.sink.event(t, x);
    }
  };
  
  ThrottleSink.prototype.end = Pipe.prototype.end;
  
  ThrottleSink.prototype.error = Pipe.prototype.error;
  
  /**
   * Wait for a burst of events to subside and emit only the last event in the burst
   * @param {Number} period events occuring more frequently than this
   *  will be suppressed
   * @param {Stream} stream stream to debounce
   * @returns {Stream} new debounced stream
   */
  function debounce (period, stream) {
    return new Stream(new Debounce(period, stream.source))
  }
  
  function Debounce (dt, source) {
    this.dt = dt;
    this.source = source;
  }
  
  Debounce.prototype.run = function (sink, scheduler) {
    return new DebounceSink(this.dt, this.source, sink, scheduler)
  };
  
  function DebounceSink (dt, source, sink, scheduler) {
    this.dt = dt;
    this.sink = sink;
    this.scheduler = scheduler;
    this.value = void 0;
    this.timer = null;
    this.disposable = source.run(this, scheduler);
  }
  
  DebounceSink.prototype.event = function (t, x) {
    this._clearTimer();
    this.value = x;
    this.timer = this.scheduler.delay(this.dt, new DebounceTask(this, x));
  };
  
  DebounceSink.prototype._event = function (t, x) {
    this._clearTimer();
    this.sink.event(t, x);
  };
  
  DebounceSink.prototype.end = function (t, x) {
    if (this._clearTimer()) {
      this.sink.event(t, this.value);
      this.value = void 0;
    }
    this.sink.end(t, x);
  };
  
  DebounceSink.prototype.error = function (t, x) {
    this._clearTimer();
    this.sink.error(t, x);
  };
  
  DebounceSink.prototype.dispose = function () {
    this._clearTimer();
    return this.disposable.dispose()
  };
  
  DebounceSink.prototype._clearTimer = function () {
    if (this.timer === null) {
      return false
    }
    this.timer.dispose();
    this.timer = null;
    return true
  };
  
  function DebounceTask (debounce, value) {
    this.debounce = debounce;
    this.value = value;
  }
  
  DebounceTask.prototype.run = function (t) {
    this.debounce._event(t, this.value);
  };
  
  DebounceTask.prototype.error = function (t, e) {
    this.debounce.error(t, e);
  };
  
  DebounceTask.prototype.dispose = function () {};
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * Create a stream containing only the promise's fulfillment
   * value at the time it fulfills.
   * @param {Promise<T>} p promise
   * @return {Stream<T>} stream containing promise's fulfillment value.
   *  If the promise rejects, the stream will error
   */
  function fromPromise (p) {
    return awaitPromises(of(p))
  }
  
  /**
   * Turn a Stream<Promise<T>> into Stream<T> by awaiting each promise.
   * Event order is preserved.
   * @param {Stream<Promise<T>>} stream
   * @return {Stream<T>} stream of fulfillment values.  The stream will
   * error if any promise rejects.
   */
  function awaitPromises (stream) {
    return new Stream(new Await(stream.source))
  }
  
  function Await (source) {
    this.source = source;
  }
  
  Await.prototype.run = function (sink, scheduler) {
    return this.source.run(new AwaitSink(sink, scheduler), scheduler)
  };
  
  function AwaitSink (sink, scheduler) {
    this.sink = sink;
    this.scheduler = scheduler;
    this.queue = Promise.resolve();
    var self = this;
  
    // Pre-create closures, to avoid creating them per event
    this._eventBound = function (x) {
      self.sink.event(self.scheduler.now(), x);
    };
  
    this._endBound = function (x) {
      self.sink.end(self.scheduler.now(), x);
    };
  
    this._errorBound = function (e) {
      self.sink.error(self.scheduler.now(), e);
    };
  }
  
  AwaitSink.prototype.event = function (t, promise) {
    var self = this;
    this.queue = this.queue.then(function () {
      return self._event(promise)
    }).catch(this._errorBound);
  };
  
  AwaitSink.prototype.end = function (t, x) {
    var self = this;
    this.queue = this.queue.then(function () {
      return self._end(x)
    }).catch(this._errorBound);
  };
  
  AwaitSink.prototype.error = function (t, e) {
    var self = this;
    // Don't resolve error values, propagate directly
    this.queue = this.queue.then(function () {
      return self._errorBound(e)
    }).catch(fatalError);
  };
  
  AwaitSink.prototype._event = function (promise) {
    return promise.then(this._eventBound)
  };
  
  AwaitSink.prototype._end = function (x) {
    return Promise.resolve(x).then(this._endBound)
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  function SafeSink (sink) {
    this.sink = sink;
    this.active = true;
  }
  
  SafeSink.prototype.event = function (t, x) {
    if (!this.active) {
      return
    }
    this.sink.event(t, x);
  };
  
  SafeSink.prototype.end = function (t, x) {
    if (!this.active) {
      return
    }
    this.disable();
    this.sink.end(t, x);
  };
  
  SafeSink.prototype.error = function (t, e) {
    this.disable();
    this.sink.error(t, e);
  };
  
  SafeSink.prototype.disable = function () {
    this.active = false;
    return this.sink
  };
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /**
   * If stream encounters an error, recover and continue with items from stream
   * returned by f.
   * @param {function(error:*):Stream} f function which returns a new stream
   * @param {Stream} stream
   * @returns {Stream} new stream which will recover from an error by calling f
   */
  function recoverWith (f, stream) {
    return new Stream(new RecoverWith(f, stream.source))
  }
  
  var flatMapError = recoverWith;
  
  /**
   * Create a stream containing only an error
   * @param {*} e error value, preferably an Error or Error subtype
   * @returns {Stream} new stream containing only an error
   */
  
  
  function RecoverWith (f, source) {
    this.f = f;
    this.source = source;
  }
  
  RecoverWith.prototype.run = function (sink, scheduler) {
    return new RecoverWithSink(this.f, this.source, sink, scheduler)
  };
  
  function RecoverWithSink (f, source, sink, scheduler) {
    this.f = f;
    this.sink = new SafeSink(sink);
    this.scheduler = scheduler;
    this.disposable = source.run(this, scheduler);
  }
  
  RecoverWithSink.prototype.event = function (t, x) {
    tryEvent(t, x, this.sink);
  };
  
  RecoverWithSink.prototype.end = function (t, x) {
    tryEnd(t, x, this.sink);
  };
  
  RecoverWithSink.prototype.error = function (t, e) {
    var nextSink = this.sink.disable();
  
    tryDispose(t, this.disposable, this.sink);
    this._startNext(t, e, nextSink);
  };
  
  RecoverWithSink.prototype._startNext = function (t, x, sink) {
    try {
      this.disposable = this._continue(this.f, x, sink);
    } catch (e) {
      sink.error(t, e);
    }
  };
  
  RecoverWithSink.prototype._continue = function (f, x, sink) {
    var stream = f(x);
    return stream.source.run(sink, this.scheduler)
  };
  
  RecoverWithSink.prototype.dispose = function () {
    return this.disposable.dispose()
  };
  
  var MulticastDisposable = function MulticastDisposable (source, sink) {
    this.source = source;
    this.sink = sink;
    this.disposed = false;
  };
  
  MulticastDisposable.prototype.dispose = function dispose () {
    if (this.disposed) {
      return
    }
    this.disposed = true;
    var remaining = this.source.remove(this.sink);
    return remaining === 0 && this.source._dispose()
  };
  
  function tryEvent$1 (t, x, sink) {
    try {
      sink.event(t, x);
    } catch (e) {
      sink.error(t, e);
    }
  }
  
  function tryEnd$1 (t, x, sink) {
    try {
      sink.end(t, x);
    } catch (e) {
      sink.error(t, e);
    }
  }
  
  var dispose = function (disposable) { return disposable.dispose(); };
  
  var emptyDisposable = {
    dispose: function dispose$1 () {}
  };
  
  var MulticastSource = function MulticastSource (source) {
    this.source = source;
    this.sinks = [];
    this._disposable = emptyDisposable;
  };
  
  MulticastSource.prototype.run = function run (sink, scheduler) {
    var n = this.add(sink);
    if (n === 1) {
      this._disposable = this.source.run(this, scheduler);
    }
    return new MulticastDisposable(this, sink)
  };
  
  MulticastSource.prototype._dispose = function _dispose () {
    var disposable = this._disposable;
    this._disposable = emptyDisposable;
    return Promise.resolve(disposable).then(dispose)
  };
  
  MulticastSource.prototype.add = function add (sink) {
    this.sinks = append(sink, this.sinks);
    return this.sinks.length
  };
  
  MulticastSource.prototype.remove = function remove$1 (sink) {
    var i = findIndex(sink, this.sinks);
    // istanbul ignore next
    if (i >= 0) {
      this.sinks = remove(i, this.sinks);
    }
  
    return this.sinks.length
  };
  
  MulticastSource.prototype.event = function event (time, value) {
    var s = this.sinks;
    if (s.length === 1) {
      return s[0].event(time, value)
    }
    for (var i = 0; i < s.length; ++i) {
      tryEvent$1(time, value, s[i]);
    }
  };
  
  MulticastSource.prototype.end = function end (time, value) {
    var s = this.sinks;
    for (var i = 0; i < s.length; ++i) {
      tryEnd$1(time, value, s[i]);
    }
  };
  
  MulticastSource.prototype.error = function error (time, err) {
    var s = this.sinks;
    for (var i = 0; i < s.length; ++i) {
      s[i].error(time, err);
    }
  };
  
  function multicast (stream) {
    var source = stream.source;
    return source instanceof MulticastSource
      ? stream
      : new stream.constructor(new MulticastSource(source))
  }
  
  /** @license MIT License (c) copyright 2010-2016 original author or authors */
  /** @author Brian Cavalier */
  /** @author John Hann */
  
  /* eslint import/first: 0 */
  
  // Add of and empty to constructor for fantasy-land compat
  Stream.of = of;
  Stream.empty = empty;
  // Add from to constructor for ES Observable compat
  Stream.from = from;
  // -----------------------------------------------------------------------
  // Draft ES Observable proposal interop
  // https://github.com/zenparsing/es-observable
  
  Stream.prototype.subscribe = function (subscriber) {
    return subscribe(subscriber, this)
  };
  
  Stream.prototype[result] = function () {
    return this
  };
  
  // -----------------------------------------------------------------------
  // Fluent adapter
  
  /**
   * Adapt a functional stream transform to fluent style.
   * It applies f to the this stream object
   * @param  {function(s: Stream): Stream} f function that
   * receives the stream itself and must return a new stream
   * @return {Stream}
   */
  Stream.prototype.thru = function (f) {
    return thru(f, this)
  };
  
  // -----------------------------------------------------------------------
  // Observing
  
  /**
   * Process all the events in the stream
   * @returns {Promise} promise that fulfills when the stream ends, or rejects
   *  if the stream fails with an unhandled error.
   */
  Stream.prototype.observe = Stream.prototype.forEach = function (f) {
    return observe(f, this)
  };
  
  /**
   * Consume all events in the stream, without providing a function to process each.
   * This causes a stream to become active and begin emitting events, and is useful
   * in cases where all processing has been setup upstream via other combinators, and
   * there is no need to process the terminal events.
   * @returns {Promise} promise that fulfills when the stream ends, or rejects
   *  if the stream fails with an unhandled error.
   */
  Stream.prototype.drain = function () {
    return drain(this)
  };
  
  // -------------------------------------------------------
  
  /**
   * Generalized feedback loop. Call a stepper function for each event. The stepper
   * will be called with 2 params: the current seed and the an event value.  It must
   * return a new { seed, value } pair. The `seed` will be fed back into the next
   * invocation of stepper, and the `value` will be propagated as the event value.
   * @param {function(seed:*, value:*):{seed:*, value:*}} stepper loop step function
   * @param {*} seed initial seed value passed to first stepper call
   * @returns {Stream} new stream whose values are the `value` field of the objects
   * returned by the stepper
   */
  Stream.prototype.loop = function (stepper, seed) {
    return loop(stepper, seed, this)
  };
  
  // -------------------------------------------------------
  
  /**
   * Create a stream containing successive reduce results of applying f to
   * the previous reduce result and the current stream item.
   * @param {function(result:*, x:*):*} f reducer function
   * @param {*} initial initial value
   * @returns {Stream} new stream containing successive reduce results
   */
  Stream.prototype.scan = function (f, initial) {
    return scan(f, initial, this)
  };
  
  /**
   * Reduce the stream to produce a single result.  Note that reducing an infinite
   * stream will return a Promise that never fulfills, but that may reject if an error
   * occurs.
   * @param {function(result:*, x:*):*} f reducer function
   * @param {*} initial optional initial value
   * @returns {Promise} promise for the file result of the reduce
   */
  Stream.prototype.reduce = function (f, initial) {
    return reduce$1(f, initial, this)
  };
  
  /**
   * @param {Stream} tail
   * @returns {Stream} new stream containing all items in this followed by
   *  all items in tail
   */
  Stream.prototype.concat = function (tail$$1) {
    return concat(this, tail$$1)
  };
  
  /**
   * @param {*} x value to prepend
   * @returns {Stream} a new stream with x prepended
   */
  Stream.prototype.startWith = function (x) {
    return cons$1(x, this)
  };
  
  // -----------------------------------------------------------------------
  // Transforming
  
  /**
   * Transform each value in the stream by applying f to each
   * @param {function(*):*} f mapping function
   * @returns {Stream} stream containing items transformed by f
   */
  Stream.prototype.map = function (f) {
    return map$4(f, this)
  };
  
  /**
   * Assume this stream contains functions, and apply each function to each item
   * in the provided stream.  This generates, in effect, a cross product.
   * @param {Stream} xs stream of items to which
   * @returns {Stream} stream containing the cross product of items
   */
  Stream.prototype.ap = function (xs) {
    return ap(this, xs)
  };
  
  /**
   * Replace each value in the stream with x
   * @param {*} x
   * @returns {Stream} stream containing items replaced with x
   */
  Stream.prototype.constant = function (x) {
    return constant(x, this)
  };
  
  /**
   * Perform a side effect for each item in the stream
   * @param {function(x:*):*} f side effect to execute for each item. The
   *  return value will be discarded.
   * @returns {Stream} new stream containing the same items as this stream
   */
  Stream.prototype.tap = function (f) {
    return tap(f, this)
  };
  
  // -----------------------------------------------------------------------
  // Transducer support
  
  /**
   * Transform this stream by passing its events through a transducer.
   * @param  {function} transducer transducer function
   * @return {Stream} stream of events transformed by the transducer
   */
  Stream.prototype.transduce = function (transducer) {
    return transduce(transducer, this)
  };
  
  // -----------------------------------------------------------------------
  // FlatMapping
  
  /**
   * Map each value in the stream to a new stream, and merge it into the
   * returned outer stream. Event arrival times are preserved.
   * @param {function(x:*):Stream} f chaining function, must return a Stream
   * @returns {Stream} new stream containing all events from each stream returned by f
   */
  Stream.prototype.chain = function (f) {
    return flatMap(f, this)
  };
  
  // @deprecated use chain instead
  Stream.prototype.flatMap = Stream.prototype.chain;
  
    /**
   * Monadic join. Flatten a Stream<Stream<X>> to Stream<X> by merging inner
   * streams to the outer. Event arrival times are preserved.
   * @returns {Stream<X>} new stream containing all events of all inner streams
   */
  Stream.prototype.join = function () {
    return join$1(this)
  };
  
  /**
   * Map the end event to a new stream, and begin emitting its values.
   * @param {function(x:*):Stream} f function that receives the end event value,
   * and *must* return a new Stream to continue with.
   * @returns {Stream} new stream that emits all events from the original stream,
   * followed by all events from the stream returned by f.
   */
  Stream.prototype.continueWith = function (f) {
    return continueWith(f, this)
  };
  
  // @deprecated use continueWith instead
  Stream.prototype.flatMapEnd = Stream.prototype.continueWith;
  
  Stream.prototype.concatMap = function (f) {
    return concatMap(f, this)
  };
  
  // -----------------------------------------------------------------------
  // Concurrent merging
  
  /**
   * Flatten a Stream<Stream<X>> to Stream<X> by merging inner
   * streams to the outer, limiting the number of inner streams that may
   * be active concurrently.
   * @param {number} concurrency at most this many inner streams will be
   *  allowed to be active concurrently.
   * @return {Stream<X>} new stream containing all events of all inner
   *  streams, with limited concurrency.
   */
  Stream.prototype.mergeConcurrently = function (concurrency) {
    return mergeConcurrently(concurrency, this)
  };
  
  // -----------------------------------------------------------------------
  // Merging
  
  /**
   * Merge this stream and all the provided streams
   * @returns {Stream} stream containing items from this stream and s in time
   * order.  If two events are simultaneous they will be merged in
   * arbitrary order.
   */
  Stream.prototype.merge = function (/* ...streams */) {
    return mergeArray(cons(this, arguments))
  };
  
  // -----------------------------------------------------------------------
  // Combining
  
  /**
   * Combine latest events from all input streams
   * @param {function(...events):*} f function to combine most recent events
   * @returns {Stream} stream containing the result of applying f to the most recent
   *  event of each input stream, whenever a new event arrives on any stream.
   */
  Stream.prototype.combine = function (f /*, ...streams */) {
    return combineArray(f, replace(this, 0, arguments))
  };
  
  // -----------------------------------------------------------------------
  // Sampling
  
  /**
   * When an event arrives on sampler, emit the latest event value from stream.
   * @param {Stream} sampler stream of events at whose arrival time
   *  signal's latest value will be propagated
   * @returns {Stream} sampled stream of values
   */
  Stream.prototype.sampleWith = function (sampler) {
    return sampleWith(sampler, this)
  };
  
  /**
   * When an event arrives on this stream, emit the result of calling f with the latest
   * values of all streams being sampled
   * @param {function(...values):*} f function to apply to each set of sampled values
   * @returns {Stream} stream of sampled and transformed values
   */
  Stream.prototype.sample = function (f /* ...streams */) {
    return sampleArray(f, this, tail(arguments))
  };
  
  // -----------------------------------------------------------------------
  // Zipping
  
  /**
   * Pair-wise combine items with those in s. Given 2 streams:
   * [1,2,3] zipWith f [4,5,6] -> [f(1,4),f(2,5),f(3,6)]
   * Note: zip causes fast streams to buffer and wait for slow streams.
   * @param {function(a:Stream, b:Stream, ...):*} f function to combine items
   * @returns {Stream} new stream containing pairs
   */
  Stream.prototype.zip = function (f /*, ...streams */) {
    return zipArray(f, replace(this, 0, arguments))
  };
  
  // -----------------------------------------------------------------------
  // Switching
  
  /**
   * Given a stream of streams, return a new stream that adopts the behavior
   * of the most recent inner stream.
   * @returns {Stream} switching stream
   */
  Stream.prototype.switchLatest = function () {
    return switchLatest(this)
  };
  
  // @deprecated use switchLatest instead
  Stream.prototype.switch = Stream.prototype.switchLatest;
  
  // -----------------------------------------------------------------------
  // Filtering
  
  /**
   * Retain only items matching a predicate
   * stream:                           -12345678-
   * filter(x => x % 2 === 0, stream): --2-4-6-8-
   * @param {function(x:*):boolean} p filtering predicate called for each item
   * @returns {Stream} stream containing only items for which predicate returns truthy
   */
  Stream.prototype.filter = function (p) {
    return filter$1(p, this)
  };
  
  /**
   * Skip repeated events, using === to compare items
   * stream:           -abbcd-
   * distinct(stream): -ab-cd-
   * @returns {Stream} stream with no repeated events
   */
  Stream.prototype.skipRepeats = function () {
    return skipRepeats(this)
  };
  
  /**
   * Skip repeated events, using supplied equals function to compare items
   * @param {function(a:*, b:*):boolean} equals function to compare items
   * @returns {Stream} stream with no repeated events
   */
  Stream.prototype.skipRepeatsWith = function (equals) {
    return skipRepeatsWith(equals, this)
  };
  
  // -----------------------------------------------------------------------
  // Slicing
  
  /**
   * stream:          -abcd-
   * take(2, stream): -ab|
   * @param {Number} n take up to this many events
   * @returns {Stream} stream containing at most the first n items from this stream
   */
  Stream.prototype.take = function (n) {
    return take(n, this)
  };
  
  /**
   * stream:          -abcd->
   * skip(2, stream): ---cd->
   * @param {Number} n skip this many events
   * @returns {Stream} stream not containing the first n events
   */
  Stream.prototype.skip = function (n) {
    return skip(n, this)
  };
  
  /**
   * Slice a stream by event index. Equivalent to, but more efficient than
   * stream.take(end).skip(start);
   * NOTE: Negative start and end are not supported
   * @param {Number} start skip all events before the start index
   * @param {Number} end allow all events from the start index to the end index
   * @returns {Stream} stream containing items where start <= index < end
   */
  Stream.prototype.slice = function (start, end) {
    return slice(start, end, this)
  };
  
  /**
   * stream:                        -123451234->
   * takeWhile(x => x < 5, stream): -1234|
   * @param {function(x:*):boolean} p predicate
   * @returns {Stream} stream containing items up to, but not including, the
   * first item for which p returns falsy.
   */
  Stream.prototype.takeWhile = function (p) {
    return takeWhile(p, this)
  };
  
  /**
   * stream:                        -123451234->
   * skipWhile(x => x < 5, stream): -----51234->
   * @param {function(x:*):boolean} p predicate
   * @returns {Stream} stream containing items following *and including* the
   * first item for which p returns falsy.
   */
  Stream.prototype.skipWhile = function (p) {
    return skipWhile(p, this)
  };
  
  /**
   * stream:                         -123456789->
   * skipAfter(x => x === 5, stream):-12345|
   * @param {function(x:*):boolean} p predicate
   * @returns {Stream} stream containing items up to, *and including*, the
   * first item for which p returns truthy.
   */
  Stream.prototype.skipAfter = function (p) {
    return skipAfter(p, this)
  };
  
  // -----------------------------------------------------------------------
  // Time slicing
  
  /**
   * stream:                    -a-b-c-d-e-f-g->
   * signal:                    -------x
   * takeUntil(signal, stream): -a-b-c-|
   * @param {Stream} signal retain only events in stream before the first
   * event in signal
   * @returns {Stream} new stream containing only events that occur before
   * the first event in signal.
   */
  Stream.prototype.until = function (signal) {
    return takeUntil(signal, this)
  };
  
  // @deprecated use until instead
  Stream.prototype.takeUntil = Stream.prototype.until;
  
    /**
   * stream:                    -a-b-c-d-e-f-g->
   * signal:                    -------x
   * takeUntil(signal, stream): -------d-e-f-g->
   * @param {Stream} signal retain only events in stream at or after the first
   * event in signal
   * @returns {Stream} new stream containing only events that occur after
   * the first event in signal.
   */
  Stream.prototype.since = function (signal) {
    return skipUntil(signal, this)
  };
  
  // @deprecated use since instead
  Stream.prototype.skipUntil = Stream.prototype.since;
  
    /**
   * stream:                    -a-b-c-d-e-f-g->
   * timeWindow:                -----s
   * s:                               -----t
   * stream.during(timeWindow): -----c-d-e-|
   * @param {Stream<Stream>} timeWindow a stream whose first event (s) represents
   *  the window start time.  That event (s) is itself a stream whose first event (t)
   *  represents the window end time
   * @returns {Stream} new stream containing only events within the provided timespan
   */
  Stream.prototype.during = function (timeWindow) {
    return during(timeWindow, this)
  };
  
  // -----------------------------------------------------------------------
  // Delaying
  
  /**
   * @param {Number} delayTime milliseconds to delay each item
   * @returns {Stream} new stream containing the same items, but delayed by ms
   */
  Stream.prototype.delay = function (delayTime) {
    return delay(delayTime, this)
  };
  
  // -----------------------------------------------------------------------
  // Getting event timestamp
  
  /**
   * Expose event timestamps into the stream. Turns a Stream<X> into
   * Stream<{time:t, value:X}>
   * @returns {Stream<{time:number, value:*}>}
   */
  Stream.prototype.timestamp = function () {
    return timestamp(this)
  };
  
  // -----------------------------------------------------------------------
  // Rate limiting
  
  /**
   * Limit the rate of events
   * stream:              abcd----abcd----
   * throttle(2, stream): a-c-----a-c-----
   * @param {Number} period time to suppress events
   * @returns {Stream} new stream that skips events for throttle period
   */
  Stream.prototype.throttle = function (period) {
    return throttle(period, this)
  };
  
  /**
   * Wait for a burst of events to subside and emit only the last event in the burst
   * stream:              abcd----abcd----
   * debounce(2, stream): -----d-------d--
   * @param {Number} period events occuring more frequently than this
   *  on the provided scheduler will be suppressed
   * @returns {Stream} new debounced stream
   */
  Stream.prototype.debounce = function (period) {
    return debounce(period, this)
  };
  
  // -----------------------------------------------------------------------
  // Awaiting Promises
  
  /**
   * Await promises, turning a Stream<Promise<X>> into Stream<X>.  Preserves
   * event order, but timeshifts events based on promise resolution time.
   * @returns {Stream<X>} stream containing non-promise values
   */
  Stream.prototype.awaitPromises = function () {
    return awaitPromises(this)
  };
  
  // @deprecated use awaitPromises instead
  Stream.prototype.await = Stream.prototype.awaitPromises;
  
  // -----------------------------------------------------------------------
  // Error handling
  
  /**
   * If this stream encounters an error, recover and continue with items from stream
   * returned by f.
   * stream:                  -a-b-c-X-
   * f(X):                           d-e-f-g-
   * flatMapError(f, stream): -a-b-c-d-e-f-g-
   * @param {function(error:*):Stream} f function which returns a new stream
   * @returns {Stream} new stream which will recover from an error by calling f
   */
  Stream.prototype.recoverWith = function (f) {
    return flatMapError(f, this)
  };
  
  // @deprecated use recoverWith instead
  Stream.prototype.flatMapError = Stream.prototype.recoverWith;
  
  // -----------------------------------------------------------------------
  // Multicasting
  
  /**
   * Transform the stream into multicast stream.  That means that many subscribers
   * to the stream will not cause multiple invocations of the internal machinery.
   * @returns {Stream} new stream which will multicast events to all observers.
   */
  Stream.prototype.multicast = function () {
    return multicast(this)
  };
  
  // export the instance of the defaultScheduler for third-party libraries
  // export an implementation of Task used internally for third-party libraries
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  
  var createObjectURL = function (blob){
       return URL.createObjectURL( blob )
      };
  
  var revokeObjectURL = function (blob){
       URL.revokeObjectURL( blob );
      };
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function createFetchBlobStream(filePath, fetchFunc) {
    return fromPromise(_1(fetchFunc, filePath).then((function (prim) {
                      return prim.blob();
                    })));
  }
  
  function createFetchTextStream(filePath, fetchFunc) {
    return fromPromise(_1(fetchFunc, filePath).then((function (prim) {
                      return prim.text();
                    })));
  }
  
  function fetch$1(filePath) {
    return fetch(filePath);
  }
  
  
  /* most Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function extname(path) {
    var match = (/\.(\w+)$/).exec(path);
    if (match !== null) {
      return nullable_to_opt(caml_array_get(match, 0));
    }
    
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function getType$2(src) {
    var match = extname(src);
    if (match !== undefined) {
      switch (match) {
        case ".jpg" : 
            return /* Jpg */0;
        case ".png" : 
            return /* Png */1;
        default:
          return /* Unknown */2;
      }
    } else {
      return fatal(buildFatalMessage("getType", "image extname should exist", "", "", ""));
    }
  }
  
  var _loadBlobImage = function (objectUrl,resolve,reject){
            if (typeof window.loadImageBlob_wonder_imgui === "undefined") {
    window.loadImageBlob_wonder_imgui = function(objectUrl, resolve, reject){
                        var image = new Image();
  
                        image.src = objectUrl;
  
                        image.onload = (function () {
                            return resolve(image);
                          });
  
                        image.onerror = (function (e) {
                          console.trace();
                                  return reject(new Error(e));
                                });
    };
            }
  
    window.loadImageBlob_wonder_imgui(objectUrl, resolve, reject);
      };
  
  function loadImageByBlobPromise(objectUrl) {
    return fromPromise(new Promise((function (resolve, reject) {
                      return _loadBlobImage(objectUrl, resolve, reject);
                    })));
  }
  
  
  /* most Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function unsafeGetFontData(record) {
    return unsafeGet$4(record[/* fontData */2]);
  }
  
  function unsafeGetWebglData(record) {
    return unsafeGet$4(record[/* webglData */3]);
  }
  
  function getSetting$1(record) {
    return record[/* setting */0];
  }
  
  function getIOData(record) {
    return record[/* ioData */7];
  }
  
  function getRadioButtonData(record) {
    return record[/* controlData */6][/* radioButtonData */0];
  }
  
  function getFontTextureDrawData(record) {
    return record[/* drawData */4][/* fontTextureDrawData */0];
  }
  
  function getCustomTextureDrawDataMap(record) {
    return record[/* drawData */4][/* customTextureDrawDataMap */1];
  }
  
  
  /* OptionService-WonderImgui Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  
  var toInt = function (str){
      return parseInt(str);
      };
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function _parseStrToObj(str) {
    var item_exp = (/\w+=[^ \r\n]+/gi);
    var int_exp = (/^[\-]?\d+$/);
    var obj = createEmpty$1(/* () */0);
    var $$break = false;
    while(!$$break) {
      var match = item_exp.exec(str);
      if (match !== null) {
        iter(caml_array_get(match, 0), (function (tempStr) {
                var index = tempStr.indexOf("=");
                var key = tempStr.substring(0, index);
                var value = tempStr.substring(index + 1 | 0);
                var match = int_exp.test(value);
                var value$1;
                if (match) {
                  value$1 = value;
                } else {
                  var match$1 = value[0] === "\"";
                  value$1 = match$1 ? value.substring(1, value.length) : value;
                }
                set(key, toInt(value$1), obj);
                return /* () */0;
              }));
      } else {
        $$break = true;
      }
    }
    return obj;
  }
  
  function _parseChar(fntStr) {
    var fontDefDictionary = createEmpty$2(/* () */0);
    var char_exp = (/char [^\n]*(\n|$)/gi);
    var $$break = false;
    while(!$$break) {
      var match = char_exp.exec(fntStr);
      if (match !== null) {
        iter(caml_array_get(match, 0), (function ($$char) {
                var charObj = _parseStrToObj($$char);
                var charId = unsafeGet("id", charObj);
                set$1(charId, /* record */[
                      /* id */charId,
                      /* rect : tuple */[
                        unsafeGet("x", charObj),
                        unsafeGet("y", charObj),
                        unsafeGet("width", charObj),
                        unsafeGet("height", charObj)
                      ],
                      /* xOffset */unsafeGet("xoffset", charObj),
                      /* yOffset */unsafeGet("yoffset", charObj),
                      /* xAdvance */unsafeGet("xadvance", charObj)
                    ], fontDefDictionary);
                return /* () */0;
              }));
      } else {
        $$break = true;
      }
    }
    return fontDefDictionary;
  }
  
  function buildKerningHashMapKey(first, second) {
    return imul(first, 1000) + second | 0;
  }
  
  function _changeKerningArrayToHashMap(kerningArray) {
    return reduceOneParam((function (map, param) {
                  return set$1(buildKerningHashMapKey(param[/* first */0], param[/* second */1]), param[/* amount */2], map);
                }), createEmpty$2(/* () */0), kerningArray);
  }
  
  function _parseKerning(fntStr) {
    var kerningArray = /* array */[];
    var kerning_exp = (/kerning [^\n]*(\n|$)/gi);
    var $$break = false;
    while(!$$break) {
      var match = kerning_exp.exec(fntStr);
      if (match !== null) {
        iter(caml_array_get(match, 0), (function (kerning) {
                var kerningObj = _parseStrToObj(kerning);
                push$3(/* record */[
                      /* first */unsafeGet("first", kerningObj),
                      /* second */unsafeGet("second", kerningObj),
                      /* amount */unsafeGet("amount", kerningObj)
                    ], kerningArray);
                return /* () */0;
              }));
      } else {
        $$break = true;
      }
    }
    return _changeKerningArrayToHashMap(kerningArray);
  }
  
  function parse(fntStr, _) {
    var common_exp = (/common [^\n]*(\n|$)/gi);
    var page_exp = (/page [^\n]*(\n|$)/gi);
    var match = common_exp.exec(fntStr);
    var commonObj = _parseStrToObj(match !== null ? unsafeGet$4(nullable_to_opt(caml_array_get(match, 0))) : fatal(buildFatalMessage("parse", "fntStr should match common_exp", "", "", "fntStr: " + (String(fntStr) + ("\n    common_exp: " + (String(common_exp) + " "))))));
    var match$1 = page_exp.exec(fntStr);
    var pageObj = _parseStrToObj(match$1 !== null ? unsafeGet$4(nullable_to_opt(caml_array_get(match$1, 0))) : fatal(buildFatalMessage("parse", "fntStr should match page_exp", "", "", "fntStr: " + (String(fntStr) + ("\n    page_exp: " + (String(page_exp) + " "))))));
    var match$2 = get$2("id", pageObj);
    if (match$2 === undefined) {
      fatal(buildFatalMessage("parse", "file could not be found", "", "", ""));
    }
    return /* record */[
            /* commonHeight */unsafeGet("lineHeight", commonObj),
            /* commonBase */unsafeGet("base", commonObj),
            /* scaleW */unsafeGet("scaleW", commonObj),
            /* scaleH */unsafeGet("scaleH", commonObj),
            /* fontDefDictionary */_parseChar(fntStr),
            /* kerningMap */_parseKerning(fntStr)
          ];
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function addFont(param, record) {
    return /* record */[
            /* setting */record[/* setting */0],
            /* assetData */record[/* assetData */1],
            /* fontData *//* record */[
              /* fntFilePath */param[0],
              /* bitmapFilePath */param[1]
            ],
            /* webglData */record[/* webglData */3],
            /* drawData */record[/* drawData */4],
            /* imguiFuncData */record[/* imguiFuncData */5],
            /* controlData */record[/* controlData */6],
            /* ioData */record[/* ioData */7],
            /* layoutData */record[/* layoutData */8]
          ];
  }
  
  function load$1(fetchFunc, record) {
    var assetData = record[/* assetData */1];
    var bitmapId = assetData[/* bitmapId */1];
    var fntId = assetData[/* fntId */0];
    var match = unsafeGetFontData(record);
    var bitmapMap = assetData[/* bitmapMap */3];
    var fntDataMap = assetData[/* fntDataMap */2];
    var fntFilePath = match[/* fntFilePath */0];
    return drain(merge(map$4((function (fntData) {
                            set(fntId, fntData, fntDataMap);
                            return /* () */0;
                          }), map$4((function (fntStr) {
                                return parse(fntStr, fntFilePath);
                              }), createFetchTextStream(fntFilePath, fetchFunc))), map$4((function (image) {
                            set(bitmapId, image, bitmapMap);
                            return /* () */0;
                          }), flatMap((function (blob) {
                                return tap((function () {
                                              return revokeObjectURL(blob);
                                            }), loadImageByBlobPromise(createObjectURL(blob)));
                              }), createFetchBlobStream(match[/* bitmapFilePath */1], fetchFunc))))).then((function () {
                  return Promise.resolve(record);
                }));
  }
  
  
  /* most Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function getFntData(record) {
    var assetData = record[/* assetData */1];
    return get$2(assetData[/* fntId */0], assetData[/* fntDataMap */2]);
  }
  
  function getBitmap(record) {
    var assetData = record[/* assetData */1];
    return get$2(assetData[/* bitmapId */1], assetData[/* bitmapMap */3]);
  }
  
  function unsafeGetBitmap(record) {
    return unsafeGet$4(getBitmap(record));
  }
  
  function isLoadAsset(record) {
    return isSome(getBitmap(record));
  }
  
  function load(customTextureSourceDataArr, fetchFunc, record) {
    var customImageArr = record[/* assetData */1][/* customImageArr */4];
    var imguiRecord = /* record */[/* contents */1];
    return drain(mergeArray(/* array */[fromPromise(load$1(fetchFunc, record).then((function (record) {
                                    imguiRecord[0] = record;
                                    return Promise.resolve(/* () */0);
                                  })))].concat(customTextureSourceDataArr.map((function (param) {
                                var imageId = param[1];
                                var imagePath = param[0];
                                return map$4((function (image) {
                                              push$3(/* tuple */[
                                                    image,
                                                    imageId,
                                                    getType$2(imagePath)
                                                  ], customImageArr);
                                              return /* () */0;
                                            }), flatMap((function (blob) {
                                                  return tap((function () {
                                                                return revokeObjectURL(blob);
                                                              }), loadImageByBlobPromise(createObjectURL(blob)));
                                                }), createFetchBlobStream(imagePath, fetchFunc)));
                              }))))).then((function () {
                  var init = imguiRecord[0];
                  var init$1 = imguiRecord[0][/* assetData */1];
                  return Promise.resolve(/* record */[
                              /* setting */init[/* setting */0],
                              /* assetData : record */[
                                /* fntId */init$1[/* fntId */0],
                                /* bitmapId */init$1[/* bitmapId */1],
                                /* fntDataMap */init$1[/* fntDataMap */2],
                                /* bitmapMap */init$1[/* bitmapMap */3],
                                /* customImageArr */customImageArr,
                                /* customTextureMap */init$1[/* customTextureMap */5]
                              ],
                              /* fontData */init[/* fontData */2],
                              /* webglData */init[/* webglData */3],
                              /* drawData */init[/* drawData */4],
                              /* imguiFuncData */init[/* imguiFuncData */5],
                              /* controlData */init[/* controlData */6],
                              /* ioData */init[/* ioData */7],
                              /* layoutData */init[/* layoutData */8]
                            ]);
                }));
  }
  
  function createCustomTextures(gl, customImageArr, customTextureMap) {
    var rgb = gl.RGB;
    var rgba = gl.RGBA;
    var target = gl.TEXTURE_2D;
    return reduceOneParam((function (customTextureMap, data) {
                  var format;
                  switch (data[2]) {
                    case 0 : 
                        format = rgb;
                        break;
                    case 1 : 
                        format = rgba;
                        break;
                    case 2 : 
                        format = fatal(buildFatalMessage("createCustomTextures", "unknown image type. type should be jpg or png.", "", "", ""));
                        break;
                    
                  }
                  var texture = gl.createTexture();
                  gl.bindTexture(target, texture);
                  gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
                  gl.texImage2D(target, 0, format, format, gl.UNSIGNED_BYTE, data[0]);
                  return set(data[1], texture, customTextureMap);
                }), customTextureMap, customImageArr);
  }
  
  function unsafeGetCustomTexture(id, param) {
    return unsafeGet(id, param[/* assetData */1][/* customTextureMap */5]);
  }
  
  
  /* most Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function addPoints(points, pointArr) {
    return reduceOneParam((function (arr, point) {
                  return push$3(point, arr);
                }), pointArr, points);
  }
  
  var concatArrays = function (arrays){
    return [].concat.apply([], arrays);  
    };
  
  function getBaseIndex(verticeArr) {
    return verticeArr.length / 2 | 0;
  }
  
  
  /* ArrayService-WonderImgui Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function _bufferArrayBufferData(param, gl) {
    var $$location = param[2];
    gl.bindBuffer(gl.ARRAY_BUFFER, param[0]);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(param[1]), gl.DYNAMIC_DRAW);
    gl.enableVertexAttribArray($$location);
    gl.vertexAttribPointer($$location, param[3], gl.FLOAT, false, 0, 0);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
    return gl;
  }
  
  function _bufferElementArrayBufferData(buffer, pointArr, gl) {
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(pointArr), gl.DYNAMIC_DRAW);
    return gl;
  }
  
  function bufferAllData(gl, groupedDrawDataArr, record) {
    var match = unsafeGetWebglData(record);
    var match$1 = reduceOneParam((function (param, param$1) {
            var indexArr = param$1[/* indexArr */5];
            var totalIndexArr = param[5];
            var totalTexCoordArr = param[4];
            var totalColorArr = param[3];
            var totalVerticeArr = param[2];
            var countOffset = param[1];
            var drawElementsDataArr = param[0];
            var count = indexArr.length;
            if (count !== 0) {
              var newCountOffset = countOffset + (count << 1) | 0;
              return /* tuple */[
                      push$3(/* record */[
                            /* drawType */param$1[/* drawType */0],
                            /* customTexture */param$1[/* customTexture */1],
                            /* count */count,
                            /* countOffset */countOffset
                          ], drawElementsDataArr),
                      newCountOffset,
                      totalVerticeArr.concat(param$1[/* verticeArr */2]),
                      totalColorArr.concat(param$1[/* colorArr */3]),
                      totalTexCoordArr.concat(param$1[/* texCoordArr */4]),
                      totalIndexArr.concat(indexArr)
                    ];
            } else {
              return /* tuple */[
                      drawElementsDataArr,
                      0,
                      totalVerticeArr,
                      totalColorArr,
                      totalTexCoordArr,
                      totalIndexArr
                    ];
            }
          }), /* tuple */[
          /* array */[],
          0,
          /* array */[],
          /* array */[],
          /* array */[],
          /* array */[]
        ], groupedDrawDataArr);
    _bufferElementArrayBufferData(match[/* indexBuffer */4], match$1[5], _bufferArrayBufferData(/* tuple */[
              match[/* texCoordBuffer */3],
              match$1[4],
              match[/* aTexCoordLocation */8],
              2
            ], _bufferArrayBufferData(/* tuple */[
                  match[/* colorBuffer */2],
                  match$1[3],
                  match[/* aColorLocation */7],
                  3
                ], _bufferArrayBufferData(/* tuple */[
                      match[/* positionBuffer */1],
                      match$1[2],
                      match[/* aPositonLocation */6],
                      2
                    ], gl))));
    return /* tuple */[
            record,
            match$1[0]
          ];
  }
  
  function coloredVertex(positionX, positionY, color, param, fontTexUvForWhite) {
    return /* tuple */[
            push$3(positionY, push$3(positionX, param[0])),
            addPoints(color, param[1]),
            addPoints(fontTexUvForWhite, param[2])
          ];
  }
  
  
  /* ArrayService-WonderImgui Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  
  function convertIntRectToFloatRect(param) {
    return /* tuple */[
            param[0],
            param[1],
            param[2],
            param[3]
          ];
  }
  
  function convertIntPositionToFloatPosition(param) {
    return /* tuple */[
            param[0],
            param[1]
          ];
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function draw(param, color, record) {
    var height = param[3];
    var width = param[2];
    var y = param[1];
    var x = param[0];
    var match = getSetting$1(record);
    var fontTexUvForWhite = match[/* fontTexUvForWhite */1];
    var match$1 = getFontTextureDrawData(record);
    var verticeArr = match$1[/* verticeArr */2];
    var baseIndex = getBaseIndex(verticeArr);
    var init = record[/* drawData */4];
    var init$1 = record[/* drawData */4][/* fontTextureDrawData */0];
    return /* record */[
            /* setting */record[/* setting */0],
            /* assetData */record[/* assetData */1],
            /* fontData */record[/* fontData */2],
            /* webglData */record[/* webglData */3],
            /* drawData : record */[
              /* fontTextureDrawData : record */[
                /* drawType */init$1[/* drawType */0],
                /* customTexture */init$1[/* customTexture */1],
                /* verticeArr */addPoints(/* array */[
                      x,
                      y,
                      x,
                      y + height,
                      x + width,
                      y,
                      x + width,
                      y + height
                    ], verticeArr),
                /* colorArr */addPoints(concatArrays(/* array */[
                          color,
                          color,
                          color,
                          color
                        ]), match$1[/* colorArr */3]),
                /* texCoordArr */addPoints(concatArrays(/* array */[
                          fontTexUvForWhite,
                          fontTexUvForWhite,
                          fontTexUvForWhite,
                          fontTexUvForWhite
                        ]), match$1[/* texCoordArr */4]),
                /* indexArr */addPoints(/* array */[
                      baseIndex,
                      baseIndex + 1 | 0,
                      baseIndex + 2 | 0,
                      baseIndex + 3 | 0,
                      baseIndex + 2 | 0,
                      baseIndex + 1 | 0
                    ], match$1[/* indexArr */5])
              ],
              /* customTextureDrawDataMap */init[/* customTextureDrawDataMap */1]
            ],
            /* imguiFuncData */record[/* imguiFuncData */5],
            /* controlData */record[/* controlData */6],
            /* ioData */record[/* ioData */7],
            /* layoutData */record[/* layoutData */8]
          ];
  }
  
  
  /* RecordIMGUIService-WonderImgui Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function getKerning(fntData, left, right) {
    var match = get$3(buildKerningHashMapKey(left, right), fntData[/* kerningMap */5]);
    if (match !== undefined) {
      return match;
    } else {
      return 0;
    }
  }
  
  
  /* ParseFntIMGUIService-WonderImgui Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  
  function length$3(prim) {
    return prim.length;
  }
  
  function getValidValues$1(map) {
    return map.filter((function (value) {
                  return value !== undefined;
                }));
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function _getGlyphById(fntData, id) {
    var dict = fntData[/* fontDefDictionary */4];
    return get$3(id, dict);
  }
  
  function getGlyph(param, fntData, id) {
    _getGlyphById(fntData, id);
    var match = _getGlyphById(fntData, id);
    if (match !== undefined) {
      return match;
    } else {
      var match$1 = id === "\t".charCodeAt(0);
      if (match$1) {
        return param[1];
      } else {
        var match$2 = id === " ".charCodeAt(0);
        if (match$2) {
          return param[0];
        } else {
          return undefined;
        }
      }
    }
  }
  
  function _getMGlyph(fntData) {
    var m_widthArr = /* array */[
      "m",
      "w"
    ];
    return reduceOneParam((function (glyph, m_width) {
                  if (glyph !== undefined) {
                    return glyph;
                  } else {
                    return _getGlyphById(fntData, m_width.charCodeAt(0));
                  }
                }), undefined, m_widthArr);
  }
  
  function _getFirstGlyph(fntData) {
    return getValidValues$1(fntData[/* fontDefDictionary */4])[0];
  }
  
  function setupSpaceGlyphs(fntData, tabSize) {
    var match = _getGlyphById(fntData, " ".charCodeAt(0));
    var space;
    if (match !== undefined) {
      space = match;
    } else {
      var match$1 = _getMGlyph(fntData);
      space = match$1 !== undefined ? match$1 : _getFirstGlyph(fntData);
    }
    return /* tuple */[
            space,
            /* record */[
              /* id */"\t".charCodeAt(0),
              /* rect : tuple */[
                0,
                0,
                0,
                0
              ],
              /* xOffset */0,
              /* yOffset */0,
              /* xAdvance */imul(tabSize, space[/* xAdvance */4])
            ]
          ];
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function hasFontDefDictionaryData(param) {
    return length$3(param[/* fontDefDictionary */4]) > 0;
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function _computeMetrics(fntData, text, letterSpacing, start, end_, width, hasFontDefDictionaryDataFunc, getGlyphFunc, getKerningFunc) {
    var match = !_1(hasFontDefDictionaryDataFunc, fntData);
    if (match) {
      return /* tuple */[
              start,
              start,
              0
            ];
    } else {
      var curPen = 0;
      var curWidth = 0;
      var count = 0;
      var lastGlyph = undefined;
      var $$break = false;
      for(var i = start ,i_finish = Math.min(text.length, end_) - 1 | 0; i <= i_finish; ++i){
        var match$1 = $$break;
        if (!match$1) {
          var id = text.charCodeAt(i);
          var glyph = _2(getGlyphFunc, fntData, id);
          if (glyph !== undefined) {
            var glyph$1 = glyph;
            var match$2 = glyph$1[/* rect */1];
            var match$3 = lastGlyph;
            var kern = match$3 !== undefined ? _3(getKerningFunc, fntData, match$3[/* id */0], glyph$1[/* id */0]) : 0;
            curPen = curPen + kern | 0;
            var nextPen = (curPen + glyph$1[/* xAdvance */4] | 0) + letterSpacing | 0;
            var nextWidth = curPen + match$2[2] | 0;
            var match$4 = nextWidth > width || nextPen > width;
            if (match$4) {
              var match$5 = count === 0;
              if (match$5) {
                count = 1;
                curWidth = nextWidth;
              }
              $$break = true;
            }
            curPen = nextPen;
            curWidth = nextWidth;
            lastGlyph = glyph$1;
          }
          count = count + 1 | 0;
        }
        
      }
      var match$6 = lastGlyph;
      if (match$6 !== undefined) {
        curWidth = curWidth + match$6[/* xOffset */2] | 0;
      }
      return /* tuple */[
              start,
              start + count | 0,
              curWidth
            ];
    }
  }
  
  function _findNewLineIndex(text, $$char, start, end_) {
    var idx = text.indexOf($$char, start);
    var match = idx === -1 || idx > end_;
    if (match) {
      return end_;
    } else {
      return idx;
    }
  }
  
  function _isWhitespace($$char) {
    return (/\s/).test($$char);
  }
  
  var _greedy = function (fntData,text,letterSpacing,start,end_,width,hasFontDefDictionaryDataFunc,getGlyphFunc,getKerningFunc){
               /* A greedy word wrapper based on LibGDX algorithm
              https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java */
      const NEWLINE_CHAR = '\n';
  
              var lines = [],
                  textWidth = width;
  
              while (start < end_ && start < text.length) {
                  /* get next newline position */
                  let newLine = _findNewLineIndex(text, NEWLINE_CHAR, start, end_);
  
                  /* eat whitespace at start of line */
                  while (start < newLine) {
                      if (!_isWhitespace( text.charAt(start) )){
                          break;
                      }
  
                      start++;
                  }
  
                  /* determine visible # of glyphs for the available width */
                  let measured = _computeMetrics(fntData, text, letterSpacing, start, newLine, textWidth, hasFontDefDictionaryDataFunc, getGlyphFunc, getKerningFunc),
                      lineEnd = start + (measured[1]-measured[0]),
                      nextStart = lineEnd + NEWLINE_CHAR.length;
  
  
                  /* if we had to cut the line before the next newline... */
                  if (lineEnd < newLine) {
                      /* find char to break on */
                      while (lineEnd > start) {
                          if (_isWhitespace(text.charAt(lineEnd))){
                              break;
                          }
  
                          lineEnd--;
                      }
  
                      if (lineEnd === start) {
                          if (nextStart > start + NEWLINE_CHAR.length){
                              nextStart--;
                          }
  
   /* If no characters to break, show all. */
                          lineEnd = nextStart ;
                      }
                      else {
                          nextStart = lineEnd;
  
                          /* eat whitespace at end_ of line */
                          while (lineEnd > start) {
                              if (!_isWhitespace(text.charAt(lineEnd - NEWLINE_CHAR.length))){
                                  break;
                              }
  
                              lineEnd--;
                          }
                      }
                  }
  
                  if (lineEnd >= start) {
                      lines.push(_computeMetrics(fntData, text, letterSpacing, start, lineEnd, textWidth, hasFontDefDictionaryDataFunc, getGlyphFunc, getKerningFunc));
                  }
  
                  start = nextStart;
              }
              return lines
  
  
              };
  
  function getLines(fntData, text, param, fallbackGlyphTuple) {
    return _greedy(fntData, text, param[0], param[2], param[3], param[1], hasFontDefDictionaryData, (function (param, param$1) {
                  return getGlyph(fallbackGlyphTuple, param, param$1);
                }), getKerning);
  }
  
  
  /* BitmapFontParserIMGUIService-WonderImgui Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function _computeYForCenterYAlignment(totalHeight, lineHeight, lines) {
    var linesHeight = imul(lines.length, lineHeight);
    return (totalHeight - linesHeight | 0) / 2 | 0;
  }
  
  function getLayoutData(text, param, fntData, _) {
    var align = param[4];
    var letterSpacing = param[3];
    var width = param[0];
    var fallbackGlyphTuple = setupSpaceGlyphs(fntData, param[2]);
    var lines = getLines(fntData, text, /* tuple */[
          letterSpacing,
          width,
          0,
          text.length
        ], fallbackGlyphTuple);
    var lineHeight = fntData[/* commonHeight */0];
    var maxLineWidth = reduceOneParam((function (width$1, param) {
            return Math.max(width$1, param[2], width);
          }), 0, lines);
    return reduceOneParami((function (param, param$1, lineIndex) {
                    var lineWidth = param$1[2];
                    var layoutDataArr = param[0];
                    var lastGlyph = undefined;
                    var x = param[1];
                    var y = param[2];
                    for(var i = param$1[0] ,i_finish = param$1[1] - 1 | 0; i <= i_finish; ++i){
                      var id = text.charCodeAt(i);
                      var match = getGlyph(fallbackGlyphTuple, fntData, id);
                      if (match !== undefined) {
                        var glyph = match;
                        var match$1 = lastGlyph;
                        var tx;
                        if (match$1 !== undefined) {
                          x = x + getKerning(fntData, match$1[/* id */0], glyph[/* id */0]) | 0;
                          tx = x;
                        } else {
                          tx = x;
                        }
                        var tx$1;
                        switch (align) {
                          case 0 : 
                              tx$1 = tx;
                              break;
                          case 1 : 
                              tx$1 = tx + ((maxLineWidth - lineWidth | 0) / 2 | 0) | 0;
                              break;
                          case 2 : 
                              tx$1 = tx + (maxLineWidth - lineWidth | 0) | 0;
                              break;
                          
                        }
                        push$3(/* record */[
                              /* position : tuple */[
                                tx$1 + glyph[/* xOffset */2] | 0,
                                y + glyph[/* yOffset */3] | 0
                              ],
                              /* data */glyph,
                              /* index */i,
                              /* line */lineIndex
                            ], layoutDataArr);
                        x = (x + glyph[/* xAdvance */4] | 0) + letterSpacing | 0;
                        lastGlyph = glyph;
                      }
                      
                    }
                    return /* tuple */[
                            layoutDataArr,
                            0,
                            y + lineHeight | 0,
                            lastGlyph
                          ];
                  }), /* tuple */[
                  /* array */[],
                  0,
                  _computeYForCenterYAlignment(param[1], lineHeight, lines),
                  undefined
                ], lines)[0];
  }
  
  
  /* ArrayService-WonderImgui Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function _generateVertices(posX, posY, param, verticeArr) {
    var position = param[/* position */0];
    var match = param[/* data */1][/* rect */1];
    var charHeightInImage = match[3];
    var charWidthInImage = match[2];
    var leftUpX = position[0] + posX;
    var leftUpY = position[1] + posY;
    return addPoints(/* array */[
                leftUpX,
                leftUpY,
                leftUpX,
                leftUpY + charHeightInImage,
                leftUpX + charWidthInImage,
                leftUpY,
                leftUpX + charWidthInImage,
                leftUpY + charHeightInImage
              ], verticeArr);
  }
  
  function _generateTexCoords(param, textureWidth, textureHeight, texCoordArr) {
    var match = param[/* data */1][/* rect */1];
    var charYInImage = match[1];
    var charXInImage = match[0];
    var s0 = charXInImage / textureWidth;
    var t0 = charYInImage / textureHeight;
    var s1 = (charXInImage + match[2] | 0) / textureWidth;
    var t1 = (charYInImage + match[3] | 0) / textureHeight;
    return addPoints(/* array */[
                s0,
                t0,
                s0,
                t1,
                s1,
                t0,
                s1,
                t1
              ], texCoordArr);
  }
  
  function _generateIndices(baseIndex, indexArr) {
    return addPoints(/* array */[
                baseIndex,
                baseIndex + 1 | 0,
                baseIndex + 2 | 0,
                baseIndex + 3 | 0,
                baseIndex + 2 | 0,
                baseIndex + 1 | 0
              ], indexArr);
  }
  
  function draw$1(param, str, align, record) {
    var y = param[1];
    var x = param[0];
    var match = getSetting$1(record);
    var textColor = match[/* textColor */0];
    var textColorArrPerPoint = concatArrays(/* array */[
          textColor,
          textColor,
          textColor,
          textColor
        ]);
    var match$1 = getFntData(record);
    if (match$1 !== undefined) {
      var fntData = match$1;
      var layoutDataArr = getLayoutData(str, /* tuple */[
            param[2],
            param[3],
            4,
            0,
            align
          ], fntData, record);
      var match$2 = getFontTextureDrawData(record);
      var match$3 = reduceOneParam((function (param, layoutData) {
              var verticeArr = param[0];
              var baseIndex = getBaseIndex(verticeArr);
              return /* tuple */[
                      _generateVertices(x, y, layoutData, verticeArr),
                      addPoints(textColorArrPerPoint, param[1]),
                      _generateTexCoords(layoutData, fntData[/* scaleW */2], fntData[/* scaleH */3], param[2]),
                      _generateIndices(baseIndex, param[3])
                    ];
            }), /* tuple */[
            match$2[/* verticeArr */2],
            match$2[/* colorArr */3],
            match$2[/* texCoordArr */4],
            match$2[/* indexArr */5]
          ], layoutDataArr);
      var init = record[/* drawData */4];
      var init$1 = record[/* drawData */4][/* fontTextureDrawData */0];
      return /* record */[
              /* setting */record[/* setting */0],
              /* assetData */record[/* assetData */1],
              /* fontData */record[/* fontData */2],
              /* webglData */record[/* webglData */3],
              /* drawData : record */[
                /* fontTextureDrawData : record */[
                  /* drawType */init$1[/* drawType */0],
                  /* customTexture */init$1[/* customTexture */1],
                  /* verticeArr */match$3[0],
                  /* colorArr */match$3[1],
                  /* texCoordArr */match$3[2],
                  /* indexArr */match$3[3]
                ],
                /* customTextureDrawDataMap */init[/* customTextureDrawDataMap */1]
              ],
              /* imguiFuncData */record[/* imguiFuncData */5],
              /* controlData */record[/* controlData */6],
              /* ioData */record[/* ioData */7],
              /* layoutData */record[/* layoutData */8]
            ];
    } else {
      return fatal(buildFatalMessage("getLayoutData", "impossible to create font: not find fnt file", "", "", ""));
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function _getOrCreateCustomTextureDrawData(id, record) {
    var match = get$2(id, getCustomTextureDrawDataMap(record));
    if (match !== undefined) {
      return match;
    } else {
      return /* record */[
              /* drawType : CustomTexture */1,
              /* customTexture */some(unsafeGetCustomTexture(id, record)),
              /* verticeArr : array */[],
              /* colorArr : array */[],
              /* texCoordArr : array */[],
              /* indexArr : array */[]
            ];
    }
  }
  
  function draw$2(param, param$1, id, record) {
    var t1 = param$1[3];
    var s1 = param$1[2];
    var t0 = param$1[1];
    var s0 = param$1[0];
    var height = param[3];
    var width = param[2];
    var y = param[1];
    var x = param[0];
    var drawData = _getOrCreateCustomTextureDrawData(id, record);
    var verticeArr = drawData[/* verticeArr */2];
    var baseIndex = getBaseIndex(verticeArr);
    var drawData_000 = /* drawType */drawData[/* drawType */0];
    var drawData_001 = /* customTexture */drawData[/* customTexture */1];
    var drawData_002 = /* verticeArr */addPoints(/* array */[
          x,
          y,
          x,
          y + height,
          x + width,
          y,
          x + width,
          y + height
        ], verticeArr);
    var drawData_003 = /* colorArr */addPoints(/* array */[
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ], drawData[/* colorArr */3]);
    var drawData_004 = /* texCoordArr */addPoints(/* array */[
          s0,
          t0,
          s0,
          t1,
          s1,
          t0,
          s1,
          t1
        ], drawData[/* texCoordArr */4]);
    var drawData_005 = /* indexArr */addPoints(/* array */[
          baseIndex,
          baseIndex + 1 | 0,
          baseIndex + 2 | 0,
          baseIndex + 3 | 0,
          baseIndex + 2 | 0,
          baseIndex + 1 | 0
        ], drawData[/* indexArr */5]);
    var drawData$1 = /* record */[
      drawData_000,
      drawData_001,
      drawData_002,
      drawData_003,
      drawData_004,
      drawData_005
    ];
    var init = record[/* drawData */4];
    return /* record */[
            /* setting */record[/* setting */0],
            /* assetData */record[/* assetData */1],
            /* fontData */record[/* fontData */2],
            /* webglData */record[/* webglData */3],
            /* drawData : record */[
              /* fontTextureDrawData */init[/* fontTextureDrawData */0],
              /* customTextureDrawDataMap */set(id, drawData$1, record[/* drawData */4][/* customTextureDrawDataMap */1])
            ],
            /* imguiFuncData */record[/* imguiFuncData */5],
            /* controlData */record[/* controlData */6],
            /* ioData */record[/* ioData */7],
            /* layoutData */record[/* layoutData */8]
          ];
  }
  
  
  /* AssetIMGUIService-WonderImgui Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  
  function isInBox(param, param$1) {
    var x = param[0];
    var y = param[1];
    var posY = param$1[1];
    var posX = param$1[0];
    var maxX = x + param[2];
    var maxY = y + param[3];
    if (x <= posX && posX <= maxX && y <= posY) {
      return posY <= maxY;
    } else {
      return false;
    }
  }
  
  function isInCircle(param, param$1) {
    var width = param[2];
    var centerX = param[0] + 0.5 * width;
    var centerY = param[1] + 0.5 * param[3];
    var radius = width / 2;
    var dist = Math.sqrt(Math.pow(param$1[0] - centerX, 2) + Math.pow(param$1[1] - centerY, 2));
    return dist <= radius;
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function isClick(record) {
    var match = getIOData(record);
    if (match[/* pointDown */1]) {
      return match[/* pointUp */0];
    } else {
      return false;
    }
  }
  
  
  /* RecordIMGUIService-WonderImgui Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function button$2(rect, str, record) {
    var match = getSetting$1(record)[/* buttonSetting */2];
    var clickButtonColor = match[/* clickButtonColor */2];
    var match$1 = getIOData(record);
    var match$2 = isInBox(rect, convertIntPositionToFloatPosition(match$1[/* pointPosition */2]));
    var match$3;
    if (match$2) {
      var match$4 = isClick(record);
      match$3 = match$4 ? /* tuple */[
          true,
          clickButtonColor
        ] : (
          match$1[/* pointDown */1] ? /* tuple */[
              false,
              clickButtonColor
            ] : /* tuple */[
              false,
              match[/* hoverButtonColor */1]
            ]
        );
    } else {
      match$3 = /* tuple */[
        false,
        match[/* buttonColor */0]
      ];
    }
    return /* tuple */[
            draw$1(rect, str, /* Center */1, draw(rect, match$3[1], record)),
            match$3[0]
          ];
  }
  
  
  /* IOIMGUIService-WonderImgui Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function clamp$1(num, below, up) {
    var match = caml_lessthan(num, below);
    if (match) {
      return below;
    } else {
      var match$1 = caml_greaterthan(num, up);
      if (match$1) {
        return up;
      } else {
        return num;
      }
    }
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function _addIndex(record) {
    var init = record[/* controlData */6];
    var init$1 = record[/* controlData */6][/* sliderData */2];
    return /* record */[
            /* setting */record[/* setting */0],
            /* assetData */record[/* assetData */1],
            /* fontData */record[/* fontData */2],
            /* webglData */record[/* webglData */3],
            /* drawData */record[/* drawData */4],
            /* imguiFuncData */record[/* imguiFuncData */5],
            /* controlData : record */[
              /* radioButtonData */init[/* radioButtonData */0],
              /* checkboxData */init[/* checkboxData */1],
              /* sliderData : record */[
                /* index */record[/* controlData */6][/* sliderData */2][/* index */0] + 1 | 0,
                /* valueMap */init$1[/* valueMap */1]
              ]
            ],
            /* ioData */record[/* ioData */7],
            /* layoutData */record[/* layoutData */8]
          ];
  }
  
  function _getValue(index, defaultValue, record) {
    var match = get$3(index, record[/* controlData */6][/* sliderData */2][/* valueMap */1]);
    if (match !== undefined) {
      return match;
    } else {
      return defaultValue;
    }
  }
  
  function _setValue(index, value, record) {
    set$1(index, value, record[/* controlData */6][/* sliderData */2][/* valueMap */1]);
    return record;
  }
  
  function _computeValue(param, param$1, param$2, record) {
    var min = param$2[0];
    var x = param$1[0];
    if (param[0]) {
      var xMax = x + param$1[2];
      var mouseX = clamp$1(param[1][0], x, xMax);
      var value = (param$2[1] - min) * ((mouseX - x) / (xMax - x)) + min;
      if (param$2[2]) {
        return Math.round(value);
      } else {
        return value;
      }
    } else {
      return _getValue(param[2], param[3], record);
    }
  }
  
  function _slider(param, param$1, param$2, record) {
    var numDecimalDigits = param$1[3];
    var doRounding = param$1[2];
    var max = param$1[1];
    var min = param$1[0];
    var rect = param[0];
    var height = rect[3];
    var width = rect[2];
    var y = rect[1];
    var x = rect[0];
    var match = getSetting$1(record)[/* sliderSetting */5];
    var sliderFillColorHover = match[/* sliderFillColorHover */3];
    var sliderBackgroundColorHover = match[/* sliderBackgroundColorHover */2];
    var match$1 = getIOData(record);
    var pointPosition = match$1[/* pointPosition */2];
    var match$2 = isInBox(rect, convertIntPositionToFloatPosition(pointPosition));
    var match$3 = match$2 ? (
        match$1[/* pointDown */1] ? /* tuple */[
            true,
            sliderBackgroundColorHover,
            sliderFillColorHover
          ] : /* tuple */[
            false,
            sliderBackgroundColorHover,
            sliderFillColorHover
          ]
      ) : /* tuple */[
        false,
        match[/* sliderBackgroundColor */0],
        match[/* sliderFillColor */1]
      ];
    var isSelected = match$3[0];
    var index = record[/* controlData */6][/* sliderData */2][/* index */0];
    var value = _computeValue(/* tuple */[
          isSelected,
          pointPosition,
          index,
          param$2[0]
        ], rect, /* tuple */[
          min,
          max,
          doRounding,
          numDecimalDigits
        ], record);
    var sliderFill = (value - min) / (max - min);
    var sliderValueStr = value.toFixed(doRounding ? 0 : numDecimalDigits);
    var record$1 = draw(rect, match$3[1], record);
    var record$2 = draw(/* tuple */[
          x,
          y,
          width * sliderFill,
          height
        ], match$3[2], record$1);
    var record$3 = draw$1(rect, sliderValueStr, /* Center */1, record$2);
    var record$4 = draw$1(/* tuple */[
          x + width,
          y,
          param[1],
          height
        ], param$2[1], /* Left */0, record$3);
    var record$5 = _addIndex(_setValue(index, value, record$4));
    return /* tuple */[
            record$5,
            isSelected,
            value
          ];
  }
  
  function sliderInt$2(param, param$1, param$2, record) {
    var match = _slider(/* tuple */[
          param[0],
          param[1]
        ], /* tuple */[
          param$1[0],
          param$1[1],
          true,
          0
        ], /* tuple */[
          param$2[0],
          param$2[1]
        ], record);
    return /* tuple */[
            match[0],
            match[1],
            match[2]
          ];
  }
  
  function sliderFloat$2(param, param$1, param$2, record) {
    return _slider(/* tuple */[
                param[0],
                param[1]
              ], /* tuple */[
                param$1[0],
                param$1[1],
                false,
                param$1[2]
              ], /* tuple */[
                param$2[0],
                param$2[1]
              ], record);
  }
  
  
  /* RecordIMGUIService-WonderImgui Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function _addIndex$1(record) {
    var init = record[/* controlData */6];
    var init$1 = record[/* controlData */6][/* checkboxData */1];
    return /* record */[
            /* setting */record[/* setting */0],
            /* assetData */record[/* assetData */1],
            /* fontData */record[/* fontData */2],
            /* webglData */record[/* webglData */3],
            /* drawData */record[/* drawData */4],
            /* imguiFuncData */record[/* imguiFuncData */5],
            /* controlData : record */[
              /* radioButtonData */init[/* radioButtonData */0],
              /* checkboxData : record */[
                /* index */record[/* controlData */6][/* checkboxData */1][/* index */0] + 1 | 0,
                /* isSelectedMap */init$1[/* isSelectedMap */1]
              ],
              /* sliderData */init[/* sliderData */2]
            ],
            /* ioData */record[/* ioData */7],
            /* layoutData */record[/* layoutData */8]
          ];
  }
  
  function _getIsSelectedByDefaultAndMap(index, defaultIsSelected, record) {
    var match = get$3(index, record[/* controlData */6][/* checkboxData */1][/* isSelectedMap */1]);
    if (match !== undefined) {
      return match;
    } else {
      return defaultIsSelected;
    }
  }
  
  function _setIsSlected(index, value, record) {
    set$1(index, value, record[/* controlData */6][/* checkboxData */1][/* isSelectedMap */1]);
    return record;
  }
  
  function checkbox$2(rect, defaultIsSelected, str, record) {
    var height = rect[3];
    var y = rect[1];
    var x = rect[0];
    var match = getSetting$1(record)[/* checkboxSetting */4];
    var checkboxInnerColorHover = match[/* checkboxInnerColorHover */3];
    var checkboxOuterColorHover = match[/* checkboxOuterColorHover */2];
    var match$1 = getIOData(record);
    var innerSize = height * match[/* checkboxInnerSizeRatio */4];
    var outerSize = height * match[/* checkboxOuterSizeRatio */5];
    var outerBoxRect = /* tuple */[
      x,
      y,
      outerSize,
      outerSize
    ];
    var index = record[/* controlData */6][/* checkboxData */1][/* index */0];
    var isSelectedByDefaultAndMap = _getIsSelectedByDefaultAndMap(index, defaultIsSelected, record);
    var isInBox$$1 = isInBox(outerBoxRect, convertIntPositionToFloatPosition(match$1[/* pointPosition */2]));
    var match$2 = isInBox$$1 && isClick(record);
    var isSelected = match$2 ? (
        isSelectedByDefaultAndMap ? false : true
      ) : isSelectedByDefaultAndMap;
    var match$3 = isSelected || isInBox$$1 ? /* tuple */[
        checkboxInnerColorHover,
        checkboxOuterColorHover
      ] : /* tuple */[
        match[/* checkboxInnerColor */1],
        match[/* checkboxOuterColor */0]
      ];
    var record$1 = _setIsSlected(index, isSelected, record);
    var record$2 = draw(outerBoxRect, match$3[1], record$1);
    var record$3 = isSelected ? draw(/* tuple */[
            Math.round(0.5 * (x + (x + outerSize) - innerSize)),
            Math.round(0.5 * (y + (y + outerSize) - innerSize)),
            innerSize,
            innerSize
          ], match$3[0], record$2) : record$2;
    var record$4 = draw$1(/* tuple */[
          x + outerSize,
          y,
          rect[2] - outerSize,
          height
        ], str, /* Center */1, record$3);
    var record$5 = _addIndex$1(record$4);
    return /* tuple */[
            record$5,
            isSelected
          ];
  }
  
  
  /* IOIMGUIService-WonderImgui Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function _drawCircle(_param, _theta, _curIndex, _param$1) {
    while(true) {
      var param = _param$1;
      var param$1 = _param;
      var curIndex = _curIndex;
      var theta = _theta;
      var indexArr = param[3];
      var texCoordArr = param[2];
      var colorArr = param[1];
      var verticeArr = param[0];
      var max = param$1[7];
      var stepSize = param$1[6];
      var radius = param$1[5];
      var centerVertexIndex = param$1[4];
      var fontTexUvForWhite = param$1[3];
      var color = param$1[2];
      var centerY = param$1[1];
      var centerX = param$1[0];
      var match = theta <= max;
      if (match) {
        var match$1 = coloredVertex(centerX + radius * Math.cos(theta), centerY + radius * Math.sin(theta), color, /* tuple */[
              verticeArr,
              colorArr,
              texCoordArr
            ], fontTexUvForWhite);
        var match$2 = theta !== 0;
        var indexArr$1 = match$2 ? push$3(centerVertexIndex, push$3(curIndex - 1 | 0, push$3(curIndex + 0 | 0, indexArr))) : indexArr;
        _param$1 = /* tuple */[
          match$1[0],
          match$1[1],
          match$1[2],
          indexArr$1
        ];
        _curIndex = curIndex + 1 | 0;
        _theta = theta + stepSize;
        _param = /* tuple */[
          centerX,
          centerY,
          color,
          fontTexUvForWhite,
          centerVertexIndex,
          radius,
          stepSize,
          max
        ];
        continue ;
      } else {
        return /* tuple */[
                verticeArr,
                colorArr,
                texCoordArr,
                indexArr
              ];
      }
    }
  }
  
  function draw$3(param, color, segments, record) {
    var width = param[2];
    var match = getSetting$1(record);
    var fontTexUvForWhite = match[/* fontTexUvForWhite */1];
    var centerX = param[0] + 0.5 * width;
    var centerY = param[1] + 0.5 * param[3];
    var radius = width / 2;
    var match$1 = getFontTextureDrawData(record);
    var verticeArr = match$1[/* verticeArr */2];
    var baseIndex = getBaseIndex(verticeArr);
    var match$2 = coloredVertex(centerX, centerY, color, /* tuple */[
          verticeArr,
          match$1[/* colorArr */3],
          match$1[/* texCoordArr */4]
        ], fontTexUvForWhite);
    var centerVertexIndex = baseIndex + 0 | 0;
    var match$3 = _drawCircle(/* tuple */[
          centerX,
          centerY,
          color,
          fontTexUvForWhite,
          centerVertexIndex,
          radius,
          2 * Math.PI / segments,
          2 * Math.PI + 0.1
        ], 0, baseIndex + 1 | 0, /* tuple */[
          match$2[0],
          match$2[1],
          match$2[2],
          match$1[/* indexArr */5]
        ]);
    var init = record[/* drawData */4];
    var init$1 = record[/* drawData */4][/* fontTextureDrawData */0];
    return /* record */[
            /* setting */record[/* setting */0],
            /* assetData */record[/* assetData */1],
            /* fontData */record[/* fontData */2],
            /* webglData */record[/* webglData */3],
            /* drawData : record */[
              /* fontTextureDrawData : record */[
                /* drawType */init$1[/* drawType */0],
                /* customTexture */init$1[/* customTexture */1],
                /* verticeArr */match$3[0],
                /* colorArr */match$3[1],
                /* texCoordArr */match$3[2],
                /* indexArr */match$3[3]
              ],
              /* customTextureDrawDataMap */init[/* customTextureDrawDataMap */1]
            ],
            /* imguiFuncData */record[/* imguiFuncData */5],
            /* controlData */record[/* controlData */6],
            /* ioData */record[/* ioData */7],
            /* layoutData */record[/* layoutData */8]
          ];
  }
  
  
  /* ArrayService-WonderImgui Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function _getSelectIndex(defaultSelectIndex, group$$1, record) {
    var match = get$2(group$$1, getRadioButtonData(record)[/* isSelectedMap */0]);
    if (match !== undefined) {
      return match;
    } else {
      return defaultSelectIndex;
    }
  }
  
  function _buildDrawData(defaultSelectIndex, groupDataArr, group$$1, record) {
    var match = getSetting$1(record)[/* radioButtonSetting */3];
    var radioButtonOuterRadius = match[/* radioButtonOuterRadius */6];
    var radioButtonInnerRadius = match[/* radioButtonInnerRadius */5];
    var match$1 = getIOData(record);
    var pointPosition = match$1[/* pointPosition */2];
    var selectIndex = _getSelectIndex(defaultSelectIndex, group$$1, record);
    var match$2 = reduceOneParami((function (param, param$1, index) {
            var resultInHoverIndex = param[2];
            var resultSelectIndex = param[1];
            var match = convertIntRectToFloatRect(computeRectBasedOnTopLeftOfView(param$1[0], record));
            var height = match[3];
            var y = match[1];
            var x = match[0];
            var innerRadius = height / 2 * radioButtonInnerRadius;
            var outerRadius = height / 2 * radioButtonOuterRadius;
            var innerCircleWidth = innerRadius * 2;
            var innerCircleHeight = innerRadius * 2;
            var outerCircleWidth = outerRadius * 2;
            var outerCircleHeight = outerRadius * 2;
            var innerCircleRect = /* tuple */[
              x,
              y,
              innerCircleWidth,
              innerCircleHeight
            ];
            var outerCircleRect = /* tuple */[
              x,
              y,
              outerCircleWidth,
              outerCircleHeight
            ];
            var isInCircle$$1 = isInCircle(outerCircleRect, convertIntPositionToFloatPosition(pointPosition));
            var isIOSelected = isInCircle$$1 && isClick(record);
            return /* tuple */[
                    push$3(/* tuple */[
                          x,
                          y,
                          match[2],
                          height,
                          param$1[1],
                          innerRadius,
                          outerRadius,
                          innerCircleWidth,
                          innerCircleHeight,
                          outerCircleWidth,
                          outerCircleHeight,
                          innerCircleRect,
                          outerCircleRect
                        ], param[0]),
                    resultSelectIndex !== undefined ? resultSelectIndex : (
                        isIOSelected ? index : undefined
                      ),
                    resultInHoverIndex !== undefined ? resultInHoverIndex : (
                        isInCircle$$1 ? index : undefined
                      )
                  ];
          }), /* tuple */[
          /* array */[],
          undefined,
          undefined
        ], groupDataArr);
    var ioSelectIndex = match$2[1];
    return /* tuple */[
            match$2[0],
            ioSelectIndex !== undefined ? ioSelectIndex : selectIndex,
            match$2[2]
          ];
  }
  
  function radioButton$2(groupDataArr, defaultSelectIndex, group$$1, record) {
    requireCheck((function () {
            return test(buildAssertMessage("defaultSelectIndex < radioButton count", "not"), (function () {
                          return Operators[/* < */9](defaultSelectIndex, groupDataArr.length);
                        }));
          }), true);
    var match = getSetting$1(record)[/* radioButtonSetting */3];
    var radioButtonCircleSegments = match[/* radioButtonCircleSegments */4];
    var radioButtonInnerColorHover = match[/* radioButtonInnerColorHover */3];
    var radioButtonOuterColorHover = match[/* radioButtonOuterColorHover */2];
    var radioButtonInnerColor = match[/* radioButtonInnerColor */1];
    var radioButtonOuterColor = match[/* radioButtonOuterColor */0];
    var match$1 = _buildDrawData(defaultSelectIndex, groupDataArr, group$$1, record);
    var ioInHoverIndex = match$1[2];
    var selectIndex = match$1[1];
    set(group$$1, selectIndex, getRadioButtonData(record)[/* isSelectedMap */0]);
    var record$1 = reduceOneParami((function (record, param, index) {
            var outerCircleWidth = param[9];
            var innerRadius = param[5];
            var y = param[1];
            var x = param[0];
            var isSelected = selectIndex === index;
            var match;
            if (isSelected) {
              match = /* tuple */[
                radioButtonInnerColorHover,
                radioButtonOuterColorHover
              ];
            } else if (ioInHoverIndex !== undefined) {
              var match$1 = ioInHoverIndex === index;
              match = match$1 ? /* tuple */[
                  radioButtonInnerColorHover,
                  radioButtonOuterColorHover
                ] : /* tuple */[
                  radioButtonInnerColor,
                  radioButtonOuterColor
                ];
            } else {
              match = /* tuple */[
                radioButtonInnerColor,
                radioButtonOuterColor
              ];
            }
            var record$1 = draw$3(param[12], match[1], radioButtonCircleSegments, record);
            var record$2 = isSelected ? draw$3(/* tuple */[
                    Math.round(0.5 * (x + (x + outerCircleWidth) - innerRadius * 2)),
                    Math.round(0.5 * (y + (y + param[10]) - innerRadius * 2)),
                    param[7],
                    param[8]
                  ], match[0], radioButtonCircleSegments, record$1) : record$1;
            return draw$1(/* tuple */[
                        x + outerCircleWidth,
                        y,
                        param[2] - outerCircleWidth,
                        param[3]
                      ], param[4], /* Center */1, record$2);
          }), record, match$1[0]);
    return /* tuple */[
            record$1,
            selectIndex
          ];
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function label$1(rect, str, align, record) {
    return draw$1(convertIntRectToFloatRect(computeRectBasedOnTopLeftOfView(rect, record)), str, align, record);
  }
  
  function image$1(rect, uv, id, record) {
    return draw$2(convertIntRectToFloatRect(computeRectBasedOnTopLeftOfView(rect, record)), uv, id, record);
  }
  
  function button$1(rect, str, record) {
    return button$2(convertIntRectToFloatRect(computeRectBasedOnTopLeftOfView(rect, record)), str, record);
  }
  
  function box$1(rect, color, record) {
    return draw(convertIntRectToFloatRect(computeRectBasedOnTopLeftOfView(rect, record)), color, record);
  }
  
  var radioButton$1 = radioButton$2;
  
  function checkbox$1(rect, defaultSelected, str, record) {
    return checkbox$2(convertIntRectToFloatRect(computeRectBasedOnTopLeftOfView(rect, record)), defaultSelected, str, record);
  }
  
  function sliderInt$1(param, param$1, param$2, record) {
    return sliderInt$2(/* tuple */[
                convertIntRectToFloatRect(computeRectBasedOnTopLeftOfView(param[0], record)),
                param[1]
              ], /* tuple */[
                param$1[0],
                param$1[1]
              ], /* tuple */[
                param$2[0],
                param$2[1]
              ], record);
  }
  
  function sliderFloat$1(param, param$1, param$2, record) {
    return sliderFloat$2(/* tuple */[
                convertIntRectToFloatRect(computeRectBasedOnTopLeftOfView(param[0], record)),
                param[1]
              ], /* tuple */[
                param$1[0],
                param$1[1],
                param$1[2]
              ], /* tuple */[
                param$2[0],
                param$2[1]
              ], record);
  }
  
  
  /* DrawBoxIMGUIService-WonderImgui Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function _createArrayBuffer(gl) {
    var buffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(/* array */[]), gl.DYNAMIC_DRAW);
    return buffer;
  }
  
  function _createElementArrayBuffer(gl) {
    var buffer = gl.createBuffer();
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(/* array */[]), gl.DYNAMIC_DRAW);
    return buffer;
  }
  
  function _createFontTexture(gl, source) {
    var texture = gl.createTexture();
    var target = gl.TEXTURE_2D;
    gl.bindTexture(target, texture);
    gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
    gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    var format = gl.RGBA;
    gl.texImage2D(target, 0, format, format, gl.UNSIGNED_BYTE, source);
    return texture;
  }
  
  function _buildOrthoProjectionMat4TypeArr(param) {
    return ortho(0, param[0], param[1], 0, -1, 1, createIdentityMatrix4$1(/* () */0));
  }
  
  function _sendUniformProjectionMatData(gl, program, canvasSize) {
    gl.uniformMatrix4fv(gl.getUniformLocation(program, "u_projectionMat"), false, _buildOrthoProjectionMat4TypeArr(canvasSize));
    return /* () */0;
  }
  
  function _getProgram(record) {
    return unsafeGet$4(record[/* webglData */3])[/* program */0];
  }
  
  function _sendUniformData(gl, program, canvasSize) {
    gl.useProgram(program);
    _sendUniformProjectionMatData(gl, program, canvasSize);
    gl.uniform1i(gl.getUniformLocation(program, "u_sampler2D"), 0);
    return /* () */0;
  }
  
  function sendUniformProjectionMatData$2(gl, canvasSize, record) {
    var program = _getProgram(record);
    gl.useProgram(program);
    gl.uniformMatrix4fv(gl.getUniformLocation(program, "u_projectionMat"), false, _buildOrthoProjectionMat4TypeArr(canvasSize));
    return record;
  }
  
  function init$6(gl, canvasSize, record) {
    var match = !isLoadAsset(record);
    if (match) {
      return record;
    } else {
      var program = initShader$1(vs, fs, gl, gl.createProgram());
      var positionBuffer = _createArrayBuffer(gl);
      var colorBuffer = _createArrayBuffer(gl);
      var texCoordBuffer = _createArrayBuffer(gl);
      var indexBuffer = _createElementArrayBuffer(gl);
      var fontTexture = _createFontTexture(gl, unsafeGetBitmap(record));
      _sendUniformData(gl, program, canvasSize);
      var match$1 = record[/* assetData */1];
      var init$1 = record[/* assetData */1];
      return /* record */[
              /* setting */record[/* setting */0],
              /* assetData : record */[
                /* fntId */init$1[/* fntId */0],
                /* bitmapId */init$1[/* bitmapId */1],
                /* fntDataMap */init$1[/* fntDataMap */2],
                /* bitmapMap */init$1[/* bitmapMap */3],
                /* customImageArr */init$1[/* customImageArr */4],
                /* customTextureMap */createCustomTextures(gl, match$1[/* customImageArr */4], match$1[/* customTextureMap */5])
              ],
              /* fontData */record[/* fontData */2],
              /* webglData *//* record */[
                /* program */program,
                /* positionBuffer */positionBuffer,
                /* colorBuffer */colorBuffer,
                /* texCoordBuffer */texCoordBuffer,
                /* indexBuffer */indexBuffer,
                /* fontTexture */fontTexture,
                /* aPositonLocation */gl.getAttribLocation(program, "a_position"),
                /* aColorLocation */gl.getAttribLocation(program, "a_color"),
                /* aTexCoordLocation */gl.getAttribLocation(program, "a_texCoord"),
                /* lastWebglData */undefined
              ],
              /* drawData */record[/* drawData */4],
              /* imguiFuncData */record[/* imguiFuncData */5],
              /* controlData */record[/* controlData */6],
              /* ioData */record[/* ioData */7],
              /* layoutData */record[/* layoutData */8]
            ];
    }
  }
  
  function _createEmptyDrawData() {
    return /* record */[
            /* fontTextureDrawData : record */[
              /* drawType : FontTexture */0,
              /* customTexture */undefined,
              /* verticeArr : array */[],
              /* colorArr : array */[],
              /* texCoordArr : array */[],
              /* indexArr : array */[]
            ],
            /* customTextureDrawDataMap */createEmpty$1(/* () */0)
          ];
  }
  
  function _prepare(ioData, param, data) {
    var record = _1(param[0], data);
    var init = record[/* controlData */6];
    var init$1 = record[/* controlData */6][/* checkboxData */1];
    var init$2 = record[/* controlData */6][/* sliderData */2];
    return _2(param[1], /* record */[
                /* setting */record[/* setting */0],
                /* assetData */record[/* assetData */1],
                /* fontData */record[/* fontData */2],
                /* webglData */record[/* webglData */3],
                /* drawData */_createEmptyDrawData(/* () */0),
                /* imguiFuncData */record[/* imguiFuncData */5],
                /* controlData : record */[
                  /* radioButtonData */init[/* radioButtonData */0],
                  /* checkboxData : record */[
                    /* index */0,
                    /* isSelectedMap */init$1[/* isSelectedMap */1]
                  ],
                  /* sliderData : record */[
                    /* index */0,
                    /* valueMap */init$2[/* valueMap */1]
                  ]
                ],
                /* ioData */ioData,
                /* layoutData */record[/* layoutData */8]
              ], data);
  }
  
  function _unbindVAO(gl) {
    var match = gl.getExtension("OES_vertex_array_object");
    if (match == null) {
      return /* () */0;
    } else {
      match.bindVertexArrayOES(null);
      return /* () */0;
    }
  }
  
  function _backupGlState(gl, record) {
    var init = unsafeGetWebglData(record);
    return /* record */[
            /* setting */record[/* setting */0],
            /* assetData */record[/* assetData */1],
            /* fontData */record[/* fontData */2],
            /* webglData *//* record */[
              /* program */init[/* program */0],
              /* positionBuffer */init[/* positionBuffer */1],
              /* colorBuffer */init[/* colorBuffer */2],
              /* texCoordBuffer */init[/* texCoordBuffer */3],
              /* indexBuffer */init[/* indexBuffer */4],
              /* fontTexture */init[/* fontTexture */5],
              /* aPositonLocation */init[/* aPositonLocation */6],
              /* aColorLocation */init[/* aColorLocation */7],
              /* aTexCoordLocation */init[/* aTexCoordLocation */8],
              /* lastWebglData *//* record */[
                /* lastProgram */nullable_to_opt(gl.getParameter(gl.CURRENT_PROGRAM)),
                /* lastElementArrayBuffer */gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING),
                /* lastArrayBuffer */gl.getParameter(gl.ARRAY_BUFFER_BINDING),
                /* lastTexture */nullable_to_opt(gl.getParameter(gl.TEXTURE_BINDING_2D)),
                /* lastIsEnableDepthTest */gl.isEnabled(gl.DEPTH_TEST),
                /* lastIsEnableBlend */gl.isEnabled(gl.BLEND)
              ]
            ],
            /* drawData */record[/* drawData */4],
            /* imguiFuncData */record[/* imguiFuncData */5],
            /* controlData */record[/* controlData */6],
            /* ioData */record[/* ioData */7],
            /* layoutData */record[/* layoutData */8]
          ];
  }
  
  function _setGlState(gl) {
    gl.disable(gl.DEPTH_TEST);
    gl.enable(gl.BLEND);
    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
    return /* () */0;
  }
  
  function _draw(gl, drawElementsDataArr, record) {
    var match = unsafeGetWebglData(record);
    var fontTexture = match[/* fontTexture */5];
    forEach((function (param) {
            var texture = param[/* drawType */0] ? unsafeGet$4(param[/* customTexture */1]) : fontTexture;
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.drawElements(gl.TRIANGLES, param[/* count */2], gl.UNSIGNED_SHORT, param[/* countOffset */3]);
            return /* () */0;
          }), drawElementsDataArr);
    return record;
  }
  
  function _restoreGlState(gl, record) {
    var match = unsafeGet$4(unsafeGetWebglData(record)[/* lastWebglData */9]);
    var lastTexture = match[/* lastTexture */3];
    var lastProgram = match[/* lastProgram */0];
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, match[/* lastElementArrayBuffer */1]);
    gl.bindBuffer(gl.ARRAY_BUFFER, match[/* lastArrayBuffer */2]);
    if (lastProgram !== undefined) {
      gl.useProgram(valFromOption(lastProgram));
    }
    if (lastTexture !== undefined) {
      gl.bindTexture(gl.TEXTURE_2D, valFromOption(lastTexture));
    }
    if (match[/* lastIsEnableDepthTest */4]) {
      gl.enable(gl.DEPTH_TEST);
    } else {
      gl.disable(gl.DEPTH_TEST);
    }
    if (match[/* lastIsEnableBlend */5]) {
      gl.enable(gl.BLEND);
    } else {
      gl.disable(gl.BLEND);
    }
    return record;
  }
  
  function _buildGroupedDrawDataArr(record) {
    var fontTextureDrawData = getFontTextureDrawData(record);
    var customTextureDrawDataMap = getCustomTextureDrawDataMap(record);
    var match = reduceOneParam((function (param, drawData) {
            var baseIndex = getBaseIndex(param[0]) + param[1] | 0;
            return /* tuple */[
                    drawData[/* verticeArr */2],
                    baseIndex,
                    push$3(/* record */[
                          /* drawType */drawData[/* drawType */0],
                          /* customTexture */drawData[/* customTexture */1],
                          /* verticeArr */drawData[/* verticeArr */2],
                          /* colorArr */drawData[/* colorArr */3],
                          /* texCoordArr */drawData[/* texCoordArr */4],
                          /* indexArr */drawData[/* indexArr */5].map((function (index) {
                                  return index + baseIndex | 0;
                                }))
                        ], param[2])
                  ];
          }), /* tuple */[
          fontTextureDrawData[/* verticeArr */2],
          0,
          /* array */[]
        ], values(customTextureDrawDataMap));
    return /* tuple */[
            record,
            concatArrays(/* array */[
                  /* array */[fontTextureDrawData],
                  match[2]
                ])
          ];
  }
  
  function _finish(gl, param, data) {
    var record = _1(param[0], data);
    _unbindVAO(gl);
    var record$1 = _backupGlState(gl, record);
    var match = _buildGroupedDrawDataArr(record$1);
    var match$1 = bufferAllData(gl, match[1], match[0]);
    var record$2 = match$1[0];
    var match$2 = unsafeGetWebglData(record$2);
    gl.useProgram(match$2[/* program */0]);
    _setGlState(gl);
    return _2(param[1], _restoreGlState(gl, _draw(gl, match$1[1], record$2)), data);
  }
  
  function _clearData(record) {
    return /* record */[
            /* setting */record[/* setting */0],
            /* assetData */record[/* assetData */1],
            /* fontData */record[/* fontData */2],
            /* webglData */record[/* webglData */3],
            /* drawData */record[/* drawData */4],
            /* imguiFuncData */record[/* imguiFuncData */5],
            /* controlData : record */[
              /* radioButtonData : record */[/* isSelectedMap */createEmpty$1(/* () */0)],
              /* checkboxData : record */[
                /* index */0,
                /* isSelectedMap */createEmpty$2(/* () */0)
              ],
              /* sliderData : record */[
                /* index */0,
                /* valueMap */createEmpty$2(/* () */0)
              ]
            ],
            /* ioData */record[/* ioData */7],
            /* layoutData : record */[/* groupData : record */[
                /* positionArr : array */[],
                /* index */0
              ]]
          ];
  }
  
  function getIMGUIFunc$2(param) {
    return param[/* imguiFuncData */5][/* imguiFunc */0];
  }
  
  function setIMGUIFunc$2(customData, func, record) {
    var init = record[/* imguiFuncData */5];
    return _clearData(/* record */[
                /* setting */record[/* setting */0],
                /* assetData */record[/* assetData */1],
                /* fontData */record[/* fontData */2],
                /* webglData */record[/* webglData */3],
                /* drawData */record[/* drawData */4],
                /* imguiFuncData : record */[
                  /* imguiFunc */some(func),
                  /* customDataForIMGUIFunc */some(customData),
                  /* apiJsObj */init[/* apiJsObj */2]
                ],
                /* controlData */record[/* controlData */6],
                /* ioData */record[/* ioData */7],
                /* layoutData */record[/* layoutData */8]
              ]);
  }
  
  function _buildAPIJsObj() {
    return {
            label: label$1,
            image: image$1,
            button: button$1,
            box: box$1,
            radioButton: radioButton$1,
            checkbox: checkbox$1,
            sliderInt: sliderInt$1,
            sliderFloat: sliderFloat$1,
            beginGroup: beginGroup$2,
            endGroup: endGroup$2
          };
  }
  
  function _exec(apiJsObj, getRecordFunc, data) {
    var record = _1(getRecordFunc, data);
    var match = getIMGUIFunc$2(record);
    if (match !== undefined) {
      return valFromOption(match)(unsafeGet$4(record[/* imguiFuncData */5][/* customDataForIMGUIFunc */1]), apiJsObj, data);
    } else {
      return data;
    }
  }
  
  function render$5(gl, ioData, apiJsObj, param, data) {
    var setRecordFunc = param[1];
    var getRecordFunc = param[0];
    var record = _1(getRecordFunc, data);
    var match = !isLoadAsset(record);
    if (match) {
      return data;
    } else {
      return _finish(gl, /* tuple */[
                  getRecordFunc,
                  setRecordFunc
                ], _exec(apiJsObj, getRecordFunc, _prepare(ioData, /* tuple */[
                          getRecordFunc,
                          setRecordFunc
                        ], data)));
    }
  }
  
  function createRecord$1() {
    return /* record */[
            /* setting : record */[
              /* textColor : array */[
                1,
                1,
                1
              ],
              /* fontTexUvForWhite : array */[
                0,
                0
              ],
              /* buttonSetting : record */[
                /* buttonColor : array */[
                  0.35,
                  0.1,
                  0.1
                ],
                /* hoverButtonColor : array */[
                  0.40,
                  0.1,
                  0.1
                ],
                /* clickButtonColor : array */[
                  0.50,
                  0.1,
                  0.1
                ]
              ],
              /* radioButtonSetting : record */[
                /* radioButtonOuterColor : array */[
                  0.3,
                  0.3,
                  0.3
                ],
                /* radioButtonInnerColor : array */[
                  0.15,
                  0.15,
                  0.15
                ],
                /* radioButtonOuterColorHover : array */[
                  0.33,
                  0.33,
                  0.33
                ],
                /* radioButtonInnerColorHover : array */[
                  0.18,
                  0.18,
                  0.18
                ],
                /* radioButtonCircleSegments */9,
                /* radioButtonInnerRadius */0.6,
                /* radioButtonOuterRadius */1
              ],
              /* checkboxSetting : record */[
                /* checkboxOuterColor : array */[
                  0.3,
                  0.3,
                  0.3
                ],
                /* checkboxInnerColor : array */[
                  0.15,
                  0.15,
                  0.15
                ],
                /* checkboxOuterColorHover : array */[
                  0.33,
                  0.33,
                  0.33
                ],
                /* checkboxInnerColorHover : array */[
                  0.18,
                  0.18,
                  0.18
                ],
                /* checkboxInnerSizeRatio */1.4,
                /* checkboxOuterSizeRatio */2
              ],
              /* sliderSetting : record */[
                /* sliderBackgroundColor : array */[
                  0.16,
                  0.16,
                  0.16
                ],
                /* sliderFillColor : array */[
                  0,
                  0.3,
                  0.6
                ],
                /* sliderBackgroundColorHover : array */[
                  0.19,
                  0.19,
                  0.19
                ],
                /* sliderFillColorHover : array */[
                  0,
                  0.3,
                  0.7
                ]
              ]
            ],
            /* assetData : record */[
              /* fntId */"fnt",
              /* bitmapId */"bitmap",
              /* fntDataMap */createEmpty$1(/* () */0),
              /* bitmapMap */createEmpty$1(/* () */0),
              /* customImageArr : array */[],
              /* customTextureMap */createEmpty$1(/* () */0)
            ],
            /* fontData */undefined,
            /* webglData */undefined,
            /* drawData */_createEmptyDrawData(/* () */0),
            /* imguiFuncData : record */[
              /* imguiFunc */undefined,
              /* customDataForIMGUIFunc */undefined,
              /* apiJsObj */_buildAPIJsObj(/* () */0)
            ],
            /* controlData : record */[
              /* radioButtonData : record */[/* isSelectedMap */createEmpty$1(/* () */0)],
              /* checkboxData : record */[
                /* index */0,
                /* isSelectedMap */createEmpty$2(/* () */0)
              ],
              /* sliderData : record */[
                /* index */0,
                /* valueMap */createEmpty$2(/* () */0)
              ]
            ],
            /* ioData : record */[
              /* pointUp */false,
              /* pointDown */false,
              /* pointPosition : tuple */[
                0,
                0
              ],
              /* pointMovementDelta : tuple */[
                0,
                0
              ]
            ],
            /* layoutData : record */[/* groupData : record */[
                /* positionArr : array */[],
                /* index */0
              ]]
          ];
  }
  
  
  /* Js_dict Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  var sendUniformProjectionMatData$1 = sendUniformProjectionMatData$2;
  
  var init$5 = init$6;
  
  var setIMGUIFunc$1 = setIMGUIFunc$2;
  
  
  /* ManageIMGUIService-WonderImgui Not a pure module */
  
  function getWonderIMGUIRecord(state) {
    return state[/* imguiRecord */43][/* wonderImguiIMGUIRecord */1];
  }
  
  function getIOData$1(state) {
    return state[/* imguiRecord */43][/* ioData */0];
  }
  
  function create$34() {
    return /* record */[
            /* ioData : record */[
              /* pointUp */false,
              /* pointDown */false,
              /* pointPosition : tuple */[
                0,
                0
              ],
              /* pointMovementDelta : tuple */[
                0,
                0
              ]
            ],
            /* wonderImguiIMGUIRecord */createRecord$1(/* () */0)
          ];
  }
  
  
  /* ManageIMGUIService-WonderImgui Not a pure module */
  
  function setIMGUIFunc(customData, func, state) {
    var newrecord = caml_array_dup(state);
    var init = state[/* imguiRecord */43];
    newrecord[/* imguiRecord */43] = /* record */[
      /* ioData */init[/* ioData */0],
      /* wonderImguiIMGUIRecord */setIMGUIFunc$1(customData, func, getWonderIMGUIRecord(state))
    ];
    return newrecord;
  }
  
  function getCanvasSize(param) {
    var viewRecord = param[/* viewRecord */9];
    var match = getCanvas(viewRecord);
    if (match !== undefined) {
      var canvas = valFromOption(match);
      return /* tuple */[
              canvas.width,
              canvas.height
            ];
    } else {
      return /* tuple */[
              0,
              0
            ];
    }
  }
  
  var getRecord$11 = getWonderIMGUIRecord;
  
  function setRecord(record, state) {
    var newrecord = caml_array_dup(state);
    var init = state[/* imguiRecord */43];
    newrecord[/* imguiRecord */43] = /* record */[
      /* ioData */init[/* ioData */0],
      /* wonderImguiIMGUIRecord */record
    ];
    return newrecord;
  }
  
  function sendUniformProjectionMatData(gl, canvasSize, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* programRecord */29] = clearLastSendProgram(state[/* programRecord */29]);
    var init = state[/* imguiRecord */43];
    newrecord[/* imguiRecord */43] = /* record */[
      /* ioData */init[/* ioData */0],
      /* wonderImguiIMGUIRecord */sendUniformProjectionMatData$1(gl, canvasSize, getWonderIMGUIRecord(state))
    ];
    return newrecord;
  }
  
  
  /* ViewService-Wonderjs Not a pure module */
  
  function label(rect, str, align, state) {
    var __x = label$1(rect, str, align, getRecord$11(state));
    return setRecord(__x, state);
  }
  
  function image(rect, uv, id, state) {
    var __x = image$1(rect, uv, id, getRecord$11(state));
    return setRecord(__x, state);
  }
  
  function button(rect, str, state) {
    var match = button$1(rect, str, getRecord$11(state));
    return /* tuple */[
            setRecord(match[0], state),
            match[1]
          ];
  }
  
  function box(rect, color, state) {
    var __x = box$1(rect, color, getRecord$11(state));
    return setRecord(__x, state);
  }
  
  function radioButton(groupDataArr, defaultSelectIndex, group, state) {
    var match = radioButton$1(groupDataArr, defaultSelectIndex, group, getRecord$11(state));
    return /* tuple */[
            setRecord(match[0], state),
            match[1]
          ];
  }
  
  function checkbox(rect, defaultIsSelected, str, state) {
    var match = checkbox$1(rect, defaultIsSelected, str, getRecord$11(state));
    return /* tuple */[
            setRecord(match[0], state),
            match[1]
          ];
  }
  
  function sliderInt(param, param$1, param$2, state) {
    var match = sliderInt$1(/* tuple */[
          param[0],
          param[1]
        ], /* tuple */[
          param$1[0],
          param$1[1]
        ], /* tuple */[
          param$2[0],
          param$2[1]
        ], getRecord$11(state));
    return /* tuple */[
            setRecord(match[0], state),
            match[1],
            match[2]
          ];
  }
  
  function sliderFloat(param, param$1, param$2, state) {
    var match = sliderFloat$1(/* tuple */[
          param[0],
          param[1]
        ], /* tuple */[
          param$1[0],
          param$1[1],
          param$1[2]
        ], /* tuple */[
          param$2[0],
          param$2[1]
        ], getRecord$11(state));
    return /* tuple */[
            setRecord(match[0], state),
            match[1],
            match[2]
          ];
  }
  
  function beginGroup(position, state) {
    var __x = beginGroup$1(position, getRecord$11(state));
    return setRecord(__x, state);
  }
  
  function endGroup(state) {
    var __x = endGroup$1(getRecord$11(state));
    return setRecord(__x, state);
  }
  
  
  /* GroupLayoutIMGUIAPI-WonderImgui Not a pure module */
  
  function getAPIJsObj(state) {
    return state[/* apiRecord */44][/* apiJsObj */0];
  }
  
  function create$32() {
    return /* record */[/* apiJsObj */{
              label: label,
              image: image,
              button: button,
              box: box,
              radioButton: radioButton,
              checkbox: checkbox,
              sliderInt: sliderInt,
              sliderFloat: sliderFloat,
              beginGroup: beginGroup,
              endGroup: endGroup,
              unsafeGetGameObjectTransformComponent: unsafeGetGameObjectTransformComponent,
              unsafeGetGameObjectLightMaterialComponent: unsafeGetGameObjectLightMaterialComponent,
              unsafeGetGameObjectPerspectiveCameraProjectionComponent: unsafeGetGameObjectPerspectiveCameraProjectionComponent,
              unsafeGetGameObjectBasicCameraViewComponent: unsafeGetGameObjectBasicCameraViewComponent,
              setLightMaterialDiffuseColor: setLightMaterialDiffuseColor,
              getLightMaterialSpecularColor: getLightMaterialSpecularColor,
              setLightMaterialSpecularColor: setLightMaterialSpecularColor,
              getLightMaterialShininess: getLightMaterialShininess,
              setLightMaterialShininess: setLightMaterialShininess,
              getTransformLocalPosition: getTransformLocalPosition,
              setTransformLocalPosition: setTransformLocalPosition,
              getTransformPosition: getTransformPosition,
              unsafeGetTransformChildren: unsafeGetTransformChildren,
              unsafeGetTransformGameObject: unsafeGetTransformGameObject,
              convertWorldToScreen: convertWorldToScreen,
              getRenderWorkerCustomData: getRenderWorkerCustomData
            }];
  }
  
  
  /* TransformAPI-Wonderjs Not a pure module */
  
  function create$35() {
    return /* record */[
            /* programMap */createEmpty$2(/* () */0),
            /* lastUsedProgram */undefined
          ];
  }
  
  
  /* No side effect */
  
  function create$36() {
    return /* record */[
            /* canvasId */undefined,
            /* memory */undefined,
            /* buffer */undefined,
            /* isDebug */undefined,
            /* context */undefined,
            /* gpu */undefined,
            /* worker */undefined
          ];
  }
  
  
  /* No side effect */
  
  var _createSpecialKeyMap = function (){
    var resultMap = [];
    var special_key_map = {
              8: "backspace",
              9: "tab",
              10: "return",
              13: "return",
              16: "shift",
              17: "ctrl",
              18: "alt",
              19: "pause",
              20: "capslock",
              27: "esc",
              32: "space",
              33: "pageup",
              34: "pagedown",
              35: "end",
              36: "home",
              37: "left",
              38: "up",
              39: "right",
              40: "down",
              45: "insert",
              46: "del",
              59: ";",
              61: "=",
              65: "a",
              66: "b",
              67: "c",
              68: "d",
              69: "e",
              70: "f",
              71: "g",
              72: "h",
              73: "i",
              74: "j",
              75: "k",
              76: "l",
              77: "m",
              78: "n",
              79: "o",
              80: "p",
              81: "q",
              82: "r",
              83: "s",
              84: "t",
              85: "u",
              86: "v",
              87: "w",
              88: "x",
              89: "y",
              90: "z",
              96: "0",
              97: "1",
              98: "2",
              99: "3",
              100: "4",
              101: "5",
              102: "6",
              103: "7",
              104: "8",
              105: "9",
              106: "*",
              107: "+",
              109: "-",
              110: ".",
              111: "/",
              112: "f1",
              113: "f2",
              114: "f3",
              115: "f4",
              116: "f5",
              117: "f6",
              118: "f7",
              119: "f8",
              120: "f9",
              121: "f10",
              122: "f11",
              123: "f12",
              144: "numlock",
              145: "scroll",
              173: "-",
              186: ";",
              187: "=",
              188: ",",
              189: "-",
              190: ".",
              191: "/",
              192: "`",
              219: "[",
              220: "\\",
              221: "]",
              222: "'"
          };
  
          for(let key in special_key_map){
            if(special_key_map.hasOwnProperty(key)){
  resultMap[key] = special_key_map[key];
            }
          }
  
          return resultMap;
    };
  
  var _createShiftKeyByKeyCodeMap = function (){
    var resultMap = [];
    var map = {
              59: ":",
              61: "+",
              65: "A",
              66: "B",
              67: "C",
              68: "D",
              69: "E",
              70: "F",
              71: "G",
              72: "H",
              73: "I",
              74: "J",
              75: "K",
              76: "L",
              77: "M",
              78: "N",
              79: "O",
              80: "P",
              81: "Q",
              82: "R",
              83: "S",
              84: "T",
              85: "U",
              86: "V",
              87: "W",
              88: "X",
              89: "Y",
              90: "Z",
              96: ")",
              97: "!",
              98: "@",
              99: "#",
              100: "$",
              101: "%",
              102: "^",
              103: "&",
              104: "*",
              105: "(",
              173: "_",
              186: ":",
              187: "+",
              188: "<",
              189: "_",
              190: ">",
              191: "?",
              192: "~",
              219: "{",
              220: "|",
              221: "}",
              222: "\""
          };
  
          for(let key in map){
            if(map.hasOwnProperty(key)){
  resultMap[key] = map[key];
            }
          }
  
          return resultMap;
    };
  
  var _createShiftKeyByCharCodeMap = function (){
    return {
              "`": "~",
              "1": "!",
              "2": "@",
              "3": "#",
              "4": "$",
              "5": "%",
              "6": "^",
              "7": "&",
              "8": "*",
              "9": "(",
              "0": ")",
              "-": "_",
              "=": "+",
              ";": ":",
              "'": "\"",
              ",": "<",
              ".": ">",
              "/": "?",
              "\\": "|"
          }
    };
  
  function create$37() {
    return /* record */[
            /* domEventStreamSubscription */undefined,
            /* mouseDomEventDataArrMap */createEmpty$2(/* () */0),
            /* keyboardDomEventDataArrMap */createEmpty$2(/* () */0),
            /* touchDomEventDataArrMap */createEmpty$2(/* () */0),
            /* customGlobalEventArrMap */createEmpty$1(/* () */0),
            /* customGameObjectEventArrMap */createEmpty$1(/* () */0),
            /* mouseEventData : record */[
              /* lastX */undefined,
              /* lastY */undefined,
              /* isDrag */false
            ],
            /* keyboardEventData : record */[
              /* specialKeyMap */_createSpecialKeyMap(),
              /* shiftKeyByKeyCodeMap */_createShiftKeyByKeyCodeMap(),
              /* shiftKeyByCharCodeMap */_createShiftKeyByCharCodeMap()
            ],
            /* touchEventData : record */[
              /* lastX */undefined,
              /* lastY */undefined,
              /* isDrag */false
            ]
          ];
  }
  
  function _deepCopyDomEventArrMap(domEventArrMap) {
    return copy(domEventArrMap).map((function (arr) {
                  return arr.slice();
                }));
  }
  
  function _deepCopyCustomGlobalEventArrMap(customGlobalEventArrMap) {
    return map$1(copy, customGlobalEventArrMap);
  }
  
  function _deepCopyCustomGameObjectEventArrMap(customGameObjectEventArrMap) {
    return map$1((function (eventArrMap) {
                  return copy(eventArrMap).map((function (arr) {
                                return arr.slice();
                              }));
                }), customGameObjectEventArrMap);
  }
  
  function deepCopyForRestore$15(state) {
    var eventRecord = state[/* eventRecord */42];
    var newrecord = caml_array_dup(state);
    newrecord[/* eventRecord */42] = /* record */[
      /* domEventStreamSubscription */eventRecord[/* domEventStreamSubscription */0],
      /* mouseDomEventDataArrMap */_deepCopyDomEventArrMap(eventRecord[/* mouseDomEventDataArrMap */1]),
      /* keyboardDomEventDataArrMap */_deepCopyDomEventArrMap(eventRecord[/* keyboardDomEventDataArrMap */2]),
      /* touchDomEventDataArrMap */_deepCopyDomEventArrMap(eventRecord[/* touchDomEventDataArrMap */3]),
      /* customGlobalEventArrMap */_deepCopyCustomGlobalEventArrMap(eventRecord[/* customGlobalEventArrMap */4]),
      /* customGameObjectEventArrMap */_deepCopyCustomGameObjectEventArrMap(eventRecord[/* customGameObjectEventArrMap */5]),
      /* mouseEventData : record */[
        /* lastX */undefined,
        /* lastY */undefined,
        /* isDrag */false
      ],
      /* keyboardEventData */eventRecord[/* keyboardEventData */7],
      /* touchEventData : record */[
        /* lastX */undefined,
        /* lastY */undefined,
        /* isDrag */false
      ]
    ];
    return newrecord;
  }
  
  
  /* Js_dict Not a pure module */
  
  function create$38() {
    return /* record */[
            /* extensionInstancedArrays */undefined,
            /* precision */undefined,
            /* maxTextureUnit */undefined
          ];
  }
  
  
  /* No side effect */
  
  function create$39() {
    return /* record */[
            /* boxGeometryVertexBufferMap */createEmpty$2(/* () */0),
            /* boxGeometryTexCoordBufferMap */createEmpty$2(/* () */0),
            /* boxGeometryNormalBufferMap */createEmpty$2(/* () */0),
            /* boxGeometryElementArrayBufferMap */createEmpty$2(/* () */0),
            /* customGeometryVertexBufferMap */createEmpty$2(/* () */0),
            /* customGeometryTexCoordBufferMap */createEmpty$2(/* () */0),
            /* customGeometryNormalBufferMap */createEmpty$2(/* () */0),
            /* customGeometryElementArrayBufferMap */createEmpty$2(/* () */0),
            /* matrixInstanceBufferMap */createEmpty$2(/* () */0),
            /* vertexArrayBufferPool */createEmpty(/* () */0),
            /* elementArrayBufferPool */createEmpty(/* () */0),
            /* matrixInstanceBufferPool */createEmpty(/* () */0)
          ];
  }
  
  function deepCopyForRestore$16() {
    return /* record */[
            /* boxGeometryVertexBufferMap : array */[],
            /* boxGeometryTexCoordBufferMap : array */[],
            /* boxGeometryNormalBufferMap : array */[],
            /* boxGeometryElementArrayBufferMap : array */[],
            /* customGeometryVertexBufferMap : array */[],
            /* customGeometryTexCoordBufferMap : array */[],
            /* customGeometryNormalBufferMap : array */[],
            /* customGeometryElementArrayBufferMap : array */[],
            /* matrixInstanceBufferMap : array */[],
            /* vertexArrayBufferPool : array */[],
            /* elementArrayBufferPool : array */[],
            /* matrixInstanceBufferPool : array */[]
          ];
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  function create$40() {
    return /* record */[
            /* uid */0,
            /* nameMap */createEmpty$2(/* () */0),
            /* disposeCount */0,
            /* disposedUidMap */createEmpty$2(/* () */0),
            /* disposedUidArray */createEmpty(/* () */0),
            /* disposedUidArrayForKeepOrder */createEmpty(/* () */0),
            /* disposedBasicCameraViewArray */createEmpty(/* () */0),
            /* disposedTransformArray */createEmpty(/* () */0),
            /* disposedTransformArrayForKeepOrder */createEmpty(/* () */0),
            /* disposedPerspectiveCameraProjectionArray */createEmpty(/* () */0),
            /* disposedArcballCameraControllerArray */createEmpty(/* () */0),
            /* disposedBasicMaterialArray */createEmpty(/* () */0),
            /* disposedLightMaterialArray */createEmpty(/* () */0),
            /* disposedBoxGeometryArray */createEmpty(/* () */0),
            /* disposedCustomGeometryArray */createEmpty(/* () */0),
            /* disposedSourceInstanceArray */createEmpty(/* () */0),
            /* disposedObjectInstanceArray */createEmpty(/* () */0),
            /* disposedDirectionLightArray */createEmpty(/* () */0),
            /* disposedPointLightArray */createEmpty(/* () */0),
            /* disposedMeshRendererComponentArray */createEmpty(/* () */0),
            /* aliveUidArray */createEmpty(/* () */0),
            /* geometryDataMap */createEmpty$2(/* () */0),
            /* transformMap */createEmpty$2(/* () */0),
            /* basicCameraViewMap */createEmpty$2(/* () */0),
            /* perspectiveCameraProjectionMap */createEmpty$2(/* () */0),
            /* arcballCameraControllerMap */createEmpty$2(/* () */0),
            /* meshRendererMap */createEmpty$2(/* () */0),
            /* basicMaterialMap */createEmpty$2(/* () */0),
            /* lightMaterialMap */createEmpty$2(/* () */0),
            /* sourceInstanceMap */createEmpty$2(/* () */0),
            /* objectInstanceMap */createEmpty$2(/* () */0),
            /* directionLightMap */createEmpty$2(/* () */0),
            /* pointLightMap */createEmpty$2(/* () */0)
          ];
  }
  
  function deepCopyForRestore$17(record) {
    var uid = record[/* uid */0];
    var nameMap = record[/* nameMap */1];
    var disposeCount = record[/* disposeCount */2];
    var disposedUidMap = record[/* disposedUidMap */3];
    var disposedUidArray = record[/* disposedUidArray */4];
    var disposedUidArrayForKeepOrder = record[/* disposedUidArrayForKeepOrder */5];
    var disposedBasicCameraViewArray = record[/* disposedBasicCameraViewArray */6];
    var disposedTransformArray = record[/* disposedTransformArray */7];
    var disposedTransformArrayForKeepOrder = record[/* disposedTransformArrayForKeepOrder */8];
    var disposedPerspectiveCameraProjectionArray = record[/* disposedPerspectiveCameraProjectionArray */9];
    var disposedBasicMaterialArray = record[/* disposedBasicMaterialArray */11];
    var disposedLightMaterialArray = record[/* disposedLightMaterialArray */12];
    var disposedBoxGeometryArray = record[/* disposedBoxGeometryArray */13];
    var disposedCustomGeometryArray = record[/* disposedCustomGeometryArray */14];
    var disposedSourceInstanceArray = record[/* disposedSourceInstanceArray */15];
    var disposedObjectInstanceArray = record[/* disposedObjectInstanceArray */16];
    var disposedDirectionLightArray = record[/* disposedDirectionLightArray */17];
    var disposedPointLightArray = record[/* disposedPointLightArray */18];
    var disposedMeshRendererComponentArray = record[/* disposedMeshRendererComponentArray */19];
    var aliveUidArray = record[/* aliveUidArray */20];
    var geometryDataMap = record[/* geometryDataMap */21];
    var transformMap = record[/* transformMap */22];
    var basicCameraViewMap = record[/* basicCameraViewMap */23];
    var perspectiveCameraProjectionMap = record[/* perspectiveCameraProjectionMap */24];
    var arcballCameraControllerMap = record[/* arcballCameraControllerMap */25];
    var meshRendererMap = record[/* meshRendererMap */26];
    var basicMaterialMap = record[/* basicMaterialMap */27];
    var lightMaterialMap = record[/* lightMaterialMap */28];
    var sourceInstanceMap = record[/* sourceInstanceMap */29];
    var objectInstanceMap = record[/* objectInstanceMap */30];
    var directionLightMap = record[/* directionLightMap */31];
    var pointLightMap = record[/* pointLightMap */32];
    return /* record */[
            /* uid */uid,
            /* nameMap */copy(nameMap),
            /* disposeCount */disposeCount,
            /* disposedUidMap */copy(disposedUidMap),
            /* disposedUidArray */copy(disposedUidArray),
            /* disposedUidArrayForKeepOrder */copy(disposedUidArrayForKeepOrder),
            /* disposedBasicCameraViewArray */copy(disposedBasicCameraViewArray),
            /* disposedTransformArray */copy(disposedTransformArray),
            /* disposedTransformArrayForKeepOrder */copy(disposedTransformArrayForKeepOrder),
            /* disposedPerspectiveCameraProjectionArray */copy(disposedPerspectiveCameraProjectionArray),
            /* disposedArcballCameraControllerArray */copy(disposedPerspectiveCameraProjectionArray),
            /* disposedBasicMaterialArray */copy(disposedBasicMaterialArray),
            /* disposedLightMaterialArray */copy(disposedLightMaterialArray),
            /* disposedBoxGeometryArray */copy(disposedBoxGeometryArray),
            /* disposedCustomGeometryArray */copy(disposedCustomGeometryArray),
            /* disposedSourceInstanceArray */copy(disposedSourceInstanceArray),
            /* disposedObjectInstanceArray */copy(disposedObjectInstanceArray),
            /* disposedDirectionLightArray */copy(disposedDirectionLightArray),
            /* disposedPointLightArray */copy(disposedPointLightArray),
            /* disposedMeshRendererComponentArray */copy(disposedMeshRendererComponentArray),
            /* aliveUidArray */copy(aliveUidArray),
            /* geometryDataMap */copy(geometryDataMap),
            /* transformMap */copy(transformMap),
            /* basicCameraViewMap */copy(basicCameraViewMap),
            /* perspectiveCameraProjectionMap */copy(perspectiveCameraProjectionMap),
            /* arcballCameraControllerMap */copy(arcballCameraControllerMap),
            /* meshRendererMap */copy(meshRendererMap),
            /* basicMaterialMap */copy(basicMaterialMap),
            /* lightMaterialMap */copy(lightMaterialMap),
            /* sourceInstanceMap */copy(sourceInstanceMap),
            /* objectInstanceMap */copy(objectInstanceMap),
            /* directionLightMap */copy(directionLightMap),
            /* pointLightMap */copy(pointLightMap)
          ];
  }
  
  
  /* SparseMapService-Wonderjs Not a pure module */
  
  function create$41() {
    return /* record */[
            /* float16Array1 */new Float32Array(/* array */[
                  1,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  1
                ]),
            /* float9Array1 */new Float32Array(/* array */[
                  1,
                  0,
                  0,
                  1,
                  0,
                  0,
                  1,
                  0,
                  0
                ])
          ];
  }
  
  
  /* No side effect */
  
  function create$42() {
    return /* record */[
            /* mainWorkerData : record */[/* customDataFromMainWorkerToRenderWorker */-1],
            /* renderWorkerData : record */[/* customDataFromRenderWorkerToMainWorker */-1]
          ];
  }
  
  
  /* No side effect */
  
  function create$43() {
    return /* record */[
            /* attributeLocationMap */createEmpty$2(/* () */0),
            /* uniformLocationMap */createEmpty$2(/* () */0)
          ];
  }
  
  
  /* No side effect */
  
  function create$44() {
    return /* record */[
            /* isSupportSharedArrayBuffer */false,
            /* isSupportRenderWorkerAndSharedArrayBuffer */false
          ];
  }
  
  
  /* No side effect */
  
  function create$45() {
    return /* record */[
            /* gl */undefined,
            /* colorWrite */undefined,
            /* clearColor */undefined,
            /* side */undefined,
            /* depthTest */undefined,
            /* viewport */undefined
          ];
  }
  
  function deepCopyForRestore$18(param) {
    return /* record */[
            /* gl */undefined,
            /* colorWrite */param[/* colorWrite */1],
            /* clearColor */param[/* clearColor */2],
            /* side */param[/* side */3],
            /* depthTest */param[/* depthTest */4],
            /* viewport */param[/* viewport */5]
          ];
  }
  
  
  /* No side effect */
  
  function create$46() {
    return /* record */[
            /* attributeSendDataMap */createEmpty$2(/* () */0),
            /* instanceAttributeSendDataMap */createEmpty$2(/* () */0),
            /* uniformCacheMap */createEmpty$2(/* () */0),
            /* uniformRenderObjectSendModelDataMap */createEmpty$2(/* () */0),
            /* uniformRenderObjectSendMaterialDataMap */createEmpty$2(/* () */0),
            /* uniformShaderSendNoCachableDataMap */createEmpty$2(/* () */0),
            /* uniformShaderSendCachableDataMap */createEmpty$2(/* () */0),
            /* uniformShaderSendCachableFunctionDataMap */createEmpty$2(/* () */0),
            /* uniformInstanceSendNoCachableDataMap */createEmpty$2(/* () */0),
            /* vertexAttribHistoryArray */createEmpty(/* () */0),
            /* lastSendMaterialData */undefined,
            /* lastSendGeometryData */undefined
          ];
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  function deepCopyForRestore$19() {
    return /* record */[
            /* float32ArrayPoolMap */createEmpty$2(/* () */0),
            /* uint16ArrayPoolMap */createEmpty$2(/* () */0)
          ];
  }
  
  function create$47() {
    return /* record */[
            /* float32ArrayPoolMap */createEmpty$2(/* () */0),
            /* uint16ArrayPoolMap */createEmpty$2(/* () */0)
          ];
  }
  
  
  /* No side effect */
  
  function create$48() {
    return /* record */[
            /* index */0,
            /* sourceInstanceMap */createEmpty$2(/* () */0),
            /* disposedIndexArray */createEmpty(/* () */0),
            /* gameObjectMap */createEmpty$2(/* () */0)
          ];
  }
  
  function deepCopyForRestore$20(param) {
    return /* record */[
            /* index */param[/* index */0],
            /* sourceInstanceMap */copy(param[/* sourceInstanceMap */1]),
            /* disposedIndexArray */param[/* disposedIndexArray */2].slice(),
            /* gameObjectMap */copy(param[/* gameObjectMap */3])
          ];
  }
  
  
  /* SparseMapService-Wonderjs Not a pure module */
  
  function create$49() {
    return /* record */[
            /* elapsed */0,
            /* startTime */0,
            /* deltaTime */0,
            /* lastTime */undefined,
            /* gameTime */0,
            /* fps */0
          ];
  }
  
  
  /* No side effect */
  
  function create$50() {
    return /* record */[/* renderWorker */undefined];
  }
  
  
  /* No side effect */
  
  function create$51() {
    return /* record */[
            /* index */0,
            /* gameObjectMap */createEmpty$2(/* () */0),
            /* disposedIndexArray */createEmpty(/* () */0)
          ];
  }
  
  function deepCopyForRestore$21(param) {
    return /* record */[
            /* index */param[/* index */0],
            /* gameObjectMap */copy(param[/* gameObjectMap */1]),
            /* disposedIndexArray */param[/* disposedIndexArray */2].slice()
          ];
  }
  
  
  /* SparseMapService-Wonderjs Not a pure module */
  
  function create$52() {
    return /* record */[/* browser : Unknown */4];
  }
  
  function fatalUnknownBrowser(title, browser) {
    return fatal(buildFatalMessage(title, "unknown browser", "", "", "browser: " + (String(browser) + "")));
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function create$53() {
    return /* record */[
            /* index */0,
            /* pointDownEventHandleFuncMap */createEmpty$2(/* () */0),
            /* pointUpEventHandleFuncMap */createEmpty$2(/* () */0),
            /* pointDragEventHandleFuncMap */createEmpty$2(/* () */0),
            /* pointScaleEventHandleFuncMap */createEmpty$2(/* () */0),
            /* keydownEventHandleFuncMap */createEmpty$2(/* () */0),
            /* dirtyArray */createEmpty$2(/* () */0),
            /* distanceMap */createEmpty$2(/* () */0),
            /* minDistanceMap */createEmpty$2(/* () */0),
            /* phiMap */createEmpty$2(/* () */0),
            /* thetaMap */createEmpty$2(/* () */0),
            /* thetaMarginMap */createEmpty$2(/* () */0),
            /* targetMap */createEmpty$2(/* () */0),
            /* moveSpeedXMap */createEmpty$2(/* () */0),
            /* moveSpeedYMap */createEmpty$2(/* () */0),
            /* rotateSpeedMap */createEmpty$2(/* () */0),
            /* wheelSpeedMap */createEmpty$2(/* () */0),
            /* gameObjectMap */createEmpty$2(/* () */0),
            /* disposedIndexArray */createEmpty(/* () */0)
          ];
  }
  
  function deepCopyForRestore$22(param) {
    return /* record */[
            /* index */param[/* index */0],
            /* pointDownEventHandleFuncMap */copy(param[/* pointDownEventHandleFuncMap */1]),
            /* pointUpEventHandleFuncMap */copy(param[/* pointUpEventHandleFuncMap */2]),
            /* pointDragEventHandleFuncMap */copy(param[/* pointDragEventHandleFuncMap */3]),
            /* pointScaleEventHandleFuncMap */copy(param[/* pointScaleEventHandleFuncMap */4]),
            /* keydownEventHandleFuncMap */copy(param[/* keydownEventHandleFuncMap */5]),
            /* dirtyArray */copy(param[/* dirtyArray */6]),
            /* distanceMap */copy(param[/* distanceMap */7]),
            /* minDistanceMap */copy(param[/* minDistanceMap */8]),
            /* phiMap */copy(param[/* phiMap */9]),
            /* thetaMap */copy(param[/* thetaMap */10]),
            /* thetaMarginMap */copy(param[/* thetaMarginMap */11]),
            /* targetMap */copy(param[/* targetMap */12]),
            /* moveSpeedXMap */copy(param[/* moveSpeedXMap */13]),
            /* moveSpeedYMap */copy(param[/* moveSpeedYMap */14]),
            /* rotateSpeedMap */copy(param[/* rotateSpeedMap */15]),
            /* wheelSpeedMap */copy(param[/* wheelSpeedMap */16]),
            /* gameObjectMap */copy(param[/* gameObjectMap */17]),
            /* disposedIndexArray */param[/* disposedIndexArray */18].slice()
          ];
  }
  
  
  /* SparseMapService-Wonderjs Not a pure module */
  
  function create$54() {
    return /* record */[
            /* index */0,
            /* dirtyArray */createEmpty(/* () */0),
            /* pMatrixMap */createEmpty$2(/* () */0),
            /* nearMap */createEmpty$2(/* () */0),
            /* farMap */createEmpty$2(/* () */0),
            /* fovyMap */createEmpty$2(/* () */0),
            /* aspectMap */createEmpty$2(/* () */0),
            /* gameObjectMap */createEmpty$2(/* () */0),
            /* disposedIndexArray */createEmpty(/* () */0)
          ];
  }
  
  function deepCopyForRestore$23(param) {
    return /* record */[
            /* index */param[/* index */0],
            /* dirtyArray */copy(param[/* dirtyArray */1]),
            /* pMatrixMap */deepCopyFloat32ArrayArray(param[/* pMatrixMap */2]),
            /* nearMap */copy(param[/* nearMap */3]),
            /* farMap */copy(param[/* farMap */4]),
            /* fovyMap */copy(param[/* fovyMap */5]),
            /* aspectMap */copy(param[/* aspectMap */6]),
            /* gameObjectMap */copy(param[/* gameObjectMap */7]),
            /* disposedIndexArray */param[/* disposedIndexArray */8].slice()
          ];
  }
  
  
  /* SparseMapService-Wonderjs Not a pure module */
  
  function createState$2() {
    return /* record */[
            /* stateRecord : record */[
              /* unsafeGetStateFunc */(function () {
                  return unsafeGetState$1(stateData);
                }),
              /* setStateFunc */(function (state) {
                  return setState$2(stateData, state);
                })
            ],
            /* settingRecord */create$36(/* () */0),
            /* jobRecord */create$28(/* () */0),
            /* noWorkerJobRecord */undefined,
            /* workerJobRecord */undefined,
            /* renderConfigRecord */undefined,
            /* gpuDetectRecord */create$38(/* () */0),
            /* sourceInstanceRecord */undefined,
            /* objectInstanceRecord */create$48(/* () */0),
            /* viewRecord */create$30(/* () */0),
            /* deviceManagerRecord */create$45(/* () */0),
            /* gameObjectRecord */create$40(/* () */0),
            /* transformRecord */undefined,
            /* sceneRecord */undefined,
            /* basicCameraViewRecord */create$51(/* () */0),
            /* perspectiveCameraProjectionRecord */create$54(/* () */0),
            /* basicMaterialRecord */undefined,
            /* lightMaterialRecord */undefined,
            /* sourceTextureRecord */undefined,
            /* basicSourceTextureRecord */undefined,
            /* arrayBufferViewSourceTextureRecord */undefined,
            /* directionLightRecord */create$7(/* () */0),
            /* pointLightRecord */create$6(/* () */0),
            /* boxGeometryRecord */create$23(/* () */0),
            /* customGeometryRecord */undefined,
            /* meshRendererRecord */undefined,
            /* arcballCameraControllerRecord */create$53(/* () */0),
            /* shaderRecord */create$31(/* () */0),
            /* glslRecord */create$29(/* () */0),
            /* programRecord */create$35(/* () */0),
            /* glslLocationRecord */create$43(/* () */0),
            /* glslSenderRecord */create$46(/* () */0),
            /* glslChunkRecord */create$4(/* () */0),
            /* renderRecord */undefined,
            /* timeControllerRecord */create$49(/* () */0),
            /* vboBufferRecord */create$39(/* () */0),
            /* globalTempRecord */create$41(/* () */0),
            /* typeArrayPoolRecord */create$47(/* () */0),
            /* workerInstanceRecord */create$50(/* () */0),
            /* workerDataRecord */create$42(/* () */0),
            /* workerDetectRecord */create$44(/* () */0),
            /* browserDetectRecord */create$52(/* () */0),
            /* eventRecord */create$37(/* () */0),
            /* imguiRecord */create$34(/* () */0),
            /* apiRecord */create$32(/* () */0)
          ];
  }
  
  
  /* StateDataMain-Wonderjs Not a pure module */
  
  function getComponentSize() {
    return 1;
  }
  
  function getGeometryTypeSize() {
    return 1;
  }
  
  function getTransformIndicesLength(count) {
    return (count << 0);
  }
  
  function getTransformIndicesOffset() {
    return 0;
  }
  
  function getMaterialIndicesLength(count) {
    return (count << 0);
  }
  
  function getMaterialIndicesOffset(count) {
    return 0 + imul((count << 0), Uint32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getMeshRendererIndicesLength(count) {
    return (count << 0);
  }
  
  function getMeshRendererIndicesOffset(count) {
    return getMaterialIndicesOffset(count) + imul((count << 0), Uint32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getGeometryIndicesLength(count) {
    return (count << 0);
  }
  
  function getGeometryIndicesOffset(count) {
    return getMeshRendererIndicesOffset(count) + imul((count << 0), Uint32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getSourceInstanceIndicesLength(count) {
    return (count << 0);
  }
  
  function getSourceInstanceIndicesOffset(count) {
    return getGeometryIndicesOffset(count) + imul((count << 0), Uint32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  function getGeometryTypesLength(count) {
    return (count << 0);
  }
  
  function getGeometryTypesOffset(count) {
    return getSourceInstanceIndicesOffset(count) + imul((count << 0), Uint32Array.BYTES_PER_ELEMENT) | 0;
  }
  
  var getComponent$1 = getUint32_1;
  
  var setComponent = setUint32_1;
  
  var getGeometryType = getUint8_1;
  
  function hasSourceInstance(sourceInstance) {
    return sourceInstance !== getDefaultSourceInstance(/* () */0);
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function createTypeArrays$10(buffer, count) {
    return /* tuple */[
            new Uint32Array(buffer, getTransformIndicesOffset(count), getTransformIndicesLength(count)),
            new Uint32Array(buffer, getMaterialIndicesOffset(count), getMaterialIndicesLength(count)),
            new Uint32Array(buffer, getMeshRendererIndicesOffset(count), getMeshRendererIndicesLength(count)),
            new Uint32Array(buffer, getGeometryIndicesOffset(count), getGeometryIndicesLength(count)),
            new Uint32Array(buffer, getSourceInstanceIndicesOffset(count), getSourceInstanceIndicesLength(count)),
            new Uint8Array(buffer, getGeometryTypesOffset(count), getGeometryTypesLength(count))
          ];
  }
  
  function setAllTypeArrDataToDefault$10(count, typeArrTuple) {
    var defaultSourceInstance = getDefaultSourceInstance(/* () */0);
    return reduceOneParam((function (param, index) {
                  return /* tuple */[
                          param[0],
                          param[1],
                          param[2],
                          param[3],
                          setComponent(index, defaultSourceInstance, param[4]),
                          param[5]
                        ];
                }), typeArrTuple, range(0, count - 1 | 0));
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  function getRecord$13(param) {
    return unsafeGet$2(param[/* basicRenderObjectRecord */0]);
  }
  
  function _initBufferData$10(count) {
    var buffer = newSharedArrayBuffer(imul(count, imul(Uint32Array.BYTES_PER_ELEMENT, imul(getComponentSize(/* () */0), 5)) + imul(Uint8Array.BYTES_PER_ELEMENT, getGeometryTypeSize(/* () */0)) | 0));
    return /* tuple */[
            buffer,
            setAllTypeArrDataToDefault$10(count, createTypeArrays$10(buffer, count))
          ];
  }
  
  function create$56(state) {
    var basicMaterialCount = getBasicMaterialCount(state[/* settingRecord */1]);
    var match = _initBufferData$10(basicMaterialCount);
    var match$1 = match[1];
    return /* record */[
            /* buffer */match[0],
            /* count */basicMaterialCount,
            /* transformIndices */match$1[0],
            /* materialIndices */match$1[1],
            /* meshRendererIndices */match$1[2],
            /* geometryIndices */match$1[3],
            /* geometryTypes */match$1[5],
            /* sourceInstanceIndices */match$1[4]
          ];
  }
  
  
  /* Worker-Wonderjs Not a pure module */
  
  function getRecord$14(param) {
    return unsafeGet$2(param[/* lightRenderObjectRecord */1]);
  }
  
  function _initBufferData$11(count) {
    var buffer = newSharedArrayBuffer(imul(count, imul(Uint32Array.BYTES_PER_ELEMENT, imul(getComponentSize(/* () */0), 5)) + imul(Uint8Array.BYTES_PER_ELEMENT, getGeometryTypeSize(/* () */0)) | 0));
    return /* tuple */[
            buffer,
            setAllTypeArrDataToDefault$10(count, createTypeArrays$10(buffer, count))
          ];
  }
  
  function create$57(state) {
    var lightMaterialCount = getLightMaterialCount(state[/* settingRecord */1]);
    var match = _initBufferData$11(lightMaterialCount);
    var match$1 = match[1];
    return /* record */[
            /* buffer */match[0],
            /* count */lightMaterialCount,
            /* transformIndices */match$1[0],
            /* materialIndices */match$1[1],
            /* meshRendererIndices */match$1[2],
            /* geometryIndices */match$1[3],
            /* geometryTypes */match$1[5],
            /* sourceInstanceIndices */match$1[4]
          ];
  }
  
  
  /* Worker-Wonderjs Not a pure module */
  
  function getRecord$12(state) {
    return unsafeGet$2(state[/* renderRecord */33]);
  }
  
  function create$55(state) {
    state[/* renderRecord */33] = /* record */[
      /* basicRenderObjectRecord */create$56(state),
      /* lightRenderObjectRecord */create$57(state),
      /* cameraRecord */undefined
    ];
    return state;
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function restore$1(_, targetState) {
    var match = getRecord$12(targetState);
    var basicRenderObjectRecord = match[/* basicRenderObjectRecord */0];
    var lightRenderObjectRecord = match[/* lightRenderObjectRecord */1];
    var newrecord = caml_array_dup(targetState);
    newrecord[/* renderRecord */33] = /* record */[
      /* basicRenderObjectRecord */basicRenderObjectRecord,
      /* lightRenderObjectRecord */lightRenderObjectRecord,
      /* cameraRecord */undefined
    ];
    return newrecord;
  }
  
  
  /* RecordRenderMainService-Wonderjs Not a pure module */
  
  function restore$2(currentState, targetState) {
    requireCheck((function () {
            var currentPrecision = currentState[/* glslRecord */28][/* precision */0];
            var targetPrecision = targetState[/* glslRecord */28][/* precision */0];
            return test(buildAssertMessage("currentState->glslRecord->precision and targetState->glslRecord->precision be the same", "not"), (function () {
                          if (currentPrecision !== undefined) {
                            if (targetPrecision !== undefined) {
                              return Operators[/* ==^ */2](currentPrecision, targetPrecision);
                            } else {
                              return assertFail(/* () */0);
                            }
                          } else if (targetPrecision !== undefined) {
                            return assertFail(/* () */0);
                          } else {
                            return assertPass(/* () */0);
                          }
                        }));
          }), getIsDebug(stateData));
    var match = currentState[/* shaderRecord */27];
    var currentIndex = match[/* index */0];
    var targetShaderData = targetState[/* shaderRecord */27];
    var targetIndex = targetShaderData[/* index */0];
    var newrecord = caml_array_dup(targetState);
    newrecord[/* shaderRecord */27] = /* record */[
      /* index */Math.max(currentIndex, targetIndex),
      /* shaderIndexMap */targetShaderData[/* shaderIndexMap */1],
      /* usedShaderIndexArray */targetShaderData[/* usedShaderIndexArray */2]
    ];
    return newrecord;
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function restore$3(_, targetState) {
    var newrecord = caml_array_dup(targetState);
    var init = targetState[/* programRecord */29];
    newrecord[/* programRecord */29] = /* record */[
      /* programMap */init[/* programMap */0],
      /* lastUsedProgram */undefined
    ];
    return newrecord;
  }
  
  
  /* No side effect */
  
  function _restoreTypeArrays(currentTransformRecord, targetTransformRecord) {
    var match = currentTransformRecord[/* localPositions */3] === targetTransformRecord[/* localPositions */3] && currentTransformRecord[/* localRotations */4] === targetTransformRecord[/* localRotations */4] && currentTransformRecord[/* localScales */5] === targetTransformRecord[/* localScales */5] && currentTransformRecord[/* localToWorldMatrices */2] === targetTransformRecord[/* localToWorldMatrices */2];
    if (match) {
      return /* tuple */[
              currentTransformRecord,
              targetTransformRecord
            ];
    } else {
      setAllTypeArrDataToDefault(currentTransformRecord[/* index */0], /* tuple */[
            currentTransformRecord[/* defaultLocalToWorldMatrix */11],
            currentTransformRecord[/* defaultLocalPosition */12],
            currentTransformRecord[/* defaultLocalRotation */13],
            currentTransformRecord[/* defaultLocalScale */14]
          ], /* tuple */[
            currentTransformRecord[/* localToWorldMatrices */2],
            currentTransformRecord[/* localPositions */3],
            currentTransformRecord[/* localRotations */4],
            currentTransformRecord[/* localScales */5]
          ]);
      fillFloat32ArrayWithFloat32Array(/* tuple */[
            currentTransformRecord[/* localPositions */3],
            0
          ], /* tuple */[
            targetTransformRecord[/* localPositions */3],
            0
          ], targetTransformRecord[/* localPositions */3].length);
      fillFloat32ArrayWithFloat32Array(/* tuple */[
            currentTransformRecord[/* localRotations */4],
            0
          ], /* tuple */[
            targetTransformRecord[/* localRotations */4],
            0
          ], targetTransformRecord[/* localRotations */4].length);
      fillFloat32ArrayWithFloat32Array(/* tuple */[
            currentTransformRecord[/* localScales */5],
            0
          ], /* tuple */[
            targetTransformRecord[/* localScales */5],
            0
          ], targetTransformRecord[/* localScales */5].length);
      fillFloat32ArrayWithFloat32Array(/* tuple */[
            currentTransformRecord[/* localToWorldMatrices */2],
            0
          ], /* tuple */[
            targetTransformRecord[/* localToWorldMatrices */2],
            0
          ], targetTransformRecord[/* localToWorldMatrices */2].length);
      return /* tuple */[
              currentTransformRecord,
              targetTransformRecord
            ];
    }
  }
  
  function restore$4(currentState, targetState) {
    var currentTransformRecord = getRecord(currentState);
    var targetTransformRecord = getRecord(targetState);
    var match = _restoreTypeArrays(currentTransformRecord, targetTransformRecord);
    var currentTransformRecord$1 = match[0];
    var newrecord = caml_array_dup(targetState);
    var newrecord$1 = caml_array_dup(match[1]);
    newrecord[/* transformRecord */12] = (newrecord$1[/* buffer */1] = currentTransformRecord$1[/* buffer */1], newrecord$1[/* localToWorldMatrices */2] = currentTransformRecord$1[/* localToWorldMatrices */2], newrecord$1[/* localPositions */3] = currentTransformRecord$1[/* localPositions */3], newrecord$1[/* localRotations */4] = currentTransformRecord$1[/* localRotations */4], newrecord$1[/* localScales */5] = currentTransformRecord$1[/* localScales */5], newrecord$1);
    return newrecord;
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function _getBufferAndSetBufferMap(gl, bufferPool) {
    var match = bufferPool.pop();
    if (match !== undefined) {
      return match;
    } else {
      return gl.createBuffer();
    }
  }
  
  function getArrayBuffer(gl, param) {
    return _getBufferAndSetBufferMap(gl, param[/* vertexArrayBufferPool */9]);
  }
  
  function getElementArrayBuffer(gl, param) {
    return _getBufferAndSetBufferMap(gl, param[/* elementArrayBufferPool */10]);
  }
  
  function getInstanceBuffer(gl, param) {
    return _getBufferAndSetBufferMap(gl, param[/* matrixInstanceBufferPool */11]);
  }
  
  function addAllBufferToPool(param) {
    var matrixInstanceBufferPool = param[/* matrixInstanceBufferPool */11];
    var elementArrayBufferPool = param[/* elementArrayBufferPool */10];
    var vertexArrayBufferPool = param[/* vertexArrayBufferPool */9];
    forEachValid((function (buffer) {
            vertexArrayBufferPool.push(buffer);
            return /* () */0;
          }), param[/* boxGeometryVertexBufferMap */0]);
    forEachValid((function (buffer) {
            vertexArrayBufferPool.push(buffer);
            return /* () */0;
          }), param[/* boxGeometryTexCoordBufferMap */1]);
    forEachValid((function (buffer) {
            vertexArrayBufferPool.push(buffer);
            return /* () */0;
          }), param[/* boxGeometryNormalBufferMap */2]);
    forEachValid((function (buffer) {
            elementArrayBufferPool.push(buffer);
            return /* () */0;
          }), param[/* boxGeometryElementArrayBufferMap */3]);
    forEachValid((function (buffer) {
            vertexArrayBufferPool.push(buffer);
            return /* () */0;
          }), param[/* customGeometryVertexBufferMap */4]);
    forEachValid((function (buffer) {
            vertexArrayBufferPool.push(buffer);
            return /* () */0;
          }), param[/* customGeometryTexCoordBufferMap */5]);
    forEachValid((function (buffer) {
            vertexArrayBufferPool.push(buffer);
            return /* () */0;
          }), param[/* customGeometryNormalBufferMap */6]);
    forEachValid((function (buffer) {
            elementArrayBufferPool.push(buffer);
            return /* () */0;
          }), param[/* customGeometryElementArrayBufferMap */7]);
    forEachValid((function (buffer) {
            matrixInstanceBufferPool.push(buffer);
            return /* () */0;
          }), param[/* matrixInstanceBufferMap */8]);
    return /* tuple */[
            vertexArrayBufferPool,
            elementArrayBufferPool,
            matrixInstanceBufferPool
          ];
  }
  
  function _addBufferToPool(geometryIndex, bufferMap, pool) {
    var match = get$3(geometryIndex, bufferMap);
    if (match !== undefined) {
      return push$1(valFromOption(match), pool);
    } else {
      return pool;
    }
  }
  
  function addBoxGeometryBufferToPool(geometryIndex, record) {
    return /* record */[
            /* boxGeometryVertexBufferMap */record[/* boxGeometryVertexBufferMap */0],
            /* boxGeometryTexCoordBufferMap */record[/* boxGeometryTexCoordBufferMap */1],
            /* boxGeometryNormalBufferMap */record[/* boxGeometryNormalBufferMap */2],
            /* boxGeometryElementArrayBufferMap */record[/* boxGeometryElementArrayBufferMap */3],
            /* customGeometryVertexBufferMap */record[/* customGeometryVertexBufferMap */4],
            /* customGeometryTexCoordBufferMap */record[/* customGeometryTexCoordBufferMap */5],
            /* customGeometryNormalBufferMap */record[/* customGeometryNormalBufferMap */6],
            /* customGeometryElementArrayBufferMap */record[/* customGeometryElementArrayBufferMap */7],
            /* matrixInstanceBufferMap */record[/* matrixInstanceBufferMap */8],
            /* vertexArrayBufferPool */_addBufferToPool(geometryIndex, record[/* boxGeometryNormalBufferMap */2], _addBufferToPool(geometryIndex, record[/* boxGeometryTexCoordBufferMap */1], _addBufferToPool(geometryIndex, record[/* boxGeometryVertexBufferMap */0], record[/* vertexArrayBufferPool */9]))),
            /* elementArrayBufferPool */_addBufferToPool(geometryIndex, record[/* boxGeometryElementArrayBufferMap */3], record[/* elementArrayBufferPool */10]),
            /* matrixInstanceBufferPool */record[/* matrixInstanceBufferPool */11]
          ];
  }
  
  function addCustomGeometryBufferToPool(geometryIndex, record) {
    return /* record */[
            /* boxGeometryVertexBufferMap */record[/* boxGeometryVertexBufferMap */0],
            /* boxGeometryTexCoordBufferMap */record[/* boxGeometryTexCoordBufferMap */1],
            /* boxGeometryNormalBufferMap */record[/* boxGeometryNormalBufferMap */2],
            /* boxGeometryElementArrayBufferMap */record[/* boxGeometryElementArrayBufferMap */3],
            /* customGeometryVertexBufferMap */record[/* customGeometryVertexBufferMap */4],
            /* customGeometryTexCoordBufferMap */record[/* customGeometryTexCoordBufferMap */5],
            /* customGeometryNormalBufferMap */record[/* customGeometryNormalBufferMap */6],
            /* customGeometryElementArrayBufferMap */record[/* customGeometryElementArrayBufferMap */7],
            /* matrixInstanceBufferMap */record[/* matrixInstanceBufferMap */8],
            /* vertexArrayBufferPool */_addBufferToPool(geometryIndex, record[/* customGeometryNormalBufferMap */6], _addBufferToPool(geometryIndex, record[/* customGeometryTexCoordBufferMap */5], _addBufferToPool(geometryIndex, record[/* customGeometryVertexBufferMap */4], record[/* vertexArrayBufferPool */9]))),
            /* elementArrayBufferPool */_addBufferToPool(geometryIndex, record[/* customGeometryElementArrayBufferMap */7], record[/* elementArrayBufferPool */10]),
            /* matrixInstanceBufferPool */record[/* matrixInstanceBufferPool */11]
          ];
  }
  
  function addInstanceBufferToPool(sourceInstanceIndex, record) {
    var match = get$3(sourceInstanceIndex, record[/* matrixInstanceBufferMap */8]);
    if (match !== undefined) {
      return /* record */[
              /* boxGeometryVertexBufferMap */record[/* boxGeometryVertexBufferMap */0],
              /* boxGeometryTexCoordBufferMap */record[/* boxGeometryTexCoordBufferMap */1],
              /* boxGeometryNormalBufferMap */record[/* boxGeometryNormalBufferMap */2],
              /* boxGeometryElementArrayBufferMap */record[/* boxGeometryElementArrayBufferMap */3],
              /* customGeometryVertexBufferMap */record[/* customGeometryVertexBufferMap */4],
              /* customGeometryTexCoordBufferMap */record[/* customGeometryTexCoordBufferMap */5],
              /* customGeometryNormalBufferMap */record[/* customGeometryNormalBufferMap */6],
              /* customGeometryElementArrayBufferMap */record[/* customGeometryElementArrayBufferMap */7],
              /* matrixInstanceBufferMap */record[/* matrixInstanceBufferMap */8],
              /* vertexArrayBufferPool */record[/* vertexArrayBufferPool */9],
              /* elementArrayBufferPool */record[/* elementArrayBufferPool */10],
              /* matrixInstanceBufferPool */push$1(valFromOption(match), record[/* matrixInstanceBufferPool */11])
            ];
    } else {
      return record;
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function restore$5(currentState, targetState) {
    var match = addAllBufferToPool(currentState[/* vboBufferRecord */35]);
    var newrecord = caml_array_dup(targetState);
    newrecord[/* vboBufferRecord */35] = /* record */[
      /* boxGeometryVertexBufferMap : array */[],
      /* boxGeometryTexCoordBufferMap : array */[],
      /* boxGeometryNormalBufferMap : array */[],
      /* boxGeometryElementArrayBufferMap : array */[],
      /* customGeometryVertexBufferMap : array */[],
      /* customGeometryTexCoordBufferMap : array */[],
      /* customGeometryNormalBufferMap : array */[],
      /* customGeometryElementArrayBufferMap : array */[],
      /* matrixInstanceBufferMap : array */[],
      /* vertexArrayBufferPool */match[0],
      /* elementArrayBufferPool */match[1],
      /* matrixInstanceBufferPool */match[2]
    ];
    return newrecord;
  }
  
  
  /* PoolVboBufferService-Wonderjs Not a pure module */
  
  function restore$6(_, targetState) {
    var newrecord = caml_array_dup(targetState);
    var init = targetState[/* glslSenderRecord */31];
    newrecord[/* glslSenderRecord */31] = /* record */[
      /* attributeSendDataMap */init[/* attributeSendDataMap */0],
      /* instanceAttributeSendDataMap */init[/* instanceAttributeSendDataMap */1],
      /* uniformCacheMap */init[/* uniformCacheMap */2],
      /* uniformRenderObjectSendModelDataMap */init[/* uniformRenderObjectSendModelDataMap */3],
      /* uniformRenderObjectSendMaterialDataMap */init[/* uniformRenderObjectSendMaterialDataMap */4],
      /* uniformShaderSendNoCachableDataMap */init[/* uniformShaderSendNoCachableDataMap */5],
      /* uniformShaderSendCachableDataMap */init[/* uniformShaderSendCachableDataMap */6],
      /* uniformShaderSendCachableFunctionDataMap */init[/* uniformShaderSendCachableFunctionDataMap */7],
      /* uniformInstanceSendNoCachableDataMap */init[/* uniformInstanceSendNoCachableDataMap */8],
      /* vertexAttribHistoryArray */createEmpty(/* () */0),
      /* lastSendMaterialData */undefined,
      /* lastSendGeometryData */undefined
    ];
    return newrecord;
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  function restore$7(currentState, targetState) {
    var newrecord = caml_array_dup(targetState);
    newrecord[/* globalTempRecord */36] = currentState[/* globalTempRecord */36];
    return newrecord;
  }
  
  
  /* No side effect */
  
  function _restoreTypeArrays$1(currentPointLightRecord, targetPointLightRecord) {
    var match = currentPointLightRecord[/* colors */2] === targetPointLightRecord[/* colors */2] && currentPointLightRecord[/* intensities */3] === targetPointLightRecord[/* intensities */3] && currentPointLightRecord[/* constants */4] === targetPointLightRecord[/* constants */4] && currentPointLightRecord[/* linears */5] === targetPointLightRecord[/* linears */5] && currentPointLightRecord[/* quadratics */6] === targetPointLightRecord[/* quadratics */6] && currentPointLightRecord[/* ranges */7] === targetPointLightRecord[/* ranges */7];
    if (match) {
      return /* tuple */[
              currentPointLightRecord,
              targetPointLightRecord
            ];
    } else {
      setAllTypeArrDataToDefault$2(currentPointLightRecord[/* index */0], /* tuple */[
            currentPointLightRecord[/* colors */2],
            currentPointLightRecord[/* intensities */3],
            currentPointLightRecord[/* constants */4],
            currentPointLightRecord[/* linears */5],
            currentPointLightRecord[/* quadratics */6],
            currentPointLightRecord[/* ranges */7]
          ]);
      fillFloat32ArrayWithFloat32Array(/* tuple */[
            currentPointLightRecord[/* colors */2],
            0
          ], /* tuple */[
            targetPointLightRecord[/* colors */2],
            0
          ], targetPointLightRecord[/* colors */2].length);
      fillFloat32ArrayWithFloat32Array(/* tuple */[
            currentPointLightRecord[/* intensities */3],
            0
          ], /* tuple */[
            targetPointLightRecord[/* intensities */3],
            0
          ], targetPointLightRecord[/* intensities */3].length);
      fillFloat32ArrayWithFloat32Array(/* tuple */[
            currentPointLightRecord[/* constants */4],
            0
          ], /* tuple */[
            targetPointLightRecord[/* constants */4],
            0
          ], targetPointLightRecord[/* constants */4].length);
      fillFloat32ArrayWithFloat32Array(/* tuple */[
            currentPointLightRecord[/* linears */5],
            0
          ], /* tuple */[
            targetPointLightRecord[/* linears */5],
            0
          ], targetPointLightRecord[/* linears */5].length);
      fillFloat32ArrayWithFloat32Array(/* tuple */[
            currentPointLightRecord[/* quadratics */6],
            0
          ], /* tuple */[
            targetPointLightRecord[/* quadratics */6],
            0
          ], targetPointLightRecord[/* quadratics */6].length);
      fillFloat32ArrayWithFloat32Array(/* tuple */[
            currentPointLightRecord[/* ranges */7],
            0
          ], /* tuple */[
            targetPointLightRecord[/* ranges */7],
            0
          ], targetPointLightRecord[/* ranges */7].length);
      return /* tuple */[
              currentPointLightRecord,
              targetPointLightRecord
            ];
    }
  }
  
  function restore$8(currentState, targetState) {
    var currentPointLightRecord = currentState[/* pointLightRecord */22];
    var targetPointLightRecord = targetState[/* pointLightRecord */22];
    var match = _restoreTypeArrays$1(currentPointLightRecord, targetPointLightRecord);
    var targetPointLightRecord$1 = match[1];
    var currentPointLightRecord$1 = match[0];
    var newrecord = caml_array_dup(targetState);
    newrecord[/* pointLightRecord */22] = /* record */[
      /* index */targetPointLightRecord$1[/* index */0],
      /* buffer */currentPointLightRecord$1[/* buffer */1],
      /* colors */currentPointLightRecord$1[/* colors */2],
      /* intensities */currentPointLightRecord$1[/* intensities */3],
      /* constants */currentPointLightRecord$1[/* constants */4],
      /* linears */currentPointLightRecord$1[/* linears */5],
      /* quadratics */currentPointLightRecord$1[/* quadratics */6],
      /* ranges */currentPointLightRecord$1[/* ranges */7],
      /* mappedIndexMap */targetPointLightRecord$1[/* mappedIndexMap */8],
      /* gameObjectMap */targetPointLightRecord$1[/* gameObjectMap */9]
    ];
    return newrecord;
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function restore$9(_, targetState) {
    return targetState;
  }
  
  
  /* No side effect */
  
  var getAllAliveMaterials = getValidKeys;
  
  
  /* SparseMapService-Wonderjs Not a pure module */
  
  function resetShaderIndices(index, defaultShaderIndex, shaderIndices) {
    return reduceOneParam((function (shaderIndices, i) {
                  return setUint32_1(i, defaultShaderIndex, shaderIndices);
                }), shaderIndices, range$1(0, index));
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function _resetShaderIndices(state) {
    var record = getRecord$1(state);
    var newrecord = caml_array_dup(state);
    newrecord[/* basicMaterialRecord */16] = /* record */[
      /* index */record[/* index */0],
      /* buffer */record[/* buffer */1],
      /* shaderIndices */resetShaderIndices(record[/* index */0], getDefaultShaderIndex(/* () */0), record[/* shaderIndices */2]),
      /* colors */record[/* colors */3],
      /* textureIndices */record[/* textureIndices */4],
      /* mapUnits */record[/* mapUnits */5],
      /* textureCountMap */record[/* textureCountMap */6],
      /* defaultColor */record[/* defaultColor */7],
      /* gameObjectMap */record[/* gameObjectMap */8],
      /* groupCountMap */record[/* groupCountMap */9],
      /* disposedIndexArray */record[/* disposedIndexArray */10],
      /* nameMap */record[/* nameMap */11],
      /* materialArrayForWorkerInit */record[/* materialArrayForWorkerInit */12]
    ];
    return newrecord;
  }
  
  function _restoreTypeArrays$2(currentBasicMaterialRecord, targetBasicMaterialRecord) {
    var match = currentBasicMaterialRecord[/* shaderIndices */2] === targetBasicMaterialRecord[/* shaderIndices */2] && currentBasicMaterialRecord[/* colors */3] === targetBasicMaterialRecord[/* colors */3] && currentBasicMaterialRecord[/* textureIndices */4] === targetBasicMaterialRecord[/* textureIndices */4] && currentBasicMaterialRecord[/* mapUnits */5] === targetBasicMaterialRecord[/* mapUnits */5];
    if (match) {
      return /* tuple */[
              currentBasicMaterialRecord,
              targetBasicMaterialRecord
            ];
    } else {
      setAllTypeArrDataToDefault$1(currentBasicMaterialRecord[/* index */0], getDefaultShaderIndex(/* () */0), currentBasicMaterialRecord[/* defaultColor */7], /* tuple */[
            currentBasicMaterialRecord[/* shaderIndices */2],
            currentBasicMaterialRecord[/* colors */3],
            currentBasicMaterialRecord[/* textureIndices */4],
            currentBasicMaterialRecord[/* mapUnits */5]
          ]);
      fillUint32ArrayWithUint32Array(/* tuple */[
            currentBasicMaterialRecord[/* shaderIndices */2],
            0
          ], /* tuple */[
            targetBasicMaterialRecord[/* shaderIndices */2],
            0
          ], targetBasicMaterialRecord[/* shaderIndices */2].length);
      fillFloat32ArrayWithFloat32Array(/* tuple */[
            currentBasicMaterialRecord[/* colors */3],
            0
          ], /* tuple */[
            targetBasicMaterialRecord[/* colors */3],
            0
          ], targetBasicMaterialRecord[/* colors */3].length);
      fillUint32ArrayWithUint32Array(/* tuple */[
            currentBasicMaterialRecord[/* textureIndices */4],
            0
          ], /* tuple */[
            targetBasicMaterialRecord[/* textureIndices */4],
            0
          ], targetBasicMaterialRecord[/* textureIndices */4].length);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentBasicMaterialRecord[/* mapUnits */5],
            0
          ], /* tuple */[
            targetBasicMaterialRecord[/* mapUnits */5],
            0
          ], targetBasicMaterialRecord[/* mapUnits */5].length);
      return /* tuple */[
              currentBasicMaterialRecord,
              targetBasicMaterialRecord
            ];
    }
  }
  
  function restore$10(gl, currentState, targetState) {
    var targetState$1 = _resetShaderIndices(targetState);
    var targetState$2 = initMaterials(getAllAliveMaterials(getRecord$1(targetState$1)[/* gameObjectMap */8]), gl, targetState$1);
    var currentBasicMaterialRecord = getRecord$1(currentState);
    var targetBasicMaterialRecord = getRecord$1(targetState$2);
    var match = _restoreTypeArrays$2(currentBasicMaterialRecord, targetBasicMaterialRecord);
    var targetBasicMaterialRecord$1 = match[1];
    var currentBasicMaterialRecord$1 = match[0];
    var newrecord = caml_array_dup(targetState$2);
    newrecord[/* basicMaterialRecord */16] = /* record */[
      /* index */targetBasicMaterialRecord$1[/* index */0],
      /* buffer */currentBasicMaterialRecord$1[/* buffer */1],
      /* shaderIndices */currentBasicMaterialRecord$1[/* shaderIndices */2],
      /* colors */currentBasicMaterialRecord$1[/* colors */3],
      /* textureIndices */currentBasicMaterialRecord$1[/* textureIndices */4],
      /* mapUnits */currentBasicMaterialRecord$1[/* mapUnits */5],
      /* textureCountMap */targetBasicMaterialRecord$1[/* textureCountMap */6],
      /* defaultColor */targetBasicMaterialRecord$1[/* defaultColor */7],
      /* gameObjectMap */targetBasicMaterialRecord$1[/* gameObjectMap */8],
      /* groupCountMap */targetBasicMaterialRecord$1[/* groupCountMap */9],
      /* disposedIndexArray */targetBasicMaterialRecord$1[/* disposedIndexArray */10],
      /* nameMap */targetBasicMaterialRecord$1[/* nameMap */11],
      /* materialArrayForWorkerInit */targetBasicMaterialRecord$1[/* materialArrayForWorkerInit */12]
    ];
    return newrecord;
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function restore$11(_, param, targetState) {
    var newrecord = caml_array_dup(targetState);
    var init = targetState[/* deviceManagerRecord */10];
    newrecord[/* deviceManagerRecord */10] = /* record */[
      /* gl */some(param[/* gl */0]),
      /* colorWrite */init[/* colorWrite */1],
      /* clearColor */init[/* clearColor */2],
      /* side */init[/* side */3],
      /* depthTest */init[/* depthTest */4],
      /* viewport */init[/* viewport */5]
    ];
    return newrecord;
  }
  
  
  /* No side effect */
  
  function _resetShaderIndices$1(state) {
    var record = getRecord$3(state);
    var newrecord = caml_array_dup(state);
    newrecord[/* lightMaterialRecord */17] = /* record */[
      /* index */record[/* index */0],
      /* buffer */record[/* buffer */1],
      /* shaderIndices */resetShaderIndices(record[/* index */0], getDefaultShaderIndex(/* () */0), record[/* shaderIndices */2]),
      /* diffuseColors */record[/* diffuseColors */3],
      /* specularColors */record[/* specularColors */4],
      /* shininess */record[/* shininess */5],
      /* textureIndices */record[/* textureIndices */6],
      /* diffuseMapUnits */record[/* diffuseMapUnits */7],
      /* specularMapUnits */record[/* specularMapUnits */8],
      /* textureCountMap */record[/* textureCountMap */9],
      /* defaultDiffuseColor */record[/* defaultDiffuseColor */10],
      /* defaultSpecularColor */record[/* defaultSpecularColor */11],
      /* defaultShininess */record[/* defaultShininess */12],
      /* gameObjectMap */record[/* gameObjectMap */13],
      /* groupCountMap */record[/* groupCountMap */14],
      /* disposedIndexArray */record[/* disposedIndexArray */15],
      /* nameMap */record[/* nameMap */16],
      /* materialArrayForWorkerInit */record[/* materialArrayForWorkerInit */17]
    ];
    return newrecord;
  }
  
  function _restoreTypeArrays$3(currentLightMaterialRecord, targetLightMaterialRecord) {
    var match = currentLightMaterialRecord[/* shaderIndices */2] === targetLightMaterialRecord[/* shaderIndices */2] && currentLightMaterialRecord[/* diffuseColors */3] === targetLightMaterialRecord[/* diffuseColors */3] && currentLightMaterialRecord[/* specularColors */4] === targetLightMaterialRecord[/* specularColors */4] && currentLightMaterialRecord[/* textureIndices */6] === targetLightMaterialRecord[/* textureIndices */6] && currentLightMaterialRecord[/* diffuseMapUnits */7] === targetLightMaterialRecord[/* diffuseMapUnits */7] && currentLightMaterialRecord[/* specularMapUnits */8] === targetLightMaterialRecord[/* specularMapUnits */8];
    if (match) {
      return /* tuple */[
              currentLightMaterialRecord,
              targetLightMaterialRecord
            ];
    } else {
      setAllTypeArrDataToDefault$4(currentLightMaterialRecord[/* index */0], /* tuple */[
            getDefaultShaderIndex(/* () */0),
            currentLightMaterialRecord[/* defaultDiffuseColor */10],
            currentLightMaterialRecord[/* defaultSpecularColor */11],
            currentLightMaterialRecord[/* defaultShininess */12]
          ], /* tuple */[
            currentLightMaterialRecord[/* shaderIndices */2],
            currentLightMaterialRecord[/* diffuseColors */3],
            currentLightMaterialRecord[/* specularColors */4],
            currentLightMaterialRecord[/* shininess */5],
            currentLightMaterialRecord[/* textureIndices */6],
            currentLightMaterialRecord[/* diffuseMapUnits */7],
            currentLightMaterialRecord[/* specularMapUnits */8]
          ]);
      fillUint32ArrayWithUint32Array(/* tuple */[
            currentLightMaterialRecord[/* shaderIndices */2],
            0
          ], /* tuple */[
            targetLightMaterialRecord[/* shaderIndices */2],
            0
          ], targetLightMaterialRecord[/* shaderIndices */2].length);
      fillFloat32ArrayWithFloat32Array(/* tuple */[
            currentLightMaterialRecord[/* diffuseColors */3],
            0
          ], /* tuple */[
            targetLightMaterialRecord[/* diffuseColors */3],
            0
          ], targetLightMaterialRecord[/* diffuseColors */3].length);
      fillFloat32ArrayWithFloat32Array(/* tuple */[
            currentLightMaterialRecord[/* specularColors */4],
            0
          ], /* tuple */[
            targetLightMaterialRecord[/* specularColors */4],
            0
          ], targetLightMaterialRecord[/* specularColors */4].length);
      fillFloat32ArrayWithFloat32Array(/* tuple */[
            currentLightMaterialRecord[/* shininess */5],
            0
          ], /* tuple */[
            targetLightMaterialRecord[/* shininess */5],
            0
          ], targetLightMaterialRecord[/* shininess */5].length);
      fillUint32ArrayWithUint32Array(/* tuple */[
            currentLightMaterialRecord[/* textureIndices */6],
            0
          ], /* tuple */[
            targetLightMaterialRecord[/* textureIndices */6],
            0
          ], targetLightMaterialRecord[/* textureIndices */6].length);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentLightMaterialRecord[/* diffuseMapUnits */7],
            0
          ], /* tuple */[
            targetLightMaterialRecord[/* diffuseMapUnits */7],
            0
          ], targetLightMaterialRecord[/* diffuseMapUnits */7].length);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentLightMaterialRecord[/* specularMapUnits */8],
            0
          ], /* tuple */[
            targetLightMaterialRecord[/* specularMapUnits */8],
            0
          ], targetLightMaterialRecord[/* specularMapUnits */8].length);
      return /* tuple */[
              currentLightMaterialRecord,
              targetLightMaterialRecord
            ];
    }
  }
  
  function restore$12(gl, currentState, targetState) {
    var targetState$1 = _resetShaderIndices$1(targetState);
    var targetState$2 = initMaterials$1(getAllAliveMaterials(getRecord$3(targetState$1)[/* gameObjectMap */13]), gl, targetState$1);
    var currentLightMaterialRecord = getRecord$3(currentState);
    var targetLightMaterialRecord = getRecord$3(targetState$2);
    var match = _restoreTypeArrays$3(currentLightMaterialRecord, targetLightMaterialRecord);
    var targetLightMaterialRecord$1 = match[1];
    var currentLightMaterialRecord$1 = match[0];
    var newrecord = caml_array_dup(targetState$2);
    newrecord[/* lightMaterialRecord */17] = /* record */[
      /* index */targetLightMaterialRecord$1[/* index */0],
      /* buffer */currentLightMaterialRecord$1[/* buffer */1],
      /* shaderIndices */currentLightMaterialRecord$1[/* shaderIndices */2],
      /* diffuseColors */currentLightMaterialRecord$1[/* diffuseColors */3],
      /* specularColors */currentLightMaterialRecord$1[/* specularColors */4],
      /* shininess */currentLightMaterialRecord$1[/* shininess */5],
      /* textureIndices */currentLightMaterialRecord$1[/* textureIndices */6],
      /* diffuseMapUnits */currentLightMaterialRecord$1[/* diffuseMapUnits */7],
      /* specularMapUnits */currentLightMaterialRecord$1[/* specularMapUnits */8],
      /* textureCountMap */targetLightMaterialRecord$1[/* textureCountMap */9],
      /* defaultDiffuseColor */targetLightMaterialRecord$1[/* defaultDiffuseColor */10],
      /* defaultSpecularColor */targetLightMaterialRecord$1[/* defaultSpecularColor */11],
      /* defaultShininess */targetLightMaterialRecord$1[/* defaultShininess */12],
      /* gameObjectMap */targetLightMaterialRecord$1[/* gameObjectMap */13],
      /* groupCountMap */targetLightMaterialRecord$1[/* groupCountMap */14],
      /* disposedIndexArray */targetLightMaterialRecord$1[/* disposedIndexArray */15],
      /* nameMap */targetLightMaterialRecord$1[/* nameMap */16],
      /* materialArrayForWorkerInit */targetLightMaterialRecord$1[/* materialArrayForWorkerInit */17]
    ];
    return newrecord;
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function restore$13(currentState, targetState) {
    var currentTextureRecord = getRecord$5(currentState);
    getRecord$5(targetState);
    var newrecord = caml_array_dup(targetState);
    newrecord[/* sourceTextureRecord */18] = /* record */[/* buffer */currentTextureRecord[/* buffer */0]];
    return newrecord;
  }
  
  
  /* RecordSourceTextureMainService-Wonderjs Not a pure module */
  
  function restore$14(_, param, targetState) {
    var newrecord = caml_array_dup(targetState);
    newrecord[/* typeArrayPoolRecord */37] = /* record */[
      /* float32ArrayPoolMap */param[/* float32ArrayPoolMap */1],
      /* uint16ArrayPoolMap */param[/* uint16ArrayPoolMap */2]
    ];
    return newrecord;
  }
  
  
  /* No side effect */
  
  function _restoreTypeArrays$4(customGeometryPointCount, currentCustomGeometryRecord, targetCustomGeometryRecord) {
    var match = currentCustomGeometryRecord[/* vertices */2] === targetCustomGeometryRecord[/* vertices */2] && currentCustomGeometryRecord[/* normals */4] === targetCustomGeometryRecord[/* normals */4] && currentCustomGeometryRecord[/* texCoords */3] === targetCustomGeometryRecord[/* texCoords */3] && currentCustomGeometryRecord[/* indices */5] === targetCustomGeometryRecord[/* indices */5];
    if (match) {
      return /* tuple */[
              currentCustomGeometryRecord,
              targetCustomGeometryRecord
            ];
    } else {
      setAllTypeArrDataToDefault$8(currentCustomGeometryRecord[/* index */0], customGeometryPointCount, /* tuple */[
            currentCustomGeometryRecord[/* vertices */2],
            currentCustomGeometryRecord[/* texCoords */3],
            currentCustomGeometryRecord[/* normals */4],
            currentCustomGeometryRecord[/* indices */5]
          ]);
      fillFloat32ArrayWithFloat32Array(/* tuple */[
            currentCustomGeometryRecord[/* vertices */2],
            0
          ], /* tuple */[
            targetCustomGeometryRecord[/* vertices */2],
            0
          ], targetCustomGeometryRecord[/* vertices */2].length);
      fillFloat32ArrayWithFloat32Array(/* tuple */[
            currentCustomGeometryRecord[/* texCoords */3],
            0
          ], /* tuple */[
            targetCustomGeometryRecord[/* texCoords */3],
            0
          ], targetCustomGeometryRecord[/* texCoords */3].length);
      fillFloat32ArrayWithFloat32Array(/* tuple */[
            currentCustomGeometryRecord[/* normals */4],
            0
          ], /* tuple */[
            targetCustomGeometryRecord[/* normals */4],
            0
          ], targetCustomGeometryRecord[/* normals */4].length);
      fillUint16ArrayWithUint16Array(/* tuple */[
            currentCustomGeometryRecord[/* indices */5],
            0
          ], /* tuple */[
            targetCustomGeometryRecord[/* indices */5],
            0
          ], targetCustomGeometryRecord[/* indices */5].length);
      return /* tuple */[
              currentCustomGeometryRecord,
              targetCustomGeometryRecord
            ];
    }
  }
  
  function restore$15(currentState, targetState) {
    var currentCustomGeometryRecord = getRecord$9(currentState);
    var targetCustomGeometryRecord = getRecord$9(targetState);
    var match = _restoreTypeArrays$4(getCustomGeometryPointCount(currentState[/* settingRecord */1]), currentCustomGeometryRecord, targetCustomGeometryRecord);
    var targetCustomGeometryRecord$1 = match[1];
    var currentCustomGeometryRecord$1 = match[0];
    var newrecord = caml_array_dup(targetState);
    newrecord[/* customGeometryRecord */24] = /* record */[
      /* index */targetCustomGeometryRecord$1[/* index */0],
      /* buffer */currentCustomGeometryRecord$1[/* buffer */1],
      /* vertices */currentCustomGeometryRecord$1[/* vertices */2],
      /* texCoords */currentCustomGeometryRecord$1[/* texCoords */3],
      /* normals */currentCustomGeometryRecord$1[/* normals */4],
      /* indices */currentCustomGeometryRecord$1[/* indices */5],
      /* verticesInfos */targetCustomGeometryRecord$1[/* verticesInfos */6],
      /* texCoordsInfos */targetCustomGeometryRecord$1[/* texCoordsInfos */7],
      /* normalsInfos */targetCustomGeometryRecord$1[/* normalsInfos */8],
      /* indicesInfos */targetCustomGeometryRecord$1[/* indicesInfos */9],
      /* verticesOffset */targetCustomGeometryRecord$1[/* verticesOffset */10],
      /* texCoordsOffset */targetCustomGeometryRecord$1[/* texCoordsOffset */11],
      /* normalsOffset */targetCustomGeometryRecord$1[/* normalsOffset */12],
      /* indicesOffset */targetCustomGeometryRecord$1[/* indicesOffset */13],
      /* disposeCount */targetCustomGeometryRecord$1[/* disposeCount */14],
      /* gameObjectMap */targetCustomGeometryRecord$1[/* gameObjectMap */15],
      /* groupCountMap */targetCustomGeometryRecord$1[/* groupCountMap */16],
      /* disposedIndexArray */targetCustomGeometryRecord$1[/* disposedIndexArray */17],
      /* disposedIndexMap */targetCustomGeometryRecord$1[/* disposedIndexMap */18],
      /* aliveIndexArray */targetCustomGeometryRecord$1[/* aliveIndexArray */19]
    ];
    return newrecord;
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function _restoreTypeArrays$5(currentDirectionLightRecord, targetDirectionLightRecord) {
    var match = currentDirectionLightRecord[/* colors */2] === targetDirectionLightRecord[/* colors */2] && currentDirectionLightRecord[/* intensities */3] === targetDirectionLightRecord[/* intensities */3];
    if (match) {
      return /* tuple */[
              currentDirectionLightRecord,
              targetDirectionLightRecord
            ];
    } else {
      setAllTypeArrDataToDefault$3(currentDirectionLightRecord[/* index */0], /* tuple */[
            currentDirectionLightRecord[/* colors */2],
            currentDirectionLightRecord[/* intensities */3]
          ]);
      fillFloat32ArrayWithFloat32Array(/* tuple */[
            currentDirectionLightRecord[/* colors */2],
            0
          ], /* tuple */[
            targetDirectionLightRecord[/* colors */2],
            0
          ], targetDirectionLightRecord[/* colors */2].length);
      fillFloat32ArrayWithFloat32Array(/* tuple */[
            currentDirectionLightRecord[/* intensities */3],
            0
          ], /* tuple */[
            targetDirectionLightRecord[/* intensities */3],
            0
          ], targetDirectionLightRecord[/* intensities */3].length);
      return /* tuple */[
              currentDirectionLightRecord,
              targetDirectionLightRecord
            ];
    }
  }
  
  function restore$16(currentState, targetState) {
    var currentDirectionLightRecord = currentState[/* directionLightRecord */21];
    var targetDirectionLightRecord = targetState[/* directionLightRecord */21];
    var match = _restoreTypeArrays$5(currentDirectionLightRecord, targetDirectionLightRecord);
    var targetDirectionLightRecord$1 = match[1];
    var currentDirectionLightRecord$1 = match[0];
    var newrecord = caml_array_dup(targetState);
    newrecord[/* directionLightRecord */21] = /* record */[
      /* index */targetDirectionLightRecord$1[/* index */0],
      /* buffer */currentDirectionLightRecord$1[/* buffer */1],
      /* colors */currentDirectionLightRecord$1[/* colors */2],
      /* intensities */currentDirectionLightRecord$1[/* intensities */3],
      /* mappedIndexMap */targetDirectionLightRecord$1[/* mappedIndexMap */4],
      /* gameObjectMap */targetDirectionLightRecord$1[/* gameObjectMap */5]
    ];
    return newrecord;
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function _buildIsNotSendTransformMatrixDataMap(isSendTransformMatrixDataMap) {
    return reduceiValid((function (newMap, _, index) {
                  return set$1(index, false, newMap);
                }), createEmpty$2(/* () */0), isSendTransformMatrixDataMap);
  }
  
  function _restoreTypeArrays$6(currentSourceInstanceRecord, targetSourceInstanceRecord) {
    var match = currentSourceInstanceRecord[/* objectInstanceTransformCollections */4] === targetSourceInstanceRecord[/* objectInstanceTransformCollections */4] && currentSourceInstanceRecord[/* isTransformStatics */3] === targetSourceInstanceRecord[/* isTransformStatics */3];
    if (match) {
      return /* tuple */[
              currentSourceInstanceRecord,
              targetSourceInstanceRecord
            ];
    } else {
      setAllTypeArrDataToDefault$9(currentSourceInstanceRecord[/* index */0], getDefault(/* () */0), /* tuple */[
            currentSourceInstanceRecord[/* objectInstanceTransformCollections */4],
            currentSourceInstanceRecord[/* isTransformStatics */3]
          ]);
      fillUint32ArrayWithUint32Array(/* tuple */[
            currentSourceInstanceRecord[/* objectInstanceTransformCollections */4],
            0
          ], /* tuple */[
            targetSourceInstanceRecord[/* objectInstanceTransformCollections */4],
            0
          ], targetSourceInstanceRecord[/* objectInstanceTransformCollections */4].length);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentSourceInstanceRecord[/* isTransformStatics */3],
            0
          ], /* tuple */[
            targetSourceInstanceRecord[/* isTransformStatics */3],
            0
          ], targetSourceInstanceRecord[/* isTransformStatics */3].length);
      return /* tuple */[
              currentSourceInstanceRecord,
              targetSourceInstanceRecord
            ];
    }
  }
  
  function restore$17(currentState, sharedData, targetState) {
    var currentSourceInstanceRecord = getRecord$10(currentState);
    var targetSourceInstanceRecord = getRecord$10(targetState);
    var float32ArrayPoolMap = addAllFloat32TypeArrayToPool(currentSourceInstanceRecord[/* matrixFloat32ArrayMap */6], getMaxBigTypeArrayPoolSize(targetState[/* settingRecord */1]), sharedData[/* float32ArrayPoolMap */1]);
    var match = _restoreTypeArrays$6(currentSourceInstanceRecord, targetSourceInstanceRecord);
    var targetSourceInstanceRecord$1 = match[1];
    var currentSourceInstanceRecord$1 = match[0];
    var newrecord = caml_array_dup(targetState);
    return /* tuple */[
            (newrecord[/* sourceInstanceRecord */7] = /* record */[
                /* index */targetSourceInstanceRecord$1[/* index */0],
                /* objectInstanceTransformIndexMap */targetSourceInstanceRecord$1[/* objectInstanceTransformIndexMap */1],
                /* buffer */currentSourceInstanceRecord$1[/* buffer */2],
                /* isTransformStatics */currentSourceInstanceRecord$1[/* isTransformStatics */3],
                /* objectInstanceTransformCollections */currentSourceInstanceRecord$1[/* objectInstanceTransformCollections */4],
                /* matrixInstanceBufferCapacityMap */targetSourceInstanceRecord$1[/* matrixInstanceBufferCapacityMap */5],
                /* matrixFloat32ArrayMap */targetSourceInstanceRecord$1[/* matrixFloat32ArrayMap */6],
                /* isSendTransformMatrixDataMap */_buildIsNotSendTransformMatrixDataMap(targetSourceInstanceRecord$1[/* isSendTransformMatrixDataMap */7]),
                /* disposedIndexArray */targetSourceInstanceRecord$1[/* disposedIndexArray */8],
                /* gameObjectMap */targetSourceInstanceRecord$1[/* gameObjectMap */9]
              ], newrecord),
            /* record */[
              /* gl */sharedData[/* gl */0],
              /* float32ArrayPoolMap */float32ArrayPoolMap,
              /* uint16ArrayPoolMap */sharedData[/* uint16ArrayPoolMap */2]
            ]
          ];
  }
  
  
  /* SparseMapService-Wonderjs Not a pure module */
  
  function _restoreTypeArrays$7(currentTextureRecord, targetTextureRecord) {
    var match = currentTextureRecord[/* wrapSs */1] === targetTextureRecord[/* wrapSs */1] && currentTextureRecord[/* wrapTs */2] === targetTextureRecord[/* wrapTs */2] && currentTextureRecord[/* magFilters */3] === targetTextureRecord[/* magFilters */3] && currentTextureRecord[/* minFilters */4] === targetTextureRecord[/* minFilters */4] && currentTextureRecord[/* formats */5] === targetTextureRecord[/* formats */5] && currentTextureRecord[/* types */6] === targetTextureRecord[/* types */6] && currentTextureRecord[/* isNeedUpdates */7] === targetTextureRecord[/* isNeedUpdates */7] && currentTextureRecord[/* flipYs */8] === targetTextureRecord[/* flipYs */8];
    if (match) {
      return /* tuple */[
              currentTextureRecord,
              targetTextureRecord
            ];
    } else {
      setAllTypeArrDataToDefault$5(currentTextureRecord[/* index */0], /* tuple */[
            currentTextureRecord[/* wrapSs */1],
            currentTextureRecord[/* wrapTs */2],
            currentTextureRecord[/* magFilters */3],
            currentTextureRecord[/* minFilters */4],
            currentTextureRecord[/* formats */5],
            currentTextureRecord[/* types */6],
            currentTextureRecord[/* isNeedUpdates */7],
            currentTextureRecord[/* flipYs */8]
          ]);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentTextureRecord[/* wrapSs */1],
            0
          ], /* tuple */[
            targetTextureRecord[/* wrapSs */1],
            0
          ], targetTextureRecord[/* wrapSs */1].length);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentTextureRecord[/* wrapTs */2],
            0
          ], /* tuple */[
            targetTextureRecord[/* wrapTs */2],
            0
          ], targetTextureRecord[/* wrapTs */2].length);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentTextureRecord[/* magFilters */3],
            0
          ], /* tuple */[
            targetTextureRecord[/* magFilters */3],
            0
          ], targetTextureRecord[/* magFilters */3].length);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentTextureRecord[/* minFilters */4],
            0
          ], /* tuple */[
            targetTextureRecord[/* minFilters */4],
            0
          ], targetTextureRecord[/* minFilters */4].length);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentTextureRecord[/* formats */5],
            0
          ], /* tuple */[
            targetTextureRecord[/* formats */5],
            0
          ], targetTextureRecord[/* formats */5].length);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentTextureRecord[/* types */6],
            0
          ], /* tuple */[
            targetTextureRecord[/* types */6],
            0
          ], targetTextureRecord[/* types */6].length);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentTextureRecord[/* isNeedUpdates */7],
            0
          ], /* tuple */[
            targetTextureRecord[/* isNeedUpdates */7],
            0
          ], targetTextureRecord[/* isNeedUpdates */7].length);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentTextureRecord[/* flipYs */8],
            0
          ], /* tuple */[
            targetTextureRecord[/* flipYs */8],
            0
          ], targetTextureRecord[/* flipYs */8].length);
      return /* tuple */[
              currentTextureRecord,
              targetTextureRecord
            ];
    }
  }
  
  function restore$18(currentState, targetState) {
    var currentTextureRecord = getRecord$4(currentState);
    var targetTextureRecord = getRecord$4(targetState);
    var match = _restoreTypeArrays$7(currentTextureRecord, targetTextureRecord);
    var targetTextureRecord$1 = match[1];
    var currentTextureRecord$1 = match[0];
    var newrecord = caml_array_dup(targetState);
    newrecord[/* basicSourceTextureRecord */19] = /* record */[
      /* index */targetTextureRecord$1[/* index */0],
      /* wrapSs */currentTextureRecord$1[/* wrapSs */1],
      /* wrapTs */currentTextureRecord$1[/* wrapTs */2],
      /* magFilters */currentTextureRecord$1[/* magFilters */3],
      /* minFilters */currentTextureRecord$1[/* minFilters */4],
      /* formats */currentTextureRecord$1[/* formats */5],
      /* types */currentTextureRecord$1[/* types */6],
      /* isNeedUpdates */currentTextureRecord$1[/* isNeedUpdates */7],
      /* flipYs */currentTextureRecord$1[/* flipYs */8],
      /* sourceMap */targetTextureRecord$1[/* sourceMap */9],
      /* glTextureMap */targetTextureRecord$1[/* glTextureMap */10],
      /* bindTextureUnitCacheMap */targetTextureRecord$1[/* bindTextureUnitCacheMap */11],
      /* disposedIndexArray */targetTextureRecord$1[/* disposedIndexArray */12],
      /* needAddedSourceArray */targetTextureRecord$1[/* needAddedSourceArray */13],
      /* needInitedTextureIndexArray */targetTextureRecord$1[/* needInitedTextureIndexArray */14],
      /* nameMap */targetTextureRecord$1[/* nameMap */15]
    ];
    return newrecord;
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function _restoreTypeArrays$8(currentTextureRecord, targetTextureRecord, arrayBufferViewSourceTextureIndexOffset) {
    var match = currentTextureRecord[/* wrapSs */1] === targetTextureRecord[/* wrapSs */1] && currentTextureRecord[/* wrapTs */2] === targetTextureRecord[/* wrapTs */2] && currentTextureRecord[/* magFilters */3] === targetTextureRecord[/* magFilters */3] && currentTextureRecord[/* minFilters */4] === targetTextureRecord[/* minFilters */4] && currentTextureRecord[/* formats */5] === targetTextureRecord[/* formats */5] && currentTextureRecord[/* types */6] === targetTextureRecord[/* types */6] && currentTextureRecord[/* isNeedUpdates */7] === targetTextureRecord[/* isNeedUpdates */7] && currentTextureRecord[/* flipYs */8] === targetTextureRecord[/* flipYs */8] && currentTextureRecord[/* widths */9] === targetTextureRecord[/* widths */9] && currentTextureRecord[/* heights */10] === targetTextureRecord[/* heights */10];
    if (match) {
      return /* tuple */[
              currentTextureRecord,
              targetTextureRecord
            ];
    } else {
      setAllTypeArrDataToDefault$6(currentTextureRecord[/* index */0], arrayBufferViewSourceTextureIndexOffset, /* tuple */[
            currentTextureRecord[/* wrapSs */1],
            currentTextureRecord[/* wrapTs */2],
            currentTextureRecord[/* magFilters */3],
            currentTextureRecord[/* minFilters */4],
            currentTextureRecord[/* formats */5],
            currentTextureRecord[/* types */6],
            currentTextureRecord[/* isNeedUpdates */7],
            currentTextureRecord[/* flipYs */8],
            currentTextureRecord[/* widths */9],
            currentTextureRecord[/* heights */10]
          ]);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentTextureRecord[/* wrapSs */1],
            0
          ], /* tuple */[
            targetTextureRecord[/* wrapSs */1],
            0
          ], targetTextureRecord[/* wrapSs */1].length);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentTextureRecord[/* wrapTs */2],
            0
          ], /* tuple */[
            targetTextureRecord[/* wrapTs */2],
            0
          ], targetTextureRecord[/* wrapTs */2].length);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentTextureRecord[/* magFilters */3],
            0
          ], /* tuple */[
            targetTextureRecord[/* magFilters */3],
            0
          ], targetTextureRecord[/* magFilters */3].length);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentTextureRecord[/* minFilters */4],
            0
          ], /* tuple */[
            targetTextureRecord[/* minFilters */4],
            0
          ], targetTextureRecord[/* minFilters */4].length);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentTextureRecord[/* formats */5],
            0
          ], /* tuple */[
            targetTextureRecord[/* formats */5],
            0
          ], targetTextureRecord[/* formats */5].length);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentTextureRecord[/* types */6],
            0
          ], /* tuple */[
            targetTextureRecord[/* types */6],
            0
          ], targetTextureRecord[/* types */6].length);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentTextureRecord[/* isNeedUpdates */7],
            0
          ], /* tuple */[
            targetTextureRecord[/* isNeedUpdates */7],
            0
          ], targetTextureRecord[/* isNeedUpdates */7].length);
      fillUint8ArrayWithUint8Array(/* tuple */[
            currentTextureRecord[/* flipYs */8],
            0
          ], /* tuple */[
            targetTextureRecord[/* flipYs */8],
            0
          ], targetTextureRecord[/* flipYs */8].length);
      fillUint16ArrayWithUint16Array(/* tuple */[
            currentTextureRecord[/* widths */9],
            0
          ], /* tuple */[
            targetTextureRecord[/* widths */9],
            0
          ], targetTextureRecord[/* widths */9].length);
      fillUint16ArrayWithUint16Array(/* tuple */[
            currentTextureRecord[/* heights */10],
            0
          ], /* tuple */[
            targetTextureRecord[/* heights */10],
            0
          ], targetTextureRecord[/* heights */10].length);
      return /* tuple */[
              currentTextureRecord,
              targetTextureRecord
            ];
    }
  }
  
  function restore$19(currentState, targetState) {
    var currentTextureRecord = getRecord$6(currentState);
    var targetTextureRecord = getRecord$6(targetState);
    var match = _restoreTypeArrays$8(currentTextureRecord, targetTextureRecord, getArrayBufferViewSourceTextureIndexOffset$1(currentState));
    var targetTextureRecord$1 = match[1];
    var currentTextureRecord$1 = match[0];
    var newrecord = caml_array_dup(targetState);
    newrecord[/* arrayBufferViewSourceTextureRecord */20] = /* record */[
      /* index */targetTextureRecord$1[/* index */0],
      /* wrapSs */currentTextureRecord$1[/* wrapSs */1],
      /* wrapTs */currentTextureRecord$1[/* wrapTs */2],
      /* magFilters */currentTextureRecord$1[/* magFilters */3],
      /* minFilters */currentTextureRecord$1[/* minFilters */4],
      /* formats */currentTextureRecord$1[/* formats */5],
      /* types */currentTextureRecord$1[/* types */6],
      /* isNeedUpdates */currentTextureRecord$1[/* isNeedUpdates */7],
      /* flipYs */currentTextureRecord$1[/* flipYs */8],
      /* widths */currentTextureRecord$1[/* widths */9],
      /* heights */currentTextureRecord$1[/* heights */10],
      /* sourceMap */targetTextureRecord$1[/* sourceMap */11],
      /* glTextureMap */targetTextureRecord$1[/* glTextureMap */12],
      /* bindTextureUnitCacheMap */targetTextureRecord$1[/* bindTextureUnitCacheMap */13],
      /* disposedIndexArray */targetTextureRecord$1[/* disposedIndexArray */14],
      /* needAddedSourceArray */targetTextureRecord$1[/* needAddedSourceArray */15],
      /* needInitedTextureIndexArray */targetTextureRecord$1[/* needInitedTextureIndexArray */16],
      /* nameMap */targetTextureRecord$1[/* nameMap */17]
    ];
    return newrecord;
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function _getSharedData(currentState) {
    var typeArrayPoolRecord = currentState[/* typeArrayPoolRecord */37];
    return /* record */[
            /* gl */unsafeGetGl(currentState[/* deviceManagerRecord */10]),
            /* float32ArrayPoolMap */getFloat32ArrayPoolMap(typeArrayPoolRecord),
            /* uint16ArrayPoolMap */getUint16ArrayPoolMap(typeArrayPoolRecord)
          ];
  }
  
  function restore(stateData, currentState, targetState) {
    var sharedData = _getSharedData(currentState);
    var match = restore$17(currentState, sharedData, targetState);
    var sharedData$1 = match[1];
    var targetState$1 = restore$11(currentState, sharedData$1, match[0]);
    var gl = unsafeGetGl(targetState$1[/* deviceManagerRecord */10]);
    return setState$2(stateData, restore$19(currentState, restore$18(currentState, restore$13(currentState, restore$8(currentState, restore$16(currentState, restore$15(currentState, restore$4(currentState, restore$1(currentState, restore$12(gl, currentState, restore$10(gl, currentState, restore$6(currentState, restore$9(currentState, restore$3(currentState, restore$2(currentState, restore$5(currentState, restore$7(currentState, restore$14(currentState, sharedData$1, targetState$1))))))))))))))))));
  }
  
  
  /* DeviceManagerService-Wonderjs Not a pure module */
  
  function deepCopyForRestore$24(state) {
    var state$1 = deepCopyForRestore$6(deepCopyForRestore$5(deepCopyForRestore$2(deepCopyForRestore$3(deepCopyForRestore$10(deepCopyForRestore$9(deepCopyForRestore$8(deepCopyForRestore$7(deepCopyForRestore$4(deepCopyForRestore$1(deepCopyForRestore(deepCopyForRestore$15(state))))))))))));
    var newrecord = caml_array_dup(state$1);
    newrecord[/* objectInstanceRecord */8] = deepCopyForRestore$20(state$1[/* objectInstanceRecord */8]);
    newrecord[/* deviceManagerRecord */10] = deepCopyForRestore$18(state$1[/* deviceManagerRecord */10]);
    newrecord[/* gameObjectRecord */11] = deepCopyForRestore$17(state$1[/* gameObjectRecord */11]);
    newrecord[/* basicCameraViewRecord */14] = deepCopyForRestore$21(state$1[/* basicCameraViewRecord */14]);
    newrecord[/* perspectiveCameraProjectionRecord */15] = deepCopyForRestore$23(state$1[/* perspectiveCameraProjectionRecord */15]);
    newrecord[/* arcballCameraControllerRecord */26] = deepCopyForRestore$22(state$1[/* arcballCameraControllerRecord */26]);
    newrecord[/* shaderRecord */27] = deepCopyForRestore$14(state$1[/* shaderRecord */27]);
    newrecord[/* glslRecord */28] = deepCopyForRestore$13(state$1[/* glslRecord */28]);
    newrecord[/* vboBufferRecord */35] = deepCopyForRestore$16(state$1[/* vboBufferRecord */35]);
    newrecord[/* typeArrayPoolRecord */37] = deepCopyForRestore$19(state$1[/* typeArrayPoolRecord */37]);
    return newrecord;
  }
  
  
  /* RecordShaderService-Wonderjs Not a pure module */
  
  function restoreState$1(currentState, targetState) {
    return restore(stateData, currentState, targetState);
  }
  
  function createStateData$2() {
    return createStateData(/* () */0);
  }
  
  var getStateFromData$1 = unsafeGetState$1;
  
  var setStateToData$1 = setState$2;
  
  function setIsDebug$2(isDebug) {
    return setIsDebug(stateData, isDebug);
  }
  
  var setUnsafeGetStateFunc$1 = setUnsafeGetStateFunc$2;
  
  var setSetStateFunc$1 = setSetStateFunc$2;
  
  var deepCopyForRestore$12 = deepCopyForRestore$24;
  
  
  /* StateDataMain-Wonderjs Not a pure module */
  
  var deepCopyForRestore$11 = deepCopyForRestore$12;
  
  var restoreState = restoreState$1;
  
  var createStateData$1 = createStateData$2;
  
  var getStateFromData = getStateFromData$1;
  
  var setStateToData = setStateToData$1;
  
  var setIsDebug$1 = setIsDebug$2;
  
  var setUnsafeGetStateFunc = setUnsafeGetStateFunc$1;
  
  var setSetStateFunc = setSetStateFunc$1;
  
  
  /* StateAPI-Wonderjs Not a pure module */
  
  function create$58() {
    return /* record */[
            /* sceneRecord : record */[
              /* currentSceneTreeNode */undefined,
              /* diffMap */undefined,
              /* isRun */false
            ],
            /* assetRecord : record */[
              /* assetTreeRoot */undefined,
              /* index */0,
              /* currentNodeData */undefined,
              /* currentNodeParentId */undefined,
              /* textureNodeMap */createEmpty$2(/* () */0),
              /* jsonNodeMap */createEmpty$2(/* () */0),
              /* folderNodeMap */createEmpty$2(/* () */0),
              /* imageBase64Map */createEmpty$2(/* () */0)
            ],
            /* inspectorRecord : record */[/* componentTypeMap */createEmpty$2(/* () */0)],
            /* currentDragSource : tuple */[
              undefined,
              undefined
            ],
            /* currentSelectSource */undefined,
            /* loopId */-1
          ];
  }
  
  
  /* No side effect */
  
  var editorStateData = /* record */[
    /* editorState */create$58(/* () */0),
    /* isDebug */true,
    /* engineStateDataForEdit */createStateData$1(/* () */0),
    /* engineStateDataForRun */createStateData$1(/* () */0)
  ];
  
  
  /* editorStateData Not a pure module */
  
  function getStateIsDebug() {
    return editorStateData[/* isDebug */1];
  }
  
  function getState() {
    return editorStateData[/* editorState */0];
  }
  
  function setState(state) {
    editorStateData[/* editorState */0] = state;
    return state;
  }
  
  
  /* CreateEditorStateDataEditorService-WonderEditor Not a pure module */
  
  function create$27() {
    return /* array */[];
  }
  
  function getFirst(arr) {
    return ensureCheck((function (r) {
                  return test(buildAssertMessage("array[0] element exist", "not"), (function () {
                                return assertNullableExist(r);
                              }));
                }), getStateIsDebug(/* () */0), arr[0]);
  }
  
  function unshift(item, arr) {
    arr.unshift(item);
    return arr;
  }
  
  function push$2(item, arr) {
    arr.push(item);
    return arr;
  }
  
  function pushMany$1(itemArr, arr) {
    return reduceOneParam((function (arr, item) {
                  return push$2(item, arr);
                }), arr, itemArr);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function getIsRun$1(sceneRecord) {
    return sceneRecord[/* isRun */2];
  }
  
  function setIsRun$1(isRun, sceneRecord) {
    return /* record */[
            /* currentSceneTreeNode */sceneRecord[/* currentSceneTreeNode */0],
            /* diffMap */sceneRecord[/* diffMap */1],
            /* isRun */isRun
          ];
  }
  
  
  /* No side effect */
  
  function unsafeGetDiffMap$1(sceneRecord) {
    return unsafeGet$3(sceneRecord[/* diffMap */1]);
  }
  
  function setDiffMap$1(diffMap, sceneRecord) {
    return /* record */[
            /* currentSceneTreeNode */sceneRecord[/* currentSceneTreeNode */0],
            /* diffMap */some(diffMap),
            /* isRun */sceneRecord[/* isRun */2]
          ];
  }
  
  
  /* OptionService-WonderEditor Not a pure module */
  
  function unsafeGetCurrentSceneTreeNode$1(sceneRecord) {
    return unsafeGet$3(sceneRecord[/* currentSceneTreeNode */0]);
  }
  
  function getCurrentSceneTreeNode$1(sceneRecord) {
    return sceneRecord[/* currentSceneTreeNode */0];
  }
  
  function setCurrentSceneTreeNode$1(gameObject, sceneRecord) {
    return /* record */[
            /* currentSceneTreeNode */gameObject,
            /* diffMap */sceneRecord[/* diffMap */1],
            /* isRun */sceneRecord[/* isRun */2]
          ];
  }
  
  function clearCurrentSceneTreeNode$1(sceneRecord) {
    return /* record */[
            /* currentSceneTreeNode */undefined,
            /* diffMap */sceneRecord[/* diffMap */1],
            /* isRun */sceneRecord[/* isRun */2]
          ];
  }
  
  
  /* OptionService-WonderEditor Not a pure module */
  
  function getIsRun(editorState) {
    return getIsRun$1(editorState[/* sceneRecord */0]);
  }
  
  function setIsRun(isRun, editorState) {
    return /* record */[
            /* sceneRecord */setIsRun$1(isRun, editorState[/* sceneRecord */0]),
            /* assetRecord */editorState[/* assetRecord */1],
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  function unsafeGetDiffMap(editorState) {
    return unsafeGetDiffMap$1(editorState[/* sceneRecord */0]);
  }
  
  function setDiffMap(diffMap, editorState) {
    return /* record */[
            /* sceneRecord */setDiffMap$1(diffMap, editorState[/* sceneRecord */0]),
            /* assetRecord */editorState[/* assetRecord */1],
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  function unsafeGetCurrentSceneTreeNode(editorState) {
    return unsafeGetCurrentSceneTreeNode$1(editorState[/* sceneRecord */0]);
  }
  
  function getCurrentSceneTreeNode(editorState) {
    return getCurrentSceneTreeNode$1(editorState[/* sceneRecord */0]);
  }
  
  function setCurrentSceneTreeNode(gameObject, editorState) {
    return /* record */[
            /* sceneRecord */setCurrentSceneTreeNode$1(gameObject, editorState[/* sceneRecord */0]),
            /* assetRecord */editorState[/* assetRecord */1],
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  function clearCurrentSceneTreeNode(editorState) {
    return /* record */[
            /* sceneRecord */clearCurrentSceneTreeNode$1(editorState[/* sceneRecord */0]),
            /* assetRecord */editorState[/* assetRecord */1],
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  
  /* DiffMapSceneService-WonderEditor Not a pure module */
  
  function getEditEngineComponent$1(type_, diffMap) {
    switch (type_) {
      case 0 : 
          return unsafeGet("gameObject", diffMap);
      case 1 : 
          return unsafeGet("transform", diffMap);
      case 2 : 
          return unsafeGet("meshRenderer", diffMap);
      case 3 : 
          return unsafeGet("basicMaterial", diffMap);
      case 4 : 
          return unsafeGet("lightMaterial", diffMap);
      case 5 : 
          return unsafeGet("directionLight", diffMap);
      case 6 : 
          return unsafeGet("pointLight", diffMap);
      case 7 : 
          return unsafeGet("arcballCameraController", diffMap);
      case 8 : 
          return unsafeGet("texture", diffMap);
      
    }
  }
  
  
  /* HashMapService-WonderCommonlib Not a pure module */
  
  var classCallCheck$1 = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };
  
  var NONE = /*#__PURE__*/new (function () {
    function DisposeNone() {
      classCallCheck$1(this, DisposeNone);
    }
  
    DisposeNone.prototype.dispose = function dispose() {};
  
    return DisposeNone;
  }())();
  
  /** @license MIT License (c) copyright 2010-2017 original author or authors */
  
  // Wrap an existing disposable (which may not already have been once()d)
  // so that it will only dispose its underlying resource at most once.
  var disposeOnce = function disposeOnce(disposable) {
    return new DisposeOnce(disposable);
  };
  
  var DisposeOnce = /*#__PURE__*/function () {
    function DisposeOnce(disposable) {
      classCallCheck$1(this, DisposeOnce);
  
      this.disposed = false;
      this.disposable = disposable;
    }
  
    DisposeOnce.prototype.dispose = function dispose() {
      if (!this.disposed) {
        this.disposed = true;
        this.disposable.dispose();
        this.disposable = undefined;
      }
    };
  
    return DisposeOnce;
  }();
  
  /** @license MIT License (c) copyright 2010-2017 original author or authors */
  // Create a Disposable that will use the provided
  // dispose function to dispose the resource
  var disposeWith = /*#__PURE__*/curry2(function (dispose, resource) {
    return disposeOnce(new DisposeWith(dispose, resource));
  });
  
  // Disposable represents a resource that must be
  // disposed/released. It aggregates a function to dispose
  // the resource and a handle to a key/id/handle/reference
  // that identifies the resource
  
  var DisposeWith = /*#__PURE__*/function () {
    function DisposeWith(dispose, resource) {
      classCallCheck$1(this, DisposeWith);
  
      this._dispose = dispose;
      this._resource = resource;
    }
  
    DisposeWith.prototype.dispose = function dispose() {
      this._dispose(this._resource);
    };
  
    return DisposeWith;
  }();
  
  var DisposeAllError = /*#__PURE__*/function (Error) {
    function DisposeAllError(message, errors) {
      Error.call(this, message);
      this.message = message;
      this.name = DisposeAllError.name;
      this.errors = errors;
  
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, DisposeAllError);
      }
  
      this.stack = '' + this.stack + formatErrorStacks(this.errors);
    }
  
    DisposeAllError.prototype = /*#__PURE__*/Object.create(Error.prototype);
  
    return DisposeAllError;
  }(Error);
  
  var formatErrorStacks = function formatErrorStacks(errors) {
    return reduce(formatErrorStack, '', errors);
  };
  
  var formatErrorStack = function formatErrorStack(s, e, i) {
    return s + ('\n[' + (i + 1) + '] ' + e.stack);
  };
  
  var classCallCheck = function (instance, Constructor) {
      if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
      }
  };
  
  var createClass$4 = function () {
      function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
          }
      }
  
      return function (Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps);
          if (staticProps) defineProperties(Constructor, staticProps);
          return Constructor;
      };
  }();
  
  var AnimationFrame = function () {
      function AnimationFrame() {
          classCallCheck(this, AnimationFrame);
  
          // this.afp = afp;
      }
  
      var _originTime = null;
  
      function _getCurrentTime() {
          if (_originTime === null) {
              _originTime = window.performance.now();
              return 0;
          }
  
          var currentTime = window.performance.now() - _originTime;
  
          _originTime = window.performance.now();
  
          return currentTime;
      }
  
  
      function _runRequest(sink, scheduler$$1) {
          var propagate = function propagate(timestamp) {
              // edit by wonder
              // return eventThenEnd(currentTime(scheduler$$1), timestamp, sink);
              // return eventThenEnd(currentTime(newDefaultScheduler() ), timestamp, sink);
              eventThenEnd(_getCurrentTime, timestamp, sink);
  
              // _runRequest(sink, null);
          };
          // var request = this.afp.requestAnimationFrame(propagate);
          var request = window.requestAnimationFrame(propagate);
  
  
          // edit by wonder
          // return disposeWith(this.afp.cancelAnimationFrame, request);
  
          return disposeWith(function (requestId) {
              window.cancelAnimationFrame(requestId);
          }, request)
      }
  
  
      createClass$4(AnimationFrame, [{
          key: 'run',
          value: _runRequest
      }]);
      return AnimationFrame;
  }();
  
  var eventThenEnd = function eventThenEnd(t, x, sink) {
      sink.event(t, x);
      sink.end(t);
  };
  
  var _isFromEventStream = (
    function(stream) {
      var source = stream.source;
      return !!source.event && !!source.source;
    }
    );
  
  function concatArray(streamArr) {
    var match = streamArr.length;
    if (match !== 0) {
      return reduceOneParam((function (stream1, stream2) {
                    _1(_isFromEventStream, stream1) === true;
                    return stream1.concat(stream2);
                  }), caml_array_get(streamArr, 0), streamArr.slice(1));
    } else {
      return of(1);
    }
  }
  
  
  /* _isFromEventStream Not a pure module */
  
  /* Log-WonderLog Not a pure module */
  
  function rev_append(_l1, _l2) {
    while(true) {
      var l2 = _l2;
      var l1 = _l1;
      if (l1) {
        _l2 = /* :: */[
          l1[0],
          l2
        ];
        _l1 = l1[1];
        continue ;
      } else {
        return l2;
      }
    }
  }
  
  function iter$1(f, _param) {
    while(true) {
      var param = _param;
      if (param) {
        _1(f, param[0]);
        _param = param[1];
        continue ;
      } else {
        return /* () */0;
      }
    }
  }
  
  function fold_left(f, _accu, _l) {
    while(true) {
      var l = _l;
      var accu = _accu;
      if (l) {
        _l = l[1];
        _accu = _2(f, accu, l[0]);
        continue ;
      } else {
        return accu;
      }
    }
  }
  
  function find_all(p) {
    return (function (param) {
        var _accu = /* [] */0;
        var _param = param;
        while(true) {
          var param$1 = _param;
          var accu = _accu;
          if (param$1) {
            var l = param$1[1];
            var x = param$1[0];
            if (_1(p, x)) {
              _param = l;
              _accu = /* :: */[
                x,
                accu
              ];
              continue ;
            } else {
              _param = l;
              continue ;
            }
          } else {
            return rev_append(accu, /* [] */0);
          }
        }
      });
  }
  
  var filter$2 = find_all;
  
  
  /* No side effect */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* most Not a pure module */
  
  /* most Not a pure module */
  
  /* HashMapService-WonderCommonlib Not a pure module */
  
  function getElapsed(param) {
    return param[/* elapsed */0];
  }
  
  function _computeFps(deltaTime, lastTime) {
    if (lastTime !== undefined) {
      return 1000 / deltaTime;
    } else {
      return 60;
    }
  }
  
  function tick(elapsed, record) {
    var lastTime = record[/* lastTime */3];
    var deltaTime = lastTime !== undefined ? elapsed - lastTime : elapsed;
    return /* record */[
            /* elapsed */record[/* elapsed */0],
            /* startTime */record[/* startTime */1],
            /* deltaTime */deltaTime,
            /* lastTime */elapsed,
            /* gameTime */elapsed / 1000,
            /* fps */_computeFps(deltaTime, lastTime)
          ];
  }
  
  function start(record) {
    return /* record */[
            /* elapsed */0,
            /* startTime */window.performance.now(),
            /* deltaTime */record[/* deltaTime */2],
            /* lastTime */record[/* lastTime */3],
            /* gameTime */record[/* gameTime */4],
            /* fps */record[/* fps */5]
          ];
  }
  
  function computeElapseTime(time, record) {
    return ensureCheck((function (param) {
                  var elapsed = param[/* elapsed */0];
                  return test(buildAssertMessage("elapsed >= 0", "is " + (String(elapsed) + "")), (function () {
                                return Operators[/* >=. */8](elapsed, 0);
                              }));
                }), getIsDebug(stateData), /* record */[
                /* elapsed */leastFloat(0, time - record[/* startTime */1]),
                /* startTime */record[/* startTime */1],
                /* deltaTime */record[/* deltaTime */2],
                /* lastTime */record[/* lastTime */3],
                /* gameTime */record[/* gameTime */4],
                /* fps */record[/* fps */5]
              ]);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function handleGetNoneJob(name, jobHandleMap) {
    return fatal(buildFatalMessage("get no job", "can\'t find job handle function whose job name is " + (String(name) + ""), "", "make sure that the job name defined in config record be correctly", "jobHandleMap:" + (getJsonStr(jobHandleMap) + ("\nname: " + (String(name) + "")))));
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  var createJobHandleMap = fromList;
  
  
  /* HashMapService-WonderCommonlib Not a pure module */
  
  function execJob$1(timeControllerRecord) {
    return tick(getElapsed(timeControllerRecord), timeControllerRecord);
  }
  
  
  /* TimeControllerService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* No side effect */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  function getLastXY(param) {
    var mouseEventData = param[/* mouseEventData */6];
    return /* tuple */[
            mouseEventData[/* lastX */0],
            mouseEventData[/* lastY */1]
          ];
  }
  
  function setLastXY$1(lastX, lastY, eventRecord) {
    return /* record */[
            /* domEventStreamSubscription */eventRecord[/* domEventStreamSubscription */0],
            /* mouseDomEventDataArrMap */eventRecord[/* mouseDomEventDataArrMap */1],
            /* keyboardDomEventDataArrMap */eventRecord[/* keyboardDomEventDataArrMap */2],
            /* touchDomEventDataArrMap */eventRecord[/* touchDomEventDataArrMap */3],
            /* customGlobalEventArrMap */eventRecord[/* customGlobalEventArrMap */4],
            /* customGameObjectEventArrMap */eventRecord[/* customGameObjectEventArrMap */5],
            /* mouseEventData : record */[
              /* lastX */lastX,
              /* lastY */lastY,
              /* isDrag */eventRecord[/* mouseEventData */6][/* isDrag */2]
            ],
            /* keyboardEventData */eventRecord[/* keyboardEventData */7],
            /* touchEventData */eventRecord[/* touchEventData */8]
          ];
  }
  
  
  /* No side effect */
  
  function _getLocation$1(mouseDomEvent, param) {
    var browser = param[/* browserDetectRecord */41][/* browser */0];
    if (browser >= 2) {
      return fatalUnknownBrowser("_getLocation", browser);
    } else {
      return /* tuple */[
              mouseDomEvent.pageX,
              mouseDomEvent.pageY
            ];
    }
  }
  
  function _getLocationInView(mouseDomEvent, state) {
    return getLocationInView(mouseDomEvent, _getLocation$1, state);
  }
  
  function _getButton(mouseDomEvent, state) {
    var browser = state[/* browserDetectRecord */41][/* browser */0];
    if (browser >= 2) {
      return fatalUnknownBrowser("_getButton", browser);
    } else {
      var button = mouseDomEvent.button;
      if (button > 2 || button < 0) {
        return fatal(buildFatalMessage("_getButton", "not support multi mouse button", "", "", "button: " + (String(button) + "")));
      } else {
        return button;
      }
    }
  }
  
  function _getFromWheelDelta(mouseDomEvent) {
    var match = mouseDomEvent.wheelDelta;
    if (match == null) {
      return 0;
    } else {
      return match / 120 | 0;
    }
  }
  
  function _getWheel(mouseDomEvent) {
    var match = mouseDomEvent.detail;
    if (!(match == null) && match !== 0) {
      return imul(-1, match);
    } else {
      return _getFromWheelDelta(mouseDomEvent);
    }
  }
  
  var _isPointerLocked = function (){
    return !!(
      document.pointerLockElement
      || document.mozPointerLockElement
      || document.webkitPointerLockElement
    );
      };
  
  function _getMovementDeltaWhenPointerLocked(mouseDomEvent, _) {
    var match = mouseDomEvent.movementX;
    var tmp;
    if (match == null) {
      var match$1 = mouseDomEvent.webkitMovementX;
      if (match$1 == null) {
        var match$2 = mouseDomEvent.mozMovementX;
        tmp = (match$2 == null) ? 0 : match$2;
      } else {
        tmp = match$1;
      }
    } else {
      tmp = match;
    }
    var match$3 = mouseDomEvent.movementY;
    var tmp$1;
    if (match$3 == null) {
      var match$4 = mouseDomEvent.webkitMovementY;
      if (match$4 == null) {
        var match$5 = mouseDomEvent.mozMovementY;
        tmp$1 = (match$5 == null) ? 0 : match$5;
      } else {
        tmp$1 = match$4;
      }
    } else {
      tmp$1 = match$3;
    }
    return /* tuple */[
            tmp,
            tmp$1
          ];
  }
  
  function _getMovementDelta(mouseDomEvent, state) {
    var match = _isPointerLocked();
    if (match) {
      return _getMovementDeltaWhenPointerLocked(mouseDomEvent, state);
    } else {
      return getMovementDelta(_getLocation$1(mouseDomEvent, state), getLastXY(state[/* eventRecord */42]), state);
    }
  }
  
  function _convertMouseDomEventToMouseEvent(eventName, mouseDomEvent, state) {
    return /* record */[
            /* name */eventName,
            /* location */_getLocation$1(mouseDomEvent, state),
            /* locationInView */_getLocationInView(mouseDomEvent, state),
            /* button */_getButton(mouseDomEvent, state),
            /* wheel */_getWheel(mouseDomEvent),
            /* movementDelta */_getMovementDelta(mouseDomEvent, state),
            /* event */mouseDomEvent
          ];
  }
  
  function execEventHandle(eventName, mouseDomEvent, state) {
    var match = get$3(eventName, state[/* eventRecord */42][/* mouseDomEventDataArrMap */1]);
    if (match !== undefined) {
      return reduceOneParam((function (state, param) {
                    return param[/* handleFunc */1](_convertMouseDomEventToMouseEvent(eventName, mouseDomEvent, state), state);
                  }), state, match);
    } else {
      return state;
    }
  }
  
  function setLastXY(lastX, lastY, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* eventRecord */42] = setLastXY$1(lastX, lastY, state[/* eventRecord */42]);
    return newrecord;
  }
  
  function setLastXYByLocation(eventName, mouseDomEvent, state) {
    var match = _convertMouseDomEventToMouseEvent(eventName, mouseDomEvent, state);
    var $$location = match[/* location */1];
    return setLastXY($$location[0], $$location[1], state);
  }
  
  function getIsDrag(state) {
    return state[/* eventRecord */42][/* mouseEventData */6][/* isDrag */2];
  }
  
  function setIsDrag(isDrag, state) {
    var eventRecord = state[/* eventRecord */42];
    var newrecord = caml_array_dup(state);
    var init = eventRecord[/* mouseEventData */6];
    newrecord[/* eventRecord */42] = /* record */[
      /* domEventStreamSubscription */eventRecord[/* domEventStreamSubscription */0],
      /* mouseDomEventDataArrMap */eventRecord[/* mouseDomEventDataArrMap */1],
      /* keyboardDomEventDataArrMap */eventRecord[/* keyboardDomEventDataArrMap */2],
      /* touchDomEventDataArrMap */eventRecord[/* touchDomEventDataArrMap */3],
      /* customGlobalEventArrMap */eventRecord[/* customGlobalEventArrMap */4],
      /* customGameObjectEventArrMap */eventRecord[/* customGameObjectEventArrMap */5],
      /* mouseEventData : record */[
        /* lastX */init[/* lastX */0],
        /* lastY */init[/* lastY */1],
        /* isDrag */isDrag
      ],
      /* keyboardEventData */eventRecord[/* keyboardEventData */7],
      /* touchEventData */eventRecord[/* touchEventData */8]
    ];
    return newrecord;
  }
  
  function setLastXYWhenMouseMove(eventName, mouseDomEvent, state) {
    var match = getIsDrag(state);
    if (match) {
      return state;
    } else {
      return setLastXYByLocation(eventName, mouseDomEvent, state);
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function getLastXY$1(param) {
    var touchEventData = param[/* touchEventData */8];
    return /* tuple */[
            touchEventData[/* lastX */0],
            touchEventData[/* lastY */1]
          ];
  }
  
  function setLastXY$3(lastX, lastY, eventRecord) {
    return /* record */[
            /* domEventStreamSubscription */eventRecord[/* domEventStreamSubscription */0],
            /* mouseDomEventDataArrMap */eventRecord[/* mouseDomEventDataArrMap */1],
            /* keyboardDomEventDataArrMap */eventRecord[/* keyboardDomEventDataArrMap */2],
            /* touchDomEventDataArrMap */eventRecord[/* touchDomEventDataArrMap */3],
            /* customGlobalEventArrMap */eventRecord[/* customGlobalEventArrMap */4],
            /* customGameObjectEventArrMap */eventRecord[/* customGameObjectEventArrMap */5],
            /* mouseEventData */eventRecord[/* mouseEventData */6],
            /* keyboardEventData */eventRecord[/* keyboardEventData */7],
            /* touchEventData : record */[
              /* lastX */lastX,
              /* lastY */lastY,
              /* isDrag */eventRecord[/* touchEventData */8][/* isDrag */2]
            ]
          ];
  }
  
  
  /* No side effect */
  
  function _getTouchData(touchDomEvent) {
    var changedTouches = touchDomEvent.changedTouches;
    var touchDataJsObj = changedTouches[0];
    return /* record */[
            /* clientX */touchDataJsObj.clientX,
            /* clientY */touchDataJsObj.clientY,
            /* pageX */touchDataJsObj.pageX,
            /* pageY */touchDataJsObj.pageY,
            /* identifier */touchDataJsObj.identifier,
            /* screenX */touchDataJsObj.screenX,
            /* screenY */touchDataJsObj.screenY,
            /* radiusX */touchDataJsObj.radiusX,
            /* radiusY */touchDataJsObj.radiusY,
            /* rotationAngle */touchDataJsObj.rotationAngle,
            /* force */touchDataJsObj.force
          ];
  }
  
  function _getLocation$2(touchDomEvent, _) {
    var match = _getTouchData(touchDomEvent);
    return /* tuple */[
            match[/* pageX */2],
            match[/* pageY */3]
          ];
  }
  
  function _getMovementDelta$1(touchDomEvent, state) {
    return getMovementDelta(_getLocation$2(touchDomEvent, state), getLastXY$1(state[/* eventRecord */42]), state);
  }
  
  function _convertTouchDomEventToTouchEvent(eventName, touchDomEvent, state) {
    return /* record */[
            /* name */eventName,
            /* location */_getLocation$2(touchDomEvent, state),
            /* locationInView */getLocationInView(touchDomEvent, _getLocation$2, state),
            /* touchData */_getTouchData(touchDomEvent),
            /* movementDelta */_getMovementDelta$1(touchDomEvent, state),
            /* event */touchDomEvent
          ];
  }
  
  function execEventHandle$1(eventName, touchDomEvent, state) {
    preventDefault$1(touchDomEvent);
    var match = get$3(eventName, state[/* eventRecord */42][/* touchDomEventDataArrMap */3]);
    if (match !== undefined) {
      return reduceOneParam((function (state, param) {
                    return param[/* handleFunc */1](_convertTouchDomEventToTouchEvent(eventName, touchDomEvent, state), state);
                  }), state, match);
    } else {
      return state;
    }
  }
  
  function setLastXY$2(lastX, lastY, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* eventRecord */42] = setLastXY$3(lastX, lastY, state[/* eventRecord */42]);
    return newrecord;
  }
  
  function setLastXYByLocation$1(eventName, touchDomEvent, state) {
    var match = _convertTouchDomEventToTouchEvent(eventName, touchDomEvent, state);
    var $$location = match[/* location */1];
    return setLastXY$2($$location[0], $$location[1], state);
  }
  
  function getIsDrag$1(state) {
    return state[/* eventRecord */42][/* touchEventData */8][/* isDrag */2];
  }
  
  function setIsDrag$1(isDrag, state) {
    var eventRecord = state[/* eventRecord */42];
    var newrecord = caml_array_dup(state);
    var init = eventRecord[/* touchEventData */8];
    newrecord[/* eventRecord */42] = /* record */[
      /* domEventStreamSubscription */eventRecord[/* domEventStreamSubscription */0],
      /* mouseDomEventDataArrMap */eventRecord[/* mouseDomEventDataArrMap */1],
      /* keyboardDomEventDataArrMap */eventRecord[/* keyboardDomEventDataArrMap */2],
      /* touchDomEventDataArrMap */eventRecord[/* touchDomEventDataArrMap */3],
      /* customGlobalEventArrMap */eventRecord[/* customGlobalEventArrMap */4],
      /* customGameObjectEventArrMap */eventRecord[/* customGameObjectEventArrMap */5],
      /* mouseEventData */eventRecord[/* mouseEventData */6],
      /* keyboardEventData */eventRecord[/* keyboardEventData */7],
      /* touchEventData : record */[
        /* lastX */init[/* lastX */0],
        /* lastY */init[/* lastY */1],
        /* isDrag */isDrag
      ]
    ];
    return newrecord;
  }
  
  function setLastXYWhenTouchMove(eventName, touchDomEvent, state) {
    var match = getIsDrag$1(state);
    if (match) {
      return state;
    } else {
      return setLastXYByLocation$1(eventName, touchDomEvent, state);
    }
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  function create$59(eventName, userData) {
    return /* record */[
            /* name */eventName,
            /* target */undefined,
            /* isStopPropagation */false,
            /* phase */undefined,
            /* userData */userData
          ];
  }
  
  
  /* No side effect */
  
  function _getKeyFromSpecialKeyMap(keyCode, $$char, specialKeyMap) {
    var match = get$3(keyCode, specialKeyMap);
    if (match !== undefined) {
      return valFromOption(match);
    } else {
      return $$char;
    }
  }
  
  function _handleShiftKey(keyCode, $$char, param) {
    var match = get$3(keyCode, param[0]);
    if (match !== undefined) {
      return match;
    } else {
      var match$1 = get$2($$char, param[1]);
      if (match$1 !== undefined) {
        return match$1;
      } else {
        return _getKeyFromSpecialKeyMap(keyCode, $$char, param[2]);
      }
    }
  }
  
  function _getKey(keyboardDomEvent, param) {
    var keyboardEventData = param[/* eventRecord */42][/* keyboardEventData */7];
    var specialKeyMap = keyboardEventData[/* specialKeyMap */0];
    var keyCode = keyboardDomEvent.keyCode;
    var $$char = String.fromCharCode(keyCode).toLowerCase();
    var match = keyboardDomEvent.shiftKey;
    if (match) {
      return _handleShiftKey(keyCode, $$char, /* tuple */[
                  keyboardEventData[/* shiftKeyByKeyCodeMap */1],
                  keyboardEventData[/* shiftKeyByCharCodeMap */2],
                  specialKeyMap
                ]);
    } else {
      return _getKeyFromSpecialKeyMap(keyCode, $$char, specialKeyMap);
    }
  }
  
  function _convertKeyboardDomEventToKeyboardEvent(eventName, keyboardDomEvent, state) {
    return /* record */[
            /* name */eventName,
            /* keyCode */keyboardDomEvent.keyCode,
            /* ctrlKey */keyboardDomEvent.ctrlKey,
            /* altKey */keyboardDomEvent.altKey,
            /* shiftKey */keyboardDomEvent.shiftKey,
            /* metaKey */keyboardDomEvent.metaKey,
            /* key */_getKey(keyboardDomEvent, state),
            /* event */keyboardDomEvent
          ];
  }
  
  function execEventHandle$2(eventName, keyboardDomEvent, state) {
    var match = get$3(eventName, state[/* eventRecord */42][/* keyboardDomEventDataArrMap */2]);
    if (match !== undefined) {
      return reduceOneParam((function (state, param) {
                    return param[/* handleFunc */1](_convertKeyboardDomEventToKeyboardEvent(eventName, keyboardDomEvent, state), state);
                  }), state, match);
    } else {
      return state;
    }
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  function _fromPointDomEvent(eventName, state) {
    return fromEvent(eventName, unsafeGetCanvas(state[/* viewRecord */9]), false);
  }
  
  function _fromKeyboardDomEvent(eventName, _) {
    return fromEvent(eventName, document.body, false);
  }
  
  function _convertMouseEventToPointEvent(eventName, param) {
    return /* record */[
            /* name */eventName,
            /* location */param[/* location */1],
            /* locationInView */param[/* locationInView */2],
            /* button */param[/* button */3],
            /* wheel */param[/* wheel */4],
            /* movementDelta */param[/* movementDelta */5],
            /* event */param[/* event */6]
          ];
  }
  
  function _bindDomEventToTriggerPointEvent(param, param$1, state) {
    var convertDomEventToPointEventFunc = param$1[1];
    var pointEventName = param[2];
    var customEventName = param[1];
    return _4(param$1[0], param[0], (function (mouseEvent, state) {
                  return triggerCustomGlobalEvent(create$59(customEventName, some(_2(convertDomEventToPointEventFunc, pointEventName, mouseEvent))), state)[0];
                }), state, /* () */0);
  }
  
  function _bindMouseEventToTriggerPointEvent(mouseEventName, customEventName, pointEventName, state) {
    return _bindDomEventToTriggerPointEvent(/* tuple */[
                mouseEventName,
                customEventName,
                pointEventName
              ], /* tuple */[
                (function (param) {
                    var func = function (param$1, param$2, param$3, param$4) {
                      return onMouseEvent(param, param$1, param$2, param$3, param$4);
                    };
                    return (function (param) {
                        var func$1 = _1(func, param);
                        return (function (param) {
                            return _2(func$1, param, 0);
                          });
                      });
                  }),
                _convertMouseEventToPointEvent
              ], state);
  }
  
  function _convertTouchEventToPointEvent(eventName, param) {
    return /* record */[
            /* name */eventName,
            /* location */param[/* location */1],
            /* locationInView */param[/* locationInView */2],
            /* button */undefined,
            /* wheel */undefined,
            /* movementDelta */param[/* movementDelta */4],
            /* event */param[/* event */5]
          ];
  }
  
  function _bindTouchEventToTriggerPointEvent(touchEventName, customEventName, pointEventName, state) {
    return _bindDomEventToTriggerPointEvent(/* tuple */[
                touchEventName,
                customEventName,
                pointEventName
              ], /* tuple */[
                (function (param) {
                    var func = function (param$1, param$2, param$3, param$4) {
                      return onTouchEvent(param, param$1, param$2, param$3, param$4);
                    };
                    return (function (param) {
                        var func$1 = _1(func, param);
                        return (function (param) {
                            return _2(func$1, param, 0);
                          });
                      });
                  }),
                _convertTouchEventToPointEvent
              ], state);
  }
  
  function bindDomEventToTriggerPointEvent(state) {
    var browser = state[/* browserDetectRecord */41][/* browser */0];
    if (browser >= 2) {
      if (browser >= 4) {
        return fatal(buildFatalMessage("bindDomEventToTriggerPointEvent", "unknown browser", "", "", "browser:" + (String(browser) + "")));
      } else {
        return _bindTouchEventToTriggerPointEvent(/* TouchDrag */14, getPointDragEventName(/* () */0), /* PointDrag */5, _bindTouchEventToTriggerPointEvent(/* TouchMove */12, getPointMoveEventName(/* () */0), /* PointMove */3, _bindTouchEventToTriggerPointEvent(/* TouchStart */13, getPointDownEventName(/* () */0), /* PointDown */1, _bindTouchEventToTriggerPointEvent(/* TouchEnd */11, getPointUpEventName(/* () */0), /* PointUp */2, _bindTouchEventToTriggerPointEvent(/* TouchTap */10, getPointTapEventName(/* () */0), /* PointTap */0, state)))));
      }
    } else {
      return _bindMouseEventToTriggerPointEvent(/* MouseDrag */6, getPointDragEventName(/* () */0), /* PointDrag */5, _bindMouseEventToTriggerPointEvent(/* MouseMove */4, getPointMoveEventName(/* () */0), /* PointMove */3, _bindMouseEventToTriggerPointEvent(/* MouseWheel */5, getPointScaleEventName(/* () */0), /* PointScale */4, _bindMouseEventToTriggerPointEvent(/* MouseDown */2, getPointDownEventName(/* () */0), /* PointDown */1, _bindMouseEventToTriggerPointEvent(/* MouseUp */3, getPointUpEventName(/* () */0), /* PointUp */2, _bindMouseEventToTriggerPointEvent(/* Click */1, getPointTapEventName(/* () */0), /* PointTap */0, state))))));
    }
  }
  
  function _execMouseEventHandle(mouseEventName, $$event, state) {
    setStateByFunc(execEventHandle(mouseEventName, $$event, unsafeGetStateByFunc(state)));
    return /* () */0;
  }
  
  function _execMouseMoveEventHandle(mouseEventName, $$event, state) {
    setStateByFunc(setLastXYWhenMouseMove(mouseEventName, $$event, execEventHandle(mouseEventName, $$event, unsafeGetStateByFunc(state))));
    return /* () */0;
  }
  
  function _execMouseDragingEventHandle(mouseEventName, $$event, state) {
    setStateByFunc(setLastXYByLocation(mouseEventName, $$event, execEventHandle(mouseEventName, $$event, unsafeGetStateByFunc(state))));
    return /* () */0;
  }
  
  function _execMouseDragStartEventHandle(state) {
    setStateByFunc(setLastXY(undefined, undefined, setIsDrag(true, unsafeGetStateByFunc(state))));
    return /* () */0;
  }
  
  function _execMouseDragEndEventHandle(state) {
    setStateByFunc(setIsDrag(false, unsafeGetStateByFunc(state)));
    return /* () */0;
  }
  
  function _execTouchEventHandle(touchEventName, $$event, state) {
    setStateByFunc(execEventHandle$1(touchEventName, $$event, unsafeGetStateByFunc(state)));
    return /* () */0;
  }
  
  function _execTouchMoveEventHandle(touchEventName, $$event, state) {
    setStateByFunc(setLastXYWhenTouchMove(touchEventName, $$event, execEventHandle$1(touchEventName, $$event, unsafeGetStateByFunc(state))));
    return /* () */0;
  }
  
  function _execTouchDragingEventHandle(touchEventName, $$event, state) {
    setStateByFunc(setLastXYByLocation$1(touchEventName, $$event, execEventHandle$1(touchEventName, $$event, unsafeGetStateByFunc(state))));
    return /* () */0;
  }
  
  function _execTouchDragStartEventHandle(state) {
    setStateByFunc(setLastXY$2(undefined, undefined, setIsDrag$1(true, unsafeGetStateByFunc(state))));
    return /* () */0;
  }
  
  function _execTouchDragEndEventHandle(state) {
    setStateByFunc(setIsDrag$1(false, unsafeGetStateByFunc(state)));
    return /* () */0;
  }
  
  function _execKeyboardEventHandle(keyboardEventName, $$event, state) {
    setStateByFunc(execEventHandle$2(keyboardEventName, $$event, unsafeGetStateByFunc(state)));
    return /* () */0;
  }
  
  function _fromPCDomEventArr(state) {
    return /* array */[
            tap((function ($$event) {
                    preventDefault$2($$event);
                    return /* () */0;
                  }), fromEvent("contextmenu", document.body, false)),
            tap((function ($$event) {
                    return _execMouseEventHandle(/* Click */1, $$event, state);
                  }), _fromPointDomEvent("click", state)),
            tap((function ($$event) {
                    return _execMouseEventHandle(/* MouseDown */2, $$event, state);
                  }), _fromPointDomEvent("mousedown", state)),
            tap((function ($$event) {
                    return _execMouseEventHandle(/* MouseUp */3, $$event, state);
                  }), _fromPointDomEvent("mouseup", state)),
            tap((function ($$event) {
                    return _execMouseMoveEventHandle(/* MouseMove */4, $$event, state);
                  }), _fromPointDomEvent("mousemove", state)),
            tap((function ($$event) {
                    return _execMouseEventHandle(/* MouseWheel */5, $$event, state);
                  }), _fromPointDomEvent("mousewheel", state)),
            tap((function ($$event) {
                    return _execMouseDragingEventHandle(/* MouseDrag */6, $$event, state);
                  }), flatMap((function () {
                        return takeUntil(tap((function () {
                                          return _execMouseDragEndEventHandle(state);
                                        }), _fromPointDomEvent("mouseup", state)), _fromPointDomEvent("mousemove", state));
                      }), tap((function () {
                            return _execMouseDragStartEventHandle(state);
                          }), _fromPointDomEvent("mousedown", state)))),
            tap((function ($$event) {
                    return _execKeyboardEventHandle(/* KeyUp */7, $$event, state);
                  }), _fromKeyboardDomEvent("keyup", state)),
            tap((function ($$event) {
                    return _execKeyboardEventHandle(/* KeyDown */8, $$event, state);
                  }), _fromKeyboardDomEvent("keydown", state)),
            tap((function ($$event) {
                    return _execKeyboardEventHandle(/* KeyPress */9, $$event, state);
                  }), _fromKeyboardDomEvent("keypress", state))
          ];
  }
  
  function _fromMobileDomEventArr(state) {
    return /* array */[
            tap((function ($$event) {
                    return _execTouchEventHandle(/* TouchTap */10, $$event, state);
                  }), skipUntil(_fromPointDomEvent("touchstart", state), _fromPointDomEvent("touchend", state))),
            tap((function ($$event) {
                    return _execTouchEventHandle(/* TouchEnd */11, $$event, state);
                  }), _fromPointDomEvent("touchend", state)),
            tap((function ($$event) {
                    return _execTouchEventHandle(/* TouchStart */13, $$event, state);
                  }), _fromPointDomEvent("touchstart", state)),
            tap((function ($$event) {
                    return _execTouchMoveEventHandle(/* TouchMove */12, $$event, state);
                  }), _fromPointDomEvent("touchmove", state)),
            tap((function ($$event) {
                    return _execTouchDragingEventHandle(/* TouchDrag */14, $$event, state);
                  }), flatMap((function () {
                        return takeUntil(tap((function () {
                                          return _execTouchDragEndEventHandle(state);
                                        }), _fromPointDomEvent("touchend", state)), _fromPointDomEvent("touchmove", state));
                      }), tap((function () {
                            return _execTouchDragStartEventHandle(state);
                          }), _fromPointDomEvent("touchstart", state))))
          ];
  }
  
  function fromDomEvent(state) {
    var browser = state[/* browserDetectRecord */41][/* browser */0];
    return mergeArray(browser >= 2 ? (
                  browser >= 4 ? fatal(buildFatalMessage("fromDomEvent", "unknown browser", "", "", "browser:" + (String(browser) + ""))) : _fromMobileDomEventArr(state)
                ) : _fromPCDomEventArr(state));
  }
  
  function handleDomEventStreamError(e) {
    var message = e.message;
    var stack = e.stack;
    var partial_arg = "message:" + (String(message) + ("\nstack:" + (String(stack) + "")));
    var partial_arg$1 = "from dom event stream error";
    return debug((function (param) {
                  return buildDebugMessage(partial_arg$1, partial_arg, param);
                }), getIsDebug(stateData));
  }
  
  function initEvent(state) {
    var domEventStreamSubscription = fromDomEvent(state).subscribe({
          next: (function () {
              return /* () */0;
            }),
          error: handleDomEventStreamError,
          complete: (function () {
              return /* () */0;
            })
        });
    return bindDomEventToTriggerPointEvent(setDomEventStreamSubscription(domEventStreamSubscription, state));
  }
  
  
  /* most Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  function bindEvent$1(state) {
    var state$1 = onCustomGlobalEvent(getPointDownEventName(/* () */0), (function ($$event, state) {
            var imguiRecord = state[/* imguiRecord */43];
            var newrecord = caml_array_dup(state);
            var init = imguiRecord[/* ioData */0];
            newrecord[/* imguiRecord */43] = /* record */[
              /* ioData : record */[
                /* pointUp */init[/* pointUp */0],
                /* pointDown */true,
                /* pointPosition */init[/* pointPosition */2],
                /* pointMovementDelta */init[/* pointMovementDelta */3]
              ],
              /* wonderImguiIMGUIRecord */imguiRecord[/* wonderImguiIMGUIRecord */1]
            ];
            return /* tuple */[
                    newrecord,
                    $$event
                  ];
          }), state, undefined, /* () */0);
    var state$2 = onCustomGlobalEvent(getPointUpEventName(/* () */0), (function ($$event, state) {
            var imguiRecord = state[/* imguiRecord */43];
            var newrecord = caml_array_dup(state);
            var init = imguiRecord[/* ioData */0];
            newrecord[/* imguiRecord */43] = /* record */[
              /* ioData : record */[
                /* pointUp */true,
                /* pointDown */init[/* pointDown */1],
                /* pointPosition */init[/* pointPosition */2],
                /* pointMovementDelta */init[/* pointMovementDelta */3]
              ],
              /* wonderImguiIMGUIRecord */imguiRecord[/* wonderImguiIMGUIRecord */1]
            ];
            return /* tuple */[
                    newrecord,
                    $$event
                  ];
          }), state$1, undefined, /* () */0);
    return onCustomGlobalEvent(getPointMoveEventName(/* () */0), (function ($$event, state) {
                  var imguiRecord = state[/* imguiRecord */43];
                  var pointEvent = unsafeGet$2($$event[/* userData */4]);
                  var newrecord = caml_array_dup(state);
                  var init = imguiRecord[/* ioData */0];
                  newrecord[/* imguiRecord */43] = /* record */[
                    /* ioData : record */[
                      /* pointUp */init[/* pointUp */0],
                      /* pointDown */init[/* pointDown */1],
                      /* pointPosition */pointEvent[/* locationInView */2],
                      /* pointMovementDelta */pointEvent[/* movementDelta */5]
                    ],
                    /* wonderImguiIMGUIRecord */imguiRecord[/* wonderImguiIMGUIRecord */1]
                  ];
                  return /* tuple */[
                          newrecord,
                          $$event
                        ];
                }), state$2, undefined, /* () */0);
  }
  
  function resetPointEventStateWhenPointUp(state) {
    var imguiRecord = state[/* imguiRecord */43];
    var match = getIOData$1(state);
    if (match[/* pointUp */0]) {
      var newrecord = caml_array_dup(state);
      var init = imguiRecord[/* ioData */0];
      newrecord[/* imguiRecord */43] = /* record */[
        /* ioData : record */[
          /* pointUp */false,
          /* pointDown */false,
          /* pointPosition */init[/* pointPosition */2],
          /* pointMovementDelta */init[/* pointMovementDelta */3]
        ],
        /* wonderImguiIMGUIRecord */imguiRecord[/* wonderImguiIMGUIRecord */1]
      ];
      return newrecord;
    } else {
      return state;
    }
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  function createGl(contextConfig, canvas) {
    return canvas.getContext("webgl", contextConfig);
  }
  
  
  /* No side effect */
  
  /* OptionService-Wonderjs Not a pure module */
  
  function convertContextConfigDataToJsObj(param) {
    return {
            alpha: param[/* alpha */0],
            depth: param[/* depth */1],
            stencil: param[/* stencil */2],
            antialias: param[/* antialias */3],
            premultipliedAlpha: param[/* premultipliedAlpha */4],
            preserveDrawingBuffer: param[/* preserveDrawingBuffer */5]
          };
  }
  
  
  /* No side effect */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  
  /* AssetIMGUIService-WonderImgui Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* RecordBrowserDetectAllService-Wonderjs Not a pure module */
  
  /* No side effect */
  
  /* most Not a pure module */
  
  function execJob$10(deviceManagerRecord) {
    return setDepthTest(unsafeGetGl(deviceManagerRecord), true, setSide(unsafeGetGl(deviceManagerRecord), /* FRONT */2, deviceManagerRecord));
  }
  
  
  /* DeviceManagerService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* getSelf Not a pure module */
  
  function getOperateType(flags) {
    return caml_array_get(unsafeGetFlags(flags), 0);
  }
  
  
  /* JobConfigService-Wonderjs Not a pure module */
  
  /* Log-WonderLog Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  function execJob$13(flags, deviceManagerRecord) {
    return clearColor(unsafeGetGl(deviceManagerRecord), convert16HexToRGBA(getOperateType(flags)), deviceManagerRecord);
  }
  
  
  /* ColorService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* No side effect */
  
  function index_rec(s, lim, _i, c) {
    while(true) {
      var i = _i;
      if (i >= lim) {
        throw not_found;
      } else if (s[i] === c) {
        return i;
      } else {
        _i = i + 1 | 0;
        continue ;
      }
    }
  }
  
  function contains_from$1(s, i, c) {
    var l = s.length;
    if (i < 0 || i > l) {
      throw [
            invalid_argument,
            "String.contains_from / Bytes.contains_from"
          ];
    } else {
      try {
        index_rec(s, l, i, c);
        return true;
      }
      catch (exn){
        if (exn === not_found) {
          return false;
        } else {
          throw exn;
        }
      }
    }
  }
  
  function contains$1(s, c) {
    return contains_from$1(s, 0, c);
  }
  
  
  /* No side effect */
  
  function contains(s, c) {
    return contains$1(bytes_of_string(s), c);
  }
  
  
  /* No side effect */
  
  function _getCanvasId(domId) {
    var match = contains(domId, /* "#" */35);
    if (match) {
      return domId;
    } else {
      return ensureCheck((function (id) {
                    return test(buildAssertMessage("dom id start with \'#\'", "is " + (String(domId) + "")), (function () {
                                  return assertTrue((/#[^#]+/).test(id));
                                }));
                  }), getIsDebug(stateData), "#" + (String(domId) + ""));
    }
  }
  
  function createCanvas(canvasId) {
    if (canvasId !== undefined) {
      var canvasId$1 = canvasId;
      var match = findFirstHtmlElement(document, _getCanvasId(canvasId$1));
      if (match !== undefined) {
        return valFromOption(match);
      } else {
        return failwith("canvas whose id is " + (String(canvasId$1) + " should exist"));
      }
    } else {
      var arg = findFirstHtmlElement(document, "body");
      return (function (param) {
                  return prependTo(param, arg);
                })(buildCanvas(/* () */0));
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  function disposeBoxGeometryBufferData(geometry, record) {
    return /* record */[
            /* boxGeometryVertexBufferMap */disposeSparseMapData(geometry, record[/* boxGeometryVertexBufferMap */0]),
            /* boxGeometryTexCoordBufferMap */disposeSparseMapData(geometry, record[/* boxGeometryTexCoordBufferMap */1]),
            /* boxGeometryNormalBufferMap */disposeSparseMapData(geometry, record[/* boxGeometryNormalBufferMap */2]),
            /* boxGeometryElementArrayBufferMap */disposeSparseMapData(geometry, record[/* boxGeometryElementArrayBufferMap */3]),
            /* customGeometryVertexBufferMap */record[/* customGeometryVertexBufferMap */4],
            /* customGeometryTexCoordBufferMap */record[/* customGeometryTexCoordBufferMap */5],
            /* customGeometryNormalBufferMap */record[/* customGeometryNormalBufferMap */6],
            /* customGeometryElementArrayBufferMap */record[/* customGeometryElementArrayBufferMap */7],
            /* matrixInstanceBufferMap */record[/* matrixInstanceBufferMap */8],
            /* vertexArrayBufferPool */record[/* vertexArrayBufferPool */9],
            /* elementArrayBufferPool */record[/* elementArrayBufferPool */10],
            /* matrixInstanceBufferPool */record[/* matrixInstanceBufferPool */11]
          ];
  }
  
  function disposeCustomGeometryBufferData(geometry, record) {
    return /* record */[
            /* boxGeometryVertexBufferMap */record[/* boxGeometryVertexBufferMap */0],
            /* boxGeometryTexCoordBufferMap */record[/* boxGeometryTexCoordBufferMap */1],
            /* boxGeometryNormalBufferMap */record[/* boxGeometryNormalBufferMap */2],
            /* boxGeometryElementArrayBufferMap */record[/* boxGeometryElementArrayBufferMap */3],
            /* customGeometryVertexBufferMap */disposeSparseMapData(geometry, record[/* customGeometryVertexBufferMap */4]),
            /* customGeometryTexCoordBufferMap */disposeSparseMapData(geometry, record[/* customGeometryTexCoordBufferMap */5]),
            /* customGeometryNormalBufferMap */disposeSparseMapData(geometry, record[/* customGeometryNormalBufferMap */6]),
            /* customGeometryElementArrayBufferMap */disposeSparseMapData(geometry, record[/* customGeometryElementArrayBufferMap */7]),
            /* matrixInstanceBufferMap */record[/* matrixInstanceBufferMap */8],
            /* vertexArrayBufferPool */record[/* vertexArrayBufferPool */9],
            /* elementArrayBufferPool */record[/* elementArrayBufferPool */10],
            /* matrixInstanceBufferPool */record[/* matrixInstanceBufferPool */11]
          ];
  }
  
  function disposeInstanceBufferData(sourceInstance, record) {
    return /* record */[
            /* boxGeometryVertexBufferMap */record[/* boxGeometryVertexBufferMap */0],
            /* boxGeometryTexCoordBufferMap */record[/* boxGeometryTexCoordBufferMap */1],
            /* boxGeometryNormalBufferMap */record[/* boxGeometryNormalBufferMap */2],
            /* boxGeometryElementArrayBufferMap */record[/* boxGeometryElementArrayBufferMap */3],
            /* customGeometryVertexBufferMap */record[/* customGeometryVertexBufferMap */4],
            /* customGeometryTexCoordBufferMap */record[/* customGeometryTexCoordBufferMap */5],
            /* customGeometryNormalBufferMap */record[/* customGeometryNormalBufferMap */6],
            /* customGeometryElementArrayBufferMap */record[/* customGeometryElementArrayBufferMap */7],
            /* matrixInstanceBufferMap */disposeSparseMapData(sourceInstance, record[/* matrixInstanceBufferMap */8]),
            /* vertexArrayBufferPool */record[/* vertexArrayBufferPool */9],
            /* elementArrayBufferPool */record[/* elementArrayBufferPool */10],
            /* matrixInstanceBufferPool */record[/* matrixInstanceBufferPool */11]
          ];
  }
  
  function _disposeVboBuffer(needDisposeVboBufferArr, param, vboBufferRecord) {
    var disposeBufferDataFunc = param[1];
    var addBufferToPoolFunc = param[0];
    return reduceOneParam((function (vboBufferRecord, component) {
                  return disposeBufferDataFunc(component, addBufferToPoolFunc(component, vboBufferRecord));
                }), vboBufferRecord, needDisposeVboBufferArr);
  }
  
  function disposeBoxGeometryVboBuffer(boxGeometryNeedDisposeVboBufferArr, vboBufferRecord) {
    return _disposeVboBuffer(boxGeometryNeedDisposeVboBufferArr, /* tuple */[
                addBoxGeometryBufferToPool,
                disposeBoxGeometryBufferData
              ], vboBufferRecord);
  }
  
  function disposeCustomGeometryVboBuffer(customGeometryNeedDisposeVboBufferArr, vboBufferRecord) {
    return _disposeVboBuffer(customGeometryNeedDisposeVboBufferArr, /* tuple */[
                addCustomGeometryBufferToPool,
                disposeCustomGeometryBufferData
              ], vboBufferRecord);
  }
  
  function disposeSourceInstanceVboBuffer(sourceInstanceNeedDisposeVboBufferArr, vboBufferRecord) {
    return _disposeVboBuffer(sourceInstanceNeedDisposeVboBufferArr, /* tuple */[
                addInstanceBufferToPool,
                disposeInstanceBufferData
              ], vboBufferRecord);
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  function _updateTransform(cameraController, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var arcballCameraControllerRecord = state[/* arcballCameraControllerRecord */26];
    var transformRecord = getRecord(state);
    var transform = unsafeGetTransformComponent(unsafeGetGameObject$2(cameraController, arcballCameraControllerRecord), gameObjectRecord);
    var distance = unsafeGetDistance(cameraController, arcballCameraControllerRecord);
    var phi = unsafeGetPhi(cameraController, arcballCameraControllerRecord);
    var theta = unsafeGetTheta(cameraController, arcballCameraControllerRecord);
    var target = unsafeGetTarget(cameraController, arcballCameraControllerRecord);
    var newrecord = caml_array_dup(state);
    newrecord[/* transformRecord */12] = setLocalPositionByTuple$1(transform, /* tuple */[
          distance * Math.cos(phi) * Math.sin(theta) + target[0],
          distance * Math.cos(theta) + target[1],
          distance * Math.sin(phi) * Math.sin(theta) + target[2]
        ], transformRecord);
    return lookAt$1(transform, target, newrecord, undefined, /* () */0);
  }
  
  function _clearDirtyArray$1(state) {
    var arcballCameraControllerRecord = state[/* arcballCameraControllerRecord */26];
    var newrecord = caml_array_dup(state);
    newrecord[/* arcballCameraControllerRecord */26] = /* record */[
      /* index */arcballCameraControllerRecord[/* index */0],
      /* pointDownEventHandleFuncMap */arcballCameraControllerRecord[/* pointDownEventHandleFuncMap */1],
      /* pointUpEventHandleFuncMap */arcballCameraControllerRecord[/* pointUpEventHandleFuncMap */2],
      /* pointDragEventHandleFuncMap */arcballCameraControllerRecord[/* pointDragEventHandleFuncMap */3],
      /* pointScaleEventHandleFuncMap */arcballCameraControllerRecord[/* pointScaleEventHandleFuncMap */4],
      /* keydownEventHandleFuncMap */arcballCameraControllerRecord[/* keydownEventHandleFuncMap */5],
      /* dirtyArray */create$12(/* () */0),
      /* distanceMap */arcballCameraControllerRecord[/* distanceMap */7],
      /* minDistanceMap */arcballCameraControllerRecord[/* minDistanceMap */8],
      /* phiMap */arcballCameraControllerRecord[/* phiMap */9],
      /* thetaMap */arcballCameraControllerRecord[/* thetaMap */10],
      /* thetaMarginMap */arcballCameraControllerRecord[/* thetaMarginMap */11],
      /* targetMap */arcballCameraControllerRecord[/* targetMap */12],
      /* moveSpeedXMap */arcballCameraControllerRecord[/* moveSpeedXMap */13],
      /* moveSpeedYMap */arcballCameraControllerRecord[/* moveSpeedYMap */14],
      /* rotateSpeedMap */arcballCameraControllerRecord[/* rotateSpeedMap */15],
      /* wheelSpeedMap */arcballCameraControllerRecord[/* wheelSpeedMap */16],
      /* gameObjectMap */arcballCameraControllerRecord[/* gameObjectMap */17],
      /* disposedIndexArray */arcballCameraControllerRecord[/* disposedIndexArray */18]
    ];
    return newrecord;
  }
  
  function update$2(state) {
    return _clearDirtyArray$1(reduceOneParam((function (state, dirtyIndex) {
                      return _updateTransform(dirtyIndex, state);
                    }), state, removeDuplicateItems(state[/* arcballCameraControllerRecord */26][/* dirtyArray */6])));
  }
  
  
  /* DirtyArrayService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  function _getBitFromFlags(gl, param, getBufferBitFunc, bit) {
    var match = param[1].includes(param[0]);
    if (match) {
      if (bit !== undefined) {
        return bit | _1(getBufferBitFunc, gl);
      } else {
        return _1(getBufferBitFunc, gl);
      }
    } else {
      return bit;
    }
  }
  
  function getBit(gl, flags) {
    var match = _getBitFromFlags(gl, /* tuple */[
          "STENCIL_BUFFER",
          flags
        ], (function (prim) {
            return prim.STENCIL_BUFFER_BIT;
          }), _getBitFromFlags(gl, /* tuple */[
              "DEPTH_BUFFER",
              flags
            ], (function (prim) {
                return prim.DEPTH_BUFFER_BIT;
              }), _getBitFromFlags(gl, /* tuple */[
                  "COLOR_BUFFER",
                  flags
                ], (function (prim) {
                    return prim.COLOR_BUFFER_BIT;
                  }), undefined)));
    if (match !== undefined) {
      return match;
    } else {
      return fatal(buildFatalMessage("_getBit", "should find bit", "", "", "flags:" + (String(flags) + "")));
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  function unsafeGetCopiedLocalToWorldMatrices(param) {
    return unsafeGet$2(param[/* copiedLocalToWorldMatrices */7]);
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  function getCurrentCameraGameObject(basicCameraViewRecord, param) {
    var currentCameraGameObject = param[/* currentCameraGameObject */0];
    if (currentCameraGameObject !== undefined) {
      return currentCameraGameObject;
    } else {
      return findFirstGameObject(basicCameraViewRecord);
    }
  }
  
  function setCurrentCameraGameObject(uid, record) {
    return /* record */[
            /* currentCameraGameObject */uid,
            /* ambientLight */record[/* ambientLight */1],
            /* sceneGameObject */record[/* sceneGameObject */2]
          ];
  }
  
  
  /* GameObjectBasicCameraViewService-Wonderjs Not a pure module */
  
  function getDefaultColor$2() {
    return /* array */[
            0,
            0,
            0
          ];
  }
  
  
  /* No side effect */
  
  function getRecord$18(state) {
    return unsafeGet$2(state[/* sceneRecord */13]);
  }
  
  function create$60(state) {
    var match = create$25(state);
    var newrecord = caml_array_dup(match[0]);
    newrecord[/* sceneRecord */13] = /* record */[
      /* currentCameraGameObject */undefined,
      /* ambientLight : record */[/* color */getDefaultColor$2(/* () */0)],
      /* sceneGameObject */match[1]
    ];
    return newrecord;
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function getCameraData(state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var basicCameraViewRecord = state[/* basicCameraViewRecord */14];
    var perspectiveCameraProjectionRecord = state[/* perspectiveCameraProjectionRecord */15];
    var globalTempRecord = state[/* globalTempRecord */36];
    var match = getCurrentCameraGameObject(basicCameraViewRecord, getRecord$18(state));
    if (match !== undefined) {
      var currentCameraGameObject = match;
      var transformRecord = getRecord(state);
      var transform = unsafeGetTransformComponent(currentCameraGameObject, gameObjectRecord);
      return /* record */[
              /* vMatrix */getWorldToCameraMatrix(updateAndGetLocalToWorldMatrixTypeArray(transform, globalTempRecord, transformRecord)),
              /* pMatrix */unsafeGetPMatrix(unsafeGetPerspectiveCameraProjectionComponent(currentCameraGameObject, gameObjectRecord), perspectiveCameraProjectionRecord[/* pMatrixMap */2]),
              /* position */updateAndGetPositionTuple(transform, globalTempRecord, transformRecord)
            ];
    }
    
  }
  
  
  /* PMatrixService-Wonderjs Not a pure module */
  
  function getCameraRecord(state) {
    return getRecord$12(state)[/* cameraRecord */2];
  }
  
  function setCameraRecord(cameraRecord, state) {
    getRecord$12(state)[/* cameraRecord */2] = cameraRecord;
    return state;
  }
  
  function getBasicRenderObjectRecord(state) {
    return getRecord$12(state)[/* basicRenderObjectRecord */0];
  }
  
  function getLightRenderObjectRecord(state) {
    return getRecord$12(state)[/* lightRenderObjectRecord */1];
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  var getSource$3 = get$3;
  
  var setSource = set$1;
  
  
  /* Log-WonderLog Not a pure module */
  
  /* most Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* most Not a pure module */
  
  /* Log-WonderLog Not a pure module */
  
  function drawElement(param, gl) {
    gl.drawElements(param[0], param[3], param[1], 0);
    return /* () */0;
  }
  
  function drawElementsInstancedANGLE(param, extension) {
    extension.drawElementsInstancedANGLE(param[0], param[3], param[1], 0, param[4]);
    return /* () */0;
  }
  
  
  /* No side effect */
  
  function getIndexType(gl) {
    return gl.UNSIGNED_SHORT;
  }
  
  function getIndexTypeSize() {
    return Uint16Array.BYTES_PER_ELEMENT;
  }
  
  
  /* No side effect */
  
  function use(gl, program, state) {
    var programRecord = state[/* programRecord */4];
    var match = programRecord[/* lastUsedProgram */1];
    var exit = 0;
    if (match !== undefined && program === valFromOption(match)) {
      return state;
    } else {
      exit = 1;
    }
    if (exit === 1) {
      programRecord[/* lastUsedProgram */1] = some(program);
      gl.useProgram(program);
      return state;
    }
    
  }
  
  
  /* No side effect */
  
  function getOrCreateBuffer$1(gl, param, param$1, state) {
    var bufferMap = param[1];
    var geometryIndex = param[0];
    var match = get$3(geometryIndex, bufferMap);
    if (match !== undefined) {
      return valFromOption(match);
    } else {
      var buffer = param$1[0](gl, param$1[1](geometryIndex, state), state);
      set$1(geometryIndex, buffer, bufferMap);
      return buffer;
    }
  }
  
  
  /* No side effect */
  
  function createBuffer$9(gl, record, state) {
    var buffer = getArrayBuffer(gl, state[/* vboBufferRecord */1]);
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    gl.bufferData(gl.ARRAY_BUFFER, record, gl.STATIC_DRAW);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
    return buffer;
  }
  
  function getOrCreateBuffer(gl, param, getDataFunc, state) {
    return getOrCreateBuffer$1(gl, /* tuple */[
                param[0],
                param[1]
              ], /* tuple */[
                createBuffer$9,
                getDataFunc
              ], state);
  }
  
  
  /* PoolVboBufferService-Wonderjs Not a pure module */
  
  function getGlDrawMode(gl, meshRenderer, state) {
    var match = getDrawMode(meshRenderer, state[/* meshRendererRecord */10][/* drawModes */0]);
    switch (match) {
      case 0 : 
          return gl.POINTS;
      case 1 : 
          return gl.LINES;
      case 2 : 
          return gl.LINE_LOOP;
      case 3 : 
          return gl.LINE_STRIP;
      case 4 : 
          return gl.TRIANGLES;
      case 5 : 
          return gl.TRIANGLE_STRIP;
      case 6 : 
          return gl.TRIANGLE_FAN;
      
    }
  }
  
  
  /* OperateTypeArrayMeshRendererService-Wonderjs Not a pure module */
  
  function createBuffer$10(gl, record, state) {
    var buffer = getElementArrayBuffer(gl, state[/* vboBufferRecord */1]);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, record, gl.STATIC_DRAW);
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
    return buffer;
  }
  
  function getOrCreateBuffer$2(gl, param, getDataFunc, state) {
    return getOrCreateBuffer$1(gl, /* tuple */[
                param[0],
                param[1]
              ], /* tuple */[
                createBuffer$10,
                getDataFunc
              ], state);
  }
  
  
  /* PoolVboBufferService-Wonderjs Not a pure module */
  
  function unsafeGetAttributeSendData(shaderIndex, glslSenderRecord) {
    return ensureCheck((function (sendData) {
                  return test(buildAssertMessage("attribute send record exist", "not"), (function () {
                                return assertNullableExist(sendData);
                              }));
                }), getIsDebug(stateData), unsafeGet$1(shaderIndex, glslSenderRecord[/* attributeSendDataMap */0]));
  }
  
  function unsafeGetInstanceAttributeSendData(shaderIndex, param) {
    return ensureCheck((function (sendData) {
                  return test(buildAssertMessage("instance attribute send record exist", "not"), (function () {
                                return assertNullableExist(sendData);
                              }));
                }), getIsDebug(stateData), unsafeGet$1(shaderIndex, param[/* instanceAttributeSendDataMap */1]));
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function _getOrCreateBuffer(buffer, param, param$1, state) {
    var match = param$1[1];
    var match$1 = param$1[0];
    var geometryIndex = param[1];
    var gl = param[0];
    var exit = 0;
    switch (buffer) {
      case 0 : 
          return getOrCreateBuffer(gl, /* tuple */[
                      geometryIndex,
                      match$1[0]
                    ], match[0], state);
      case 1 : 
          return getOrCreateBuffer(gl, /* tuple */[
                      geometryIndex,
                      match$1[2]
                    ], match[2], state);
      case 2 : 
          return getOrCreateBuffer(gl, /* tuple */[
                      geometryIndex,
                      match$1[1]
                    ], match[1], state);
      case 3 : 
          return getOrCreateBuffer$2(gl, /* tuple */[
                      geometryIndex,
                      match$1[3]
                    ], match[3], state);
      case 4 : 
      case 5 : 
          exit = 1;
          break;
      
    }
    if (exit === 1) {
      return fatal(buildFatalMessage("_sendAttributeData", "unknown buffer: " + (String(buffer) + ""), "", "", ""));
    }
    
  }
  
  function _directlySendAttributeData(gl, param, state) {
    var currentGeometryBufferMapAndGetPointsFuncsTuple = getCurrentGeometryBufferMapAndGetPointsFuncs(param[2], state[/* vboBufferRecord */1]);
    var dataTuple_001 = param[1];
    var dataTuple = /* tuple */[
      gl,
      dataTuple_001
    ];
    return reduceOneParam((function (state, param) {
                  var arrayBuffer = _getOrCreateBuffer(param[/* buffer */2], dataTuple, currentGeometryBufferMapAndGetPointsFuncsTuple, state);
                  return param[/* sendFunc */3](gl, /* tuple */[
                              param[/* size */1],
                              param[/* pos */0]
                            ], arrayBuffer, state);
                }), state, unsafeGetAttributeSendData(param[0], state[/* glslSenderRecord */3]));
  }
  
  function _sendAttributeData(gl, indexTuple, state) {
    var geometryType = indexTuple[2];
    var geometryIndex = indexTuple[1];
    var record = state[/* glslSenderRecord */3];
    var lastSendGeometryData = record[/* lastSendGeometryData */11];
    var exit = 0;
    if (lastSendGeometryData !== undefined) {
      var match = lastSendGeometryData;
      if (match[0] === geometryIndex && match[1] === geometryType) {
        return state;
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      record[/* lastSendGeometryData */11] = /* tuple */[
        geometryIndex,
        geometryType
      ];
      return _directlySendAttributeData(gl, indexTuple, state);
    }
    
  }
  
  function _sendUniformRenderObjectModelData(gl, shaderIndex, transformIndex, state) {
    return reduceOneParam((function (state, param) {
                  var pos = param[/* pos */0];
                  var match = isUniformLocationExist(pos);
                  if (match) {
                    param[/* sendDataFunc */2](gl, pos, param[/* getDataFunc */1](transformIndex, state));
                  }
                  return state;
                }), state, unsafeGetUniformSendData(shaderIndex, state[/* glslSenderRecord */3]));
  }
  
  function _sendUniformRenderObjectMaterialData(gl, shaderIndex, materialIndex, state) {
    return reduceOneParam((function (state, param) {
                  param[/* sendDataFunc */4](gl, param[/* shaderCacheMap */0], /* tuple */[
                        param[/* name */1],
                        param[/* pos */2]
                      ], param[/* getDataFunc */3](materialIndex, state));
                  return state;
                }), state, unsafeGetUniformSendData$5(shaderIndex, state[/* glslSenderRecord */3]));
  }
  
  function render$7(gl, param, bindAndUpdateFunc, state) {
    var shaderIndex = param[2];
    var materialIndex = param[1];
    var program = unsafeGetProgram(shaderIndex, state[/* programRecord */4]);
    var state$1 = _sendUniformRenderObjectModelData(gl, shaderIndex, param[0], _sendAttributeData(gl, /* tuple */[
              shaderIndex,
              param[4],
              param[5]
            ], use(gl, program, state)));
    var record = state$1[/* glslSenderRecord */3];
    var lastSendMaterialData = record[/* lastSendMaterialData */10];
    var exit = 0;
    if (lastSendMaterialData !== undefined) {
      var match = lastSendMaterialData;
      if (match[0] === materialIndex && match[1] === shaderIndex) {
        return state$1;
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      record[/* lastSendMaterialData */10] = /* tuple */[
        materialIndex,
        shaderIndex
      ];
      var state$2 = _sendUniformRenderObjectMaterialData(gl, shaderIndex, materialIndex, state$1);
      return bindAndUpdateFunc(gl, materialIndex, state$2);
    }
    
  }
  
  function draw$4(gl, meshRendererIndex, geometryIndex, geometryType, state) {
    var getIndicesCountFunc = getGetIndicesCountFunc(geometryType);
    return drawElement(/* tuple */[
                getGlDrawMode(gl, meshRendererIndex, state),
                getIndexType(gl),
                getIndexTypeSize(gl),
                getIndicesCountFunc(geometryIndex, state)
              ], gl);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function isCached(unit, texture, bindTextureUnitCacheMap) {
    var match = get$3(unit, bindTextureUnitCacheMap);
    if (match !== undefined) {
      return valFromOption(match) === texture;
    } else {
      return false;
    }
  }
  
  function addActiveTexture(unit, texture, bindTextureUnitCacheMap) {
    requireCheck((function () {
            return test(buildAssertMessage("not cached", ""), (function () {
                          return assertFalse(isCached(unit, texture, bindTextureUnitCacheMap));
                        }));
          }), getIsDebug(stateData));
    return set$1(unit, texture, bindTextureUnitCacheMap);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function _bind(gl, unit, texture, dataTuple) {
    var glTextureMap = dataTuple[1];
    var bindTextureUnitCacheMap = dataTuple[0];
    requireCheck((function () {
            return test(buildAssertMessage("unit should >= 0", "is " + (String(unit) + "")), (function () {
                          return Operators[/* >= */7](unit, 0);
                        }));
          }), getIsDebug(stateData));
    var match = getTexture(texture, glTextureMap);
    if (match !== undefined) {
      var match$1 = isCached(unit, texture, bindTextureUnitCacheMap);
      if (match$1) {
        return dataTuple;
      } else {
        var bindTextureUnitCacheMap$1 = addActiveTexture(unit, texture, bindTextureUnitCacheMap);
        var target = gl.TEXTURE_2D;
        gl.activeTexture(gl.TEXTURE0 + unit | 0);
        gl.bindTexture(target, valFromOption(match));
        return /* tuple */[
                bindTextureUnitCacheMap$1,
                glTextureMap
              ];
      }
    } else {
      return dataTuple;
    }
  }
  
  function _bindBasicSourceTexture(basicSourceTextureInTypeArray, param) {
    var state = param[2];
    var basicSourceTextureRecord = state[/* basicSourceTextureRecord */11];
    _bind(param[0], param[1], basicSourceTextureInTypeArray, /* tuple */[
          basicSourceTextureRecord[/* bindTextureUnitCacheMap */10],
          basicSourceTextureRecord[/* glTextureMap */9]
        ]);
    return state;
  }
  
  function _bindArrayBufferViewSourceTexture(arrayBufferViewTextureInTypeArray, param) {
    var state = param[2];
    var arrayBufferViewSourceTextureRecord = state[/* arrayBufferViewSourceTextureRecord */12];
    _bind(param[0], param[1], arrayBufferViewTextureInTypeArray, /* tuple */[
          arrayBufferViewSourceTextureRecord[/* bindTextureUnitCacheMap */12],
          arrayBufferViewSourceTextureRecord[/* glTextureMap */11]
        ]);
    return state;
  }
  
  function bind$4(gl, unit, texture, state) {
    requireCheck((function () {
            return test(buildAssertMessage("unit should >= 0", "is " + (String(unit) + "")), (function () {
                          return Operators[/* >= */7](unit, 0);
                        }));
          }), getIsDebug(stateData));
    return handleByJudgeSourceTextureIndex(texture, state[/* arrayBufferViewSourceTextureRecord */12][/* textureIndexOffset */14], /* tuple */[
                gl,
                unit,
                state
              ], /* tuple */[
                _bindBasicSourceTexture,
                _bindArrayBufferViewSourceTexture
              ]);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function getWidth$1(source) {
    return source.width;
  }
  
  function getHeight$1(source) {
    return source.height;
  }
  
  
  /* No side effect */
  
  function getGlWrap(gl, wrap) {
    switch (wrap) {
      case 0 : 
          return gl.CLAMP_TO_EDGE;
      case 1 : 
          return gl.MIRRORED_REPEAT;
      case 2 : 
          return gl.REPEAT;
      
    }
  }
  
  
  /* No side effect */
  
  function getGlFormat(gl, format) {
    switch (format) {
      case 0 : 
          return gl.RGB;
      case 1 : 
          return gl.RGBA;
      case 2 : 
          return gl.ALPHA;
      case 3 : 
          return gl.LUMINANCE;
      case 4 : 
          return gl.LUMINANCE_ALPHA;
      case 5 : 
          return gl.RGB_S3TC_DXT1;
      case 6 : 
          return gl.RGBA_S3TC_DXT1;
      case 7 : 
          return gl.RGBA_S3TC_DXT3;
      case 8 : 
          return gl.RGBA_S3TC_DXT5;
      
    }
  }
  
  
  /* No side effect */
  
  function getGlFilter(gl, filter) {
    switch (filter) {
      case 0 : 
          return gl.NEAREST;
      case 1 : 
          return gl.LINEAR;
      case 2 : 
          return gl.NEAREST_MIPMAP_NEAREST;
      case 3 : 
          return gl.LINEAR_MIPMAP_NEAREST;
      case 4 : 
          return gl.NEAREST_MIPMAP_LINEAR;
      case 5 : 
          return gl.LINEAR_MIPMAP_LINEAR;
      
    }
  }
  
  
  /* No side effect */
  
  function setIsNeedUpdate$2(index, data, typeArr) {
    return setUint8_1(getIsNeedUpdateIndex(index), data, typeArr);
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function _isPowerOfTwo(value) {
    if ((value & (value - 1 | 0)) === 0 && value !== 0) {
      return value !== 1;
    } else {
      return false;
    }
  }
  
  function _isSourcePowerOfTwo(width, height) {
    if (_isPowerOfTwo(width)) {
      return _isPowerOfTwo(height);
    } else {
      return false;
    }
  }
  
  function _filterFallback(filter, gl) {
    switch (filter) {
      case 0 : 
      case 2 : 
      case 4 : 
          return gl.NEAREST;
      case 1 : 
      case 3 : 
      case 5 : 
          return gl.LINEAR;
      
    }
  }
  
  function _setTextureParameters(gl, target, isSourcePowerOfTwo, param) {
    var minFilter = param[3];
    var magFilter = param[2];
    if (isSourcePowerOfTwo) {
      gl.texParameteri(target, gl.TEXTURE_WRAP_S, param[0]);
      gl.texParameteri(target, gl.TEXTURE_WRAP_T, param[1]);
      gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, getGlFilter(gl, magFilter));
      gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, getGlFilter(gl, minFilter));
      return /* () */0;
    } else {
      gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
      gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
      gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, _filterFallback(magFilter, gl));
      gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, _filterFallback(minFilter, gl));
      return /* () */0;
    }
  }
  
  function _isFilterMipmaps(filter) {
    return filter >= 2;
  }
  
  function update$4(param, param$1, param$2, param$3) {
    var target = param$1[9];
    var minFilter = param$1[5];
    var magFilter = param$1[4];
    var gl = param[0];
    var isSourcePowerOfTwo = _isSourcePowerOfTwo(param$1[0], param$1[1]);
    _3(param$3[1], gl, param$1[8], param$2[1]);
    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);
    _setTextureParameters(gl, target, isSourcePowerOfTwo, /* tuple */[
          param$1[2],
          param$1[3],
          magFilter,
          minFilter
        ]);
    _3(param$3[0], gl, /* tuple */[
          target,
          param$1[6],
          param$1[7]
        ], param[2]);
    var match = isSourcePowerOfTwo && (_isFilterMipmaps(magFilter) || _isFilterMipmaps(minFilter));
    if (match) {
      gl.generateMipmap(target);
    }
    setIsNeedUpdate$2(param[1], getNotNeedUpdate(/* () */0), param$2[0]);
    return /* () */0;
  }
  
  function isNeedUpdate$1(textureInTypeArray, _, isNeedUpdates, getIsNeedUpdateFunc) {
    return getIsNeedUpdateFunc(textureInTypeArray, isNeedUpdates) === getDefaultIsNeedUpdate(/* () */0);
  }
  
  
  /* BufferSourceTextureService-Wonderjs Not a pure module */
  
  function _drawTexture(gl, param) {
    var glFormat = param[3];
    gl.texImage2D(param[0], param[1], glFormat, glFormat, param[4], param[2]);
    return /* () */0;
  }
  
  function _drawNoMipmapTwoDTexture(gl, param, source) {
    return _drawTexture(gl, /* tuple */[
                param[0],
                0,
                source,
                param[1],
                param[2]
              ]);
  }
  
  var _allocateSourceToTexture = _drawNoMipmapTwoDTexture;
  
  function update$3(gl, textureInTypeArray, param) {
    var basicSourceTextureRecord = param[0];
    var browserDetectRecord = param[1];
    var match = getSource$3(textureInTypeArray, basicSourceTextureRecord[/* sourceMap */8]);
    if (match !== undefined) {
      var source = valFromOption(match);
      var width = getWidth$1(source);
      var height = getHeight$1(source);
      var glWrapS = getGlWrap(gl, getWrapS(textureInTypeArray, basicSourceTextureRecord[/* wrapSs */0]));
      var glWrapT = getGlWrap(gl, getWrapT(textureInTypeArray, basicSourceTextureRecord[/* wrapTs */1]));
      var magFilter = getMagFilter(textureInTypeArray, basicSourceTextureRecord[/* magFilters */2]);
      var minFilter = getMinFilter(textureInTypeArray, basicSourceTextureRecord[/* minFilters */3]);
      var glFormat = getGlFormat(gl, getFormat(textureInTypeArray, basicSourceTextureRecord[/* formats */4]));
      var glType = getGlType(gl, getType(textureInTypeArray, basicSourceTextureRecord[/* types */5]));
      var flipY = isFlipY(textureInTypeArray, basicSourceTextureRecord[/* flipYs */7]);
      var target = gl.TEXTURE_2D;
      update$4(/* tuple */[
            gl,
            textureInTypeArray,
            source
          ], /* tuple */[
            width,
            height,
            glWrapS,
            glWrapT,
            magFilter,
            minFilter,
            glFormat,
            glType,
            flipY,
            target
          ], /* tuple */[
            basicSourceTextureRecord[/* isNeedUpdates */6],
            browserDetectRecord
          ], /* tuple */[
            _allocateSourceToTexture,
            basicSourceTextureRecord[/* setFlipYFunc */11]
          ]);
      return /* tuple */[
              basicSourceTextureRecord,
              browserDetectRecord
            ];
    } else {
      return /* tuple */[
              basicSourceTextureRecord,
              browserDetectRecord
            ];
    }
  }
  
  function isNeedUpdate(textureInTypeArray, basicSourceTextureRecord) {
    return isNeedUpdate$1(textureInTypeArray, getDefaultIsNeedUpdate$1(/* () */0), basicSourceTextureRecord[/* isNeedUpdates */6], getIsNeedUpdate);
  }
  
  
  /* TextureSourceMapService-Wonderjs Not a pure module */
  
  function _drawTexture$1(gl, param, param$1) {
    var height = param$1[1];
    var width = param$1[0];
    var glFormat = param[3];
    requireCheck((function () {
            return test(buildAssertMessage("width/height shouldn\'t be 0", "width is " + (String(width) + ("; height is " + (String(height) + "")))), (function () {
                          Operators[/* <>= */3](width, 0);
                          return Operators[/* <>= */3](height, 0);
                        }));
          }), getIsDebug(stateData));
    gl.texImage2D(param[0], param[1], glFormat, width, height, 0, glFormat, param[4], param[2]);
    return /* () */0;
  }
  
  function _drawNoMipmapTwoDTexture$1(gl, param, sizeTuple, source) {
    return _drawTexture$1(gl, /* tuple */[
                param[0],
                0,
                source,
                param[1],
                param[2]
              ], sizeTuple);
  }
  
  function _allocateSourceToTexture$1(sizeTuple, gl, paramTuple, source) {
    return _drawNoMipmapTwoDTexture$1(gl, paramTuple, sizeTuple, source);
  }
  
  function update$5(gl, textureInTypeArray, param) {
    var arrayBufferViewSourceTextureRecord = param[0];
    var browserDetectRecord = param[1];
    var match = getSource$3(textureInTypeArray, arrayBufferViewSourceTextureRecord[/* sourceMap */10]);
    if (match !== undefined) {
      var width = getWidth(textureInTypeArray, arrayBufferViewSourceTextureRecord[/* widths */8]);
      var height = getHeight(textureInTypeArray, arrayBufferViewSourceTextureRecord[/* heights */9]);
      var glWrapS = getGlWrap(gl, getWrapS$1(textureInTypeArray, arrayBufferViewSourceTextureRecord[/* wrapSs */0]));
      var glWrapT = getGlWrap(gl, getWrapT$1(textureInTypeArray, arrayBufferViewSourceTextureRecord[/* wrapTs */1]));
      var magFilter = getMagFilter$1(textureInTypeArray, arrayBufferViewSourceTextureRecord[/* magFilters */2]);
      var minFilter = getMinFilter$1(textureInTypeArray, arrayBufferViewSourceTextureRecord[/* minFilters */3]);
      var glFormat = getGlFormat(gl, getFormat$1(textureInTypeArray, arrayBufferViewSourceTextureRecord[/* formats */4]));
      var glType = getGlType(gl, getType$1(textureInTypeArray, arrayBufferViewSourceTextureRecord[/* types */5]));
      var flipY = isFlipY$1(textureInTypeArray, arrayBufferViewSourceTextureRecord[/* flipYs */7]);
      var target = gl.TEXTURE_2D;
      var partial_arg = /* tuple */[
        width,
        height
      ];
      update$4(/* tuple */[
            gl,
            textureInTypeArray,
            valFromOption(match)
          ], /* tuple */[
            width,
            height,
            glWrapS,
            glWrapT,
            magFilter,
            minFilter,
            glFormat,
            glType,
            flipY,
            target
          ], /* tuple */[
            arrayBufferViewSourceTextureRecord[/* isNeedUpdates */6],
            browserDetectRecord
          ], /* tuple */[
            (function (param, param$1, param$2) {
                return _allocateSourceToTexture$1(partial_arg, param, param$1, param$2);
              }),
            arrayBufferViewSourceTextureRecord[/* setFlipYFunc */13]
          ]);
      return /* tuple */[
              arrayBufferViewSourceTextureRecord,
              browserDetectRecord
            ];
    } else {
      return /* tuple */[
              arrayBufferViewSourceTextureRecord,
              browserDetectRecord
            ];
    }
  }
  
  function isNeedUpdate$2(textureInTypeArray, arrayBufferViewSourceTextureRecord) {
    return isNeedUpdate$1(textureInTypeArray, getDefaultIsNeedUpdate$2(/* () */0), arrayBufferViewSourceTextureRecord[/* isNeedUpdates */6], getIsNeedUpdate$1);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function _handleUpdateBasicSourceTexture(basicSourceTextureInTypeArray, param) {
    var state = param[1];
    var browserDetectRecord = state[/* browserDetectRecord */23];
    var basicSourceTextureRecord = state[/* basicSourceTextureRecord */11];
    var match = isNeedUpdate(basicSourceTextureInTypeArray, basicSourceTextureRecord);
    if (match) {
      update$3(param[0], basicSourceTextureInTypeArray, /* tuple */[
            basicSourceTextureRecord,
            browserDetectRecord
          ]);
    } else {
      /* tuple */
    }
    return state;
  }
  
  function _handleUpdateArrayBufferViewSourceTexture(arrayBufferViewTextureInTypeArray, param) {
    var state = param[1];
    var browserDetectRecord = state[/* browserDetectRecord */23];
    var arrayBufferViewSourceTextureRecord = state[/* arrayBufferViewSourceTextureRecord */12];
    var match = isNeedUpdate$2(arrayBufferViewTextureInTypeArray, arrayBufferViewSourceTextureRecord);
    if (match) {
      update$5(param[0], arrayBufferViewTextureInTypeArray, /* tuple */[
            arrayBufferViewSourceTextureRecord,
            browserDetectRecord
          ]);
    } else {
      /* tuple */
    }
    return state;
  }
  
  function handleUpdate(gl, texture, state) {
    return handleByJudgeSourceTextureIndex(texture, state[/* arrayBufferViewSourceTextureRecord */12][/* textureIndexOffset */14], /* tuple */[
                gl,
                state
              ], /* tuple */[
                _handleUpdateBasicSourceTexture,
                _handleUpdateArrayBufferViewSourceTexture
              ]);
  }
  
  
  /* IndexSourceTextureService-Wonderjs Not a pure module */
  
  function unsafeGetGPU$1(param) {
    return unsafeGet$2(param[/* gpu */0]);
  }
  
  function unsafeGetObjectInstanceCountPerSourceInstance(param) {
    return unsafeGet$2(param[/* instanceBuffer */1])[/* objectInstanceCountPerSourceInstance */0];
  }
  
  function getTextureCountPerMaterial$2(param) {
    return unsafeGet$2(param[/* textureCountPerMaterial */2]);
  }
  
  
  /* OptionService-Wonderjs Not a pure module */
  
  function getTextureIndex$3(material, mapUnit, getTextureIndexFunc, param) {
    return getTextureIndexFunc(/* tuple */[
                material,
                mapUnit,
                getTextureCountPerMaterial$2(param[1])
              ], param[0]);
  }
  
  function bindAndUpdate$1(param, getTextureIndexFunc, stateDataTuple) {
    var settingRecord = stateDataTuple[1];
    var textureIndices = stateDataTuple[0];
    var mapUnit = param[2];
    var gl = param[0];
    var match = hasMap(mapUnit);
    if (match) {
      var texture = getTextureIndex$3(param[1], mapUnit, getTextureIndexFunc, /* tuple */[
            textureIndices,
            settingRecord
          ]);
      var state = bind$4(gl, mapUnit, texture, stateDataTuple[2]);
      return /* tuple */[
              textureIndices,
              settingRecord,
              handleUpdate(gl, texture, state)
            ];
    } else {
      return stateDataTuple;
    }
  }
  
  
  /* BindTextureRenderService-Wonderjs Not a pure module */
  
  function bindAndUpdate(gl, material, state) {
    var basicMaterialRecord = state[/* basicMaterialRecord */8];
    var mapUnit = getMapUnit$1(material, basicMaterialRecord[/* mapUnits */3]);
    return bindAndUpdate$1(/* tuple */[
                  gl,
                  material,
                  mapUnit
                ], getTextureIndex, /* tuple */[
                  basicMaterialRecord[/* textureIndices */2],
                  state[/* settingRecord */21],
                  state
                ])[2];
  }
  
  
  /* OperateTypeArrayBasicMaterialService-Wonderjs Not a pure module */
  
  function render$8(gl, indexTuple, state) {
    return render$7(gl, indexTuple, bindAndUpdate, state);
  }
  
  
  /* RenderJobUtils-Wonderjs Not a pure module */
  
  function getShaderIndex$2(materialIndex, getShaderIndexFunc, renderState) {
    return ensureCheck((function (shaderIndex) {
                  return test(buildAssertMessage("shaderIndex should exist", "not"), (function () {
                                return Operators[/* <>= */3](shaderIndex, getDefaultShaderIndex(/* () */0));
                              }));
                }), getIsDebug(stateData), getShaderIndexFunc(materialIndex, renderState));
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function isSupportInstance$2(state) {
    return isSupportInstance$1(unsafeGetGPU$1(state[/* settingRecord */21])[/* useHardwareInstance */0], state[/* gpuDetectRecord */17]);
  }
  
  
  /* JudgeInstanceService-Wonderjs Not a pure module */
  
  function build(sourceInstance, state) {
    var match = state[/* sourceInstanceRecord */16];
    var objectInstanceTransformIndex = getObjectInstanceTransformIndex$1(sourceInstance, match[/* objectInstanceTransformIndexMap */0]);
    return /* tuple */[
            objectInstanceTransformIndex,
            /* tuple */[
              sourceInstance,
              unsafeGetObjectInstanceCountPerSourceInstance(state[/* settingRecord */21]),
              objectInstanceTransformIndex,
              match[/* objectInstanceTransformCollections */1]
            ]
          ];
  }
  
  
  /* OperateRenderSettingService-Wonderjs Not a pure module */
  
  function render$11(gl, indexTuple, renderFunc, state) {
    var geometryType = indexTuple[5];
    var geometryIndex = indexTuple[4];
    var meshRendererIndex = indexTuple[3];
    var shaderIndex = indexTuple[2];
    var state$1 = renderFunc(gl, /* tuple */[
          indexTuple[0],
          indexTuple[1],
          shaderIndex,
          meshRendererIndex,
          geometryIndex,
          geometryType
        ], state);
    draw$4(gl, meshRendererIndex, geometryIndex, geometryType, state$1);
    var uniformRenderObjectSendModelData = unsafeGetUniformSendData(shaderIndex, state$1[/* glslSenderRecord */3]);
    var drawMode = getGlDrawMode(gl, meshRendererIndex, state$1);
    var indexType = getIndexType(gl);
    var indexTypeSize = getIndexTypeSize(gl);
    var getIndicesCountFunc = getGetIndicesCountFunc(geometryType);
    var indicesCount = getIndicesCountFunc(geometryIndex, state$1);
    var match = build(indexTuple[6], state$1);
    return reduceObjectInstanceTransformCollection(match[1], state$1, (function (state, objectInstanceTransform) {
                  var state$1 = reduceOneParam((function (state, param) {
                          var pos = param[/* pos */0];
                          var match = isUniformLocationExist(pos);
                          if (match) {
                            param[/* sendDataFunc */2](gl, pos, param[/* getDataFunc */1](objectInstanceTransform, state));
                          }
                          return state;
                        }), state, uniformRenderObjectSendModelData);
                  drawElement(/* tuple */[
                        drawMode,
                        indexType,
                        indexTypeSize,
                        indicesCount
                      ], gl);
                  return state$1;
                }));
  }
  
  
  /* RenderJobUtils-Wonderjs Not a pure module */
  
  function render$10(gl, indexTuple, state) {
    return render$11(gl, indexTuple, render$8, state);
  }
  
  
  /* RenderBasicJobCommon-Wonderjs Not a pure module */
  
  function createBuffer$11(gl, capacity, state) {
    var buffer = getInstanceBuffer(gl, state[/* vboBufferRecord */1]);
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    gl.bufferData(gl.ARRAY_BUFFER, capacity, gl.DYNAMIC_DRAW);
    return buffer;
  }
  
  function _getFloat32InstanceArraySize(capacity) {
    requireCheck((function () {
            return test(buildAssertMessage("capacity should be a multiplier of 4", "is " + (String(capacity) + "")), (function () {
                          return Operators[/* = */0](capacity % 4, 0);
                        }));
          }), getIsDebug(stateData));
    return capacity / 4 | 0;
  }
  
  function _getCapacity(sourceInstance, defaultCapacity, capacityMap) {
    var match = get$3(sourceInstance, capacityMap);
    if (match !== undefined) {
      return valFromOption(match);
    } else {
      return defaultCapacity;
    }
  }
  
  function _setCapacity(sourceInstance, capacity, capacityMap) {
    set$1(sourceInstance, capacity, capacityMap);
    return capacityMap;
  }
  
  function getOrCreateBuffer$3(param, param$1, state) {
    var bufferMap = param$1[1];
    var sourceInstance = param[1];
    var match = get$3(sourceInstance, bufferMap);
    if (match !== undefined) {
      return valFromOption(match);
    } else {
      var buffer = createBuffer$11(param[0], _getCapacity(sourceInstance, param[2], param$1[0]), state);
      set$1(sourceInstance, buffer, bufferMap);
      return buffer;
    }
  }
  
  function getOrCreateMatrixFloat32Array(sourceInstance, defaultCapacity, param, state) {
    var matrixFloat32ArrayMap = param[1];
    var capacity = _getCapacity(sourceInstance, defaultCapacity, param[0]);
    var match = get$3(sourceInstance, matrixFloat32ArrayMap);
    if (match !== undefined) {
      return valFromOption(match);
    } else {
      var match$1 = getFloat32TypeArrayFromPool(_getFloat32InstanceArraySize(capacity), state[/* typeArrayPoolRecord */2]);
      if (match$1 !== undefined) {
        return valFromOption(match$1);
      } else {
        var typeArr = new Float32Array(_getFloat32InstanceArraySize(capacity));
        set$1(sourceInstance, typeArr, matrixFloat32ArrayMap);
        return typeArr;
      }
    }
  }
  
  function setCapacityAndUpdateBufferTypeArray(param, param$1, param$2, state) {
    var capacityMap = param$2[2];
    var buffer = param$1[0];
    var capacity = param[2];
    var sourceInstance = param[1];
    var gl = param[0];
    var currentCapacity = _getCapacity(sourceInstance, param[3], capacityMap);
    var needIncreaseCapacity = false;
    while(currentCapacity < capacity) {
      currentCapacity = (currentCapacity << 1);
      needIncreaseCapacity = true;
    }
    if (needIncreaseCapacity) {
      _setCapacity(sourceInstance, currentCapacity, capacityMap);
      gl.deleteBuffer(buffer);
      var buffer$1 = createBuffer$11(gl, currentCapacity, state);
      set$1(sourceInstance, buffer$1, param$2[0]);
      var matrixFloat32Array = new Float32Array(_getFloat32InstanceArraySize(currentCapacity));
      set$1(sourceInstance, matrixFloat32Array, param$2[1]);
      return /* tuple */[
              buffer$1,
              matrixFloat32Array
            ];
    } else {
      return /* tuple */[
              buffer,
              param$1[1]
            ];
    }
  }
  
  function updateData(gl, data, buffer) {
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    gl.bufferSubData(gl.ARRAY_BUFFER, 0, data);
    return buffer;
  }
  
  function bind$5(gl, buffer) {
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    return buffer;
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  var markIsSendTransformMatrixData$1 = set$1;
  
  function isSendTransformMatrixData(sourceInstance, isSendTransformMatrixDataMap) {
    var match = get$3(sourceInstance, isSendTransformMatrixDataMap);
    if (match !== undefined) {
      return match;
    } else {
      return false;
    }
  }
  
  
  /* No side effect */
  
  function isTransformStatic$1(sourceInstance, param) {
    return isTransformStatic(sourceInstance, param[/* isTransformStatics */2]);
  }
  
  function markIsSendTransformMatrixData(sourceInstance, isSend, record) {
    return /* record */[
            /* objectInstanceTransformIndexMap */record[/* objectInstanceTransformIndexMap */0],
            /* objectInstanceTransformCollections */record[/* objectInstanceTransformCollections */1],
            /* isTransformStatics */record[/* isTransformStatics */2],
            /* matrixInstanceBufferCapacityMap */record[/* matrixInstanceBufferCapacityMap */3],
            /* matrixFloat32ArrayMap */record[/* matrixFloat32ArrayMap */4],
            /* isSendTransformMatrixDataMap */markIsSendTransformMatrixData$1(sourceInstance, isSend, record[/* isSendTransformMatrixDataMap */5])
          ];
  }
  
  
  /* StaticTransformService-Wonderjs Not a pure module */
  
  function _fillObjectInstanceData(objectInstanceTransformDataTuple, matricesArrayForInstance, fillMatrixTypeArrFunc, stateOffsetTuple) {
    return reduceObjectInstanceTransformCollection(objectInstanceTransformDataTuple, stateOffsetTuple, (function (stateOffsetTuple, objectInstanceTransform) {
                    return fillMatrixTypeArrFunc(objectInstanceTransform, matricesArrayForInstance, stateOffsetTuple);
                  }))[0];
  }
  
  function _sendTransformMatrixDataBuffer(param, param$1, state) {
    var match = param$1[0];
    var pos = match[/* pos */0];
    var gl = param[0];
    gl.vertexAttribPointer(pos, match[/* size */1], gl.FLOAT, false, param$1[1], match[/* getOffsetFunc */2](param$1[2]));
    param[1].vertexAttribDivisorANGLE(pos, 1);
    enableVertexAttribArray(gl, pos, state[/* glslSenderRecord */3][/* vertexAttribHistoryArray */9]);
    return state;
  }
  
  function _sendTransformMatrixDataBufferData(glDataTuple, shaderIndex, stride, state) {
    return reduceOneParami((function (state, sendData, index) {
                  return _sendTransformMatrixDataBuffer(glDataTuple, /* tuple */[
                              sendData,
                              stride,
                              index
                            ], state);
                }), state, unsafeGetInstanceAttributeSendData(shaderIndex, state[/* glslSenderRecord */3]));
  }
  
  function _updateAndSendTransformMatrixDataBufferData(glDataTuple, shaderIndex, param, state) {
    updateData(glDataTuple[0], param[1], param[2]);
    return _sendTransformMatrixDataBufferData(glDataTuple, shaderIndex, param[0], state);
  }
  
  function _sendTransformMatrixData(param, param$1, fillMatrixTypeArrFunc, state) {
    var match = param$1[2];
    var matrixFloat32ArrayMap = match[2];
    var matrixInstanceBufferMap = match[1];
    var matrixInstanceBufferCapacityMap = match[0];
    var match$1 = param$1[1];
    var defaultCapacity = match$1[0];
    var match$2 = param$1[0];
    var gl = match$2[0];
    var sourceInstance = param[1];
    var matrixInstanceBuffer = getOrCreateBuffer$3(/* tuple */[
          gl,
          sourceInstance,
          defaultCapacity
        ], /* tuple */[
          matrixInstanceBufferCapacityMap,
          matrixInstanceBufferMap
        ], state);
    var matricesArrayForInstance = getOrCreateMatrixFloat32Array(sourceInstance, defaultCapacity, /* tuple */[
          matrixInstanceBufferCapacityMap,
          matrixFloat32ArrayMap
        ], state);
    var match$3 = setCapacityAndUpdateBufferTypeArray(/* tuple */[
          gl,
          sourceInstance,
          imul(match$1[4], match$1[1]),
          defaultCapacity
        ], /* tuple */[
          matrixInstanceBuffer,
          matricesArrayForInstance
        ], /* tuple */[
          matrixInstanceBufferMap,
          matrixFloat32ArrayMap,
          matrixInstanceBufferCapacityMap
        ], state);
    var matricesArrayForInstance$1 = match$3[1];
    return _updateAndSendTransformMatrixDataBufferData(/* tuple */[
                gl,
                match$2[1]
              ], match$2[2], /* tuple */[
                match$1[2],
                matricesArrayForInstance$1,
                match$3[0]
              ], _fillObjectInstanceData(match$1[3], matricesArrayForInstance$1, fillMatrixTypeArrFunc, fillMatrixTypeArrFunc(param[0], matricesArrayForInstance$1, /* tuple */[
                        state,
                        0
                      ])));
  }
  
  function _sendStaticTransformMatrixData(componentTuple, dataTuple, fillMatrixTypeArrFunc, state) {
    var match = dataTuple[2];
    var match$1 = dataTuple[1];
    var match$2 = dataTuple[0];
    var gl = match$2[0];
    var sourceInstance = componentTuple[1];
    var match$3 = isSendTransformMatrixData(sourceInstance, state[/* sourceInstanceRecord */16][/* isSendTransformMatrixDataMap */5]);
    if (match$3) {
      bind$5(gl, getOrCreateBuffer$3(/* tuple */[
                gl,
                sourceInstance,
                match$1[0]
              ], /* tuple */[
                match[0],
                match[1]
              ], state));
      return _sendTransformMatrixDataBufferData(/* tuple */[
                  gl,
                  match$2[1]
                ], match$2[2], match$1[2], state);
    } else {
      var state$1 = _sendTransformMatrixData(componentTuple, dataTuple, fillMatrixTypeArrFunc, state);
      var newrecord = caml_array_dup(state$1);
      newrecord[/* sourceInstanceRecord */16] = markIsSendTransformMatrixData(sourceInstance, true, state$1[/* sourceInstanceRecord */16]);
      return newrecord;
    }
  }
  
  function _sendDynamicTransformMatrixData(componentTuple, dataTuple, fillMatrixTypeArrFunc, state) {
    var newrecord = caml_array_dup(state);
    return _sendTransformMatrixData(componentTuple, dataTuple, fillMatrixTypeArrFunc, (newrecord[/* sourceInstanceRecord */16] = markIsSendTransformMatrixData(componentTuple[1], false, state[/* sourceInstanceRecord */16]), newrecord));
  }
  
  function _geMatrixMapTuple(state) {
    var match = state[/* vboBufferRecord */1];
    var match$1 = state[/* sourceInstanceRecord */16];
    return /* tuple */[
            match$1[/* matrixInstanceBufferCapacityMap */3],
            match[/* matrixInstanceBufferMap */8],
            match$1[/* matrixFloat32ArrayMap */4]
          ];
  }
  
  function _renderSourceInstanceGameObject(gl, indexTuple, renderFunc, state) {
    return renderFunc(gl, indexTuple, state);
  }
  
  function _prepareData(gl, shaderIndex, param, state) {
    var extension = unsafeGetInstanceExtension(state[/* gpuDetectRecord */17]);
    var match = build(param[0], state);
    var instanceRenderListCount = getObjectInstanceTransformCount(match[0]) + 1 | 0;
    return /* tuple */[
            /* tuple */[
              gl,
              extension,
              shaderIndex
            ],
            /* tuple */[
              param[1],
              param[2],
              param[3],
              match[1],
              instanceRenderListCount
            ],
            _geMatrixMapTuple(state)
          ];
  }
  
  function _unbind(shaderIndex, extension, state) {
    forEach((function (param) {
            extension.vertexAttribDivisorANGLE(param[/* pos */0], 0);
            return /* () */0;
          }), unsafeGetInstanceAttributeSendData(shaderIndex, state[/* glslSenderRecord */3]));
    return state;
  }
  
  function render$13(gl, param, param$1, state) {
    var fillMatrixTypeArrFunc = param$1[1];
    var indexTuple = param[0];
    var sourceInstance = indexTuple[6];
    var geometryType = indexTuple[5];
    var geometryIndex = indexTuple[4];
    var meshRendererIndex = indexTuple[3];
    var shaderIndex = indexTuple[2];
    var transformIndex = indexTuple[0];
    var state$1 = _renderSourceInstanceGameObject(gl, /* tuple */[
          transformIndex,
          indexTuple[1],
          shaderIndex,
          meshRendererIndex,
          geometryIndex,
          geometryType
        ], param$1[0], state);
    var dataTuple = _prepareData(gl, shaderIndex, /* tuple */[
          sourceInstance,
          param[1],
          param[2],
          param[3]
        ], state$1);
    var match = dataTuple[0];
    var extension = match[1];
    var gl$1 = match[0];
    var match$1 = isTransformStatic$1(sourceInstance, state$1[/* sourceInstanceRecord */16]);
    var state$2 = match$1 ? _sendStaticTransformMatrixData(/* tuple */[
            transformIndex,
            sourceInstance
          ], dataTuple, fillMatrixTypeArrFunc, state$1) : _sendDynamicTransformMatrixData(/* tuple */[
            transformIndex,
            sourceInstance
          ], dataTuple, fillMatrixTypeArrFunc, state$1);
    var getIndicesCountFunc = getGetIndicesCountFunc(geometryType);
    drawElementsInstancedANGLE(/* tuple */[
          getGlDrawMode(gl$1, meshRendererIndex, state$2),
          getIndexType(gl$1),
          getIndexTypeSize(gl$1),
          getIndicesCountFunc(geometryIndex, state$2),
          dataTuple[1][4]
        ], extension);
    return _unbind(shaderIndex, extension, state$2);
  }
  
  function fillMatrixTypeArr(transformIndex, matricesArrayForInstance, param) {
    return fillFloat32ArrayWithFloat32Array(/* tuple */[
                matricesArrayForInstance,
                param[1]
              ], /* tuple */[
                getLocalToWorldMatrixTypeArray$2(transformIndex, param[0]),
                0
              ], 16);
  }
  
  
  /* GPUDetectService-Wonderjs Not a pure module */
  
  function _fillMatrixTypeArr(transform, matricesArrayForInstance, tuple) {
    fillMatrixTypeArr(transform, matricesArrayForInstance, tuple);
    return /* tuple */[
            tuple[0],
            tuple[1] + 16 | 0
          ];
  }
  
  function render$12(gl, indexTuple, state) {
    return render$13(gl, /* tuple */[
                indexTuple,
                4096,
                64,
                64
              ], /* tuple */[
                render$8,
                _fillMatrixTypeArr
              ], state);
  }
  
  
  /* RenderBasicJobCommon-Wonderjs Not a pure module */
  
  function render$9(gl, indexTuple, state) {
    if (isSupportInstance$2(state)) {
      return render$12(gl, indexTuple, state);
    } else {
      return render$10(gl, indexTuple, state);
    }
  }
  
  
  /* JudgeInstanceRenderService-Wonderjs Not a pure module */
  
  function getShaderIndex$3(materialIndex, param) {
    return getShaderIndex(materialIndex, param[/* basicMaterialRecord */8][/* shaderIndices */0]);
  }
  
  
  /* ShaderIndicesService-Wonderjs Not a pure module */
  
  function render$6(gl, param, state) {
    var sourceInstanceIndices = param[6];
    var geometryTypes = param[5];
    var geometryIndices = param[4];
    var meshRendererIndices = param[3];
    var materialIndices = param[2];
    var transformIndices = param[1];
    return reduceOneParam((function (state, index) {
                  var transformIndex = getComponent$1(index, transformIndices);
                  var materialIndex = getComponent$1(index, materialIndices);
                  var shaderIndex = getShaderIndex$2(materialIndex, getShaderIndex$3, state);
                  var meshRendererIndex = getComponent$1(index, meshRendererIndices);
                  var geometryIndex = getComponent$1(index, geometryIndices);
                  var geometryType = getGeometryType(index, geometryTypes);
                  var sourceInstance = getComponent$1(index, sourceInstanceIndices);
                  if (hasSourceInstance(sourceInstance)) {
                    return render$9(gl, /* tuple */[
                                transformIndex,
                                materialIndex,
                                shaderIndex,
                                meshRendererIndex,
                                geometryIndex,
                                geometryType,
                                sourceInstance
                              ], state);
                  } else {
                    var state$1 = render$8(gl, /* tuple */[
                          transformIndex,
                          materialIndex,
                          shaderIndex,
                          meshRendererIndex,
                          geometryIndex,
                          geometryType
                        ], state);
                    draw$4(gl, meshRendererIndex, geometryIndex, geometryType, state$1);
                    return state$1;
                  }
                }), state, range$1(0, param[0] - 1 | 0));
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* No side effect */
  
  /* ComputePointsBoxGeometryService-Wonderjs Not a pure module */
  
  /* IndexSourceTextureService-Wonderjs Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* Log-WonderLog Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* No side effect */
  
  /* No side effect */
  
  /* No side effect */
  
  /* GroupLayoutIMGUIAPI-WonderImgui Not a pure module */
  
  /* FixedLayoutControlIMGUIRenderWorkerService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  function queryFullScreenData() {
    var root = window;
    return /* tuple */[
            0,
            0,
            root.innerWidth,
            root.innerHeight,
            "100%",
            "100%"
          ];
  }
  
  function _setAbsolutePosition(canvas) {
    canvas.style.position = "absolute";
    return canvas;
  }
  
  function setX(x, canvas) {
    canvas.style.left = "" + (String(x) + "px");
    return canvas;
  }
  
  function setY(y, canvas) {
    canvas.style.top = "" + (String(y) + "px");
    return canvas;
  }
  
  function setWidth$1(width, canvas) {
    canvas.width = width;
    return canvas;
  }
  
  function setHeight$1(height, canvas) {
    canvas.height = height;
    return canvas;
  }
  
  function setStyleWidth(width, canvas) {
    canvas.style.width = width;
    return canvas;
  }
  
  function setStyleHeight(height, canvas) {
    canvas.style.height = height;
    return canvas;
  }
  
  function _setBodyMargin($$document) {
    var bodies = $$document.querySelectorAll("body");
    if (bodies.length === 0) {
      return /* () */0;
    } else {
      setBatchStyle(caml_array_get(bodies, 0), "margin:0");
      return /* () */0;
    }
  }
  
  function setToFullScreen(param, canvas) {
    _setBodyMargin(document);
    return setStyleHeight(param[5], setStyleWidth(param[4], setHeight$1(param[3], setWidth$1(param[2], setY(param[1], setX(param[0], _setAbsolutePosition(canvas)))))));
  }
  
  function setScreenSize(param, canvas) {
    return setStyleHeight(param[3], setStyleWidth(param[2], setHeight$1(param[1], setWidth$1(param[0], canvas))));
  }
  
  
  /* No side effect */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* No side effect */
  
  /* No side effect */
  
  function getPosition$2(gameObject, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    return updateAndGetPositionTuple(unsafeGetTransformComponent(gameObject, gameObjectRecord), state[/* globalTempRecord */36], getRecord(state));
  }
  
  function buildPositionMap(index, getPositionFunc, state) {
    return reduceOneParam((function (map, i) {
                  return set$1(i, _2(getPositionFunc, i, state), map);
                }), createEmpty$2(/* () */0), range$1(0, index - 1 | 0));
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function getAmbientLightColor$1(state) {
    return getRecord$18(state)[/* ambientLight */1][/* color */0];
  }
  
  function setAmbientLightColor$1(color, state) {
    var newrecord = caml_array_dup(state);
    var init = getRecord$18(state);
    newrecord[/* sceneRecord */13] = /* record */[
      /* currentCameraGameObject */init[/* currentCameraGameObject */0],
      /* ambientLight : record */[/* color */color],
      /* sceneGameObject */init[/* sceneGameObject */2]
    ];
    return newrecord;
  }
  
  
  /* RecordSceneMainService-Wonderjs Not a pure module */
  
  function unsafeGetGameObject$9(light, param) {
    return unsafeGetGameObject$1(light, param[/* gameObjectMap */9]);
  }
  
  
  /* GameObjectMapService-Wonderjs Not a pure module */
  
  function getPosition$3(index, state) {
    return getPosition$2(unsafeGetGameObject$9(index, state[/* pointLightRecord */22]), state);
  }
  
  
  /* PositionLightMainService-Wonderjs Not a pure module */
  
  function setFlipY$3(gl, flipY, _) {
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);
    return /* () */0;
  }
  
  
  /* RecordBasicSourceTextureMainService-Wonderjs Not a pure module */
  
  function unsafeGetGameObject$10(light, param) {
    return unsafeGetGameObject$1(light, param[/* gameObjectMap */5]);
  }
  
  
  /* GameObjectMapService-Wonderjs Not a pure module */
  
  function getDirection$1(index, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var directionLightRecord = state[/* directionLightRecord */21];
    return transformQuat(/* tuple */[
                0,
                0,
                1
              ], updateAndGetRotationTuple(unsafeGetTransformComponent(unsafeGetGameObject$10(index, directionLightRecord), gameObjectRecord), state[/* globalTempRecord */36], getRecord(state)));
  }
  
  function buildDirectionMap(index, getDirectionFunc, state) {
    return reduceOneParam((function (map, i) {
                  return set$1(i, _2(getDirectionFunc, i, state), map);
                }), createEmpty$2(/* () */0), range$1(0, index - 1 | 0));
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  /* drawImage Not a pure module */
  
  /* Canvas-Wonderjs Not a pure module */
  
  function setSource$1(texture, source, state) {
    var match = isUseWorker(state);
    if (match) {
      var match$1 = getRecord$4(state);
      setSource(texture, source, match$1[/* sourceMap */9]);
      push$1(/* tuple */[
            texture,
            source
          ], match$1[/* needAddedSourceArray */13]);
      return state;
    } else {
      var match$2 = getRecord$4(state);
      setSource(texture, source, match$2[/* sourceMap */9]);
      return state;
    }
  }
  
  function getWrapS$2(texture, state) {
    var match = getRecord$4(state);
    return getWrapS(texture, match[/* wrapSs */1]);
  }
  
  function setWrapS$2(texture, wrapS, state) {
    var match = getRecord$4(state);
    setWrapS(texture, wrapS, match[/* wrapSs */1]);
    return state;
  }
  
  function getWrapT$2(texture, state) {
    var match = getRecord$4(state);
    return getWrapT(texture, match[/* wrapTs */2]);
  }
  
  function setWrapT$2(texture, wrapT, state) {
    var match = getRecord$4(state);
    setWrapT(texture, wrapT, match[/* wrapTs */2]);
    return state;
  }
  
  function getMagFilter$2(texture, state) {
    var match = getRecord$4(state);
    return getMagFilter(texture, match[/* magFilters */3]);
  }
  
  function setMagFilter$2(texture, filter, state) {
    var match = getRecord$4(state);
    setMagFilter(texture, filter, match[/* magFilters */3]);
    return state;
  }
  
  function getMinFilter$2(texture, state) {
    var match = getRecord$4(state);
    return getMinFilter(texture, match[/* minFilters */4]);
  }
  
  function setMinFilter$2(texture, filter, state) {
    var match = getRecord$4(state);
    setMinFilter(texture, filter, match[/* minFilters */4]);
    return state;
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* most Not a pure module */
  
  /* WorkerService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  function execJob$33(index, globalTempRecord, transformRecord) {
    for(var i = 0 ,i_finish = index - 1 | 0; i <= i_finish; ++i){
      update(i, globalTempRecord, transformRecord);
    }
    return transformRecord;
  }
  
  
  /* UpdateTransformMainService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* WorkerService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  function getPrecisionSource(gpuDetectRecord, glslChunkRecord) {
    var $$default = getChunk("highp_fragment", glslChunkRecord)[/* top */0];
    var match = gpuDetectRecord[/* precision */1];
    if (match !== undefined) {
      switch (match) {
        case 0 : 
            return getChunk("highp_fragment", glslChunkRecord)[/* top */0];
        case 1 : 
            return getChunk("mediump_fragment", glslChunkRecord)[/* top */0];
        case 2 : 
            return getChunk("lowp_fragment", glslChunkRecord)[/* top */0];
        
      }
    } else {
      return $$default;
    }
  }
  
  
  /* ShaderChunkSystem-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  function bindAndUpdate$2(gl, material, state) {
    var lightMaterialRecord = state[/* lightMaterialRecord */9];
    var diffuseMapUnit = getDiffuseMapUnit$1(material, lightMaterialRecord[/* diffuseMapUnits */5]);
    var specularMapUnit = getSpecularMapUnit$1(material, lightMaterialRecord[/* specularMapUnits */6]);
    return bindAndUpdate$1(/* tuple */[
                  gl,
                  material,
                  specularMapUnit
                ], getTextureIndex$2, bindAndUpdate$1(/* tuple */[
                      gl,
                      material,
                      diffuseMapUnit
                    ], getTextureIndex$2, /* tuple */[
                      lightMaterialRecord[/* textureIndices */4],
                      state[/* settingRecord */21],
                      state
                    ]))[2];
  }
  
  
  /* OperateTypeArrayLightMaterialService-Wonderjs Not a pure module */
  
  function render$15(gl, indexTuple, state) {
    return render$7(gl, indexTuple, bindAndUpdate$2, state);
  }
  
  
  /* RenderJobUtils-Wonderjs Not a pure module */
  
  function render$17(gl, indexTuple, state) {
    return render$11(gl, indexTuple, render$15, state);
  }
  
  
  /* FrontRenderLightJobCommon-Wonderjs Not a pure module */
  
  function _fillMatrixTypeArr$1(transform, matricesArrayForInstance, tuple) {
    var offset = tuple[1];
    var state = tuple[0];
    fillMatrixTypeArr(transform, matricesArrayForInstance, tuple);
    var normalMatrix = getNormalMatrixTypeArray$1(transform, state);
    fillFloat32ArrayWithFloat32Array(/* tuple */[
          matricesArrayForInstance,
          offset + 16 | 0
        ], /* tuple */[
          normalMatrix,
          0
        ], 9);
    return /* tuple */[
            state,
            (offset + 16 | 0) + 9 | 0
          ];
  }
  
  function render$18(gl, indexTuple, state) {
    return render$13(gl, /* tuple */[
                indexTuple,
                6400,
                112,
                100
              ], /* tuple */[
                render$15,
                _fillMatrixTypeArr$1
              ], state);
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function render$16(gl, indexTuple, state) {
    if (isSupportInstance$2(state)) {
      return render$18(gl, indexTuple, state);
    } else {
      return render$17(gl, indexTuple, state);
    }
  }
  
  
  /* JudgeInstanceRenderService-Wonderjs Not a pure module */
  
  function getShaderIndex$4(materialIndex, param) {
    return getShaderIndex(materialIndex, param[/* lightMaterialRecord */9][/* shaderIndices */0]);
  }
  
  
  /* ShaderIndicesService-Wonderjs Not a pure module */
  
  function render$14(gl, param, state) {
    var sourceInstanceIndices = param[6];
    var geometryTypes = param[5];
    var geometryIndices = param[4];
    var meshRendererIndices = param[3];
    var materialIndices = param[2];
    var transformIndices = param[1];
    return reduceOneParam((function (state, index) {
                  var transformIndex = getComponent$1(index, transformIndices);
                  var materialIndex = getComponent$1(index, materialIndices);
                  var shaderIndex = getShaderIndex$2(materialIndex, getShaderIndex$4, state);
                  var meshRendererIndex = getComponent$1(index, meshRendererIndices);
                  var geometryIndex = getComponent$1(index, geometryIndices);
                  var geometryType = getGeometryType(index, geometryTypes);
                  var sourceInstance = getComponent$1(index, sourceInstanceIndices);
                  if (hasSourceInstance(sourceInstance)) {
                    return render$16(gl, /* tuple */[
                                transformIndex,
                                materialIndex,
                                shaderIndex,
                                meshRendererIndex,
                                geometryIndex,
                                geometryType,
                                sourceInstance
                              ], state);
                  } else {
                    var state$1 = render$15(gl, /* tuple */[
                          transformIndex,
                          materialIndex,
                          shaderIndex,
                          meshRendererIndex,
                          geometryIndex,
                          geometryType
                        ], state);
                    draw$4(gl, meshRendererIndex, geometryIndex, geometryType, state$1);
                    return state$1;
                  }
                }), state, range$1(0, param[0] - 1 | 0));
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* ArrayService-Wonderjs Not a pure module */
  
  /* Log-WonderLog Not a pure module */
  
  /* GetWorkerDataUtils-Wonderjs Not a pure module */
  
  /* most Not a pure module */
  
  /* WorkerService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* JudgeInstanceService-Wonderjs Not a pure module */
  
  /* DeviceManagerService-Wonderjs Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* RecordRenderConfigRenderWorkerService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* RecordPointLightRenderWorkerService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  function isDisposeTooMany(disposeCount, settingRecord) {
    return disposeCount >= getMaxDisposeCount(settingRecord);
  }
  
  
  /* MemorySettingService-Wonderjs Not a pure module */
  
  var isDisposed$1 = has$1;
  
  
  /* No side effect */
  
  function _setNewDataToState(newAliveUidArray, record, param) {
    return /* record */[
            /* uid */record[/* uid */0],
            /* nameMap */param[0],
            /* disposeCount */record[/* disposeCount */2],
            /* disposedUidMap */createEmpty$2(/* () */0),
            /* disposedUidArray */record[/* disposedUidArray */4],
            /* disposedUidArrayForKeepOrder */record[/* disposedUidArrayForKeepOrder */5],
            /* disposedBasicCameraViewArray */record[/* disposedBasicCameraViewArray */6],
            /* disposedTransformArray */record[/* disposedTransformArray */7],
            /* disposedTransformArrayForKeepOrder */record[/* disposedTransformArrayForKeepOrder */8],
            /* disposedPerspectiveCameraProjectionArray */record[/* disposedPerspectiveCameraProjectionArray */9],
            /* disposedArcballCameraControllerArray */record[/* disposedArcballCameraControllerArray */10],
            /* disposedBasicMaterialArray */record[/* disposedBasicMaterialArray */11],
            /* disposedLightMaterialArray */record[/* disposedLightMaterialArray */12],
            /* disposedBoxGeometryArray */record[/* disposedBoxGeometryArray */13],
            /* disposedCustomGeometryArray */record[/* disposedCustomGeometryArray */14],
            /* disposedSourceInstanceArray */record[/* disposedSourceInstanceArray */15],
            /* disposedObjectInstanceArray */record[/* disposedObjectInstanceArray */16],
            /* disposedDirectionLightArray */record[/* disposedDirectionLightArray */17],
            /* disposedPointLightArray */record[/* disposedPointLightArray */18],
            /* disposedMeshRendererComponentArray */record[/* disposedMeshRendererComponentArray */19],
            /* aliveUidArray */newAliveUidArray,
            /* geometryDataMap */param[1],
            /* transformMap */param[2],
            /* basicCameraViewMap */param[4],
            /* perspectiveCameraProjectionMap */param[5],
            /* arcballCameraControllerMap */param[6],
            /* meshRendererMap */param[3],
            /* basicMaterialMap */param[7],
            /* lightMaterialMap */param[8],
            /* sourceInstanceMap */param[11],
            /* objectInstanceMap */param[12],
            /* directionLightMap */param[9],
            /* pointLightMap */param[10]
          ];
  }
  
  function _setNewMap(uid, oldMap, newMap) {
    var match = get$3(uid, oldMap);
    if (match !== undefined) {
      return set$1(uid, valFromOption(match), newMap);
    } else {
      return newMap;
    }
  }
  
  function _allocateNewMaps(newAliveUidArray, record) {
    var nameMap = record[/* nameMap */1];
    var geometryDataMap = record[/* geometryDataMap */21];
    var transformMap = record[/* transformMap */22];
    var basicCameraViewMap = record[/* basicCameraViewMap */23];
    var perspectiveCameraProjectionMap = record[/* perspectiveCameraProjectionMap */24];
    var arcballCameraControllerMap = record[/* arcballCameraControllerMap */25];
    var meshRendererMap = record[/* meshRendererMap */26];
    var basicMaterialMap = record[/* basicMaterialMap */27];
    var lightMaterialMap = record[/* lightMaterialMap */28];
    var sourceInstanceMap = record[/* sourceInstanceMap */29];
    var objectInstanceMap = record[/* objectInstanceMap */30];
    var directionLightMap = record[/* directionLightMap */31];
    var pointLightMap = record[/* pointLightMap */32];
    return reduceOneParam((function (param, uid) {
                  return /* tuple */[
                          _setNewMap(uid, nameMap, param[0]),
                          _setNewMap(uid, geometryDataMap, param[1]),
                          set$1(uid, unsafeGet$1(uid, transformMap), param[2]),
                          _setNewMap(uid, meshRendererMap, param[3]),
                          _setNewMap(uid, basicCameraViewMap, param[4]),
                          _setNewMap(uid, perspectiveCameraProjectionMap, param[5]),
                          _setNewMap(uid, arcballCameraControllerMap, param[6]),
                          _setNewMap(uid, basicMaterialMap, param[7]),
                          _setNewMap(uid, lightMaterialMap, param[8]),
                          _setNewMap(uid, directionLightMap, param[9]),
                          _setNewMap(uid, pointLightMap, param[10]),
                          _setNewMap(uid, sourceInstanceMap, param[11]),
                          _setNewMap(uid, objectInstanceMap, param[12])
                        ];
                }), /* tuple */[
                createEmpty$2(/* () */0),
                createEmpty$2(/* () */0),
                createEmpty$2(/* () */0),
                createEmpty$2(/* () */0),
                createEmpty$2(/* () */0),
                createEmpty$2(/* () */0),
                createEmpty$2(/* () */0),
                createEmpty$2(/* () */0),
                createEmpty$2(/* () */0),
                createEmpty$2(/* () */0),
                createEmpty$2(/* () */0),
                createEmpty$2(/* () */0),
                createEmpty$2(/* () */0)
              ], newAliveUidArray);
  }
  
  function reAllocate(record) {
    var disposedUidMap = record[/* disposedUidMap */3];
    var aliveUidArray = record[/* aliveUidArray */20];
    var newAliveUidArray = aliveUidArray.filter((function (aliveUid) {
            return !isDisposed$1(aliveUid, disposedUidMap);
          }));
    return _setNewDataToState(newAliveUidArray, record, _allocateNewMaps(newAliveUidArray, record));
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  function _updateInfos(infos, infoIndex, param, offset) {
    var increment = param[1] - param[0] | 0;
    return setInfo(infoIndex, offset, offset + increment | 0, infos);
  }
  
  function _allocateNewData(newAliveIndexArray, param) {
    var indicesInfos = param[/* indicesInfos */9];
    var normalsInfos = param[/* normalsInfos */8];
    var texCoordsInfos = param[/* texCoordsInfos */7];
    var verticesInfos = param[/* verticesInfos */6];
    var indices = param[/* indices */5];
    var normals = param[/* normals */4];
    var texCoords = param[/* texCoords */3];
    var vertices = param[/* vertices */2];
    return reduceOneParam((function (param, index) {
                  var newIndicesOffset = param[8];
                  var newNormalsOffset = param[7];
                  var newTexCoordsOffset = param[6];
                  var newVerticesOffset = param[5];
                  var infoIndex = getInfoIndex(index);
                  var verticesInfo = getInfo(infoIndex, verticesInfos);
                  var texCoordsInfo = getInfo(infoIndex, texCoordsInfos);
                  var normalsInfo = getInfo(infoIndex, normalsInfos);
                  var indicesInfo = getInfo(infoIndex, indicesInfos);
                  return /* tuple */[
                          param[0] + 1 | 0,
                          _updateInfos(verticesInfos, infoIndex, verticesInfo, newVerticesOffset),
                          _updateInfos(texCoordsInfos, infoIndex, texCoordsInfo, newTexCoordsOffset),
                          _updateInfos(normalsInfos, infoIndex, normalsInfo, newNormalsOffset),
                          _updateInfos(indicesInfos, infoIndex, indicesInfo, newIndicesOffset),
                          fillFloat32ArrayWithFloat32Array(/* tuple */[
                                vertices,
                                newVerticesOffset
                              ], /* tuple */[
                                vertices,
                                verticesInfo[0]
                              ], verticesInfo[1]),
                          fillFloat32ArrayWithFloat32Array(/* tuple */[
                                texCoords,
                                newTexCoordsOffset
                              ], /* tuple */[
                                texCoords,
                                texCoordsInfo[0]
                              ], texCoordsInfo[1]),
                          fillFloat32ArrayWithFloat32Array(/* tuple */[
                                normals,
                                newNormalsOffset
                              ], /* tuple */[
                                normals,
                                normalsInfo[0]
                              ], normalsInfo[1]),
                          fillUint16ArrayWithUint16Array(/* tuple */[
                                indices,
                                newIndicesOffset
                              ], /* tuple */[
                                indices,
                                indicesInfo[0]
                              ], indicesInfo[1]),
                          vertices,
                          texCoords,
                          normals,
                          indices
                        ];
                }), /* tuple */[
                0,
                verticesInfos,
                texCoordsInfos,
                normalsInfos,
                indicesInfos,
                0,
                0,
                0,
                0,
                vertices,
                texCoords,
                normals,
                indices
              ], newAliveIndexArray);
  }
  
  function _setNewDataToState$1(newAliveIndexArray, customGeometryRecord, param) {
    return /* record */[
            /* index */customGeometryRecord[/* index */0],
            /* buffer */customGeometryRecord[/* buffer */1],
            /* vertices */param[9],
            /* texCoords */param[10],
            /* normals */param[11],
            /* indices */param[12],
            /* verticesInfos */param[1],
            /* texCoordsInfos */param[2],
            /* normalsInfos */param[3],
            /* indicesInfos */param[4],
            /* verticesOffset */param[5],
            /* texCoordsOffset */param[6],
            /* normalsOffset */param[7],
            /* indicesOffset */param[8],
            /* disposeCount */customGeometryRecord[/* disposeCount */14],
            /* gameObjectMap */customGeometryRecord[/* gameObjectMap */15],
            /* groupCountMap */customGeometryRecord[/* groupCountMap */16],
            /* disposedIndexArray */customGeometryRecord[/* disposedIndexArray */17],
            /* disposedIndexMap */createEmpty$2(/* () */0),
            /* aliveIndexArray */newAliveIndexArray
          ];
  }
  
  function reAllocate$1(customGeometryRecord) {
    var disposedIndexMap = customGeometryRecord[/* disposedIndexMap */18];
    var newAliveIndexArray = customGeometryRecord[/* aliveIndexArray */19].filter((function (aliveIndex) {
            return !isDisposed$1(aliveIndex, disposedIndexMap);
          }));
    return _setNewDataToState$1(newAliveIndexArray, customGeometryRecord, _allocateNewData(newAliveIndexArray, customGeometryRecord));
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function _reallocateGameObjectByDisposeCount(state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    if (isDisposeTooMany(gameObjectRecord[/* disposeCount */2], state[/* settingRecord */1])) {
      gameObjectRecord[/* disposeCount */2] = 0;
      var newrecord = caml_array_dup(state);
      newrecord[/* gameObjectRecord */11] = reAllocate(state[/* gameObjectRecord */11]);
      return newrecord;
    } else {
      return state;
    }
  }
  
  function _reallocateCustomGeometryByDisposeCount(state) {
    var newrecord = caml_array_dup(state);
    var customGeometryRecord = getRecord$9(state);
    newrecord[/* customGeometryRecord */24] = isDisposeTooMany(customGeometryRecord[/* disposeCount */14], state[/* settingRecord */1]) ? (customGeometryRecord[/* disposeCount */14] = 0, reAllocate$1(customGeometryRecord)) : customGeometryRecord;
    return newrecord;
  }
  
  function execJob$50(state) {
    return _reallocateCustomGeometryByDisposeCount(_reallocateGameObjectByDisposeCount(state));
  }
  
  
  /* QueryCPUMemoryService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* most Not a pure module */
  
  /* GetWorkerDataJobUtils-Wonderjs Not a pure module */
  
  /* GetWorkerDataJobUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  function create$64(param) {
    return /* record */[
            /* shaders */param[0],
            /* shaderLibs */param[1]
          ];
  }
  
  
  /* No side effect */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* most Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* OperateRenderWorkerSettingService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* GetWorkerDataJobUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* SendWorkerDataJobUtils-Wonderjs Not a pure module */
  
  /* SendWorkerDataJobUtils-Wonderjs Not a pure module */
  
  function getAllShaderIndexArray(param) {
    return param[/* usedShaderIndexArray */0];
  }
  
  
  /* No side effect */
  
  function execJob$70(renderState) {
    var gl = unsafeGetGl(renderState[/* deviceManagerRecord */19]);
    return reduceOneParam((function (renderState, shaderIndex) {
                  var program = unsafeGetProgram(shaderIndex, renderState[/* programRecord */4]);
                  var renderState$1 = use(gl, program, renderState);
                  var renderState$2 = reduceOneParam((function (renderState, param) {
                          var pos = param[/* pos */0];
                          var match = isUniformLocationExist(pos);
                          if (match) {
                            param[/* sendDataFunc */2](gl, pos, param[/* getDataFunc */1](renderState));
                          }
                          return renderState;
                        }), renderState$1, unsafeGetUniformSendData$4(shaderIndex, renderState$1[/* glslSenderRecord */3]));
                  var renderState$3 = reduceOneParam((function (renderState, param) {
                          param[/* sendDataFunc */4](gl, param[/* shaderCacheMap */0], /* tuple */[
                                param[/* name */1],
                                param[/* pos */2]
                              ], param[/* getDataFunc */3](renderState));
                          return renderState;
                        }), renderState$2, unsafeGetUniformSendData$3(shaderIndex, renderState$2[/* glslSenderRecord */3]));
                  return reduceOneParam((function (renderState, param) {
                                param[/* sendCachableFunctionDataFunc */3](gl, /* tuple */[
                                      param[/* program */0],
                                      param[/* shaderCacheMap */1],
                                      param[/* locationMap */2]
                                    ], renderState);
                                return renderState;
                              }), renderState$3, unsafeGetUniformSendData$6(shaderIndex, renderState$3[/* glslSenderRecord */3]));
                }), renderState, getAllShaderIndexArray(renderState[/* shaderRecord */20]));
  }
  
  
  /* ProgramService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  function execJob$72(glslSenderRecord) {
    return /* record */[
            /* attributeSendDataMap */glslSenderRecord[/* attributeSendDataMap */0],
            /* instanceAttributeSendDataMap */glslSenderRecord[/* instanceAttributeSendDataMap */1],
            /* uniformCacheMap */glslSenderRecord[/* uniformCacheMap */2],
            /* uniformRenderObjectSendModelDataMap */glslSenderRecord[/* uniformRenderObjectSendModelDataMap */3],
            /* uniformRenderObjectSendMaterialDataMap */glslSenderRecord[/* uniformRenderObjectSendMaterialDataMap */4],
            /* uniformShaderSendNoCachableDataMap */glslSenderRecord[/* uniformShaderSendNoCachableDataMap */5],
            /* uniformShaderSendCachableDataMap */glslSenderRecord[/* uniformShaderSendCachableDataMap */6],
            /* uniformShaderSendCachableFunctionDataMap */glslSenderRecord[/* uniformShaderSendCachableFunctionDataMap */7],
            /* uniformInstanceSendNoCachableDataMap */glslSenderRecord[/* uniformInstanceSendNoCachableDataMap */8],
            /* vertexAttribHistoryArray */glslSenderRecord[/* vertexAttribHistoryArray */9],
            /* lastSendMaterialData */undefined,
            /* lastSendGeometryData */undefined
          ];
  }
  
  
  /* No side effect */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  function _disposeComponents(batchDisposeBasicMaterialComponentFunc, batchDisposeLightMaterialComponentFunc, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var disposedBasicCameraViewArray = gameObjectRecord[/* disposedBasicCameraViewArray */6];
    var disposedTransformArray = gameObjectRecord[/* disposedTransformArray */7];
    var disposedTransformArrayForKeepOrder = gameObjectRecord[/* disposedTransformArrayForKeepOrder */8];
    var disposedPerspectiveCameraProjectionArray = gameObjectRecord[/* disposedPerspectiveCameraProjectionArray */9];
    var disposedArcballCameraControllerArray = gameObjectRecord[/* disposedArcballCameraControllerArray */10];
    var disposedBasicMaterialArray = gameObjectRecord[/* disposedBasicMaterialArray */11];
    var disposedLightMaterialArray = gameObjectRecord[/* disposedLightMaterialArray */12];
    var disposedBoxGeometryArray = gameObjectRecord[/* disposedBoxGeometryArray */13];
    var disposedCustomGeometryArray = gameObjectRecord[/* disposedCustomGeometryArray */14];
    var disposedSourceInstanceArray = gameObjectRecord[/* disposedSourceInstanceArray */15];
    var disposedObjectInstanceArray = gameObjectRecord[/* disposedObjectInstanceArray */16];
    var disposedDirectionLightArray = gameObjectRecord[/* disposedDirectionLightArray */17];
    var disposedPointLightArray = gameObjectRecord[/* disposedPointLightArray */18];
    var disposedMeshRendererComponentArray = gameObjectRecord[/* disposedMeshRendererComponentArray */19];
    var state$1 = batchDisposeBasicCameraViewComponent(state, disposedBasicCameraViewArray);
    var state$2 = batchDisposePerspectiveCameraProjectionComponent(state$1, disposedPerspectiveCameraProjectionArray);
    var state$3 = batchDisposeArcballCameraControllerComponent(state$2, disposedArcballCameraControllerArray);
    var state$4 = batchDisposeTransformComponent(state$3, false, disposedTransformArray);
    var state$5 = batchDisposeTransformComponent(state$4, true, disposedTransformArrayForKeepOrder);
    var state$6 = _2(batchDisposeBasicMaterialComponentFunc, state$5, disposedBasicMaterialArray);
    var state$7 = _2(batchDisposeLightMaterialComponentFunc, state$6, disposedLightMaterialArray);
    var match = batchDisposeBoxGeometryComponent(state$7, disposedBoxGeometryArray);
    var match$1 = batchDisposeCustomGeometryComponent(match[0], disposedCustomGeometryArray);
    var partial_arg = /* tuple */[
      batchDisposeLightMaterialComponentFunc,
      batchDisposeLightMaterialComponentFunc
    ];
    var match$2 = batchDisposeSourceInstanceComponent(match$1[0], false, (function (param, param$1, param$2) {
            return batchDispose(partial_arg, param, param$1, param$2);
          }), disposedSourceInstanceArray);
    var state$8 = batchDisposeObjectInstanceComponent(match$2[0], disposedObjectInstanceArray);
    var state$9 = batchDisposeDirectionLightComponent(state$8, disposedDirectionLightArray);
    var state$10 = batchDisposePointLightComponent(state$9, disposedPointLightArray);
    var state$11 = batchDisposeMeshRendererComponent(state$10, disposedMeshRendererComponentArray);
    return /* tuple */[
            state$11,
            match[1],
            match$1[1],
            match$2[1]
          ];
  }
  
  function _disposeGameObjects(batchDisposeBasicMaterialComponentFunc, batchDisposeLightMaterialComponentFunc, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var disposedUidArray = gameObjectRecord[/* disposedUidArray */4];
    var disposedUidArrayForKeepOrder = gameObjectRecord[/* disposedUidArrayForKeepOrder */5];
    var match = batchDispose(/* tuple */[
          batchDisposeBasicMaterialComponentFunc,
          batchDisposeLightMaterialComponentFunc
        ], disposedUidArray, false, state);
    var match$1 = batchDispose(/* tuple */[
          batchDisposeBasicMaterialComponentFunc,
          batchDisposeLightMaterialComponentFunc
        ], disposedUidArrayForKeepOrder, true, match[0]);
    var state$1 = clearDeferDisposeData(match$1[0]);
    return /* tuple */[
            state$1,
            match[1].concat(match$1[1]),
            match[2].concat(match$1[2]),
            match[3].concat(match$1[3])
          ];
  }
  
  function execJob$74(batchDisposeBasicMaterialComponentFunc, batchDisposeLightMaterialComponentFunc, state) {
    var match = _disposeComponents(batchDisposeBasicMaterialComponentFunc, batchDisposeLightMaterialComponentFunc, state);
    var match$1 = _disposeGameObjects(batchDisposeBasicMaterialComponentFunc, batchDisposeLightMaterialComponentFunc, match[0]);
    return /* tuple */[
            match$1[0],
            match[1].concat(match$1[1]),
            match[2].concat(match$1[2]),
            match[3].concat(match$1[3])
          ];
  }
  
  
  /* DisposeGameObjectMainService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* SendWorkerDataJobUtils-Wonderjs Not a pure module */
  
  function getBasicMaterialRenderArray(param) {
    return getValidValues(param[/* basicMaterialRenderGameObjectMap */3]);
  }
  
  function getLightMaterialRenderArray(param) {
    return getValidValues(param[/* lightMaterialRenderGameObjectMap */4]);
  }
  
  
  /* SparseMapService-Wonderjs Not a pure module */
  
  function setData(renderArray, unsafeGetMaterialComponentFunc, renderObjectRecord, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var count = renderArray.length;
    var match = reduceOneParami((function (param, uid, index) {
            var sourceInstanceIndices = param[4];
            var materialIndex = unsafeGetMaterialComponentFunc(uid, gameObjectRecord);
            var match = unsafeGetGeometryComponentData(uid, gameObjectRecord);
            var match$1 = getSourceInstanceComponent(uid, gameObjectRecord);
            return /* tuple */[
                    setComponent(index, unsafeGetTransformComponent(uid, gameObjectRecord), param[0]),
                    setComponent(index, materialIndex, param[1]),
                    setComponent(index, unsafeGetMeshRendererComponent(uid, gameObjectRecord), param[2]),
                    setComponent(index, match[0], param[3]),
                    match$1 !== undefined ? setComponent(index, match$1, sourceInstanceIndices) : sourceInstanceIndices,
                    setUint8_1(index, match[1], param[5])
                  ];
          }), /* tuple */[
          renderObjectRecord[/* transformIndices */2],
          renderObjectRecord[/* materialIndices */3],
          renderObjectRecord[/* meshRendererIndices */4],
          renderObjectRecord[/* geometryIndices */5],
          renderObjectRecord[/* sourceInstanceIndices */7],
          renderObjectRecord[/* geometryTypes */6]
        ], renderArray);
    return /* record */[
            /* buffer */renderObjectRecord[/* buffer */0],
            /* count */count,
            /* transformIndices */match[0],
            /* materialIndices */match[1],
            /* meshRendererIndices */match[2],
            /* geometryIndices */match[3],
            /* geometryTypes */match[5],
            /* sourceInstanceIndices */match[4]
          ];
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function execJob$77(state) {
    return setData(getBasicMaterialRenderArray(getRecord$7(state)), unsafeGetBasicMaterialComponent, getRecord$13(getRecord$12(state)), state);
  }
  
  
  /* RecordRenderMainService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  function execJob$79(state) {
    return setData(getLightMaterialRenderArray(getRecord$7(state)), unsafeGetLightMaterialComponent, getRecord$14(getRecord$12(state)), state);
  }
  
  
  /* RecordRenderMainService-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* MostUtils-Wonderjs Not a pure module */
  
  /* JobService-Wonderjs Not a pure module */
  
  function _unsafeGetNoWorkerJobConfig(record) {
    requireCheck((function () {
            return test(buildAssertMessage("noWorker job config exist", "not"), (function () {
                          return assertExist(record);
                        }));
          }), getIsDebug(stateData));
    return unsafeGet$2(record);
  }
  
  function getInitPipelines(record) {
    return _unsafeGetNoWorkerJobConfig(record)[/* initPipelines */1];
  }
  
  function getInitJobs(record) {
    return _unsafeGetNoWorkerJobConfig(record)[/* initJobs */3];
  }
  
  function getLoopPipelines(record) {
    return _unsafeGetNoWorkerJobConfig(record)[/* loopPipelines */2];
  }
  
  function getLoopJobs(record) {
    return _unsafeGetNoWorkerJobConfig(record)[/* loopJobs */4];
  }
  
  function getSetting$3(record) {
    return _unsafeGetNoWorkerJobConfig(record)[/* setting */0];
  }
  
  function _getExecutableJob(jobs, param) {
    var pipelineJobName = param[/* name */0];
    var match = unsafeFindFirst(jobs, pipelineJobName, (function (param) {
            return filterTargetName(param[/* name */0], pipelineJobName);
          }));
    return /* record */[
            /* name */pipelineJobName,
            /* flags */match[/* flags */1]
          ];
  }
  
  function _getPipelineExecutableJobs(pipeline, pipelines, jobs) {
    var pipelineItem = unsafeFindFirst(pipelines, pipeline, (function (param) {
            return filterTargetName(param[/* name */0], pipeline);
          }));
    return pipelineItem[/* jobs */1].map((function (param) {
                  return _getExecutableJob(jobs, param);
                }));
  }
  
  function getInitPipelineExecutableJobs(param, initPipelines, jobs) {
    return _getPipelineExecutableJobs(param[/* initPipeline */0], initPipelines, jobs);
  }
  
  function getLoopPipelineExecutableJobs(param, loopPipelines, jobs) {
    return _getPipelineExecutableJobs(param[/* loopPipeline */1], loopPipelines, jobs);
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function _getAllNoWorkerJobs(executableJobs, jobHandleMap, _) {
    return reduceOneParam((function (list, param) {
                  var name = param[/* name */0];
                  var match = get$2(name, jobHandleMap);
                  if (match !== undefined) {
                    return $at(list, /* :: */[
                                /* tuple */[
                                  name,
                                  _1(match, param[/* flags */1])
                                ],
                                /* [] */0
                              ]);
                  } else {
                    return handleGetNoneJob(name, jobHandleMap);
                  }
                }), /* [] */0, executableJobs);
  }
  
  function execNoWorkerInitJobs(state) {
    return fold_left((function (state, param) {
                  return _1(param[1], state);
                }), state, state[/* jobRecord */2][/* noWorkerInitJobList */0]);
  }
  
  function execNoWorkerLoopJobs(state) {
    return fold_left((function (state, param) {
                  return _1(param[1], state);
                }), state, state[/* jobRecord */2][/* noWorkerLoopJobList */1]);
  }
  
  function init$10(param, state) {
    var newrecord = caml_array_dup(state);
    var init$1 = state[/* jobRecord */2];
    newrecord[/* jobRecord */2] = /* record */[
      /* noWorkerInitJobList */_getAllNoWorkerJobs(getInitPipelineExecutableJobs(getSetting$3(state[/* noWorkerJobRecord */3]), getInitPipelines(state[/* noWorkerJobRecord */3]), getInitJobs(state[/* noWorkerJobRecord */3])), _1(param[0], /* () */0), state),
      /* noWorkerLoopJobList */_getAllNoWorkerJobs(getLoopPipelineExecutableJobs(getSetting$3(state[/* noWorkerJobRecord */3]), getLoopPipelines(state[/* noWorkerJobRecord */3]), getLoopJobs(state[/* noWorkerJobRecord */3])), _1(param[1], /* () */0), state),
      /* workerCustomMainInitTargetJobMap */init$1[/* workerCustomMainInitTargetJobMap */2],
      /* workerCustomMainInitSourceJobMap */init$1[/* workerCustomMainInitSourceJobMap */3],
      /* workerCustomMainInitRemovedDefaultJobMap */init$1[/* workerCustomMainInitRemovedDefaultJobMap */4],
      /* workerCustomMainLoopTargetJobMap */init$1[/* workerCustomMainLoopTargetJobMap */5],
      /* workerCustomMainLoopSourceJobMap */init$1[/* workerCustomMainLoopSourceJobMap */6],
      /* workerCustomMainLoopRemovedDefaultJobMap */init$1[/* workerCustomMainLoopRemovedDefaultJobMap */7]
    ];
    return newrecord;
  }
  
  
  /* JobService-Wonderjs Not a pure module */
  
  var _noWorkerInit = execNoWorkerInitJobs;
  
  function _computeElapseTime(time, state) {
    state[/* timeControllerRecord */34] = computeElapseTime(time, state[/* timeControllerRecord */34]);
    return state;
  }
  
  function loopBody$1(time, state) {
    return execNoWorkerLoopJobs(_computeElapseTime(time, state));
  }
  
  var initDirector = _noWorkerInit;
  
  
  /* most Not a pure module */
  
  var init$7 = initDirector;
  
  var loopBody = loopBody$1;
  
  
  /* DirectorAPI-Wonderjs Not a pure module */
  
  function getEditEngineStateData() {
    return editorStateData[/* engineStateDataForEdit */2];
  }
  
  function getRunEngineStateData() {
    return editorStateData[/* engineStateDataForRun */3];
  }
  
  
  /* CreateEditorStateDataEditorService-WonderEditor Not a pure module */
  
  function getEditEngineState() {
    return getStateFromData(getEditEngineStateData(/* () */0));
  }
  
  function setEditEngineState(state) {
    setStateToData(getEditEngineStateData(/* () */0), state);
    return /* () */0;
  }
  
  function getRunEngineState() {
    return getStateFromData(getRunEngineStateData(/* () */0));
  }
  
  function setRunEngineState(state) {
    setStateToData(getRunEngineStateData(/* () */0), state);
    return /* () */0;
  }
  
  function getEngineStateToGetData(handleFunc) {
    return _1(handleFunc, getStateFromData(getRunEngineStateData(/* () */0)));
  }
  
  function getAndSetEditAndRunEngineState(handleFunc) {
    setEditEngineState(_1(handleFunc, getStateFromData(getEditEngineStateData(/* () */0))));
    return setRunEngineState(_1(handleFunc, getStateFromData(getRunEngineStateData(/* () */0))));
  }
  
  function refreshEditAndRunEngineState() {
    setEditEngineState(loopBody(0, getStateFromData(getEditEngineStateData(/* () */0))));
    return setRunEngineState(loopBody(0, getStateFromData(getRunEngineStateData(/* () */0))));
  }
  
  function getAndRefreshEditAndRunEngineState(handleFunc) {
    setEditEngineState(loopBody(0, _1(handleFunc, getStateFromData(getEditEngineStateData(/* () */0)))));
    return setRunEngineState(loopBody(0, _1(handleFunc, getStateFromData(getRunEngineStateData(/* () */0)))));
  }
  
  function _getDiffValue(type_) {
    return getEditEngineComponent$1(type_, unsafeGetDiffMap(getState(/* () */0)));
  }
  
  function _getWithDiffHandleFunc(diffArgumentArrForRun, handleFunc) {
    var _argumentArrayForRun = diffArgumentArrForRun.reduce((function (arr, param) {
            return param[/* arguments */0].reduce((function (arr, component) {
                          return push$2(component, arr);
                        }), arr);
          }), /* array */[]);
    var _argumentArrayForEdit = diffArgumentArrForRun.reduce((function (arr, param) {
            var diffValue = _getDiffValue(param[/* type_ */1]);
            return param[/* arguments */0].reduce((function (arr, component) {
                          return push$2(component + diffValue | 0, arr);
                        }), arr);
          }), /* array */[]);
    return /* tuple */[
            _argumentArrayForEdit.reduce((function (handleFunc, component) {
                    return _1(handleFunc, component);
                  }), handleFunc),
            _argumentArrayForRun.reduce((function (handleFunc, component) {
                    return _1(handleFunc, component);
                  }), handleFunc)
          ];
  }
  
  function handleFuncWithDiff(diffArgumentArrForRun, handleFunc, param) {
    var match = _getWithDiffHandleFunc(diffArgumentArrForRun, handleFunc);
    return /* tuple */[
            _1(match[0], param[0]),
            _1(match[1], param[1])
          ];
  }
  
  function getAndSetEngineStateWithDiff(diffArgumentArrForRun, handleFunc) {
    var match = _getWithDiffHandleFunc(diffArgumentArrForRun, handleFunc);
    setRunEngineState(_1(match[1], getStateFromData(getRunEngineStateData(/* () */0))));
    return setEditEngineState(_1(match[0], getStateFromData(getEditEngineStateData(/* () */0))));
  }
  
  function getAndRefreshEngineStateWithDiff(diffArgumentArrForRun, handleFunc) {
    var match = _getWithDiffHandleFunc(diffArgumentArrForRun, handleFunc);
    setRunEngineState(loopBody(0, _1(match[1], getStateFromData(getRunEngineStateData(/* () */0)))));
    return setEditEngineState(loopBody(0, _1(match[0], getStateFromData(getEditEngineStateData(/* () */0)))));
  }
  
  function getEditorState(handleFunc) {
    return _1(handleFunc, getState(/* () */0));
  }
  
  function getAndSetEditorState(handleFunc) {
    setState(_1(handleFunc, getState(/* () */0)));
    return /* () */0;
  }
  
  function getStateToGetData(handleFunc) {
    return _1(handleFunc, /* tuple */[
                getState(/* () */0),
                getStateFromData(getRunEngineStateData(/* () */0))
              ]);
  }
  
  function getEditEngineComponent(type_, runComponent) {
    return _getDiffValue(type_) + runComponent | 0;
  }
  
  
  /* ArrayService-WonderEditor Not a pure module */
  
  function getSceneGameObject$2(state) {
    return getRecord$18(state)[/* sceneGameObject */2];
  }
  
  function addChild$1(childGameObject, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var newrecord = caml_array_dup(state);
    newrecord[/* transformRecord */12] = setParent$1(unsafeGetTransformComponent(getRecord$18(state)[/* sceneGameObject */2], gameObjectRecord), unsafeGetTransformComponent(childGameObject, gameObjectRecord), getRecord(state));
    return newrecord;
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  function setCurrentCameraGameObject$2(uid, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* sceneRecord */13] = setCurrentCameraGameObject(uid, getRecord$18(state));
    return newrecord;
  }
  
  var getAmbientLightColor$3 = getAmbientLightColor$1;
  
  var setAmbientLightColor$3 = setAmbientLightColor$1;
  
  var getSceneGameObject$1 = getSceneGameObject$2;
  
  var addSceneChild$1 = addChild$1;
  
  
  /* CameraSceneMainService-Wonderjs Not a pure module */
  
  function create$65(record) {
    var disposedIndexArray = record[/* disposedIndexArray */7];
    var match = generateIndex(record[/* index */0], disposedIndexArray);
    return /* tuple */[
            /* record */[
              /* index */match[1],
              /* vertices */record[/* vertices */1],
              /* texCoords */record[/* texCoords */2],
              /* normals */record[/* normals */3],
              /* indices */record[/* indices */4],
              /* gameObjectMap */record[/* gameObjectMap */5],
              /* groupCountMap */record[/* groupCountMap */6],
              /* disposedIndexArray */record[/* disposedIndexArray */7]
            ],
            match[0]
          ];
  }
  
  
  /* No side effect */
  
  /* ComputePointsBoxGeometryService-Wonderjs Not a pure module */
  
  /* No side effect */
  
  /* No side effect */
  
  function getTexCoords$2(param) {
    return param[/* boxGeometryRecord */23][/* texCoords */2];
  }
  
  
  /* No side effect */
  
  function createBoxGeometry$1(state) {
    var match = create$65(getRecord$8(state));
    state[/* boxGeometryRecord */23] = match[0];
    return /* tuple */[
            state,
            match[1]
          ];
  }
  
  function getBoxGeometryTexCoords$1(state) {
    return getTexCoords$2(state);
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  function create$66(state) {
    var customGeometryRecord = getRecord$9(state);
    var disposedIndexArray = customGeometryRecord[/* disposedIndexArray */17];
    var match = generateIndex(customGeometryRecord[/* index */0], disposedIndexArray);
    var index = match[0];
    state[/* customGeometryRecord */24] = /* record */[
      /* index */match[1],
      /* buffer */customGeometryRecord[/* buffer */1],
      /* vertices */customGeometryRecord[/* vertices */2],
      /* texCoords */customGeometryRecord[/* texCoords */3],
      /* normals */customGeometryRecord[/* normals */4],
      /* indices */customGeometryRecord[/* indices */5],
      /* verticesInfos */customGeometryRecord[/* verticesInfos */6],
      /* texCoordsInfos */customGeometryRecord[/* texCoordsInfos */7],
      /* normalsInfos */customGeometryRecord[/* normalsInfos */8],
      /* indicesInfos */customGeometryRecord[/* indicesInfos */9],
      /* verticesOffset */customGeometryRecord[/* verticesOffset */10],
      /* texCoordsOffset */customGeometryRecord[/* texCoordsOffset */11],
      /* normalsOffset */customGeometryRecord[/* normalsOffset */12],
      /* indicesOffset */customGeometryRecord[/* indicesOffset */13],
      /* disposeCount */customGeometryRecord[/* disposeCount */14],
      /* gameObjectMap */customGeometryRecord[/* gameObjectMap */15],
      /* groupCountMap */customGeometryRecord[/* groupCountMap */16],
      /* disposedIndexArray */match[2],
      /* disposedIndexMap */customGeometryRecord[/* disposedIndexMap */18],
      /* aliveIndexArray */push$1(index, customGeometryRecord[/* aliveIndexArray */19])
    ];
    return checkNotExceedMaxCount(getCustomGeometryCount(state[/* settingRecord */1]), /* tuple */[
                state,
                index
              ]);
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function setIndicesByTypeArray(index, data, state) {
    var record = getRecord$9(state);
    var indices = record[/* indices */5];
    var indicesOffset = record[/* indicesOffset */13];
    record[/* indicesOffset */13] = setUint16PointData(/* tuple */[
          getInfoIndex(index),
          record[/* indicesInfos */9],
          indicesOffset,
          data.length
        ], (function (param) {
            return fillUint16ArrayWithOffset(indices, data, param);
          }));
    return state;
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  function setVerticesByTypeArray(index, data, state) {
    var record = getRecord$9(state);
    var vertices = record[/* vertices */2];
    var verticesOffset = record[/* verticesOffset */10];
    record[/* verticesOffset */10] = setFloat32PointData(/* tuple */[
          getInfoIndex(index),
          record[/* verticesInfos */6],
          verticesOffset,
          data.length
        ], (function (param) {
            return fillFloat32ArrayWithOffset(vertices, data, param);
          }));
    return state;
  }
  
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  /* TypeArrayService-Wonderjs Not a pure module */
  
  var createCustomGeometry = create$66;
  
  function setCustomGeometryVertices(geometry, data, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(geometry, isAlive$12, getRecord$9(state));
          }), getIsDebug(stateData));
    return setVerticesByTypeArray(geometry, data, state);
  }
  
  function setCustomGeometryIndices(geometry, data, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(geometry, isAlive$12, getRecord$9(state));
          }), getIsDebug(stateData));
    return setIndicesByTypeArray(geometry, data, state);
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  var createBoxGeometry = createBoxGeometry$1;
  
  var getBoxGeometryTexCoords = getBoxGeometryTexCoords$1;
  
  
  /* BoxGeometryAPI-Wonderjs Not a pure module */
  
  function immutableSet(key, value, map) {
    return set$1(key, value, map.slice());
  }
  
  function copy$7(prim) {
    return prim.slice();
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  function getComponentTypeMap$1(inspectorRecord) {
    return inspectorRecord[/* componentTypeMap */0];
  }
  
  function _getAddedComponentTypeArr(index, componentType, inspectorRecord) {
    var match = get$3(index, inspectorRecord[/* componentTypeMap */0]);
    if (match !== undefined) {
      return push$2(componentType, match.slice());
    } else {
      return push$2(componentType, create$27(/* () */0));
    }
  }
  
  function addComponentTypeToMap$1(index, componentType, inspectorRecord) {
    return /* record */[/* componentTypeMap */immutableSet(index, _getAddedComponentTypeArr(index, componentType, inspectorRecord), inspectorRecord[/* componentTypeMap */0])];
  }
  
  function removeComponentTypeToMap$1(index, componentType, inspectorRecord) {
    return /* record */[/* componentTypeMap */immutableSet(index, unsafeGet$1(index, inspectorRecord[/* componentTypeMap */0]).filter((function (componentTypeItem) {
                        return componentTypeItem !== componentType;
                      })), inspectorRecord[/* componentTypeMap */0])];
  }
  
  
  /* ArrayService-WonderEditor Not a pure module */
  
  function getComponentTypeMap(editorState) {
    return getComponentTypeMap$1(editorState[/* inspectorRecord */2]);
  }
  
  function addComponentTypeToMap(index, componentType, editorState) {
    return /* record */[
            /* sceneRecord */editorState[/* sceneRecord */0],
            /* assetRecord */editorState[/* assetRecord */1],
            /* inspectorRecord */addComponentTypeToMap$1(index, componentType, editorState[/* inspectorRecord */2]),
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  function removeComponentTypeToMap(index, componentType, editorState) {
    return /* record */[
            /* sceneRecord */editorState[/* sceneRecord */0],
            /* assetRecord */editorState[/* assetRecord */1],
            /* inspectorRecord */removeComponentTypeToMap$1(index, componentType, editorState[/* inspectorRecord */2]),
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  
  /* ComponentTypeMapInspectorService-WonderEditor Not a pure module */
  
  function createGameObject$1(param) {
    var engineState = param[1];
    var editorState = param[0];
    if (editorState !== undefined) {
      var match = createGameObject(engineState);
      var gameObject = match[1];
      return /* tuple */[
              addComponentTypeToMap(gameObject, /* Transform */0, editorState),
              /* tuple */[
                match[0],
                gameObject
              ]
            ];
    } else {
      return /* tuple */[
              undefined,
              createGameObject(engineState)
            ];
    }
  }
  
  function addLightMaterialComponent$2(gameObject, component, param) {
    var engineState = param[1];
    var editorState = param[0];
    if (editorState !== undefined) {
      return /* tuple */[
              addComponentTypeToMap(gameObject, /* Material */5, editorState),
              addGameObjectLightMaterialComponent(gameObject, component, engineState)
            ];
    } else {
      return /* tuple */[
              undefined,
              addGameObjectLightMaterialComponent(gameObject, component, engineState)
            ];
    }
  }
  
  function addBasicMaterialComponent$2(gameObject, component, param) {
    var engineState = param[1];
    var editorState = param[0];
    if (editorState !== undefined) {
      return /* tuple */[
              addComponentTypeToMap(gameObject, /* Material */5, editorState),
              addGameObjectBasicMaterialComponent(gameObject, component, engineState)
            ];
    } else {
      return /* tuple */[
              undefined,
              addGameObjectBasicMaterialComponent(gameObject, component, engineState)
            ];
    }
  }
  
  function addMeshRendererComponent$2(gameObject, component, param) {
    var engineState = param[1];
    var editorState = param[0];
    if (editorState !== undefined) {
      return /* tuple */[
              addComponentTypeToMap(gameObject, /* MeshRenderer */1, editorState),
              addGameObjectMeshRendererComponent(gameObject, component, engineState)
            ];
    } else {
      return /* tuple */[
              undefined,
              addGameObjectMeshRendererComponent(gameObject, component, engineState)
            ];
    }
  }
  
  function addBoxGeometryComponent$2(gameObject, component, param) {
    var engineState = param[1];
    var editorState = param[0];
    if (editorState !== undefined) {
      return /* tuple */[
              addComponentTypeToMap(gameObject, /* CustomGeometry */2, editorState),
              addGameObjectBoxGeometryComponent(gameObject, component, engineState)
            ];
    } else {
      return /* tuple */[
              undefined,
              addGameObjectBoxGeometryComponent(gameObject, component, engineState)
            ];
    }
  }
  
  function addCustomGeometryComponent$1(gameObject, component, param) {
    var engineState = param[1];
    var editorState = param[0];
    if (editorState !== undefined) {
      return /* tuple */[
              addComponentTypeToMap(gameObject, /* CustomGeometry */2, editorState),
              addGameObjectCustomGeometryComponent(gameObject, component, engineState)
            ];
    } else {
      return /* tuple */[
              undefined,
              addGameObjectCustomGeometryComponent(gameObject, component, engineState)
            ];
    }
  }
  
  function addCameraComponent(gameObject, cameraRecord, param) {
    var engineState = param[1];
    var editorState = param[0];
    if (editorState !== undefined) {
      return /* tuple */[
              addComponentTypeToMap(gameObject, /* Camera */4, editorState),
              addGameObjectPerspectiveCameraProjectionComponent(gameObject, cameraRecord[/* perspectiveCameraProjection */1], addGameObjectBasicCameraViewComponent(gameObject, cameraRecord[/* basicCameraView */0], engineState))
            ];
    } else {
      return /* tuple */[
              undefined,
              addGameObjectPerspectiveCameraProjectionComponent(gameObject, cameraRecord[/* perspectiveCameraProjection */1], addGameObjectBasicCameraViewComponent(gameObject, cameraRecord[/* basicCameraView */0], engineState))
            ];
    }
  }
  
  function addDirectionLightComponent$2(gameObject, component, param) {
    var engineState = param[1];
    var editorState = param[0];
    if (editorState !== undefined) {
      return /* tuple */[
              addComponentTypeToMap(gameObject, /* Light */6, editorState),
              addGameObjectDirectionLightComponent(gameObject, component, engineState)
            ];
    } else {
      return /* tuple */[
              undefined,
              addGameObjectDirectionLightComponent(gameObject, component, engineState)
            ];
    }
  }
  
  function addArcballCameraControllerComponent$2(gameObject, component, param) {
    var engineState = param[1];
    var editorState = param[0];
    if (editorState !== undefined) {
      return /* tuple */[
              addComponentTypeToMap(gameObject, /* ArcballCameraController */3, editorState),
              addGameObjectArcballCameraControllerComponent(gameObject, component, engineState)
            ];
    } else {
      return /* tuple */[
              undefined,
              addGameObjectArcballCameraControllerComponent(gameObject, component, engineState)
            ];
    }
  }
  
  function disposeLightMaterialComponent$1(gameObject, component, param) {
    var engineState = param[1];
    var editorState = param[0];
    if (editorState !== undefined) {
      return /* tuple */[
              removeComponentTypeToMap(gameObject, /* Material */5, editorState),
              disposeGameObjectLightMaterialComponent(gameObject, component, engineState)
            ];
    } else {
      return /* tuple */[
              undefined,
              disposeGameObjectLightMaterialComponent(gameObject, component, engineState)
            ];
    }
  }
  
  function disposeBasicMaterialComponent$1(gameObject, component, param) {
    var engineState = param[1];
    var editorState = param[0];
    if (editorState !== undefined) {
      return /* tuple */[
              removeComponentTypeToMap(gameObject, /* Material */5, editorState),
              disposeGameObjectBasicMaterialComponent(gameObject, component, engineState)
            ];
    } else {
      return /* tuple */[
              undefined,
              disposeGameObjectBasicMaterialComponent(gameObject, component, engineState)
            ];
    }
  }
  
  function disposeMeshRendererComponent$1(gameObject, component, param) {
    var engineState = param[1];
    var editorState = param[0];
    if (editorState !== undefined) {
      return /* tuple */[
              removeComponentTypeToMap(gameObject, /* MeshRenderer */1, editorState),
              disposeGameObjectMeshRendererComponent(gameObject, component, engineState)
            ];
    } else {
      return /* tuple */[
              undefined,
              disposeGameObjectMeshRendererComponent(gameObject, component, engineState)
            ];
    }
  }
  
  function disposeCameraComponent(gameObject, cameraRecord, param) {
    var engineState = param[1];
    var editorState = param[0];
    if (editorState !== undefined) {
      return /* tuple */[
              removeComponentTypeToMap(gameObject, /* Camera */4, editorState),
              disposeGameObjectPerspectiveCameraProjectionComponent(gameObject, cameraRecord[/* perspectiveCameraProjection */1], disposeGameObjectBasicCameraViewComponent(gameObject, cameraRecord[/* basicCameraView */0], engineState))
            ];
    } else {
      return /* tuple */[
              undefined,
              disposeGameObjectPerspectiveCameraProjectionComponent(gameObject, cameraRecord[/* perspectiveCameraProjection */1], disposeGameObjectBasicCameraViewComponent(gameObject, cameraRecord[/* basicCameraView */0], engineState))
            ];
    }
  }
  
  function disposeDirectionLightComponent$1(gameObject, component, param) {
    var engineState = param[1];
    var editorState = param[0];
    if (editorState !== undefined) {
      return /* tuple */[
              removeComponentTypeToMap(gameObject, /* Light */6, editorState),
              disposeGameObjectDirectionLightComponent(gameObject, component, engineState)
            ];
    } else {
      return /* tuple */[
              undefined,
              disposeGameObjectDirectionLightComponent(gameObject, component, engineState)
            ];
    }
  }
  
  function disposePointLightComponent$1(gameObject, component, param) {
    var engineState = param[1];
    var editorState = param[0];
    if (editorState !== undefined) {
      return /* tuple */[
              removeComponentTypeToMap(gameObject, /* Light */6, editorState),
              disposeGameObjectPointLightComponent(gameObject, component, engineState)
            ];
    } else {
      return /* tuple */[
              undefined,
              disposeGameObjectPointLightComponent(gameObject, component, engineState)
            ];
    }
  }
  
  function disposeArcballCameraControllerComponent$1(gameObject, component, param) {
    var engineState = param[1];
    var editorState = param[0];
    if (editorState !== undefined) {
      return /* tuple */[
              removeComponentTypeToMap(gameObject, /* ArcballCameraController */3, editorState),
              disposeGameObjectArcballCameraControllerComponent(gameObject, component, engineState)
            ];
    } else {
      return /* tuple */[
              undefined,
              disposeGameObjectArcballCameraControllerComponent(gameObject, component, engineState)
            ];
    }
  }
  
  
  /* GameObjectAPI-Wonderjs Not a pure module */
  
  /* GameObjectMapService-Wonderjs Not a pure module */
  
  function createMeshRenderer(state) {
    return create$17(state);
  }
  
  function setMeshRendererDrawMode(meshRenderer, drawMode, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(meshRenderer, isAlive$6, getRecord$7(state));
          }), getIsDebug(stateData));
    return setDrawMode$1(meshRenderer, drawMode, state);
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  var create$67 = createMeshRenderer;
  
  var setDrawMode$2 = setMeshRendererDrawMode;
  
  
  /* MeshRendererAPI-Wonderjs Not a pure module */
  
  function setLightMaterialDiffuseColor$1(color, material, engineState) {
    return setLightMaterialDiffuseColor(material, color, engineState);
  }
  
  function setLightMaterialShininess$1(shininess, material, engineState) {
    return setLightMaterialShininess(material, shininess, engineState);
  }
  
  function setLightMaterialDiffuseMap$1(map, material, engineState) {
    return setLightMaterialDiffuseMap(material, map, engineState);
  }
  
  var create$68 = createLightMaterial;
  
  var getLightMaterialDiffuseColor$1 = getLightMaterialDiffuseColor;
  
  var getLightMaterialShininess$1 = getLightMaterialShininess;
  
  var getLightMaterialDiffuseMap = getDiffuseMap$1;
  
  var reInitMaterials$1 = reInitMaterials;
  
  
  /* LightMaterialAPI-Wonderjs Not a pure module */
  
  function isExceedMaxCount$2(lightIndexFromRecord, _) {
    return lightIndexFromRecord >= getBufferMaxCount(/* () */0);
  }
  
  
  /* BufferDirectionLightService-Wonderjs Not a pure module */
  
  function createDirectionLight$1(state) {
    var match = create$15(state[/* directionLightRecord */21]);
    state[/* directionLightRecord */21] = match[0];
    return /* tuple */[
            state,
            match[1]
          ];
  }
  
  function getDirectionLightColor$1(light, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(light, isAlive$7, state[/* directionLightRecord */21]);
          }), getIsDebug(stateData));
    return getColor$10(getMappedIndex(light, getMappedIndexMap(state[/* directionLightRecord */21])), state[/* directionLightRecord */21]);
  }
  
  function setDirectionLightColor$1(light, color, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(light, isAlive$7, state[/* directionLightRecord */21]);
          }), getIsDebug(stateData));
    var newrecord = caml_array_dup(state);
    newrecord[/* directionLightRecord */21] = setColor$5(getMappedIndex(light, getMappedIndexMap(state[/* directionLightRecord */21])), color, state[/* directionLightRecord */21]);
    return newrecord;
  }
  
  function getDirectionLightIntensity$1(light, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(light, isAlive$7, state[/* directionLightRecord */21]);
          }), getIsDebug(stateData));
    return getIntensity$5(getMappedIndex(light, getMappedIndexMap(state[/* directionLightRecord */21])), state[/* directionLightRecord */21]);
  }
  
  function setDirectionLightIntensity$1(light, color, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(light, isAlive$7, state[/* directionLightRecord */21]);
          }), getIsDebug(stateData));
    var newrecord = caml_array_dup(state);
    newrecord[/* directionLightRecord */21] = setIntensity$3(getMappedIndex(light, getMappedIndexMap(state[/* directionLightRecord */21])), color, state[/* directionLightRecord */21]);
    return newrecord;
  }
  
  function isExceedMaxCount$1(param) {
    var directionLightRecord = param[/* directionLightRecord */21];
    return isExceedMaxCount$2(directionLightRecord[/* index */0], getBufferMaxCount(/* () */0));
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  function setDirectionLightColor(color, lightComponent, engineState) {
    return setDirectionLightColor$1(lightComponent, color, engineState);
  }
  
  function setDirectionLightIntensity(intensity, lightComponent, engineState) {
    return setDirectionLightIntensity$1(lightComponent, intensity, engineState);
  }
  
  var create$69 = createDirectionLight$1;
  
  var getDirectionLightColor = getDirectionLightColor$1;
  
  var getDirectionLightIntensity = getDirectionLightIntensity$1;
  
  var isExceedMaxCount = isExceedMaxCount$1;
  
  
  /* DirectionLightAPI-Wonderjs Not a pure module */
  
  function createEmptyGameObject(editorState, engineState) {
    var match = createGameObject$1(/* tuple */[
          editorState,
          engineState
        ]);
    var match$1 = match[1];
    var obj = match$1[1];
    var engineState$1 = setGameObjectName("gameObject", obj, match$1[0]);
    return /* tuple */[
            match[0],
            engineState$1,
            obj
          ];
  }
  
  function createBox(editorState, engineState) {
    var match = createGameObject$1(/* tuple */[
          editorState,
          engineState
        ]);
    var match$1 = match[1];
    var obj = match$1[1];
    var match$2 = create$68(match$1[0]);
    var match$3 = create$67(match$2[0]);
    var match$4 = createBoxGeometry(match$3[0]);
    var engineState$1 = setGameObjectName("cube", obj, match$4[0]);
    var match$5 = addMeshRendererComponent$2(obj, match$3[1], addBoxGeometryComponent$2(obj, match$4[1], addLightMaterialComponent$2(obj, match$2[1], /* tuple */[
                  match[0],
                  engineState$1
                ])));
    return /* tuple */[
            match$5[0],
            match$5[1],
            obj
          ];
  }
  
  function createDirectionLight(editorState, engineState) {
    var match = createGameObject$1(/* tuple */[
          editorState,
          engineState
        ]);
    var match$1 = match[1];
    var obj = match$1[1];
    var match$2 = create$69(match$1[0]);
    var engineState$1 = setGameObjectName("Direction Light", obj, match$2[0]);
    var match$3 = addDirectionLightComponent$2(obj, match$2[1], /* tuple */[
          match[0],
          engineState$1
        ]);
    return /* tuple */[
            match$3[0],
            match$3[1],
            obj
          ];
  }
  
  
  /* GeometryEngineService-WonderEditor Not a pure module */
  
  function createDefaultSceneGameObjects(editorState, engineState, createCameraFunc) {
    var match = createBox(editorState, engineState);
    var match$1 = createBox(match[0], match[1]);
    var match$2 = createDirectionLight(match$1[0], match$1[1]);
    var match$3 = _2(createCameraFunc, match$2[0], match$2[1]);
    return /* tuple */[
            match$3[0],
            match$3[1],
            match$3[2],
            match[2],
            match$1[2],
            match$2[2]
          ];
  }
  
  var setCurrentCameraGameObject$1 = setCurrentCameraGameObject$2;
  
  var getAmbientLightColor$2 = getAmbientLightColor$3;
  
  var setAmbientLightColor$2 = setAmbientLightColor$3;
  
  var getSceneGameObject = getSceneGameObject$1;
  
  var addSceneChild = addSceneChild$1;
  
  
  /* SceneAPI-Wonderjs Not a pure module */
  
  function createBasicCameraView(state) {
    var match = create$16(state[/* basicCameraViewRecord */14]);
    state[/* basicCameraViewRecord */14] = match[0];
    return /* tuple */[
            state,
            match[1]
          ];
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  var create$70 = createBasicCameraView;
  
  
  /* BasicCameraViewAPI-Wonderjs Not a pure module */
  
  /* GameObjectMapService-Wonderjs Not a pure module */
  
  function createPerspectiveCameraProjection(state) {
    var match = create$22(state[/* perspectiveCameraProjectionRecord */15]);
    state[/* perspectiveCameraProjectionRecord */15] = match[0];
    return /* tuple */[
            state,
            match[1]
          ];
  }
  
  function setPerspectiveCameraProjectionFovy(cameraProjection, fovy, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* perspectiveCameraProjectionRecord */15] = setFovy(cameraProjection, fovy, state[/* perspectiveCameraProjectionRecord */15]);
    return newrecord;
  }
  
  function setPerspectiveCameraProjectionAspect(cameraProjection, aspect, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* perspectiveCameraProjectionRecord */15] = setAspect(cameraProjection, aspect, state[/* perspectiveCameraProjectionRecord */15]);
    return newrecord;
  }
  
  function setPerspectiveCameraProjectionNear(cameraProjection, near, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* perspectiveCameraProjectionRecord */15] = setNear(cameraProjection, near, state[/* perspectiveCameraProjectionRecord */15]);
    return newrecord;
  }
  
  function setPerspectiveCameraProjectionFar(cameraProjection, far, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* perspectiveCameraProjectionRecord */15] = setFar(cameraProjection, far, state[/* perspectiveCameraProjectionRecord */15]);
    return newrecord;
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  var create$71 = createPerspectiveCameraProjection;
  
  var setPerspectiveCameraNear = setPerspectiveCameraProjectionNear;
  
  var setPerspectiveCameraFar = setPerspectiveCameraProjectionFar;
  
  var setPerspectiveCameraAspect = setPerspectiveCameraProjectionAspect;
  
  var setPerspectiveCameraFovy = setPerspectiveCameraProjectionFovy;
  
  
  /* PerspectiveCameraProjectionAPI-Wonderjs Not a pure module */
  
  function createPerspectiveCamera(engineState) {
    var match = create$71(engineState);
    var cameraProjection = match[1];
    var engineState$1 = setPerspectiveCameraAspect(cameraProjection, 1, setPerspectiveCameraFovy(cameraProjection, 60, setPerspectiveCameraFar(cameraProjection, 1000, setPerspectiveCameraNear(cameraProjection, 0.1, match[0]))));
    return /* tuple */[
            engineState$1,
            cameraProjection
          ];
  }
  
  function createCameraComponent(engineState) {
    var match = create$70(engineState);
    var match$1 = createPerspectiveCamera(match[0]);
    return /* tuple */[
            match$1[0],
            /* record */[
              /* basicCameraView */match[1],
              /* perspectiveCameraProjection */match$1[1]
            ]
          ];
  }
  
  function createCamera(editorState, engineState) {
    var match = createGameObject$1(/* tuple */[
          editorState,
          engineState
        ]);
    var match$1 = match[1];
    var gameObject = match$1[1];
    var match$2 = createCameraComponent(match$1[0]);
    var engineState$1 = setGameObjectName("camera", gameObject, match$2[0]);
    var match$3 = addCameraComponent(gameObject, match$2[1], /* tuple */[
          match[0],
          engineState$1
        ]);
    return /* tuple */[
            match$3[0],
            match$3[1],
            gameObject
          ];
  }
  
  function hasCameraComponent(gameObject, engineState) {
    if (hasBasicCameraViewComponent$1(gameObject, engineState)) {
      return hasPerspectiveCameraProjectionComponent$1(gameObject, engineState);
    } else {
      return false;
    }
  }
  
  
  /* GameObjectLogicService-WonderEditor Not a pure module */
  
  function doesSceneHasRemoveableCamera() {
    var match = getEngineStateToGetData((function (engineState) {
            return getChildren(getSceneGameObject(engineState), engineState).filter((function (gameObject) {
                          return hasCameraComponent(gameObject, engineState);
                        })).length;
          }));
    return match !== 1;
  }
  
  function isGameObjectNotRemoveable(gameObject) {
    if (gameObject !== undefined) {
      var gameObject$1 = gameObject;
      var match = getEngineStateToGetData((function (param) {
              return hasCameraComponent(gameObject$1, param);
            }));
      if (match) {
        return !doesSceneHasRemoveableCamera(/* () */0);
      } else {
        return false;
      }
    } else {
      return true;
    }
  }
  
  
  /* GameObjectUtils-WonderEditor Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function alwaysTrue() {
    return true;
  }
  
  function alwaysTrue2(_, _$1) {
    return true;
  }
  
  function alwaysTrue3(_, _$1, _$2) {
    return true;
  }
  
  function flip(f, b, a) {
    return _2(f, a, b);
  }
  
  function getKey(k, _) {
    return k;
  }
  
  function getValue$1(_, v) {
    return v;
  }
  
  function $great$great(f1, f2) {
    return (function (param) {
        return _1(f2, _1(f1, param));
      });
  }
  
  var Operators$1 = /* module */[/* >> */$great$great];
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function countImpl(_list, _count) {
    while(true) {
      var count = _count;
      var list = _list;
      if (list) {
        _count = count + 1 | 0;
        _list = list[1];
        continue ;
      } else {
        return count;
      }
    }
  }
  
  function count$3(list) {
    return countImpl(list, 0);
  }
  
  function isEmpty$2$1(list) {
    if (list) {
      return false;
    } else {
      return true;
    }
  }
  
  function firstOrRaise$2(list) {
    if (list) {
      return list[0];
    } else {
      return failwith("empty");
    }
  }
  
  function reduceImpl(predicate, f, _acc, _list) {
    while(true) {
      var list = _list;
      var acc = _acc;
      if (list) {
        var head = list[0];
        if (_2(predicate, acc, head)) {
          var acc$1 = _2(f, acc, head);
          _list = list[1];
          _acc = acc$1;
          continue ;
        } else {
          return acc;
        }
      } else {
        return acc;
      }
    }
  }
  
  function reduce$6($staropt$star, f, acc, list) {
    var predicate = $staropt$star !== undefined ? $staropt$star : alwaysTrue2;
    return reduceImpl(predicate, f, acc, list);
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  
  var equal$2 = /* Equal */0;
  
  var greaterThan = /* GreaterThan */1;
  
  var lessThan = /* LessThan */2;
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function firstOrRaise$5(opt) {
    if (opt !== undefined) {
      return valFromOption(opt);
    } else {
      return failwith("option is none");
    }
  }
  
  function isEmpty$4(opt) {
    return opt === undefined;
  }
  
  function $$return$4(a) {
    return some(a);
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function failIf(msg, condition) {
    if (condition) {
      return failwith(msg);
    } else {
      return /* () */0;
    }
  }
  
  function failIfOutOfRange(count, index) {
    if (index < 0) {
      return failwith("Index must be greater than 0");
    } else if (index >= count) {
      return failwith("Index must be less than count");
    } else {
      return /* () */0;
    }
  }
  
  function noneIfIndexOutOfRange(count, index, f) {
    if (index < 0 || index >= count) {
      return undefined;
    } else {
      return $$return$4(_1(f, index));
    }
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function emptySeq() {
    return /* Completed */0;
  }
  
  function isEmpty$3$1(seq) {
    return seq === emptySeq;
  }
  
  function reduce$8(predicate, reducer, _acc, _seq) {
    while(true) {
      var seq = _seq;
      var acc = _acc;
      var match = _1(seq, /* () */0);
      if (match) {
        var value = match[0];
        if (_2(predicate, acc, value)) {
          var acc$1 = _2(reducer, acc, value);
          _seq = match[1];
          _acc = acc$1;
          continue ;
        } else {
          return acc;
        }
      } else {
        return acc;
      }
    }
  }
  
  function empty$7() {
    return emptySeq;
  }
  
  function $$yield(value, continuation, _) {
    return /* Next */[
            value,
            _1(continuation, /* () */0)
          ];
  }
  
  function $$return$3(value) {
    return (function () {
        return /* Next */[
                value,
                emptySeq
              ];
      });
  }
  
  function ofList(list, _) {
    if (list) {
      var tail = list[1];
      var value = list[0];
      if (tail) {
        return /* Next */[
                value,
                (function (param) {
                    return ofList(tail, param);
                  })
              ];
      } else {
        return /* Next */[
                value,
                emptySeq
              ];
      }
    } else {
      return /* Completed */0;
    }
  }
  
  function flatten$2(seq) {
    var continuedWith = function (continuation, iter) {
      if (iter) {
        return /* Next */[
                iter[0],
                Operators$1[/* >> */0](iter[1], (function (param) {
                        return continuedWith(continuation, param);
                      }))
              ];
      } else {
        return flattenIter(_1(continuation, /* () */0));
      }
    };
    var flattenIter = function (iter) {
      if (iter) {
        return continuedWith(iter[1], _1(iter[0], /* () */0));
      } else {
        return /* Completed */0;
      }
    };
    return (function () {
        return flattenIter(_1(seq, /* () */0));
      });
  }
  
  function concat$5(seqs) {
    return flatten$2((function (param) {
                  return ofList(seqs, param);
                }));
  }
  
  function defer$1(f, _) {
    return _2(f, /* () */0, /* () */0);
  }
  
  function map$10(f, seq, _) {
    var match = _1(seq, /* () */0);
    if (match) {
      var next = match[1];
      return /* Next */[
              _1(f, match[0]),
              (function (param) {
                  return map$10(f, next, param);
                })
            ];
    } else {
      return /* Completed */0;
    }
  }
  
  function flatMap$1(f, seq) {
    return flatten$2((function (param) {
                  return map$10(f, seq, param);
                }));
  }
  
  function zip2With(zipper, a, b, _) {
    var match = _1(a, /* () */0);
    var match$1 = _1(b, /* () */0);
    if (match && match$1) {
      var bNext = match$1[1];
      var aNext = match[1];
      return /* Next */[
              _2(zipper, match[0], match$1[0]),
              (function (param) {
                  return zip2With(zipper, aNext, bNext, param);
                })
            ];
    } else {
      return /* Completed */0;
    }
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function contains$3(value, param) {
    var start = param[/* start */1];
    if (value >= start) {
      return value < (start + param[/* count */0] | 0);
    } else {
      return false;
    }
  }
  
  function count$4(param) {
    return param[/* count */0];
  }
  
  function firstOrRaise$3(param) {
    if (param[/* count */0] === 0) {
      return failwith("empty");
    } else {
      return param[/* start */1];
    }
  }
  
  function lastOrRaise$2(param) {
    var count = param[/* count */0];
    if (count === 0) {
      return failwith("empty");
    } else {
      return (param[/* start */1] + count | 0) - 1 | 0;
    }
  }
  
  function reduce$7(predicate, f, acc, param) {
    var predicate$1 = predicate;
    var f$1 = f;
    var _start = param[/* start */1];
    var _count = param[/* count */0];
    var _acc = acc;
    while(true) {
      var acc$1 = _acc;
      var count = _count;
      var start = _start;
      if (count === 0 || !_2(predicate$1, acc$1, start)) {
        return acc$1;
      } else {
        var acc$2 = _2(f$1, acc$1, start);
        _acc = acc$2;
        _count = count - 1 | 0;
        _start = start + 1 | 0;
        continue ;
      }
    }
  }
  
  function reduceReversed$3(predicate, f, acc, param) {
    var count = param[/* count */0];
    var predicate$1 = predicate;
    var f$1 = f;
    var _start = (param[/* start */1] + count | 0) - 1 | 0;
    var _count = count;
    var _acc = acc;
    while(true) {
      var acc$1 = _acc;
      var count$1 = _count;
      var start = _start;
      if (count$1 === 0 || !_2(predicate$1, acc$1, start)) {
        return acc$1;
      } else {
        var acc$2 = _2(f$1, acc$1, start);
        _acc = acc$2;
        _count = count$1 - 1 | 0;
        _start = start - 1 | 0;
        continue ;
      }
    }
  }
  
  function toSequence$3(param) {
    var recurse = function (start, count, _) {
      if (count === 0) {
        return empty$7(/* () */0);
      } else {
        var partial_arg = count - 1 | 0;
        var partial_arg$1 = start + 1 | 0;
        var partial_arg$2 = function (param) {
          return recurse(partial_arg$1, partial_arg, param);
        };
        return (function (param) {
            return $$yield(start, partial_arg$2, param);
          });
      }
    };
    return recurse(param[/* start */1], param[/* count */0], /* () */0);
  }
  
  function toSequenceReversed$3(param) {
    var count = param[/* count */0];
    var recurse = function (start, count, _) {
      if (count === 0) {
        return empty$7(/* () */0);
      } else {
        var partial_arg = count - 1 | 0;
        var partial_arg$1 = start - 1 | 0;
        var partial_arg$2 = function (param) {
          return recurse(partial_arg$1, partial_arg, param);
        };
        return (function (param) {
            return $$yield(start, partial_arg$2, param);
          });
      }
    };
    return recurse((param[/* start */1] + count | 0) - 1 | 0, count, /* () */0);
  }
  
  var emptyInstance$1 = /* record */[
    /* count */0,
    /* start */0
  ];
  
  function create$72(start, count) {
    failIf("count must be >= 0", count < 0);
    if (count === 0) {
      return emptyInstance$1;
    } else {
      return /* record */[
              /* count */count,
              /* start */start
            ];
    }
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function create$1$1(value) {
    return /* record */[
            /* owner : record */[/* contents : Owner */0],
            /* editable */true,
            /* value */value
          ];
  }
  
  function ensureEditable($$transient) {
    var editable = $$transient[/* editable */1];
    if (editable) {
      return $$transient;
    } else {
      return failwith("Transient has already been persisted");
    }
  }
  
  function get$5($$transient) {
    return ensureEditable($$transient)[/* value */2];
  }
  
  function update$7(f, $$transient) {
    var $$transient$1 = ensureEditable($$transient);
    $$transient$1[/* value */2] = _2(f, $$transient$1[/* owner */0], $$transient$1[/* value */2]);
    return $$transient$1;
  }
  
  function update1(f, arg, $$transient) {
    var $$transient$1 = ensureEditable($$transient);
    $$transient$1[/* value */2] = _3(f, $$transient$1[/* owner */0], arg, $$transient$1[/* value */2]);
    return $$transient$1;
  }
  
  
  /* No side effect */
  
  function copy$8(a) {
    var l = a.length;
    if (l === 0) {
      return /* array */[];
    } else {
      return caml_array_sub(a, 0, l);
    }
  }
  
  function sub$4(a, ofs, len) {
    if (len < 0 || ofs > (a.length - len | 0)) {
      throw [
            invalid_argument,
            "Array.sub"
          ];
    } else {
      return caml_array_sub(a, ofs, len);
    }
  }
  
  function blit$2(a1, ofs1, a2, ofs2, len) {
    if (len < 0 || ofs1 < 0 || ofs1 > (a1.length - len | 0) || ofs2 < 0 || ofs2 > (a2.length - len | 0)) {
      throw [
            invalid_argument,
            "Array.blit"
          ];
    } else {
      return caml_array_blit(a1, ofs1, a2, ofs2, len);
    }
  }
  
  var Bottom = create("Array.Bottom");
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function count$6(arr) {
    return arr.length;
  }
  
  function getOrRaise$1(index, arr) {
    return caml_array_get(arr, index);
  }
  
  function reduce$10(predicate, f, acc, arr) {
    var arrCount = arr.length;
    var _acc = acc;
    var _index = 0;
    while(true) {
      var index = _index;
      var acc$1 = _acc;
      if (index < arrCount) {
        var next = caml_array_get(arr, index);
        if (_2(predicate, acc$1, next)) {
          var acc$2 = _2(f, acc$1, caml_array_get(arr, index));
          _index = index + 1 | 0;
          _acc = acc$2;
          continue ;
        } else {
          return acc$1;
        }
      } else {
        return acc$1;
      }
    }
  }
  
  function reduceReversed$5(predicate, f, acc, arr) {
    var arrCount = arr.length;
    var _acc = acc;
    var _index = arrCount - 1 | 0;
    while(true) {
      var index = _index;
      var acc$1 = _acc;
      if (index >= 0) {
        var next = caml_array_get(arr, index);
        if (_2(predicate, acc$1, next)) {
          var acc$2 = _2(f, acc$1, caml_array_get(arr, index));
          _index = index - 1 | 0;
          _acc = acc$2;
          continue ;
        } else {
          return acc$1;
        }
      } else {
        return acc$1;
      }
    }
  }
  
  function toSequence$5(arr) {
    var arrCount = arr.length;
    var loop = function (index, _) {
      if (index < arrCount) {
        var partial_arg = index + 1 | 0;
        var partial_arg$1 = function (param) {
          return loop(partial_arg, param);
        };
        var partial_arg$2 = caml_array_get(arr, index);
        return (function (param) {
            return $$yield(partial_arg$2, partial_arg$1, param);
          });
      } else {
        return empty$7(/* () */0);
      }
    };
    return loop(0, /* () */0);
  }
  
  function toSequenceReversed$5(arr) {
    var loop = function (index, _) {
      if (index < 0) {
        return empty$7(/* () */0);
      } else {
        var partial_arg = index - 1 | 0;
        var partial_arg$1 = function (param) {
          return loop(partial_arg, param);
        };
        var partial_arg$2 = caml_array_get(arr, index);
        return (function (param) {
            return $$yield(partial_arg$2, partial_arg$1, param);
          });
      }
    };
    return loop(arr.length - 1 | 0, /* () */0);
  }
  
  function lastIndexOrRaise(arr) {
    var lastIndex = arr.length - 1 | 0;
    if (lastIndex >= 0) {
      return lastIndex;
    } else {
      return failwith("empty");
    }
  }
  
  function addFirst$3(item, arr) {
    var count = arr.length;
    var retval = caml_make_vect(count + 1 | 0, item);
    blit$2(arr, 0, retval, 1, count);
    return retval;
  }
  
  function addLast$2(item, arr) {
    var count = arr.length;
    var retval = caml_make_vect(count + 1 | 0, item);
    blit$2(arr, 0, retval, 0, count);
    return retval;
  }
  
  function insertAt$1(index, item, arr) {
    var count = arr.length;
    failIfOutOfRange(count + 1 | 0, index);
    var retval = caml_make_vect(count + 1 | 0, item);
    blit$2(arr, 0, retval, 0, index);
    blit$2(arr, index, retval, index + 1 | 0, count - index | 0);
    return retval;
  }
  
  function removeLastOrRaise$2(arr) {
    var count = arr.length;
    if (count === 0) {
      return failwith("Array is empty");
    } else if (count === 1) {
      return /* array */[];
    } else {
      return sub$4(arr, 0, count - 1 | 0);
    }
  }
  
  function removeAt$1(index, arr) {
    var count = arr.length;
    failIfOutOfRange(count, index);
    var newLength = count - 1 | 0;
    var anyItem = caml_array_get(arr, 0);
    var retval = caml_make_vect(newLength, anyItem);
    blit$2(arr, 0, retval, 0, index);
    blit$2(arr, index + 1 | 0, retval, index, newLength - index | 0);
    return retval;
  }
  
  function removeFirstOrRaise$3(arr) {
    return removeAt$1(0, arr);
  }
  
  function update$9(index, item, arr) {
    var arrCount = arr.length;
    failIfOutOfRange(arrCount, index);
    var clone = copy$8(arr);
    caml_array_set(clone, index, item);
    return clone;
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function canRadixSearch(depth, count, tries) {
    var childCapacity = (32 << imul(depth - 1 | 0, 5));
    var triesCount = count$6(tries);
    return count === imul(triesCount, childCapacity);
  }
  
  function computeIndexUsingRadixSearch(depth, index) {
    var mask = 31;
    var level = imul(depth, 5);
    return (index >>> level) & mask;
  }
  
  function count$5(trie) {
    if (typeof trie === "number") {
      return 0;
    } else if (trie.tag) {
      return trie[1][0];
    } else {
      return count$6(trie[1]);
    }
  }
  
  function depth(trie) {
    if (typeof trie === "number") {
      return failwith("invalid state");
    } else if (trie.tag) {
      return trie[0];
    } else {
      return 0;
    }
  }
  
  function addFirstLeafIfSpace(updateLevel, owner, values, trie) {
    if (typeof trie === "number") {
      throw [
            match_failure,
            /* tuple */[
              "IndexedTrie.re",
              52,
              6
            ]
          ];
    } else if (trie.tag) {
      var tries = trie[3];
      var levelCount = trie[1];
      var levelDepth = trie[0];
      var firstChild = getOrRaise$1(0, tries);
      var firstChildCount = count$5(firstChild);
      var firstChildDepth = depth(firstChild);
      var triesWidth = count$6(tries);
      var valuesCount = count$6(values);
      if (typeof firstChild === "number") {
        return trie;
      } else if (firstChild.tag) {
        var firstChild$1 = addFirstLeafIfSpace(updateLevel, owner, values, firstChild);
        var newFirstChildCount = count$5(firstChild$1);
        if (firstChildCount !== newFirstChildCount) {
          var levelCount$1 = (levelCount[0] - firstChildCount | 0) + newFirstChildCount | 0;
          return _5(updateLevel, owner, levelCount$1, 0, firstChild$1, trie);
        } else if (firstChildDepth < (levelDepth - 1 | 0)) {
          var newFirstChildLevelCount = /* record */[/* contents */firstChildCount + valuesCount | 0];
          var child_000 = firstChild[0] + 1 | 0;
          var child_003 = /* array */[
            /* Leaf */__(0, [
                owner,
                values
              ]),
            firstChild$1
          ];
          var child = /* Level */__(1, [
              child_000,
              newFirstChildLevelCount,
              owner,
              child_003
            ]);
          var levelCount$2 = levelCount[0] + valuesCount | 0;
          return _5(updateLevel, owner, levelCount$2, 0, child, trie);
        } else if (triesWidth < 32) {
          var newLevelCount = levelCount[0] + valuesCount | 0;
          return /* Level */__(1, [
                    levelDepth,
                    /* record */[/* contents */newLevelCount],
                    owner,
                    addFirst$3(/* Leaf */__(0, [
                            owner,
                            values
                          ]), tries)
                  ]);
        } else {
          return trie;
        }
      } else if (firstChildDepth < (levelDepth - 1 | 0)) {
        var childLevelCount = firstChildCount + valuesCount | 0;
        var child_001 = /* record */[/* contents */childLevelCount];
        var child_003$1 = /* array */[
          /* Leaf */__(0, [
              owner,
              values
            ]),
          firstChild
        ];
        var child$1 = /* Level */__(1, [
            1,
            child_001,
            owner,
            child_003$1
          ]);
        var levelCount$3 = (levelCount[0] - firstChildCount | 0) + childLevelCount | 0;
        return _5(updateLevel, owner, levelCount$3, 0, child$1, trie);
      } else if (triesWidth < 32) {
        var newLevelCount$1 = levelCount[0] + valuesCount | 0;
        return /* Level */__(1, [
                  levelDepth,
                  /* record */[/* contents */newLevelCount$1],
                  owner,
                  addFirst$3(/* Leaf */__(0, [
                          owner,
                          values
                        ]), tries)
                ]);
      } else {
        return trie;
      }
    } else {
      throw [
            match_failure,
            /* tuple */[
              "IndexedTrie.re",
              52,
              6
            ]
          ];
    }
  }
  
  function addFirstLeaf(updateLevel, owner, values, trie) {
    if (typeof trie === "number") {
      return /* Leaf */__(0, [
                owner,
                values
              ]);
    } else if (trie.tag) {
      var prevTrieCount = count$5(trie);
      var trie$1 = addFirstLeafIfSpace(updateLevel, owner, values, trie);
      var newTrieCount = count$5(trie$1);
      if (newTrieCount !== prevTrieCount) {
        return trie$1;
      } else {
        var levelCount = newTrieCount + count$6(values) | 0;
        var levelDepth = trie[0] + 1 | 0;
        return /* Level */__(1, [
                  levelDepth,
                  /* record */[/* contents */levelCount],
                  owner,
                  /* array */[
                    /* Leaf */__(0, [
                        owner,
                        values
                      ]),
                    trie$1
                  ]
                ]);
      }
    } else {
      var levelCount$1 = count$5(trie) + count$6(values) | 0;
      return /* Level */__(1, [
                1,
                /* record */[/* contents */levelCount$1],
                owner,
                /* array */[
                  /* Leaf */__(0, [
                      owner,
                      values
                    ]),
                  trie
                ]
              ]);
    }
  }
  
  function addLastLeafIfSpace(updateLevel, owner, values, trie) {
    if (typeof trie === "number") {
      throw [
            match_failure,
            /* tuple */[
              "IndexedTrie.re",
              129,
              6
            ]
          ];
    } else if (trie.tag) {
      var tries = trie[3];
      var levelCount = trie[1];
      var levelDepth = trie[0];
      var index = lastIndexOrRaise(tries);
      var lastChild = getOrRaise$1(index, tries);
      var lastChildCount = count$5(lastChild);
      var lastChildDepth = depth(lastChild);
      var triesWidth = count$6(tries);
      var valuesCount = count$6(values);
      if (typeof lastChild === "number") {
        return trie;
      } else if (lastChild.tag) {
        var lastChild$1 = addLastLeafIfSpace(updateLevel, owner, values, lastChild);
        var newLastChildCount = count$5(lastChild$1);
        if (newLastChildCount !== lastChildCount) {
          var levelCount$1 = (levelCount[0] - lastChildCount | 0) + newLastChildCount | 0;
          return _5(updateLevel, owner, levelCount$1, index, lastChild$1, trie);
        } else if (lastChildDepth < (levelDepth - 1 | 0)) {
          var newLastChildLevelCount = /* record */[/* contents */lastChildCount + valuesCount | 0];
          var child_000 = lastChild[0] + 1 | 0;
          var child_003 = /* array */[
            lastChild$1,
            /* Leaf */__(0, [
                owner,
                values
              ])
          ];
          var child = /* Level */__(1, [
              child_000,
              newLastChildLevelCount,
              owner,
              child_003
            ]);
          var levelCount$2 = levelCount[0] + valuesCount | 0;
          return _5(updateLevel, owner, levelCount$2, index, child, trie);
        } else if (triesWidth < 32) {
          var newLevelCount = /* record */[/* contents */levelCount[0] + valuesCount | 0];
          return /* Level */__(1, [
                    levelDepth,
                    newLevelCount,
                    owner,
                    addLast$2(/* Leaf */__(0, [
                            owner,
                            values
                          ]), tries)
                  ]);
        } else {
          return trie;
        }
      } else if (lastChildDepth < (levelDepth - 1 | 0)) {
        var newLastChildLevelCount$1 = lastChildCount + valuesCount | 0;
        var child_001 = /* record */[/* contents */newLastChildLevelCount$1];
        var child_003$1 = /* array */[
          lastChild,
          /* Leaf */__(0, [
              owner,
              values
            ])
        ];
        var child$1 = /* Level */__(1, [
            1,
            child_001,
            owner,
            child_003$1
          ]);
        var levelCount$3 = (levelCount[0] - lastChildCount | 0) + newLastChildLevelCount$1 | 0;
        return _5(updateLevel, owner, levelCount$3, index, child$1, trie);
      } else if (triesWidth < 32) {
        var newLevelCount$1 = /* record */[/* contents */levelCount[0] + valuesCount | 0];
        return /* Level */__(1, [
                  levelDepth,
                  newLevelCount$1,
                  owner,
                  addLast$2(/* Leaf */__(0, [
                          owner,
                          values
                        ]), tries)
                ]);
      } else {
        return trie;
      }
    } else {
      throw [
            match_failure,
            /* tuple */[
              "IndexedTrie.re",
              129,
              6
            ]
          ];
    }
  }
  
  function addLastLeaf(updateLevel, owner, values, trie) {
    if (typeof trie === "number") {
      return /* Leaf */__(0, [
                owner,
                values
              ]);
    } else if (trie.tag) {
      var prevTrieCount = count$5(trie);
      var trie$1 = addLastLeafIfSpace(updateLevel, owner, values, trie);
      var newTrieCount = count$5(trie$1);
      if (newTrieCount !== prevTrieCount) {
        return trie$1;
      } else {
        var levelCount = newTrieCount + count$6(values) | 0;
        var levelDepth = trie[0] + 1 | 0;
        return /* Level */__(1, [
                  levelDepth,
                  /* record */[/* contents */levelCount],
                  owner,
                  /* array */[
                    trie$1,
                    /* Leaf */__(0, [
                        owner,
                        values
                      ])
                  ]
                ]);
      }
    } else {
      var levelCount$1 = count$5(trie) + count$6(values) | 0;
      return /* Level */__(1, [
                1,
                /* record */[/* contents */levelCount$1],
                owner,
                /* array */[
                  trie,
                  /* Leaf */__(0, [
                      owner,
                      values
                    ])
                ]
              ]);
    }
  }
  
  function getUsingRadixSearch(index, trie) {
    var index$1 = index;
    var _trie = trie;
    while(true) {
      var trie$1 = _trie;
      if (typeof trie$1 === "number") {
        return failwith("empty");
      } else if (trie$1.tag) {
        var childIndex = computeIndexUsingRadixSearch(trie$1[0], index$1);
        var trie$2 = caml_array_get(trie$1[3], childIndex);
        _trie = trie$2;
        continue ;
      } else {
        var valuesIndex = computeIndexUsingRadixSearch(0, index$1);
        return caml_array_get(trie$1[1], valuesIndex);
      }
    }
  }
  
  function get$6(index, trie) {
    if (typeof trie === "number" || !trie.tag) {
      return getUsingRadixSearch(index, trie);
    } else {
      var tries = trie[3];
      if (canRadixSearch(trie[0], trie[1][0], tries)) {
        return getUsingRadixSearch(index, trie);
      } else {
        var _index = index;
        var _childIndex = 0;
        while(true) {
          var childIndex = _childIndex;
          var index$1 = _index;
          var childNode = caml_array_get(tries, childIndex);
          var childCount = count$5(childNode);
          if (index$1 >= childCount) {
            _childIndex = childIndex + 1 | 0;
            _index = index$1 - childCount | 0;
            continue ;
          } else {
            var trie$1 = caml_array_get(tries, childIndex);
            return get$6(index$1, trie$1);
          }
        }
      }
    }
  }
  
  function reduce$9(triePredicate, trieReducer, predicate, f, acc, trie) {
    if (typeof trie === "number") {
      return acc;
    } else if (trie.tag) {
      return reduce$10(triePredicate, trieReducer, acc, trie[3]);
    } else {
      return reduce$10(predicate, f, acc, trie[1]);
    }
  }
  
  function reduceReversed$4(triePredicate, trieReducer, predicate, f, acc, trie) {
    if (typeof trie === "number") {
      return acc;
    } else if (trie.tag) {
      return reduceReversed$5(triePredicate, trieReducer, acc, trie[3]);
    } else {
      return reduceReversed$5(predicate, f, acc, trie[1]);
    }
  }
  
  function removeFirstLeaf(updateLevel, owner, firstLeaf, trie) {
    if (typeof trie === "number") {
      return failwith("invalid state");
    } else if (trie.tag) {
      var levelDepth = trie[0];
      if (levelDepth > 1) {
        var tries = trie[3];
        var levelCount = trie[1];
        var triesWidth = count$6(tries);
        var lastIndex = lastIndexOrRaise(tries);
        var firstChild = getOrRaise$1(0, tries);
        var newFirstChild = removeFirstLeaf(updateLevel, owner, firstLeaf, firstChild);
        if (typeof newFirstChild === "number") {
          if (triesWidth > 2) {
            var newLevelCount = levelCount[0] - count$5(firstLeaf[0]) | 0;
            return /* Level */__(1, [
                      levelDepth,
                      /* record */[/* contents */newLevelCount],
                      owner,
                      removeFirstOrRaise$3(tries)
                    ]);
          } else {
            return getOrRaise$1(lastIndex, tries);
          }
        } else {
          var newLevelCount$1 = levelCount[0] - count$5(firstLeaf[0]) | 0;
          return _5(updateLevel, owner, newLevelCount$1, 0, newFirstChild, trie);
        }
      } else if (levelDepth !== 1) {
        return failwith("invalid state");
      } else {
        var tries$1 = trie[3];
        var triesWidth$1 = count$6(tries$1);
        firstLeaf[0] = getOrRaise$1(0, tries$1);
        var lastIndex$1 = lastIndexOrRaise(tries$1);
        if (triesWidth$1 > 2) {
          var newLevelCount$2 = trie[1][0] - count$5(firstLeaf[0]) | 0;
          return /* Level */__(1, [
                    1,
                    /* record */[/* contents */newLevelCount$2],
                    owner,
                    removeFirstOrRaise$3(tries$1)
                  ]);
        } else {
          return getOrRaise$1(lastIndex$1, tries$1);
        }
      }
    } else {
      firstLeaf[0] = trie;
      return /* Empty */0;
    }
  }
  
  function removeLastLeaf(updateLevel, owner, lastLeaf, trie) {
    if (typeof trie === "number") {
      return failwith("invalid state");
    } else if (trie.tag) {
      var levelDepth = trie[0];
      if (levelDepth > 1) {
        var tries = trie[3];
        var levelCount = trie[1];
        var triesWidth = count$6(tries);
        var lastChildIndex = lastIndexOrRaise(tries);
        var lastChild = getOrRaise$1(lastChildIndex, tries);
        var newLastChild = removeLastLeaf(updateLevel, owner, lastLeaf, lastChild);
        if (typeof newLastChild === "number") {
          if (triesWidth > 2) {
            var newLevelCount = levelCount[0] - count$5(lastLeaf[0]) | 0;
            return /* Level */__(1, [
                      levelDepth,
                      /* record */[/* contents */newLevelCount],
                      owner,
                      removeLastOrRaise$2(tries)
                    ]);
          } else {
            return getOrRaise$1(0, tries);
          }
        } else {
          var newLevelCount$1 = levelCount[0] - count$5(lastLeaf[0]) | 0;
          return _5(updateLevel, owner, newLevelCount$1, lastChildIndex, newLastChild, trie);
        }
      } else if (levelDepth !== 1) {
        return failwith("invalid state");
      } else {
        var tries$1 = trie[3];
        var triesWidth$1 = count$6(tries$1);
        var lastChildIndex$1 = lastIndexOrRaise(tries$1);
        lastLeaf[0] = getOrRaise$1(lastChildIndex$1, tries$1);
        if (triesWidth$1 > 2) {
          var newLevelCount$2 = trie[1][0] - count$5(lastLeaf[0]) | 0;
          return /* Level */__(1, [
                    1,
                    /* record */[/* contents */newLevelCount$2],
                    owner,
                    removeLastOrRaise$2(tries$1)
                  ]);
        } else {
          return getOrRaise$1(0, tries$1);
        }
      }
    } else {
      lastLeaf[0] = trie;
      return /* Empty */0;
    }
  }
  
  function toSequence$4(trie) {
    if (typeof trie === "number") {
      return empty$7(/* () */0);
    } else if (trie.tag) {
      return flatMap$1(toSequence$4, toSequence$5(trie[3]));
    } else {
      return toSequence$5(trie[1]);
    }
  }
  
  function toSequenceReversed$4(trie) {
    if (typeof trie === "number") {
      return empty$7(/* () */0);
    } else if (trie.tag) {
      return flatMap$1(toSequenceReversed$4, toSequenceReversed$5(trie[3]));
    } else {
      return toSequenceReversed$5(trie[1]);
    }
  }
  
  function updateLevelTransient(owner, count, index, child, trie) {
    if (typeof trie === "number") {
      throw [
            match_failure,
            /* tuple */[
              "IndexedTrie.re",
              743,
              2
            ]
          ];
    } else if (trie.tag) {
      var tries = trie[3];
      if (trie[2] === owner) {
        caml_array_set(tries, index, child);
        trie[1][0] = count;
        return trie;
      } else {
        var oldChild = caml_array_get(tries, index);
        if (oldChild === child) {
          return trie;
        } else {
          return /* Level */__(1, [
                    trie[0],
                    /* record */[/* contents */count],
                    owner,
                    update$9(index, child, tries)
                  ]);
        }
      }
    } else {
      throw [
            match_failure,
            /* tuple */[
              "IndexedTrie.re",
              743,
              2
            ]
          ];
    }
  }
  
  var width = 32;
  
  var empty$8 = /* Empty */0;
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function count$8(param) {
    var leftCount = count$6(param[/* left */0]);
    var middleCount = count$5(param[/* middle */1]);
    var rightCount = count$6(param[/* right */2]);
    return (leftCount + middleCount | 0) + rightCount | 0;
  }
  
  function getOrRaise$3(index, param) {
    var middle = param[/* middle */1];
    var left = param[/* left */0];
    var leftCount = count$6(left);
    var middleCount = count$5(middle);
    var rightIndex = (index - middleCount | 0) - leftCount | 0;
    if (index < leftCount) {
      return caml_array_get(left, index);
    } else if (rightIndex >= 0) {
      return caml_array_get(param[/* right */2], rightIndex);
    } else {
      var index$1 = index - leftCount | 0;
      return get$6(index$1, middle);
    }
  }
  
  function reduce$11(predicate, f, acc, param) {
    var right = param[/* right */2];
    var middle = param[/* middle */1];
    var left = param[/* left */0];
    if (predicate === alwaysTrue2) {
      var trieReducer = function (acc, node) {
        return reduce$9(alwaysTrue2, trieReducer, alwaysTrue2, f, acc, node);
      };
      var acc$1 = reduce$10(alwaysTrue2, f, acc, left);
      var acc$2 = trieReducer(acc$1, middle);
      return reduce$10(alwaysTrue2, f, acc$2, right);
    } else {
      var shouldContinue = /* record */[/* contents */true];
      var predicate$1 = function (acc, next) {
        var result = _2(predicate, acc, next);
        shouldContinue[0] = result;
        return result;
      };
      var triePredicate = function (_, _$1) {
        return shouldContinue[0];
      };
      var trieReducer$1 = function (acc) {
        return (function (param) {
            return reduce$9(triePredicate, trieReducer$1, predicate$1, f, acc, param);
          });
      };
      var acc$3 = reduce$10(predicate$1, f, acc, left);
      var acc$4 = shouldContinue[0] ? trieReducer$1(acc$3)(middle) : acc$3;
      if (shouldContinue[0]) {
        return reduce$10(predicate$1, f, acc$4, right);
      } else {
        return acc$4;
      }
    }
  }
  
  function reduceReversed$6(predicate, f, acc, param) {
    var right = param[/* right */2];
    var middle = param[/* middle */1];
    var left = param[/* left */0];
    if (predicate === alwaysTrue2) {
      var trieReducer = function (acc, node) {
        return reduceReversed$4(alwaysTrue2, trieReducer, alwaysTrue2, f, acc, node);
      };
      var acc$1 = reduceReversed$5(alwaysTrue2, f, acc, right);
      var acc$2 = trieReducer(acc$1, middle);
      return reduceReversed$5(alwaysTrue2, f, acc$2, left);
    } else {
      var shouldContinue = /* record */[/* contents */true];
      var predicate$1 = function (acc, next) {
        var result = _2(predicate, acc, next);
        shouldContinue[0] = result;
        return result;
      };
      var triePredicate = function (_, _$1) {
        return shouldContinue[0];
      };
      var trieReducer$1 = function (acc) {
        return (function (param) {
            return reduceReversed$4(triePredicate, trieReducer$1, predicate$1, f, acc, param);
          });
      };
      var acc$3 = reduceReversed$5(predicate$1, f, acc, right);
      var acc$4 = shouldContinue[0] ? trieReducer$1(acc$3)(middle) : acc$3;
      if (shouldContinue[0]) {
        return reduceReversed$5(predicate$1, f, acc$4, left);
      } else {
        return acc$4;
      }
    }
  }
  
  function toSequence$6(param) {
    return concat$5(/* :: */[
                toSequence$5(param[/* left */0]),
                /* :: */[
                  toSequence$4(param[/* middle */1]),
                  /* :: */[
                    toSequence$5(param[/* right */2]),
                    /* [] */0
                  ]
                ]
              ]);
  }
  
  function toSequenceReversed$6(param) {
    return concat$5(/* :: */[
                toSequenceReversed$5(param[/* right */2]),
                /* :: */[
                  toSequenceReversed$4(param[/* middle */1]),
                  /* :: */[
                    toSequenceReversed$5(param[/* left */0]),
                    /* [] */0
                  ]
                ]
              ]);
  }
  
  var emptyInstance_000 = /* left : array */[];
  
  var emptyInstance_002 = /* right : array */[];
  
  var emptyInstance$2 = /* record */[
    emptyInstance_000,
    /* middle */empty$8,
    emptyInstance_002
  ];
  
  function empty$11() {
    return emptyInstance$2;
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function tailCopyAndExpand(arr) {
    var arrCount = count$6(arr);
    var retval = caml_make_vect(width, caml_array_get(arr, 0));
    blit$2(arr, 0, retval, 0, arrCount < width ? arrCount : width);
    return retval;
  }
  
  function tailAddFirst(value, arr) {
    var arr$1 = count$6(arr) === 0 ? caml_make_vect(width, value) : arr;
    var loop = function (_index) {
      while(true) {
        var index = _index;
        if (index > 0) {
          caml_array_set(arr$1, index, caml_array_get(arr$1, index - 1 | 0));
          _index = index - 1 | 0;
          continue ;
        } else {
          return /* () */0;
        }
      }
    };
    loop(lastIndexOrRaise(arr$1));
    caml_array_set(arr$1, 0, value);
    return arr$1;
  }
  
  function tailRemoveFirst(arr) {
    var countArr = count$6(arr);
    var _index = 1;
    while(true) {
      var index = _index;
      if (index < countArr) {
        caml_array_set(arr, index - 1 | 0, caml_array_get(arr, index));
        _index = index + 1 | 0;
        continue ;
      } else {
        return arr;
      }
    }
  }
  
  function tailUpdate(index, value, arr) {
    var arr$1 = count$6(arr) === 0 ? caml_make_vect(width, value) : arr;
    caml_array_set(arr$1, index, value);
    return arr$1;
  }
  
  function count$7(param) {
    var leftCount = param[/* leftCount */1];
    var middle = param[/* middle */2];
    var rightCount = param[/* rightCount */4];
    var middleCount = count$5(middle);
    return (leftCount + middleCount | 0) + rightCount | 0;
  }
  
  function addFirst$4(owner, value, transientVec) {
    var left = transientVec[/* left */0];
    var leftCount = transientVec[/* leftCount */1];
    var middle = transientVec[/* middle */2];
    var rightCount = transientVec[/* rightCount */4];
    if (leftCount === width && rightCount !== 0) {
      transientVec[/* left */0] = caml_make_vect(width, value);
      transientVec[/* leftCount */1] = 1;
      transientVec[/* middle */2] = addFirstLeaf(updateLevelTransient, owner, left, middle);
    } else if (leftCount === width && rightCount === 0) {
      transientVec[/* left */0] = caml_make_vect(width, value);
      transientVec[/* leftCount */1] = 1;
      transientVec[/* right */3] = left;
      transientVec[/* rightCount */4] = leftCount;
    } else {
      transientVec[/* left */0] = tailAddFirst(value, left);
      transientVec[/* leftCount */1] = leftCount + 1 | 0;
    }
    return transientVec;
  }
  
  function addLast$3(owner, value, transientVec) {
    var left = transientVec[/* left */0];
    var leftCount = transientVec[/* leftCount */1];
    var middle = transientVec[/* middle */2];
    var right = transientVec[/* right */3];
    var rightCount = transientVec[/* rightCount */4];
    if (leftCount !== width && rightCount === 0) {
      transientVec[/* left */0] = tailUpdate(leftCount, value, left);
      transientVec[/* leftCount */1] = leftCount + 1 | 0;
    } else if (rightCount !== width) {
      transientVec[/* right */3] = tailUpdate(rightCount, value, right);
      transientVec[/* rightCount */4] = rightCount + 1 | 0;
    } else {
      transientVec[/* middle */2] = addLastLeaf(updateLevelTransient, owner, right, middle);
      transientVec[/* right */3] = caml_make_vect(width, value);
      transientVec[/* rightCount */4] = 1;
    }
    return transientVec;
  }
  
  function removeFirstOrRaise$4(owner, transientVec) {
    var left = transientVec[/* left */0];
    var leftCount = transientVec[/* leftCount */1];
    var middle = transientVec[/* middle */2];
    var right = transientVec[/* right */3];
    var rightCount = transientVec[/* rightCount */4];
    if (leftCount > 1) {
      transientVec[/* left */0] = tailRemoveFirst(left);
      transientVec[/* leftCount */1] = leftCount - 1 | 0;
    } else if (count$5(middle) > 0) {
      var firstLeaf = /* record */[/* contents : Empty */0];
      var middle$1 = removeFirstLeaf(updateLevelTransient, owner, firstLeaf, middle);
      var match = firstLeaf[0];
      if (typeof match === "number") {
        throw [
              match_failure,
              /* tuple */[
                "TransientVector.re",
                135,
                10
              ]
            ];
      } else if (match.tag) {
        throw [
              match_failure,
              /* tuple */[
                "TransientVector.re",
                135,
                10
              ]
            ];
      } else {
        var left$1 = match[1];
        var leftCount$1 = count$6(left$1);
        var left$2 = match[0] === owner && leftCount$1 === width ? left$1 : tailCopyAndExpand(left$1);
        transientVec[/* left */0] = left$2;
        transientVec[/* leftCount */1] = leftCount$1;
        transientVec[/* middle */2] = middle$1;
      }
    } else if (rightCount > 0) {
      transientVec[/* left */0] = right;
      transientVec[/* leftCount */1] = rightCount;
      transientVec[/* right */3] = caml_make_vect(width, caml_array_get(right, 0));
      transientVec[/* rightCount */4] = 0;
    } else if (leftCount === 1) {
      transientVec[/* leftCount */1] = 0;
    } else {
      failwith("vector is empty");
    }
    return transientVec;
  }
  
  function removeLastOrRaise$3(owner, transientVec) {
    var leftCount = transientVec[/* leftCount */1];
    var middle = transientVec[/* middle */2];
    var rightCount = transientVec[/* rightCount */4];
    if (rightCount > 1) {
      transientVec[/* rightCount */4] = rightCount - 1 | 0;
    } else if (count$5(middle) > 0) {
      var lastLeaf = /* record */[/* contents : Empty */0];
      var middle$1 = removeLastLeaf(updateLevelTransient, owner, lastLeaf, middle);
      var match = lastLeaf[0];
      if (typeof match === "number") {
        throw [
              match_failure,
              /* tuple */[
                "TransientVector.re",
                167,
                10
              ]
            ];
      } else if (match.tag) {
        throw [
              match_failure,
              /* tuple */[
                "TransientVector.re",
                167,
                10
              ]
            ];
      } else {
        var right = match[1];
        var rightCount$1 = count$6(right);
        var right$1 = match[0] === owner && rightCount$1 === width ? right : tailCopyAndExpand(right);
        transientVec[/* middle */2] = middle$1;
        transientVec[/* right */3] = right$1;
        transientVec[/* rightCount */4] = rightCount$1;
      }
    } else if (rightCount === 1) {
      transientVec[/* rightCount */4] = 0;
    } else if (leftCount > 0) {
      transientVec[/* leftCount */1] = leftCount - 1 | 0;
    } else {
      failwith("vector is empty");
    }
    return transientVec;
  }
  
  function getOrRaise$2(index, param) {
    var left = param[/* left */0];
    var leftCount = param[/* leftCount */1];
    var middle = param[/* middle */2];
    var right = param[/* right */3];
    var middleCount = count$5(middle);
    var rightIndex = (index - middleCount | 0) - leftCount | 0;
    if (index < leftCount) {
      return caml_array_get(left, index);
    } else if (rightIndex >= 0) {
      return caml_array_get(right, rightIndex);
    } else {
      var index$1 = index - leftCount | 0;
      return get$6(index$1, middle);
    }
  }
  
  function lastOrRaise$3(vector) {
    return getOrRaise$2(count$7(vector) - 1 | 0, vector);
  }
  
  function mutate$1(param) {
    var right = param[/* right */2];
    var left = param[/* left */0];
    return create$1$1(/* record */[
                /* left */count$6(left) > 0 ? tailCopyAndExpand(left) : /* array */[],
                /* leftCount */count$6(left),
                /* middle */param[/* middle */1],
                /* right */count$6(right) > 0 ? tailCopyAndExpand(right) : /* array */[],
                /* rightCount */count$6(right)
              ]);
  }
  
  function addFirst$1$1(value, $$transient) {
    return update1(addFirst$4, value, $$transient);
  }
  
  function addLast$1$1(value, $$transient) {
    return update1(addLast$3, value, $$transient);
  }
  
  function count$1$2($$transient) {
    return count$7(get$5($$transient));
  }
  
  function empty$1$1() {
    return mutate$1(empty$11(/* () */0));
  }
  
  function removeImpl(_, _$1) {
    return /* record */[
            /* left : array */[],
            /* leftCount */0,
            /* middle */empty$8,
            /* right : array */[],
            /* rightCount */0
          ];
  }
  
  function removeAll$4($$transient) {
    return update$7(removeImpl, $$transient);
  }
  
  function removeFirstOrRaise$1$1($$transient) {
    return update$7(removeFirstOrRaise$4, $$transient);
  }
  
  function removeLastOrRaise$1$1($$transient) {
    return update$7(removeLastOrRaise$3, $$transient);
  }
  
  function firstOrRaise$6($$transient) {
    return getOrRaise$2(0, get$5($$transient));
  }
  
  function lastOrRaise$1$1($$transient) {
    return lastOrRaise$3(get$5($$transient));
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  var count$2 = count$8;
  
  var getOrRaise = getOrRaise$3;
  
  var reduce$5 = reduce$11;
  
  var reduceReversed$2$1 = reduceReversed$6;
  
  var toSequence$2 = toSequence$6;
  
  var toSequenceReversed$2 = toSequenceReversed$6;
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function count$1$1(deque) {
    return count$2(deque[0]);
  }
  
  function firstOrRaise$1(deque) {
    if (deque.tag) {
      return getOrRaise(count$2(deque[0]) - 1 | 0, deque[0]);
    } else {
      return getOrRaise(0, deque[0]);
    }
  }
  
  function lastOrRaise$1(deque) {
    if (deque.tag) {
      return getOrRaise(0, deque[0]);
    } else {
      return getOrRaise(count$2(deque[0]) - 1 | 0, deque[0]);
    }
  }
  
  function reduce$4(predicate, f, acc, deque) {
    if (deque.tag) {
      return reduceReversed$2$1(predicate, f, acc, deque[0]);
    } else {
      return reduce$5(predicate, f, acc, deque[0]);
    }
  }
  
  function reduceReversed$1$1(predicate, f, acc, deque) {
    if (deque.tag) {
      return reduce$5(predicate, f, acc, deque[0]);
    } else {
      return reduceReversed$2$1(predicate, f, acc, deque[0]);
    }
  }
  
  function toSequence$1$1(deque) {
    if (deque.tag) {
      return toSequenceReversed$2(deque[0]);
    } else {
      return toSequence$2(deque[0]);
    }
  }
  
  function toSequenceReversed$1(deque) {
    if (deque.tag) {
      return toSequence$2(deque[0]);
    } else {
      return toSequenceReversed$2(deque[0]);
    }
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function empty$16() {
    return /* record */[/* contents : array */[]];
  }
  
  function firstOrRaise$7(opt) {
    return caml_array_get(opt[0], 0);
  }
  
  function isEmpty$6(opt) {
    return opt[0].length === 0;
  }
  
  function set$2(value, opt) {
    if (isEmpty$6(opt)) {
      opt[0] = /* array */[value];
      return /* () */0;
    } else {
      return caml_array_set(opt[0], 0, value);
    }
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function MakeGeneric$3(Base) {
    var isEmpty = Base[0];
    var reduce = Base[1];
    var everyPredicate = function (acc, _) {
      return acc;
    };
    var findPredicate = function (acc, _) {
      return isEmpty$4(acc);
    };
    var somePredicate = function (acc, _) {
      return !acc;
    };
    var every = function (f, iterable) {
      return _4(Base[/* reduce */1], everyPredicate, (function () {
                    return f;
                  }), true, iterable);
    };
    var find = function (f, iterable) {
      return _4(Base[/* reduce */1], findPredicate, (function (_, next) {
                    if (_1(f, next)) {
                      return some(next);
                    }
                    
                  }), undefined, iterable);
    };
    var findOrRaise = function (f, iterable) {
      return firstOrRaise$5(find(f, iterable));
    };
    var forEach = function ($staropt$star, f, iterable) {
      var predicate = $staropt$star !== undefined ? $staropt$star : alwaysTrue;
      if (predicate === alwaysTrue) {
        return _4(Base[/* reduce */1], alwaysTrue2, (function () {
                      return f;
                    }), /* () */0, iterable);
      } else {
        return _4(reduce, (function () {
                      return predicate;
                    }), (function () {
                      return f;
                    }), /* () */0, iterable);
      }
    };
    var none = function (f, iterable) {
      return _4(Base[/* reduce */1], everyPredicate, (function () {
                    return Operators$1[/* >> */0](f, (function (prim) {
                                  return !prim;
                                }));
                  }), true, iterable);
    };
    var reduce$1 = function ($staropt$star, f, acc, iterable) {
      var predicate = $staropt$star !== undefined ? $staropt$star : alwaysTrue2;
      return _4(reduce, predicate, f, acc, iterable);
    };
    var some$$1 = function (f, iterable) {
      return reduce$1(somePredicate, (function () {
                    return f;
                  }), false, iterable);
    };
    var iterableBase = /* record */[/* reduce */Base[/* reduce */1]];
    var toIterable = function (iterable) {
      if (_1(isEmpty, iterable)) {
        return /* Empty */0;
      } else {
        return /* Instance */[
                iterable,
                iterableBase
              ];
      }
    };
    return /* module */[
            /* every */every,
            /* find */find,
            /* findOrRaise */findOrRaise,
            /* forEach */forEach,
            /* none */none,
            /* reduce */reduce$1,
            /* some */some$$1,
            /* toIterable */toIterable
          ];
  }
  
  function reduce$15(predicate, f, acc, iter) {
    if (iter) {
      return _4(iter[1][/* reduce */0], predicate, f, acc, iter[0]);
    } else {
      return acc;
    }
  }
  
  function empty$15() {
    return /* Empty */0;
  }
  
  function isEmpty$5(iterable) {
    return iterable === /* Empty */0;
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function MakeGeneric$2(Base) {
    var count = Base[0];
    var toSequence = Base[2];
    var isEmpty = function (collection) {
      return _1(count, collection) === 0;
    };
    var isNotEmpty = function (collection) {
      return _1(count, collection) !== 0;
    };
    var include = MakeGeneric$3(/* module */[
          /* isEmpty */isEmpty,
          /* reduce */Base[1]
        ]);
    var collectionBase_001 = /* reduce */Base[/* reduce */1];
    var collectionBase = /* record */[
      /* count */count,
      collectionBase_001,
      /* toSequence */toSequence
    ];
    var toCollection = function (collection) {
      if (_1(count, collection) === 0) {
        return /* Empty */0;
      } else {
        return /* Instance */[
                collection,
                collectionBase
              ];
      }
    };
    return /* module */[
            /* every */include[0],
            /* find */include[1],
            /* findOrRaise */include[2],
            /* forEach */include[3],
            /* none */include[4],
            /* reduce */include[5],
            /* some */include[6],
            /* toIterable */include[7],
            /* count */count,
            /* isEmpty */isEmpty,
            /* isNotEmpty */isNotEmpty,
            /* toCollection */toCollection,
            /* toSequence */toSequence
          ];
  }
  
  function count$11(collection) {
    if (collection) {
      return _1(collection[1][/* count */0], collection[0]);
    } else {
      return 0;
    }
  }
  
  function empty$14() {
    return /* Empty */0;
  }
  
  function reduce$14(predicate, f, acc, collection) {
    if (collection) {
      return _4(collection[1][/* reduce */1], predicate, f, acc, collection[0]);
    } else {
      return acc;
    }
  }
  
  function toSequence$9(collection) {
    if (collection) {
      return _1(collection[1][/* toSequence */2], collection[0]);
    } else {
      return empty$7(/* () */0);
    }
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function MakeGeneric$1(Base) {
    var contains = Base[0];
    var include = MakeGeneric$2([
          Base[1],
          Base[2],
          Base[3]
        ]);
    var reduce = include[5];
    var count = include[8];
    var isEmpty = include[9];
    var toSequence = include[12];
    var setBase_002 = /* reduce */Base[/* reduce */2];
    var setBase = /* record */[
      /* contains */contains,
      /* count */count,
      setBase_002,
      /* toSequence */toSequence
    ];
    var equals = function ($$this, that) {
      if ($$this === that) {
        return true;
      } else if (_1(count, $$this) !== _1(count, that)) {
        return false;
      } else {
        return _4(reduce, (function (acc, _) {
                      return acc;
                    }), (function () {
                      return (function (param) {
                          return flip(contains, that, param);
                        });
                    }), true, $$this);
      }
    };
    var toSet = function (set) {
      if (_1(isEmpty, set)) {
        return /* Empty */0;
      } else {
        return /* Instance */[
                set,
                setBase
              ];
      }
    };
    return /* module */[
            /* every */include[0],
            /* find */include[1],
            /* findOrRaise */include[2],
            /* forEach */include[3],
            /* none */include[4],
            /* reduce */reduce,
            /* some */include[6],
            /* toIterable */include[7],
            /* count */count,
            /* isEmpty */isEmpty,
            /* isNotEmpty */include[10],
            /* toCollection */include[11],
            /* toSequence */toSequence,
            /* contains */contains,
            /* equals */equals,
            /* toSet */toSet
          ];
  }
  
  function contains$4(value, set) {
    if (set) {
      return _2(set[1][/* contains */0], value, set[0]);
    } else {
      return false;
    }
  }
  
  function count$10(set) {
    if (set) {
      return _1(set[1][/* count */1], set[0]);
    } else {
      return 0;
    }
  }
  
  function reduce$13(predicate, f, acc, collection) {
    if (collection) {
      return _4(collection[1][/* reduce */2], predicate, f, acc, collection[0]);
    } else {
      return acc;
    }
  }
  
  function toSequence$8(set) {
    if (set) {
      return _1(set[1][/* toSequence */3], set[0]);
    } else {
      return empty$7(/* () */0);
    }
  }
  
  function empty$13() {
    return /* Empty */0;
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function everyPredicate(acc, _, _$1) {
    return acc;
  }
  
  function findPredicate(acc, _, _$1) {
    return isEmpty$4(acc);
  }
  
  function somePredicate(acc, _, _$1) {
    return !acc;
  }
  
  function MakeGeneric$5(Base) {
    var isEmpty = Base[0];
    var reduce = Base[1];
    var reduceKeys = Base[2];
    var reduceValues = Base[3];
    var every = function (f, iter) {
      return _4(reduce, everyPredicate, (function () {
                    return f;
                  }), true, iter);
    };
    var find = function (selector, f, iter) {
      return _4(reduce, findPredicate, (function (_, k, v) {
                    if (_2(f, k, v)) {
                      return some(_2(selector, k, v));
                    }
                    
                  }), undefined, iter);
    };
    var findOrRaise = function (selector, f, iter) {
      return firstOrRaise$5(find(selector, f, iter));
    };
    var forEach = function ($staropt$star, f, iter) {
      var predicate = $staropt$star !== undefined ? $staropt$star : alwaysTrue2;
      if (predicate === alwaysTrue2) {
        return _4(Base[/* reduce */1], alwaysTrue3, (function () {
                      return f;
                    }), /* () */0, iter);
      } else {
        return _4(reduce, (function () {
                      return predicate;
                    }), (function () {
                      return f;
                    }), /* () */0, iter);
      }
    };
    var none = function (f, iter) {
      return _4(reduce, everyPredicate, (function (_, k, v) {
                    return !_2(f, k, v);
                  }), true, iter);
    };
    var reduce$1 = function ($staropt$star, f, acc, map) {
      var predicate = $staropt$star !== undefined ? $staropt$star : alwaysTrue3;
      return _4(reduce, predicate, f, acc, map);
    };
    var reduceKeys$1 = function ($staropt$star, f, acc, map) {
      var predicate = $staropt$star !== undefined ? $staropt$star : alwaysTrue2;
      return _4(reduceKeys, predicate, f, acc, map);
    };
    var reduceValues$1 = function ($staropt$star, f, acc, map) {
      var predicate = $staropt$star !== undefined ? $staropt$star : alwaysTrue2;
      return _4(reduceValues, predicate, f, acc, map);
    };
    var some$$1 = function (f, iter) {
      return reduce$1(somePredicate, (function () {
                    return f;
                  }), false, iter);
    };
    var keysIterableBase = /* record */[/* reduce */Base[/* reduceKeys */2]];
    var keys = function (keyedIterable) {
      if (_1(isEmpty, keyedIterable)) {
        return empty$15(/* () */0);
      } else {
        return /* Instance */[
                keyedIterable,
                keysIterableBase
              ];
      }
    };
    var toIterable = function (selector, keyedIterable) {
      if (_1(isEmpty, keyedIterable)) {
        return empty$15(/* () */0);
      } else {
        return /* Instance */[
                keyedIterable,
                /* record */[/* reduce */(function (predicate, f, acc, map) {
                      if (predicate === alwaysTrue2) {
                        var f$1 = function (acc, k, v) {
                          return _2(f, acc, _2(selector, k, v));
                        };
                        return reduce$1(undefined, f$1, acc, map);
                      } else {
                        var memoizedPair = empty$16(/* () */0);
                        var predicate$1 = function (acc, k, v) {
                          var pair = _2(selector, k, v);
                          set$2(pair, memoizedPair);
                          return _2(predicate, acc, pair);
                        };
                        var f$2 = function (acc, _, _$1) {
                          return _2(f, acc, firstOrRaise$7(memoizedPair));
                        };
                        return reduce$1(predicate$1, f$2, acc, map);
                      }
                    })]
              ];
      }
    };
    var keyedIterableBase = /* record */[/* reduce */Base[/* reduce */1]];
    var toKeyedIterable = function (keyedIterable) {
      if (_1(isEmpty, keyedIterable)) {
        return /* Empty */0;
      } else {
        return /* Instance */[
                keyedIterable,
                keyedIterableBase
              ];
      }
    };
    var valuesIterableBase = /* record */[/* reduce */Base[/* reduceValues */3]];
    var values = function (keyedIterable) {
      if (_1(isEmpty, keyedIterable)) {
        return empty$15(/* () */0);
      } else {
        return /* Instance */[
                keyedIterable,
                valuesIterableBase
              ];
      }
    };
    return /* module */[
            /* every */every,
            /* find */find,
            /* findOrRaise */findOrRaise,
            /* forEach */forEach,
            /* keys */keys,
            /* none */none,
            /* reduce */reduce$1,
            /* reduceKeys */reduceKeys$1,
            /* reduceValues */reduceValues$1,
            /* some */some$$1,
            /* toIterable */toIterable,
            /* toKeyedIterable */toKeyedIterable,
            /* values */values
          ];
  }
  
  function reduce$17(predicate, f, acc, iter) {
    if (iter) {
      return _4(iter[1][/* reduce */0], predicate, f, acc, iter[0]);
    } else {
      return acc;
    }
  }
  
  function isEmpty$7(iter) {
    return iter === /* Empty */0;
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function MakeGeneric$4(Base) {
    var containsKey = Base[0];
    var count = Base[1];
    var toSequence = Base[5];
    var isEmpty = function (keyed) {
      return _1(count, keyed) === 0;
    };
    var isNotEmpty = function (keyed) {
      return _1(count, keyed) !== 0;
    };
    var include = MakeGeneric$5(/* module */[
          /* isEmpty */isEmpty,
          /* reduce */Base[2],
          /* reduceKeys */Base[3],
          /* reduceValues */Base[4]
        ]);
    var keysSequence = function (keyed) {
      if (_1(count, keyed) === 0) {
        return empty$7(/* () */0);
      } else {
        return _2(toSequence, getKey, keyed);
      }
    };
    var keysCollectionImpl_001 = /* reduce */Base[/* reduceKeys */3];
    var keysCollectionImpl = /* record */[
      /* count */count,
      keysCollectionImpl_001,
      /* toSequence */keysSequence
    ];
    var keysCollection = function (keyed) {
      if (_1(count, keyed) === 0) {
        return empty$14(/* () */0);
      } else {
        return /* Instance */[
                keyed,
                keysCollectionImpl
              ];
      }
    };
    var valuesSequence = function (keyed) {
      if (_1(count, keyed) === 0) {
        return empty$7(/* () */0);
      } else {
        return _2(toSequence, getValue$1, keyed);
      }
    };
    var valuesCollectionImpl_001 = /* reduce */Base[/* reduceValues */4];
    var valuesCollectionImpl = /* record */[
      /* count */count,
      valuesCollectionImpl_001,
      /* toSequence */valuesSequence
    ];
    var valuesCollection = function (keyed) {
      if (_1(count, keyed) === 0) {
        return empty$14(/* () */0);
      } else {
        return /* Instance */[
                keyed,
                valuesCollectionImpl
              ];
      }
    };
    var keyedCollectionBase_002 = /* reduce */Base[/* reduce */2];
    var keyedCollectionBase = /* record */[
      /* containsKey */containsKey,
      /* count */count,
      keyedCollectionBase_002,
      /* toSequence */toSequence
    ];
    var toKeyedCollection = function (keyed) {
      if (_1(count, keyed) === 0) {
        return /* Empty */0;
      } else {
        return /* Instance */[
                keyed,
                keyedCollectionBase
              ];
      }
    };
    return /* module */[
            /* every */include[0],
            /* find */include[1],
            /* findOrRaise */include[2],
            /* forEach */include[3],
            /* keys */include[4],
            /* none */include[5],
            /* reduce */include[6],
            /* reduceKeys */include[7],
            /* reduceValues */include[8],
            /* some */include[9],
            /* toIterable */include[10],
            /* toKeyedIterable */include[11],
            /* values */include[12],
            /* containsKey */containsKey,
            /* count */count,
            /* isEmpty */isEmpty,
            /* isNotEmpty */isNotEmpty,
            /* keysCollection */keysCollection,
            /* keysSequence */keysSequence,
            /* toKeyedCollection */toKeyedCollection,
            /* toSequence */toSequence,
            /* valuesCollection */valuesCollection,
            /* valuesSequence */valuesSequence
          ];
  }
  
  function containsKey$1(key, keyed) {
    if (keyed) {
      return _2(keyed[1][/* containsKey */0], key, keyed[0]);
    } else {
      return false;
    }
  }
  
  function count$12(keyed) {
    if (keyed) {
      return _1(keyed[1][/* count */1], keyed[0]);
    } else {
      return 0;
    }
  }
  
  function reduce$16(predicate, f, acc, iter) {
    if (iter) {
      return _4(iter[1][/* reduce */2], predicate, f, acc, iter[0]);
    } else {
      return acc;
    }
  }
  
  function toSequence$10(selector, keyed) {
    if (keyed) {
      return _2(keyed[1][/* toSequence */3], selector, keyed[0]);
    } else {
      return empty$7(/* () */0);
    }
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function MakeGeneric(Base) {
    var get = Base[2];
    var getOrDefault = Base[3];
    var getOrRaise = Base[4];
    var include = MakeGeneric$4([
          Base[0],
          Base[1],
          Base[5],
          Base[6],
          Base[7],
          Base[8]
        ]);
    var containsKey = include[13];
    var count = include[14];
    var isEmpty = include[15];
    var keysSequence = include[18];
    var toSequence = include[20];
    var keysSetBase_002 = /* reduce */Base[/* reduceKeys */6];
    var keysSetBase = /* record */[
      /* contains */containsKey,
      /* count */count,
      keysSetBase_002,
      /* toSequence */keysSequence
    ];
    var keysSet = function (map) {
      if (_1(isEmpty, map)) {
        return empty$13(/* () */0);
      } else {
        return /* Instance */[
                map,
                keysSetBase
              ];
      }
    };
    var mapBase_005 = /* reduce */Base[/* reduce */5];
    var mapBase = /* record */[
      /* containsKey */containsKey,
      /* count */count,
      /* get */get,
      /* getOrDefault */getOrDefault,
      /* getOrRaise */getOrRaise,
      mapBase_005,
      /* toSequence */toSequence
    ];
    var toMap = function (map) {
      if (_1(isEmpty, map)) {
        return /* Empty */0;
      } else {
        return /* Instance */[
                map,
                mapBase
              ];
      }
    };
    return /* module */[
            /* every */include[0],
            /* find */include[1],
            /* findOrRaise */include[2],
            /* forEach */include[3],
            /* keys */include[4],
            /* none */include[5],
            /* reduce */include[6],
            /* reduceKeys */include[7],
            /* reduceValues */include[8],
            /* some */include[9],
            /* toIterable */include[10],
            /* toKeyedIterable */include[11],
            /* values */include[12],
            /* containsKey */containsKey,
            /* count */count,
            /* isEmpty */isEmpty,
            /* isNotEmpty */include[16],
            /* keysCollection */include[17],
            /* keysSequence */keysSequence,
            /* toKeyedCollection */include[19],
            /* toSequence */toSequence,
            /* valuesCollection */include[21],
            /* valuesSequence */include[22],
            /* get */get,
            /* getOrDefault */getOrDefault,
            /* getOrRaise */getOrRaise,
            /* keysSet */keysSet,
            /* toMap */toMap
          ];
  }
  
  function containsKey(key, map) {
    if (map) {
      return _2(map[1][/* containsKey */0], key, map[0]);
    } else {
      return false;
    }
  }
  
  function count$9(map) {
    if (map) {
      return _1(map[1][/* count */1], map[0]);
    } else {
      return 0;
    }
  }
  
  function get$8(key, map) {
    if (map) {
      return _2(map[1][/* get */2], key, map[0]);
    }
    
  }
  
  function getOrDefault$1$1($$default, key, map) {
    if (map) {
      return _3(map[1][/* getOrDefault */3], $$default, key, map[0]);
    } else {
      return $$default;
    }
  }
  
  function getOrRaise$4(key, map) {
    if (map) {
      return _2(map[1][/* getOrRaise */4], key, map[0]);
    } else {
      return failwith("not found");
    }
  }
  
  function reduce$12(predicate, f, acc, map) {
    if (map) {
      return _4(map[1][/* reduce */5], predicate, f, acc, map[0]);
    } else {
      return acc;
    }
  }
  
  function toSequence$7(selector, map) {
    if (map) {
      return _2(map[1][/* toSequence */6], selector, map[0]);
    } else {
      return empty$7(/* () */0);
    }
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  var table = caml_make_vect(65536, 0);
  
  var position1 = -1;
  
  var position2 = -1;
  
  for(var i = 1; i <= 65535; ++i){
    if (position1 === position2) {
      position1 = 0;
      position2 = i;
    }
    caml_array_set(table, i, caml_array_get(table, position1) + 1 | 0);
    position1 = position1 + 1 | 0;
  }
  
  function countBits(x) {
    var intValue = x;
    var intBits = caml_array_get(table, intValue & 65535) + caml_array_get(table, (intValue >> 16) & 65535) | 0;
    return intBits + (
            x < 0 ? 1 : 0
          ) | 0;
  }
  
  function bitPos(key, depth) {
    var mask = (key >>> imul(depth, 5)) & 31;
    return (1 << mask);
  }
  
  function index$2(bitmap, bit) {
    return countBits(bitmap & (bit - 1 | 0));
  }
  
  function containsNode$2(bitmap, bit) {
    return (bitmap & bit) !== 0;
  }
  
  
  /*  Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function containsKey$3(_depth, key, _map) {
    while(true) {
      var map = _map;
      var depth = _depth;
      if (typeof map === "number") {
        return false;
      } else if (map.tag) {
        return key === map[0];
      } else {
        var bitmap = map[0];
        var bit = bitPos(key, depth);
        var index = index$2(bitmap, bit);
        if (containsNode$2(bitmap, bit)) {
          _map = caml_array_get(map[1], index);
          _depth = depth + 1 | 0;
          continue ;
        } else {
          return false;
        }
      }
    }
  }
  
  function get$10(_depth, key, _map) {
    while(true) {
      var map = _map;
      var depth = _depth;
      if (typeof map === "number") {
        return undefined;
      } else if (map.tag) {
        if (key === map[0]) {
          return some(map[1]);
        } else {
          return undefined;
        }
      } else {
        var bitmap = map[0];
        var bit = bitPos(key, depth);
        var index = index$2(bitmap, bit);
        if (containsNode$2(bitmap, bit)) {
          _map = caml_array_get(map[1], index);
          _depth = depth + 1 | 0;
          continue ;
        } else {
          return undefined;
        }
      }
    }
  }
  
  function getOrDefault$3(_depth, $$default, key, _map) {
    while(true) {
      var map = _map;
      var depth = _depth;
      if (typeof map === "number") {
        return $$default;
      } else if (map.tag) {
        if (key === map[0]) {
          return map[1];
        } else {
          return $$default;
        }
      } else {
        var bitmap = map[0];
        var bit = bitPos(key, depth);
        var index = index$2(bitmap, bit);
        if (containsNode$2(bitmap, bit)) {
          _map = caml_array_get(map[1], index);
          _depth = depth + 1 | 0;
          continue ;
        } else {
          return $$default;
        }
      }
    }
  }
  
  function getOrRaise$6(_depth, key, _map) {
    while(true) {
      var map = _map;
      var depth = _depth;
      if (typeof map === "number") {
        return failwith("not found");
      } else if (map.tag) {
        if (key === map[0]) {
          return map[1];
        } else {
          return failwith("not found");
        }
      } else {
        var bitmap = map[0];
        var bit = bitPos(key, depth);
        var index = index$2(bitmap, bit);
        if (containsNode$2(bitmap, bit)) {
          _map = caml_array_get(map[1], index);
          _depth = depth + 1 | 0;
          continue ;
        } else {
          return failwith("not found");
        }
      }
    }
  }
  
  function reduceWhile(levelPredicate, levelReducer, predicate, f, acc, map) {
    if (typeof map === "number") {
      return acc;
    } else if (map.tag) {
      var value = map[1];
      var key = map[0];
      if (_3(predicate, acc, key, value)) {
        return _3(f, acc, key, value);
      } else {
        return acc;
      }
    } else {
      return reduce$10(levelPredicate, levelReducer, acc, map[1]);
    }
  }
  
  function reduce$19(predicate, f, acc, map) {
    if (predicate === alwaysTrue3) {
      var levelReducer = function (acc, node) {
        return reduceWhile(alwaysTrue2, levelReducer, alwaysTrue3, f, acc, node);
      };
      return levelReducer(acc, map);
    } else {
      var shouldContinue = /* record */[/* contents */true];
      var predicate$1 = function (acc, k, v) {
        if (shouldContinue[0]) {
          var result = _3(predicate, acc, k, v);
          shouldContinue[0] = result;
          return result;
        } else {
          return false;
        }
      };
      var levelPredicate = function (_, _$1) {
        return shouldContinue[0];
      };
      var levelReducer$1 = function (acc, node) {
        return reduceWhile(levelPredicate, levelReducer$1, predicate$1, f, acc, node);
      };
      return levelReducer$1(acc, map);
    }
  }
  
  function toSequence$12(selector, map) {
    if (typeof map === "number") {
      return empty$7(/* () */0);
    } else if (map.tag) {
      return $$return$3(_2(selector, map[0], map[1]));
    } else {
      return flatMap$1((function (param) {
                    return toSequence$12(selector, param);
                  }), toSequence$5(map[1]));
    }
  }
  
  
  /* BitmapTrie Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function containsKey$2(key, param) {
    var root = param[/* root */1];
    return containsKey$3(0, key, root);
  }
  
  function count$13(param) {
    return param[/* count */0];
  }
  
  function get$9(key, param) {
    var root = param[/* root */1];
    return get$10(0, key, root);
  }
  
  function getOrDefault$2($$default, key, param) {
    var root = param[/* root */1];
    return getOrDefault$3(0, $$default, key, root);
  }
  
  function getOrRaise$5(key, param) {
    var root = param[/* root */1];
    return getOrRaise$6(0, key, root);
  }
  
  function reduce$18(predicate, f, acc, param) {
    var root = param[/* root */1];
    return reduce$19(predicate, f, acc, root);
  }
  
  function toSequence$11(selector, param) {
    var root = param[/* root */1];
    return toSequence$12(selector, root);
  }
  
  
  /* BitmapTrieIntMap Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function add$3(updateLevelNode, owner, depth, value, _set) {
    while(true) {
      var set = _set;
      if (typeof set === "number") {
        return /* Entry */__(1, [value]);
      } else if (set.tag) {
        var entryValue = set[0];
        if (value === entryValue) {
          return set;
        } else {
          var bitmap = bitPos(entryValue, depth);
          _set = /* Level */__(0, [
              bitmap,
              /* array */[set],
              owner
            ]);
          continue ;
        }
      } else {
        var nodes = set[1];
        var bitmap$1 = set[0];
        var bit = bitPos(value, depth);
        var index = index$2(bitmap$1, bit);
        if (containsNode$2(bitmap$1, bit)) {
          var childNode = caml_array_get(nodes, index);
          var newChildNode = add$3(updateLevelNode, owner, depth + 1 | 0, value, childNode);
          if (childNode === newChildNode) {
            return set;
          } else {
            return _4(updateLevelNode, owner, index, newChildNode, set);
          }
        } else {
          var entry = /* Entry */__(1, [value]);
          var nodes$1 = insertAt$1(index, entry, nodes);
          return /* Level */__(0, [
                    bitmap$1 | bit,
                    nodes$1,
                    owner
                  ]);
        }
      }
    }
  }
  
  function contains$6(_depth, value, _set) {
    while(true) {
      var set = _set;
      var depth = _depth;
      if (typeof set === "number") {
        return false;
      } else if (set.tag) {
        return value === set[0];
      } else {
        var bitmap = set[0];
        var bit = bitPos(value, depth);
        var index = index$2(bitmap, bit);
        if (containsNode$2(bitmap, bit)) {
          _set = caml_array_get(set[1], index);
          _depth = depth + 1 | 0;
          continue ;
        } else {
          return false;
        }
      }
    }
  }
  
  function reduceWhile$1(levelPredicate, levelReducer, predicate, f, acc, map) {
    if (typeof map === "number") {
      return acc;
    } else if (map.tag) {
      var entryValue = map[0];
      if (_2(predicate, acc, entryValue)) {
        return _2(f, acc, entryValue);
      } else {
        return acc;
      }
    } else {
      return reduce$10(levelPredicate, levelReducer, acc, map[1]);
    }
  }
  
  function reduce$21(predicate, f, acc, map) {
    if (predicate === alwaysTrue2) {
      var levelReducer = function (acc, node) {
        return reduceWhile$1(alwaysTrue2, levelReducer, alwaysTrue2, f, acc, node);
      };
      return levelReducer(acc, map);
    } else {
      var shouldContinue = /* record */[/* contents */true];
      var predicate$1 = function (acc, v) {
        if (shouldContinue[0]) {
          var result = _2(predicate, acc, v);
          shouldContinue[0] = result;
          return result;
        } else {
          return false;
        }
      };
      var levelPredicate = function (_, _$1) {
        return shouldContinue[0];
      };
      var levelReducer$1 = function (acc, node) {
        return reduceWhile$1(levelPredicate, levelReducer$1, predicate$1, f, acc, node);
      };
      return levelReducer$1(acc, map);
    }
  }
  
  function remove$3(updateLevelNode, owner, depth, value, set) {
    if (typeof set === "number") {
      return set;
    } else if (set.tag) {
      if (value === set[0]) {
        return /* Empty */0;
      } else {
        return set;
      }
    } else {
      var nodes = set[1];
      var bitmap = set[0];
      var bit = bitPos(value, depth);
      var index = index$2(bitmap, bit);
      if (containsNode$2(bitmap, bit)) {
        var childNode = caml_array_get(nodes, index);
        var newChildNode = remove$3(updateLevelNode, owner, depth + 1 | 0, value, childNode);
        if (newChildNode === childNode) {
          return set;
        } else if (newChildNode === /* Empty */0) {
          var nodes$1 = removeAt$1(index, nodes);
          if (count$6(nodes$1) > 0) {
            return /* Level */__(0, [
                      bitmap ^ bit,
                      nodes$1,
                      owner
                    ]);
          } else {
            return /* Empty */0;
          }
        } else {
          return _4(updateLevelNode, owner, index, newChildNode, set);
        }
      } else {
        return set;
      }
    }
  }
  
  function toSequence$14(set) {
    if (typeof set === "number") {
      return empty$7(/* () */0);
    } else if (set.tag) {
      return $$return$3(set[0]);
    } else {
      return flatMap$1(toSequence$14, toSequence$5(set[1]));
    }
  }
  
  function updateLevelNodeTransient$1(owner, index, childNode, node) {
    if (typeof node === "number") {
      throw [
            match_failure,
            /* tuple */[
              "BitmapTrieIntSet.re",
              160,
              6
            ]
          ];
    } else if (node.tag) {
      throw [
            match_failure,
            /* tuple */[
              "BitmapTrieIntSet.re",
              160,
              6
            ]
          ];
    } else {
      var nodes = node[1];
      if (node[2] === owner) {
        caml_array_set(nodes, index, childNode);
        return node;
      } else {
        return /* Level */__(0, [
                  node[0],
                  update$9(index, childNode, nodes),
                  owner
                ]);
      }
    }
  }
  
  
  /* BitmapTrie Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function contains$5(value, param) {
    var root = param[/* root */1];
    return contains$6(0, value, root);
  }
  
  function count$14(param) {
    return param[/* count */0];
  }
  
  function reduce$20(predicate, f, acc, param) {
    var root = param[/* root */1];
    return reduce$21(predicate, f, acc, root);
  }
  
  function toSequence$13(param) {
    return toSequence$14(param[/* root */1]);
  }
  
  var emptyInstance$3 = /* record */[
    /* count */0,
    /* root : Empty */0
  ];
  
  function empty$20() {
    return emptyInstance$3;
  }
  
  
  /* BitmapTrieIntSet Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function containsKey$6(comparator, xK, _tree) {
    while(true) {
      var tree = _tree;
      if (typeof tree === "number") {
        return false;
      } else if (tree.tag) {
        var k = tree[2];
        if (xK === k) {
          return true;
        } else {
          var cmp = _2(comparator, xK, k);
          if (cmp === lessThan) {
            _tree = tree[1];
            continue ;
          } else if (cmp === greaterThan) {
            _tree = tree[4];
            continue ;
          } else {
            return true;
          }
        }
      } else {
        var k$1 = tree[0];
        if (xK === k$1) {
          return true;
        } else {
          var cmp$1 = _2(comparator, xK, k$1);
          return cmp$1 === equal$2;
        }
      }
    }
  }
  
  function get$13(comparator, xK, _tree) {
    while(true) {
      var tree = _tree;
      if (typeof tree === "number") {
        return undefined;
      } else if (tree.tag) {
        var v = tree[3];
        var k = tree[2];
        if (xK === k) {
          return some(v);
        } else {
          var cmp = _2(comparator, xK, k);
          if (cmp === lessThan) {
            _tree = tree[1];
            continue ;
          } else if (cmp === greaterThan) {
            _tree = tree[4];
            continue ;
          } else {
            return some(v);
          }
        }
      } else {
        var v$1 = tree[1];
        var k$1 = tree[0];
        if (xK === k$1) {
          return some(v$1);
        } else {
          var cmp$1 = _2(comparator, xK, k$1);
          if (cmp$1 === equal$2) {
            return some(v$1);
          } else {
            return undefined;
          }
        }
      }
    }
  }
  
  function getOrDefault$6(comparator, $$default, xK, _tree) {
    while(true) {
      var tree = _tree;
      if (typeof tree === "number") {
        return $$default;
      } else if (tree.tag) {
        var v = tree[3];
        var k = tree[2];
        if (xK === k) {
          return v;
        } else {
          var cmp = _2(comparator, xK, k);
          if (cmp === lessThan) {
            _tree = tree[1];
            continue ;
          } else if (cmp === greaterThan) {
            _tree = tree[4];
            continue ;
          } else {
            return v;
          }
        }
      } else {
        var v$1 = tree[1];
        var k$1 = tree[0];
        if (xK === k$1) {
          return v$1;
        } else {
          var cmp$1 = _2(comparator, xK, k$1);
          if (cmp$1 === equal$2) {
            return v$1;
          } else {
            return $$default;
          }
        }
      }
    }
  }
  
  function getOrRaise$9(comparator, xK, _tree) {
    while(true) {
      var tree = _tree;
      if (typeof tree === "number") {
        return failwith("Not found");
      } else if (tree.tag) {
        var v = tree[3];
        var k = tree[2];
        if (xK === k) {
          return v;
        } else {
          var cmp = _2(comparator, xK, k);
          if (cmp === lessThan) {
            _tree = tree[1];
            continue ;
          } else if (cmp === greaterThan) {
            _tree = tree[4];
            continue ;
          } else {
            return v;
          }
        }
      } else {
        var v$1 = tree[1];
        var k$1 = tree[0];
        if (xK === k$1) {
          return v$1;
        } else {
          var cmp$1 = _2(comparator, xK, k$1);
          if (cmp$1 === equal$2) {
            return v$1;
          } else {
            return failwith("Not found");
          }
        }
      }
    }
  }
  
  function reduceWhile$3(predicate, f, _acc, _tree) {
    while(true) {
      var tree = _tree;
      var acc = _acc;
      if (typeof tree === "number") {
        return acc;
      } else if (tree.tag) {
        var v = tree[3];
        var k = tree[2];
        var acc$1 = reduceWhile$3(predicate, f, acc, tree[1]);
        if (_3(predicate, acc$1, k, v)) {
          var acc$2 = _3(f, acc$1, k, v);
          _tree = tree[4];
          _acc = acc$2;
          continue ;
        } else {
          return acc$1;
        }
      } else {
        var v$1 = tree[1];
        var k$1 = tree[0];
        if (_3(predicate, acc, k$1, v$1)) {
          return _3(f, acc, k$1, v$1);
        } else {
          return acc;
        }
      }
    }
  }
  
  function toSequence$17(selector, tree) {
    if (typeof tree === "number") {
      return empty$7(/* () */0);
    } else if (tree.tag) {
      var right = tree[4];
      var left = tree[1];
      return concat$5(/* :: */[
                  (function (param) {
                      return defer$1((function () {
                                    return toSequence$17(selector, left);
                                  }), param);
                    }),
                  /* :: */[
                    $$return$3(_2(selector, tree[2], tree[3])),
                    /* :: */[
                      (function (param) {
                          return defer$1((function () {
                                        return toSequence$17(selector, right);
                                      }), param);
                        }),
                      /* [] */0
                    ]
                  ]
                ]);
    } else {
      return $$return$3(_2(selector, tree[0], tree[1]));
    }
  }
  
  
  /* No side effect */
  
  /* No side effect */
  
  /* No side effect */
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function toEquality(comparator, x, y) {
    return _2(comparator, x, y) === equal$2;
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function containsKey$5(comparator, _depth, hash, key, _set) {
    while(true) {
      var set = _set;
      var depth = _depth;
      if (typeof set === "number") {
        return false;
      } else {
        switch (set.tag | 0) {
          case 0 : 
              var bitmap = set[0];
              var bit = bitPos(hash, depth);
              var index = index$2(bitmap, bit);
              if (containsNode$2(bitmap, bit)) {
                _set = caml_array_get(set[1], index);
                _depth = depth + 1 | 0;
                continue ;
              } else {
                return false;
              }
          case 1 : 
              if (hash === set[0]) {
                return containsKey$6(comparator, key, set[1]);
              } else {
                return false;
              }
          case 2 : 
              if (hash === set[0]) {
                return toEquality(comparator, set[1], key);
              } else {
                return false;
              }
          
        }
      }
    }
  }
  
  function get$12(comparator, _depth, hash, key, _map) {
    while(true) {
      var map = _map;
      var depth = _depth;
      if (typeof map === "number") {
        return undefined;
      } else {
        switch (map.tag | 0) {
          case 0 : 
              var bitmap = map[0];
              var bit = bitPos(hash, depth);
              var index = index$2(bitmap, bit);
              if (containsNode$2(bitmap, bit)) {
                _map = caml_array_get(map[1], index);
                _depth = depth + 1 | 0;
                continue ;
              } else {
                return undefined;
              }
          case 1 : 
              if (hash === map[0]) {
                return get$13(comparator, key, map[1]);
              } else {
                return undefined;
              }
          case 2 : 
              if (hash === map[0] && toEquality(comparator, map[1], key)) {
                return some(map[2]);
              } else {
                return undefined;
              }
          
        }
      }
    }
  }
  
  function getOrDefault$5(comparator, _depth, $$default, hash, key, _map) {
    while(true) {
      var map = _map;
      var depth = _depth;
      if (typeof map === "number") {
        return $$default;
      } else {
        switch (map.tag | 0) {
          case 0 : 
              var bitmap = map[0];
              var bit = bitPos(hash, depth);
              var index = index$2(bitmap, bit);
              if (containsNode$2(bitmap, bit)) {
                _map = caml_array_get(map[1], index);
                _depth = depth + 1 | 0;
                continue ;
              } else {
                return $$default;
              }
          case 1 : 
              if (hash === map[0]) {
                return getOrDefault$6(comparator, $$default, key, map[1]);
              } else {
                return $$default;
              }
          case 2 : 
              if (hash === map[0] && toEquality(comparator, map[1], key)) {
                return map[2];
              } else {
                return $$default;
              }
          
        }
      }
    }
  }
  
  function getOrRaise$8(comparator, _depth, hash, key, _map) {
    while(true) {
      var map = _map;
      var depth = _depth;
      if (typeof map === "number") {
        return failwith("NotFound");
      } else {
        switch (map.tag | 0) {
          case 0 : 
              var bitmap = map[0];
              var bit = bitPos(hash, depth);
              var index = index$2(bitmap, bit);
              if (containsNode$2(bitmap, bit)) {
                _map = caml_array_get(map[1], index);
                _depth = depth + 1 | 0;
                continue ;
              } else {
                return failwith("NotFound");
              }
          case 1 : 
              if (hash === map[0]) {
                return getOrRaise$9(comparator, key, map[1]);
              } else {
                return failwith("NotFound");
              }
          case 2 : 
              if (hash === map[0] && toEquality(comparator, map[1], key)) {
                return map[2];
              } else {
                return failwith("NotFound");
              }
          
        }
      }
    }
  }
  
  function reduceWhile$2(levelPredicate, levelReducer, predicate, f, acc, map) {
    if (typeof map === "number") {
      return acc;
    } else {
      switch (map.tag | 0) {
        case 0 : 
            return reduce$10(levelPredicate, levelReducer, acc, map[1]);
        case 1 : 
            return reduceWhile$3(predicate, f, acc, map[1]);
        case 2 : 
            var entryValue = map[2];
            var entryKey = map[1];
            if (_3(predicate, acc, entryKey, entryValue)) {
              return _3(f, acc, entryKey, entryValue);
            } else {
              return acc;
            }
        
      }
    }
  }
  
  function reduce$23(predicate, f, acc, map) {
    if (predicate === alwaysTrue3) {
      var levelReducer = function (acc, node) {
        return reduceWhile$2(alwaysTrue2, levelReducer, alwaysTrue3, f, acc, node);
      };
      return levelReducer(acc, map);
    } else {
      var shouldContinue = /* record */[/* contents */true];
      var predicate$1 = function (acc, k, v) {
        if (shouldContinue[0]) {
          var result = _3(predicate, acc, k, v);
          shouldContinue[0] = result;
          return result;
        } else {
          return false;
        }
      };
      var levelPredicate = function (_, _$1) {
        return shouldContinue[0];
      };
      var levelReducer$1 = function (acc, node) {
        return reduceWhile$2(levelPredicate, levelReducer$1, predicate$1, f, acc, node);
      };
      return levelReducer$1(acc, map);
    }
  }
  
  function toSequence$16(selector, map) {
    if (typeof map === "number") {
      return empty$7(/* () */0);
    } else {
      switch (map.tag | 0) {
        case 0 : 
            return flatMap$1((function (param) {
                          return toSequence$16(selector, param);
                        }), toSequence$5(map[1]));
        case 1 : 
            return toSequence$17(selector, map[1]);
        case 2 : 
            return $$return$3(_2(selector, map[1], map[2]));
        
      }
    }
  }
  
  
  /* BitmapTrie Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function containsKey$4(key, param) {
    var root = param[/* root */1];
    var hashKey = _1(param[/* hash */3], key);
    return containsKey$5(param[/* comparator */2], 0, hashKey, key, root);
  }
  
  function count$15(param) {
    return param[/* count */0];
  }
  
  function get$11(key, param) {
    var root = param[/* root */1];
    var hashKey = _1(param[/* hash */3], key);
    return get$12(param[/* comparator */2], 0, hashKey, key, root);
  }
  
  function getOrDefault$4($$default, key, param) {
    var root = param[/* root */1];
    var hashKey = _1(param[/* hash */3], key);
    return getOrDefault$5(param[/* comparator */2], 0, $$default, hashKey, key, root);
  }
  
  function getOrRaise$7(key, param) {
    var root = param[/* root */1];
    var hashKey = _1(param[/* hash */3], key);
    return getOrRaise$8(param[/* comparator */2], 0, hashKey, key, root);
  }
  
  function reduce$22(predicate, f, acc, param) {
    var root = param[/* root */1];
    return reduce$23(predicate, f, acc, root);
  }
  
  function toSequence$15(selector, param) {
    var root = param[/* root */1];
    return toSequence$16(selector, root);
  }
  
  
  /* BitmapTrieMap Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function height$1(tree) {
    if (typeof tree === "number") {
      return 0;
    } else if (tree.tag) {
      return tree[0];
    } else {
      return 1;
    }
  }
  
  function makeTree$1(left, v, right) {
    var lh = height$1(left);
    var rh = height$1(right);
    var exit$$1 = 0;
    if (typeof left === "number" && typeof right === "number") {
      return /* Leaf */__(0, [v]);
    } else {
      exit$$1 = 1;
    }
    if (exit$$1 === 1) {
      var h = lh >= rh ? lh + 1 | 0 : rh + 1 | 0;
      return /* Node */__(1, [
                h,
                left,
                v,
                right
              ]);
    }
    
  }
  
  function rebalance$1(left, v, right) {
    var lh = height$1(left);
    var rh = height$1(right);
    var exit$$1 = 0;
    var exit$1 = 0;
    if (typeof left === "number" || !(left.tag && lh > (rh + 2 | 0))) {
      exit$1 = 2;
    } else {
      var lr = left[3];
      var lv = left[2];
      var ll = left[1];
      var exit$2 = 0;
      if (typeof lr === "number" || !(lr.tag && height$1(ll) < lr[0])) {
        exit$2 = 3;
      } else {
        return makeTree$1(makeTree$1(ll, lv, lr[1]), lr[2], makeTree$1(lr[3], v, right));
      }
      if (exit$2 === 3) {
        return makeTree$1(ll, lv, makeTree$1(lr, v, right));
      }
      
    }
    if (exit$1 === 2) {
      if (typeof right === "number" || !(right.tag && rh > (lh + 2 | 0))) {
        exit$$1 = 1;
      } else {
        var rr = right[3];
        var rv = right[2];
        var rl = right[1];
        var exit$3 = 0;
        if (typeof rl === "number" || !(rl.tag && height$1(rr) < rl[0])) {
          exit$3 = 3;
        } else {
          return makeTree$1(makeTree$1(left, v, rl[1]), rl[2], makeTree$1(rl[3], rv, rr));
        }
        if (exit$3 === 3) {
          return makeTree$1(makeTree$1(left, v, rl), rv, rr);
        }
        
      }
    }
    if (exit$$1 === 1) {
      var exit$4 = 0;
      if (typeof left === "number" && typeof right === "number") {
        return /* Leaf */__(0, [v]);
      } else {
        exit$4 = 2;
      }
      if (exit$4 === 2) {
        var h = lh >= rh ? lh + 1 | 0 : rh + 1 | 0;
        return /* Node */__(1, [
                  h,
                  left,
                  v,
                  right
                ]);
      }
      
    }
    
  }
  
  function add$6(comparator, x, tree) {
    if (typeof tree === "number") {
      return /* Leaf */__(0, [x]);
    } else if (tree.tag) {
      var right = tree[3];
      var v = tree[2];
      var left = tree[1];
      var cmp = _2(comparator, x, v);
      if (cmp === lessThan) {
        var newLeft = add$6(comparator, x, left);
        if (newLeft === left) {
          return tree;
        } else {
          return rebalance$1(newLeft, v, right);
        }
      } else if (cmp === greaterThan) {
        var newRight = add$6(comparator, x, right);
        if (newRight === right) {
          return tree;
        } else {
          return rebalance$1(left, v, newRight);
        }
      } else {
        return tree;
      }
    } else {
      var cmp$1 = _2(comparator, x, tree[0]);
      if (cmp$1 === lessThan) {
        return /* Node */__(1, [
                  2,
                  /* Empty */0,
                  x,
                  tree
                ]);
      } else if (cmp$1 === greaterThan) {
        return /* Node */__(1, [
                  2,
                  tree,
                  x,
                  /* Empty */0
                ]);
      } else {
        return tree;
      }
    }
  }
  
  function contains$9(comparator, x, _tree) {
    while(true) {
      var tree = _tree;
      if (typeof tree === "number") {
        return false;
      } else if (tree.tag) {
        var v = tree[2];
        if (x === v) {
          return true;
        } else {
          var cmp = _2(comparator, x, v);
          if (cmp === lessThan) {
            _tree = tree[1];
            continue ;
          } else if (cmp === greaterThan) {
            _tree = tree[3];
            continue ;
          } else {
            return true;
          }
        }
      } else {
        var v$1 = tree[0];
        if (x === v$1) {
          return true;
        } else {
          var cmp$1 = _2(comparator, x, v$1);
          return cmp$1 === equal$2;
        }
      }
    }
  }
  
  function firstOrRaise$9(_tree) {
    while(true) {
      var tree = _tree;
      if (typeof tree === "number") {
        return failwith("empty");
      } else if (tree.tag) {
        var left = tree[1];
        if (typeof left === "number") {
          return tree[2];
        } else {
          _tree = left;
          continue ;
        }
      } else {
        return tree[0];
      }
    }
  }
  
  function reduceWhile$5(predicate, f, _acc, _tree) {
    while(true) {
      var tree = _tree;
      var acc = _acc;
      if (typeof tree === "number") {
        return acc;
      } else if (tree.tag) {
        var v = tree[2];
        var acc$1 = reduceWhile$5(predicate, f, acc, tree[1]);
        if (_2(predicate, acc$1, v)) {
          var acc$2 = _2(f, acc$1, v);
          _tree = tree[3];
          _acc = acc$2;
          continue ;
        } else {
          return acc$1;
        }
      } else {
        var v$1 = tree[0];
        if (_2(predicate, acc, v$1)) {
          return _2(f, acc, v$1);
        } else {
          return acc;
        }
      }
    }
  }
  
  function removeFirstOrRaise$7(tree) {
    if (typeof tree === "number") {
      return failwith("empty");
    } else if (tree.tag) {
      var left = tree[1];
      if (typeof left === "number") {
        return tree[3];
      } else {
        return rebalance$1(removeFirstOrRaise$7(left), tree[2], tree[3]);
      }
    } else {
      return /* Empty */0;
    }
  }
  
  function removeFirstOrRaiseWithValue(first, tree) {
    if (typeof tree === "number") {
      return failwith("empty");
    } else if (tree.tag) {
      var left = tree[1];
      if (typeof left === "number") {
        first[0] = tree[2];
        return tree[3];
      } else {
        return rebalance$1(removeFirstOrRaiseWithValue(first, left), tree[2], tree[3]);
      }
    } else {
      first[0] = tree[0];
      return /* Empty */0;
    }
  }
  
  function remove$7(comparator, x, tree) {
    if (typeof tree === "number") {
      return /* Empty */0;
    } else if (tree.tag) {
      var right = tree[3];
      var v = tree[2];
      var left = tree[1];
      if (x === v) {
        if (typeof left === "number") {
          return right;
        } else if (typeof right === "number") {
          return left;
        } else {
          return rebalance$1(left, firstOrRaise$9(right), removeFirstOrRaise$7(right));
        }
      } else {
        var cmp = _2(comparator, x, v);
        if (cmp === lessThan) {
          var newLeft = remove$7(comparator, x, left);
          if (newLeft === left) {
            return tree;
          } else {
            return rebalance$1(newLeft, v, right);
          }
        } else if (cmp === greaterThan) {
          var newRight = remove$7(comparator, x, right);
          if (newRight === right) {
            return tree;
          } else {
            return rebalance$1(left, v, newRight);
          }
        } else if (typeof left === "number") {
          return right;
        } else if (typeof right === "number") {
          return left;
        } else if (tree[0] > 4) {
          var first = /* record */[/* contents */x];
          var newRight$1 = removeFirstOrRaiseWithValue(first, right);
          return rebalance$1(left, first[0], newRight$1);
        } else {
          return rebalance$1(left, firstOrRaise$9(right), removeFirstOrRaise$7(right));
        }
      }
    } else {
      var v$1 = tree[0];
      if (x === v$1) {
        return /* Empty */0;
      } else {
        var cmp$1 = _2(comparator, x, v$1);
        if (cmp$1 === equal$2) {
          return /* Empty */0;
        } else {
          return tree;
        }
      }
    }
  }
  
  function toSequence$20(tree) {
    if (typeof tree === "number") {
      return empty$7(/* () */0);
    } else if (tree.tag) {
      var right = tree[3];
      var left = tree[1];
      return concat$5(/* :: */[
                  (function (param) {
                      return defer$1((function () {
                                    return toSequence$20(left);
                                  }), param);
                    }),
                  /* :: */[
                    $$return$3(tree[2]),
                    /* :: */[
                      (function (param) {
                          return defer$1((function () {
                                        return toSequence$20(right);
                                      }), param);
                        }),
                      /* [] */0
                    ]
                  ]
                ]);
    } else {
      return $$return$3(tree[0]);
    }
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function add$5(comparator, updateLevelNode, owner, depth, hash, value, _set) {
    while(true) {
      var set = _set;
      if (typeof set === "number") {
        return /* Entry */__(2, [
                  hash,
                  value
                ]);
      } else {
        switch (set.tag | 0) {
          case 0 : 
              var nodes = set[1];
              var bitmap = set[0];
              var bit = bitPos(hash, depth);
              var index = index$2(bitmap, bit);
              if (containsNode$2(bitmap, bit)) {
                var childNode = caml_array_get(nodes, index);
                var newChildNode = add$5(comparator, updateLevelNode, owner, depth + 1 | 0, hash, value, childNode);
                if (childNode === newChildNode) {
                  return set;
                } else {
                  return _4(updateLevelNode, owner, index, newChildNode, set);
                }
              } else {
                var entry = /* Entry */__(2, [
                    hash,
                    value
                  ]);
                var nodes$1 = insertAt$1(index, entry, nodes);
                return /* Level */__(0, [
                          bitmap | bit,
                          nodes$1,
                          owner
                        ]);
              }
          case 1 : 
              var entrySet = set[1];
              var entryHash = set[0];
              if (hash === entryHash) {
                var newEntrySet = add$6(comparator, value, entrySet);
                if (newEntrySet === entrySet) {
                  return set;
                } else {
                  return /* Collision */__(1, [
                            entryHash,
                            newEntrySet
                          ]);
                }
              } else {
                var bitmap$1 = bitPos(entryHash, depth);
                _set = /* Level */__(0, [
                    bitmap$1,
                    /* array */[set],
                    owner
                  ]);
                continue ;
              }
          case 2 : 
              var entryValue = set[1];
              var entryHash$1 = set[0];
              if (hash === entryHash$1) {
                if (toEquality(comparator, value, entryValue)) {
                  return set;
                } else {
                  var set$1 = add$6(comparator, value, add$6(comparator, entryValue, /* Empty */0));
                  return /* Collision */__(1, [
                            entryHash$1,
                            set$1
                          ]);
                }
              } else {
                var bitmap$2 = bitPos(entryHash$1, depth);
                _set = /* Level */__(0, [
                    bitmap$2,
                    /* array */[set],
                    owner
                  ]);
                continue ;
              }
          
        }
      }
    }
  }
  
  function contains$8(comparator, _depth, hash, value, _set) {
    while(true) {
      var set = _set;
      var depth = _depth;
      if (typeof set === "number") {
        return false;
      } else {
        switch (set.tag | 0) {
          case 0 : 
              var bitmap = set[0];
              var bit = bitPos(hash, depth);
              var index = index$2(bitmap, bit);
              if (containsNode$2(bitmap, bit)) {
                _set = caml_array_get(set[1], index);
                _depth = depth + 1 | 0;
                continue ;
              } else {
                return false;
              }
          case 1 : 
              if (hash === set[0]) {
                return contains$9(comparator, value, set[1]);
              } else {
                return false;
              }
          case 2 : 
              if (hash === set[0]) {
                return toEquality(comparator, set[1], value);
              } else {
                return false;
              }
          
        }
      }
    }
  }
  
  function reduceWhile$4(levelPredicate, levelReducer, predicate, f, acc, map) {
    if (typeof map === "number") {
      return acc;
    } else {
      switch (map.tag | 0) {
        case 0 : 
            return reduce$10(levelPredicate, levelReducer, acc, map[1]);
        case 1 : 
            return reduceWhile$5(predicate, f, acc, map[1]);
        case 2 : 
            var entryValue = map[1];
            if (_2(predicate, acc, entryValue)) {
              return _2(f, acc, entryValue);
            } else {
              return acc;
            }
        
      }
    }
  }
  
  function reduce$26(predicate, f, acc, map) {
    if (predicate === alwaysTrue2) {
      var levelReducer = function (acc, node) {
        return reduceWhile$4(alwaysTrue2, levelReducer, alwaysTrue2, f, acc, node);
      };
      return levelReducer(acc, map);
    } else {
      var shouldContinue = /* record */[/* contents */true];
      var predicate$1 = function (acc, v) {
        if (shouldContinue[0]) {
          var result = _2(predicate, acc, v);
          shouldContinue[0] = result;
          return result;
        } else {
          return false;
        }
      };
      var levelPredicate = function (_, _$1) {
        return shouldContinue[0];
      };
      var levelReducer$1 = function (acc, node) {
        return reduceWhile$4(levelPredicate, levelReducer$1, predicate$1, f, acc, node);
      };
      return levelReducer$1(acc, map);
    }
  }
  
  function remove$6(comparator, updateLevelNode, owner, depth, hash, value, set) {
    if (typeof set === "number") {
      return set;
    } else {
      switch (set.tag | 0) {
        case 0 : 
            var nodes = set[1];
            var bitmap = set[0];
            var bit = bitPos(hash, depth);
            var index = index$2(bitmap, bit);
            if (containsNode$2(bitmap, bit)) {
              var childNode = caml_array_get(nodes, index);
              var newChildNode = remove$6(comparator, updateLevelNode, owner, depth + 1 | 0, hash, value, childNode);
              if (newChildNode === childNode) {
                return set;
              } else if (newChildNode === /* Empty */0) {
                var nodes$1 = removeAt$1(index, nodes);
                if (count$6(nodes$1) > 0) {
                  return /* Level */__(0, [
                            bitmap ^ bit,
                            nodes$1,
                            owner
                          ]);
                } else {
                  return /* Empty */0;
                }
              } else {
                return _4(updateLevelNode, owner, index, newChildNode, set);
              }
            } else {
              return set;
            }
        case 1 : 
            var entryHash = set[0];
            if (hash === entryHash) {
              var entrySet = set[1];
              var newEntrySet = remove$7(comparator, value, entrySet);
              if (newEntrySet === entrySet) {
                return set;
              } else if (typeof newEntrySet === "number" || newEntrySet.tag) {
                return /* Collision */__(1, [
                          entryHash,
                          newEntrySet
                        ]);
              } else {
                return /* Entry */__(2, [
                          entryHash,
                          newEntrySet[0]
                        ]);
              }
            } else {
              return set;
            }
        case 2 : 
            if (hash === set[0] && toEquality(comparator, set[1], value)) {
              return /* Empty */0;
            } else {
              return set;
            }
        
      }
    }
  }
  
  function toSequence$19(set) {
    if (typeof set === "number") {
      return empty$7(/* () */0);
    } else {
      switch (set.tag | 0) {
        case 0 : 
            return flatMap$1(toSequence$19, toSequence$5(set[1]));
        case 1 : 
            return toSequence$20(set[1]);
        case 2 : 
            return $$return$3(set[1]);
        
      }
    }
  }
  
  function updateLevelNodeTransient$3(owner, index, childNode, node) {
    if (typeof node === "number") {
      throw [
            match_failure,
            /* tuple */[
              "BitmapTrieSet.re",
              202,
              6
            ]
          ];
    } else if (node.tag) {
      throw [
            match_failure,
            /* tuple */[
              "BitmapTrieSet.re",
              202,
              6
            ]
          ];
    } else {
      var nodes = node[1];
      if (node[2] === owner) {
        caml_array_set(nodes, index, childNode);
        return node;
      } else {
        return /* Level */__(0, [
                  node[0],
                  update$9(index, childNode, nodes),
                  owner
                ]);
      }
    }
  }
  
  
  /* BitmapTrie Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function contains$7(value, param) {
    var root = param[/* root */1];
    var keyHash = _1(param[/* hash */3], value);
    return contains$8(param[/* comparator */2], 0, keyHash, value, root);
  }
  
  function count$16(param) {
    return param[/* count */0];
  }
  
  function reduce$25(predicate, f, acc, param) {
    var root = param[/* root */1];
    return reduce$26(predicate, f, acc, root);
  }
  
  function toSequence$18(param) {
    return toSequence$19(param[/* root */1]);
  }
  
  function emptyWith$1(hash, comparator) {
    return /* record */[
            /* count */0,
            /* root : Empty */0,
            /* comparator */comparator,
            /* hash */hash
          ];
  }
  
  
  /* BitmapTrieSet Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function MakeGeneric$10(Base) {
    var firstOrRaise = Base[3];
    var count = Base[/* count */0];
    var reduce = Base[/* reduce */1];
    var toSequence = Base[/* toSequence */2];
    var include = MakeGeneric$2(/* module */[
          /* count */count,
          /* reduce */reduce,
          /* toSequence */toSequence
        ]);
    var count$1 = include[8];
    var isEmpty = include[9];
    var toSequence$1 = include[12];
    var first = function (collection) {
      if (_1(isEmpty, collection)) {
        return undefined;
      } else {
        return some(_1(firstOrRaise, collection));
      }
    };
    var sequentialCollectionBase_002 = /* reduce */Base[/* reduce */1];
    var sequentialCollectionBase = /* record */[
      /* count */count$1,
      /* firstOrRaise */firstOrRaise,
      sequentialCollectionBase_002,
      /* toSequence */toSequence$1
    ];
    var toSequentialCollection = function (collection) {
      if (_1(isEmpty, collection)) {
        return /* Empty */0;
      } else {
        return /* Instance */[
                collection,
                sequentialCollectionBase
              ];
      }
    };
    return /* module */[
            /* every */include[0],
            /* find */include[1],
            /* findOrRaise */include[2],
            /* forEach */include[3],
            /* none */include[4],
            /* reduce */include[5],
            /* some */include[6],
            /* toIterable */include[7],
            /* count */count$1,
            /* isEmpty */isEmpty,
            /* isNotEmpty */include[10],
            /* toCollection */include[11],
            /* toSequence */toSequence$1,
            /* first */first,
            /* firstOrRaise */firstOrRaise,
            /* toSequentialCollection */toSequentialCollection
          ];
  }
  
  function count$21(collection) {
    if (collection) {
      return _1(collection[1][/* count */0], collection[0]);
    } else {
      return 0;
    }
  }
  
  function empty$25() {
    return /* Empty */0;
  }
  
  function firstOrRaise$13(collection) {
    if (collection) {
      return _1(collection[1][/* firstOrRaise */1], collection[0]);
    } else {
      return failwith("empty");
    }
  }
  
  function reduce$32(predicate, f, acc, collection) {
    if (collection) {
      return _4(collection[1][/* reduce */2], predicate, f, acc, collection[0]);
    } else {
      return acc;
    }
  }
  
  function toSequence$25(collection) {
    if (collection) {
      return _1(collection[1][/* toSequence */3], collection[0]);
    } else {
      return empty$7(/* () */0);
    }
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function MakeGeneric$9(Base) {
    var lastOrRaise = Base[4];
    var include = MakeGeneric$10([
          Base[0],
          Base[1],
          Base[2],
          Base[3]
        ]);
    var count = include[8];
    var isEmpty = include[9];
    var toSequence = include[12];
    var firstOrRaise = include[14];
    var last = function (collection) {
      if (_1(isEmpty, collection)) {
        return undefined;
      } else {
        return some(_1(lastOrRaise, collection));
      }
    };
    var reduce = Base[/* reduceReversed */5];
    var ReversedSequentialCollection = MakeGeneric$10(/* module */[
          /* count */count,
          /* reduce */reduce,
          /* toSequence */Base[6],
          /* firstOrRaise */lastOrRaise
        ]);
    var reduceReversed = ReversedSequentialCollection[/* reduce */5];
    var toIterableReversed = ReversedSequentialCollection[/* toIterable */7];
    var toSequenceReversed = ReversedSequentialCollection[/* toSequence */12];
    var toCollectionReversed = ReversedSequentialCollection[/* toCollection */11];
    var toSequentialCollectionReversed = ReversedSequentialCollection[/* toSequentialCollection */15];
    var navigableCollectionBase_002 = /* reduce */Base[/* reduce */1];
    var navigableCollectionBase = /* record */[
      /* count */count,
      /* firstOrRaise */firstOrRaise,
      navigableCollectionBase_002,
      /* toSequence */toSequence
    ];
    var navigableCollectionReversedBase_002 = /* reduce */Base[/* reduceReversed */5];
    var navigableCollectionReversedBase = /* record */[
      /* count */count,
      /* firstOrRaise */lastOrRaise,
      navigableCollectionReversedBase_002,
      /* toSequence */toSequenceReversed
    ];
    var toNavigableCollection = function (collection) {
      if (_1(isEmpty, collection)) {
        return /* Empty */0;
      } else {
        return /* Instance */[
                collection,
                navigableCollectionBase,
                navigableCollectionReversedBase
              ];
      }
    };
    var toNavigableCollectionReversed = function (collection) {
      if (_1(isEmpty, collection)) {
        return /* Empty */0;
      } else {
        return /* Instance */[
                collection,
                navigableCollectionReversedBase,
                navigableCollectionBase
              ];
      }
    };
    return /* module */[
            /* every */include[0],
            /* find */include[1],
            /* findOrRaise */include[2],
            /* forEach */include[3],
            /* none */include[4],
            /* reduce */include[5],
            /* some */include[6],
            /* toIterable */include[7],
            /* count */count,
            /* isEmpty */isEmpty,
            /* isNotEmpty */include[10],
            /* toCollection */include[11],
            /* toSequence */toSequence,
            /* first */include[13],
            /* firstOrRaise */firstOrRaise,
            /* toSequentialCollection */include[15],
            /* last */last,
            /* lastOrRaise */lastOrRaise,
            /* reduceReversed */reduceReversed,
            /* toCollectionReversed */toCollectionReversed,
            /* toIterableReversed */toIterableReversed,
            /* toNavigableCollection */toNavigableCollection,
            /* toNavigableCollectionReversed */toNavigableCollectionReversed,
            /* toSequenceReversed */toSequenceReversed,
            /* toSequentialCollectionReversed */toSequentialCollectionReversed
          ];
  }
  
  function count$20(collection) {
    if (collection) {
      return _1(collection[1][/* count */0], collection[0]);
    } else {
      return 0;
    }
  }
  
  function empty$24() {
    return /* Empty */0;
  }
  
  function firstOrRaise$12(collection) {
    if (collection) {
      return _1(collection[1][/* firstOrRaise */1], collection[0]);
    } else {
      return failwith("empty");
    }
  }
  
  function lastOrRaise$8(collection) {
    if (collection) {
      return _1(collection[2][/* firstOrRaise */1], collection[0]);
    } else {
      return failwith("empty");
    }
  }
  
  function reduce$31(predicate, f, acc, collection) {
    if (collection) {
      return _4(collection[1][/* reduce */2], predicate, f, acc, collection[0]);
    } else {
      return acc;
    }
  }
  
  function reduceReversed$12(predicate, f, acc, collection) {
    if (collection) {
      return _4(collection[2][/* reduce */2], predicate, f, acc, collection[0]);
    } else {
      return acc;
    }
  }
  
  function toSequence$24(collection) {
    if (collection) {
      return _1(collection[1][/* toSequence */3], collection[0]);
    } else {
      return empty$7(/* () */0);
    }
  }
  
  function toSequenceReversed$12(collection) {
    if (collection) {
      return _1(collection[2][/* toSequence */3], collection[0]);
    } else {
      return empty$7(/* () */0);
    }
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function MakeGeneric$8(Base) {
    var include = MakeGeneric$1([
          Base[4],
          Base[5],
          Base[6],
          Base[7]
        ]);
    var contains = include[13];
    var include$1 = MakeGeneric$9([
          Base[5],
          Base[6],
          Base[7],
          Base[0],
          Base[1],
          Base[2],
          Base[3]
        ]);
    var count = include$1[8];
    var isEmpty = include$1[9];
    var toSequence = include$1[12];
    var firstOrRaise = include$1[14];
    var lastOrRaise = include$1[17];
    var toSequenceReversed = include$1[23];
    var reduce = Base[/* reduceReversed */2];
    var ReversedImmSet = MakeGeneric$1(/* module */[
          /* contains */contains,
          /* count */count,
          /* reduce */reduce,
          /* toSequence */toSequenceReversed
        ]);
    var toSetReversed = ReversedImmSet[/* toSet */15];
    var navigableSetBase_003 = /* reduce */Base[/* reduce */6];
    var navigableSetBase = /* record */[
      /* contains */contains,
      /* count */count,
      /* firstOrRaise */firstOrRaise,
      navigableSetBase_003,
      /* toSequence */toSequence
    ];
    var navigableSetReversedBase_003 = /* reduce */Base[/* reduceReversed */2];
    var navigableSetReversedBase = /* record */[
      /* contains */contains,
      /* count */count,
      /* firstOrRaise */lastOrRaise,
      navigableSetReversedBase_003,
      /* toSequence */toSequenceReversed
    ];
    var toNavigableSet = function (set) {
      if (_1(isEmpty, set)) {
        return /* Empty */0;
      } else {
        return /* Instance */[
                set,
                navigableSetBase,
                navigableSetReversedBase
              ];
      }
    };
    var toNavigableSetReversed = function (set) {
      if (_1(isEmpty, set)) {
        return /* Empty */0;
      } else {
        return /* Instance */[
                set,
                navigableSetReversedBase,
                navigableSetBase
              ];
      }
    };
    return /* module */[
            /* contains */contains,
            /* equals */include[14],
            /* toSet */include[15],
            /* every */include$1[0],
            /* find */include$1[1],
            /* findOrRaise */include$1[2],
            /* forEach */include$1[3],
            /* none */include$1[4],
            /* reduce */include$1[5],
            /* some */include$1[6],
            /* toIterable */include$1[7],
            /* count */count,
            /* isEmpty */isEmpty,
            /* isNotEmpty */include$1[10],
            /* toCollection */include$1[11],
            /* toSequence */toSequence,
            /* first */include$1[13],
            /* firstOrRaise */firstOrRaise,
            /* toSequentialCollection */include$1[15],
            /* last */include$1[16],
            /* lastOrRaise */lastOrRaise,
            /* reduceReversed */include$1[18],
            /* toCollectionReversed */include$1[19],
            /* toIterableReversed */include$1[20],
            /* toNavigableCollection */include$1[21],
            /* toNavigableCollectionReversed */include$1[22],
            /* toSequenceReversed */toSequenceReversed,
            /* toSequentialCollectionReversed */include$1[24],
            /* toNavigableSet */toNavigableSet,
            /* toNavigableSetReversed */toNavigableSetReversed,
            /* toSetReversed */toSetReversed
          ];
  }
  
  function contains$10(value, set) {
    if (set) {
      return _2(set[1][/* contains */0], value, set[0]);
    } else {
      return false;
    }
  }
  
  function count$19(set) {
    if (set) {
      return _1(set[1][/* count */1], set[0]);
    } else {
      return 0;
    }
  }
  
  function firstOrRaise$11(set) {
    if (set) {
      return _1(set[1][/* firstOrRaise */2], set[0]);
    } else {
      return failwith("empty");
    }
  }
  
  function lastOrRaise$7(set) {
    if (set) {
      return _1(set[2][/* firstOrRaise */2], set[0]);
    } else {
      return failwith("empty");
    }
  }
  
  function reduce$30(predicate, f, acc, set) {
    if (set) {
      return _4(set[1][/* reduce */3], predicate, f, acc, set[0]);
    } else {
      return acc;
    }
  }
  
  function reduceReversed$11(predicate, f, acc, set) {
    if (set) {
      return _4(set[2][/* reduce */3], predicate, f, acc, set[0]);
    } else {
      return acc;
    }
  }
  
  function toSequence$23(set) {
    if (set) {
      return _1(set[1][/* toSequence */4], set[0]);
    } else {
      return empty$7(/* () */0);
    }
  }
  
  function toSequenceReversed$11(set) {
    if (set) {
      return _1(set[2][/* toSequence */4], set[0]);
    } else {
      return empty$7(/* () */0);
    }
  }
  
  function empty$23() {
    return /* Empty */0;
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function MakeGeneric$11(Base) {
    var firstOrRaise = Base[2];
    var lastOrRaise = Base[3];
    var include = MakeGeneric$4([
          Base[0],
          Base[1],
          Base[4],
          Base[6],
          Base[8],
          Base[10]
        ]);
    var containsKey = include[13];
    var count = include[14];
    var isEmpty = include[15];
    var keysSequence = include[18];
    var toSequence = include[20];
    var valuesSequence = include[22];
    var first = function (selector, keyed) {
      if (_1(isEmpty, keyed)) {
        return undefined;
      } else {
        return some(_2(firstOrRaise, selector, keyed));
      }
    };
    var last = function (selector, keyed) {
      if (_1(isEmpty, keyed)) {
        return undefined;
      } else {
        return some(_2(lastOrRaise, selector, keyed));
      }
    };
    var reduce = Base[/* reduceReversed */5];
    var reduceKeys = Base[/* reduceKeysReversed */7];
    var reduceValues = Base[/* reduceValuesReversed */9];
    var ReversedKeyedCollection = MakeGeneric$4(/* module */[
          /* containsKey */containsKey,
          /* count */count,
          /* reduce */reduce,
          /* reduceKeys */reduceKeys,
          /* reduceValues */reduceValues,
          /* toSequence */Base[11]
        ]);
    var keysCollectionReversed = ReversedKeyedCollection[/* keysCollection */17];
    var keysReversed = ReversedKeyedCollection[/* keys */4];
    var keysSequenceReversed = ReversedKeyedCollection[/* keysSequence */18];
    var reduceReversed = ReversedKeyedCollection[/* reduce */6];
    var reduceKeysReversed = ReversedKeyedCollection[/* reduceKeys */7];
    var reduceValuesReversed = ReversedKeyedCollection[/* reduceValues */8];
    var toIterableReversed = ReversedKeyedCollection[/* toIterable */10];
    var toKeyedCollectionReversed = ReversedKeyedCollection[/* toKeyedCollection */19];
    var toKeyedIterableReversed = ReversedKeyedCollection[/* toKeyedIterable */11];
    var toSequenceReversed = ReversedKeyedCollection[/* toSequence */20];
    var valuesCollectionReversed = ReversedKeyedCollection[/* valuesCollection */21];
    var valuesReversed = ReversedKeyedCollection[/* values */12];
    var valuesSequenceReversed = ReversedKeyedCollection[/* valuesSequence */22];
    var firstKeyOrRaise = function (collection) {
      return _2(firstOrRaise, getKey, collection);
    };
    var lastKeyOrRaise = function (collection) {
      return _2(lastOrRaise, getKey, collection);
    };
    var firstValueOrRaise = function (collection) {
      return _2(firstOrRaise, getValue$1, collection);
    };
    var lastValueOrRaise = function (collection) {
      return _2(lastOrRaise, getValue$1, collection);
    };
    var keysSequentialCollectionBase_002 = /* reduce */Base[/* reduceKeys */6];
    var keysSequentialCollectionBase = /* record */[
      /* count */count,
      /* firstOrRaise */firstKeyOrRaise,
      keysSequentialCollectionBase_002,
      /* toSequence */keysSequence
    ];
    var keysSequentialCollectionReversedBase_002 = /* reduce */Base[/* reduceKeysReversed */7];
    var keysSequentialCollectionReversedBase = /* record */[
      /* count */count,
      /* firstOrRaise */lastKeyOrRaise,
      keysSequentialCollectionReversedBase_002,
      /* toSequence */keysSequenceReversed
    ];
    var keysSequentialCollection = function (collection) {
      if (_1(isEmpty, collection)) {
        return empty$25(/* () */0);
      } else {
        return /* Instance */[
                collection,
                keysSequentialCollectionBase
              ];
      }
    };
    var keysSequentialCollectionReversed = function (collection) {
      if (_1(isEmpty, collection)) {
        return empty$25(/* () */0);
      } else {
        return /* Instance */[
                collection,
                keysSequentialCollectionReversedBase
              ];
      }
    };
    var keysNavigableCollection = function (collection) {
      if (_1(isEmpty, collection)) {
        return empty$24(/* () */0);
      } else {
        return /* Instance */[
                collection,
                keysSequentialCollectionBase,
                keysSequentialCollectionReversedBase
              ];
      }
    };
    var keysNavigableCollectionReversed = function (collection) {
      if (_1(isEmpty, collection)) {
        return empty$24(/* () */0);
      } else {
        return /* Instance */[
                collection,
                keysSequentialCollectionReversedBase,
                keysSequentialCollectionBase
              ];
      }
    };
    var valuesSequentialCollectionBase_002 = /* reduce */Base[/* reduceValues */8];
    var valuesSequentialCollectionBase = /* record */[
      /* count */count,
      /* firstOrRaise */firstValueOrRaise,
      valuesSequentialCollectionBase_002,
      /* toSequence */valuesSequence
    ];
    var valuesSequentialCollectionReversedBase_002 = /* reduce */Base[/* reduceValuesReversed */9];
    var valuesSequentialCollectionReversedBase = /* record */[
      /* count */count,
      /* firstOrRaise */lastValueOrRaise,
      valuesSequentialCollectionReversedBase_002,
      /* toSequence */valuesSequenceReversed
    ];
    var valuesSequentialCollection = function (collection) {
      if (_1(isEmpty, collection)) {
        return empty$25(/* () */0);
      } else {
        return /* Instance */[
                collection,
                valuesSequentialCollectionBase
              ];
      }
    };
    var valuesSequentialCollectionReversed = function (collection) {
      if (_1(isEmpty, collection)) {
        return empty$25(/* () */0);
      } else {
        return /* Instance */[
                collection,
                valuesSequentialCollectionReversedBase
              ];
      }
    };
    var valuesNavigableCollection = function (collection) {
      if (_1(isEmpty, collection)) {
        return empty$24(/* () */0);
      } else {
        return /* Instance */[
                collection,
                valuesSequentialCollectionBase,
                valuesSequentialCollectionReversedBase
              ];
      }
    };
    var valuesNavigableCollectionReversed = function (collection) {
      if (_1(isEmpty, collection)) {
        return empty$24(/* () */0);
      } else {
        return /* Instance */[
                collection,
                valuesSequentialCollectionReversedBase,
                valuesSequentialCollectionBase
              ];
      }
    };
    var sequentialKeyedCollectionBase_003 = /* reduce */Base[/* reduce */4];
    var sequentialKeyedCollectionBase = /* record */[
      /* containsKey */containsKey,
      /* count */count,
      /* firstOrRaise */firstOrRaise,
      sequentialKeyedCollectionBase_003,
      /* toSequence */toSequence
    ];
    var sequentialKeyedCollectionReversedBase_003 = /* reduce */Base[/* reduceReversed */5];
    var sequentialKeyedCollectionReversedBase = /* record */[
      /* containsKey */containsKey,
      /* count */count,
      /* firstOrRaise */lastOrRaise,
      sequentialKeyedCollectionReversedBase_003,
      /* toSequence */toSequenceReversed
    ];
    var toNavigableKeyedCollection = function (keyed) {
      if (_1(isEmpty, keyed)) {
        return /* Empty */0;
      } else {
        return /* Instance */[
                keyed,
                sequentialKeyedCollectionBase,
                sequentialKeyedCollectionReversedBase
              ];
      }
    };
    var toNavigableKeyedCollectionReversed = function (keyed) {
      if (_1(isEmpty, keyed)) {
        return /* Empty */0;
      } else {
        return /* Instance */[
                keyed,
                sequentialKeyedCollectionReversedBase,
                sequentialKeyedCollectionBase
              ];
      }
    };
    return /* module */[
            /* every */include[0],
            /* find */include[1],
            /* findOrRaise */include[2],
            /* forEach */include[3],
            /* keys */include[4],
            /* none */include[5],
            /* reduce */include[6],
            /* reduceKeys */include[7],
            /* reduceValues */include[8],
            /* some */include[9],
            /* toIterable */include[10],
            /* toKeyedIterable */include[11],
            /* values */include[12],
            /* containsKey */containsKey,
            /* count */count,
            /* isEmpty */isEmpty,
            /* isNotEmpty */include[16],
            /* keysCollection */include[17],
            /* keysSequence */keysSequence,
            /* toKeyedCollection */include[19],
            /* toSequence */toSequence,
            /* valuesCollection */include[21],
            /* valuesSequence */valuesSequence,
            /* first */first,
            /* firstOrRaise */firstOrRaise,
            /* keysCollectionReversed */keysCollectionReversed,
            /* keysNavigableCollection */keysNavigableCollection,
            /* keysNavigableCollectionReversed */keysNavigableCollectionReversed,
            /* keysReversed */keysReversed,
            /* keysSequentialCollection */keysSequentialCollection,
            /* keysSequentialCollectionReversed */keysSequentialCollectionReversed,
            /* keysSequenceReversed */keysSequenceReversed,
            /* last */last,
            /* lastOrRaise */lastOrRaise,
            /* reduceReversed */reduceReversed,
            /* reduceKeysReversed */reduceKeysReversed,
            /* reduceValuesReversed */reduceValuesReversed,
            /* toIterableReversed */toIterableReversed,
            /* toKeyedCollectionReversed */toKeyedCollectionReversed,
            /* toKeyedIterableReversed */toKeyedIterableReversed,
            /* toNavigableKeyedCollection */toNavigableKeyedCollection,
            /* toNavigableKeyedCollectionReversed */toNavigableKeyedCollectionReversed,
            /* toSequenceReversed */toSequenceReversed,
            /* valuesCollectionReversed */valuesCollectionReversed,
            /* valuesNavigableCollection */valuesNavigableCollection,
            /* valuesNavigableCollectionReversed */valuesNavigableCollectionReversed,
            /* valuesReversed */valuesReversed,
            /* valuesSequentialCollection */valuesSequentialCollection,
            /* valuesSequentialCollectionReversed */valuesSequentialCollectionReversed,
            /* valuesSequenceReversed */valuesSequenceReversed
          ];
  }
  
  function containsKey$8(key, keyed) {
    if (keyed) {
      return _2(keyed[1][/* containsKey */0], key, keyed[0]);
    } else {
      return false;
    }
  }
  
  function count$22(keyed) {
    if (keyed) {
      return _1(keyed[1][/* count */1], keyed[0]);
    } else {
      return 0;
    }
  }
  
  function firstOrRaise$14(selector, keyed) {
    if (keyed) {
      return _2(keyed[1][/* firstOrRaise */2], selector, keyed[0]);
    } else {
      return failwith("empty");
    }
  }
  
  function lastOrRaise$9(selector, keyed) {
    if (keyed) {
      return _2(keyed[2][/* firstOrRaise */2], selector, keyed[0]);
    } else {
      return failwith("empty");
    }
  }
  
  function reduce$33(predicate, f, acc, iter) {
    if (iter) {
      return _4(iter[1][/* reduce */3], predicate, f, acc, iter[0]);
    } else {
      return acc;
    }
  }
  
  function reduceReversed$13(predicate, f, acc, iter) {
    if (iter) {
      return _4(iter[2][/* reduce */3], predicate, f, acc, iter[0]);
    } else {
      return acc;
    }
  }
  
  function toSequence$26(selector, keyed) {
    if (keyed) {
      return _2(keyed[1][/* toSequence */4], selector, keyed[0]);
    } else {
      return empty$7(/* () */0);
    }
  }
  
  function toSequenceReversed$13(selector, keyed) {
    if (keyed) {
      return _2(keyed[2][/* toSequence */4], selector, keyed[0]);
    } else {
      return empty$7(/* () */0);
    }
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function MakeGeneric$7(Base) {
    var include = MakeGeneric([
          Base[0],
          Base[1],
          Base[3],
          Base[4],
          Base[5],
          Base[7],
          Base[9],
          Base[11],
          Base[13]
        ]);
    var get = include[23];
    var getOrDefault = include[24];
    var getOrRaise = include[25];
    var include$1 = MakeGeneric$11([
          Base[0],
          Base[1],
          Base[2],
          Base[6],
          Base[7],
          Base[8],
          Base[9],
          Base[10],
          Base[11],
          Base[12],
          Base[13],
          Base[14]
        ]);
    var containsKey$$1 = include$1[13];
    var count = include$1[14];
    var isEmpty = include$1[15];
    var keysSequence = include$1[18];
    var toSequence = include$1[20];
    var firstOrRaise = include$1[24];
    var keysSequenceReversed = include$1[31];
    var lastOrRaise = include$1[33];
    var toSequenceReversed = include$1[42];
    var reduce = Base[/* reduceReversed */8];
    var reduceKeys = Base[/* reduceKeysReversed */10];
    var reduceValues = Base[/* reduceValuesReversed */12];
    var ReversedImmMap = MakeGeneric(/* module */[
          /* containsKey */containsKey$$1,
          /* count */count,
          /* get */get,
          /* getOrDefault */getOrDefault,
          /* getOrRaise */getOrRaise,
          /* reduce */reduce,
          /* reduceKeys */reduceKeys,
          /* reduceValues */reduceValues,
          /* toSequence */toSequenceReversed
        ]);
    var toMapReversed = ReversedImmMap[/* toMap */27];
    var firstKeyOrRaise = function (collection) {
      return _2(firstOrRaise, getKey, collection);
    };
    var lastKeyOrRaise = function (collection) {
      return _2(lastOrRaise, getKey, collection);
    };
    var keysNavigableSetImpl_003 = /* reduce */Base[/* reduceKeys */9];
    var keysNavigableSetImpl = /* record */[
      /* contains */containsKey$$1,
      /* count */count,
      /* firstOrRaise */firstKeyOrRaise,
      keysNavigableSetImpl_003,
      /* toSequence */keysSequence
    ];
    var keysNavigableSetReversedImpl_003 = /* reduce */Base[/* reduceKeysReversed */10];
    var keysNavigableSetReversedImpl = /* record */[
      /* contains */containsKey$$1,
      /* count */count,
      /* firstOrRaise */lastKeyOrRaise,
      keysNavigableSetReversedImpl_003,
      /* toSequence */keysSequenceReversed
    ];
    var keysNavigableSet = function (map) {
      if (_1(isEmpty, map)) {
        return empty$23(/* () */0);
      } else {
        return /* Instance */[
                map,
                keysNavigableSetImpl,
                keysNavigableSetReversedImpl
              ];
      }
    };
    var keysNavigableSetReversed = function (map) {
      if (_1(isEmpty, map)) {
        return empty$23(/* () */0);
      } else {
        return /* Instance */[
                map,
                keysNavigableSetReversedImpl,
                keysNavigableSetImpl
              ];
      }
    };
    var sequentialMapImpl_006 = /* reduce */Base[/* reduce */7];
    var sequentialMapImpl = /* record */[
      /* containsKey */containsKey$$1,
      /* count */count,
      /* firstOrRaise */firstOrRaise,
      /* get */get,
      /* getOrDefault */getOrDefault,
      /* getOrRaise */getOrRaise,
      sequentialMapImpl_006,
      /* toSequence */toSequence
    ];
    var sequentialMapReversedImpl_006 = /* reduce */Base[/* reduceReversed */8];
    var sequentialMapReversedImpl = /* record */[
      /* containsKey */containsKey$$1,
      /* count */count,
      /* firstOrRaise */lastOrRaise,
      /* get */get,
      /* getOrDefault */getOrDefault,
      /* getOrRaise */getOrRaise,
      sequentialMapReversedImpl_006,
      /* toSequence */toSequenceReversed
    ];
    var toNavigableMap = function (map) {
      if (_1(isEmpty, map)) {
        return /* Empty */0;
      } else {
        return /* Instance */[
                map,
                sequentialMapImpl,
                sequentialMapReversedImpl
              ];
      }
    };
    var toNavigableMapReversed = function (map) {
      if (_1(isEmpty, map)) {
        return /* Empty */0;
      } else {
        return /* Instance */[
                map,
                sequentialMapReversedImpl,
                sequentialMapImpl
              ];
      }
    };
    return /* module */[
            /* first */include$1[23],
            /* firstOrRaise */firstOrRaise,
            /* keysCollectionReversed */include$1[25],
            /* keysNavigableCollection */include$1[26],
            /* keysNavigableCollectionReversed */include$1[27],
            /* keysReversed */include$1[28],
            /* keysSequentialCollection */include$1[29],
            /* keysSequentialCollectionReversed */include$1[30],
            /* keysSequenceReversed */keysSequenceReversed,
            /* last */include$1[32],
            /* lastOrRaise */lastOrRaise,
            /* reduceReversed */include$1[34],
            /* reduceKeysReversed */include$1[35],
            /* reduceValuesReversed */include$1[36],
            /* toIterableReversed */include$1[37],
            /* toKeyedCollectionReversed */include$1[38],
            /* toKeyedIterableReversed */include$1[39],
            /* toNavigableKeyedCollection */include$1[40],
            /* toNavigableKeyedCollectionReversed */include$1[41],
            /* toSequenceReversed */toSequenceReversed,
            /* valuesCollectionReversed */include$1[43],
            /* valuesNavigableCollection */include$1[44],
            /* valuesNavigableCollectionReversed */include$1[45],
            /* valuesReversed */include$1[46],
            /* valuesSequentialCollection */include$1[47],
            /* valuesSequentialCollectionReversed */include$1[48],
            /* valuesSequenceReversed */include$1[49],
            /* every */include$1[0],
            /* find */include$1[1],
            /* findOrRaise */include$1[2],
            /* forEach */include$1[3],
            /* keys */include$1[4],
            /* none */include$1[5],
            /* reduce */include$1[6],
            /* reduceKeys */include$1[7],
            /* reduceValues */include$1[8],
            /* some */include$1[9],
            /* toIterable */include$1[10],
            /* toKeyedIterable */include$1[11],
            /* values */include$1[12],
            /* containsKey */containsKey$$1,
            /* count */count,
            /* isEmpty */isEmpty,
            /* isNotEmpty */include$1[16],
            /* keysCollection */include$1[17],
            /* keysSequence */keysSequence,
            /* toKeyedCollection */include$1[19],
            /* toSequence */toSequence,
            /* valuesCollection */include$1[21],
            /* valuesSequence */include$1[22],
            /* get */get,
            /* getOrDefault */getOrDefault,
            /* getOrRaise */getOrRaise,
            /* toMap */include[27],
            /* keysNavigableSet */keysNavigableSet,
            /* keysNavigableSetReversed */keysNavigableSetReversed,
            /* keysSet */include[26],
            /* toMapReversed */toMapReversed,
            /* toNavigableMap */toNavigableMap,
            /* toNavigableMapReversed */toNavigableMapReversed
          ];
  }
  
  function containsKey$7(key, map) {
    if (map) {
      return _2(map[1][/* containsKey */0], key, map[0]);
    } else {
      return false;
    }
  }
  
  function count$18(map) {
    if (map) {
      return _1(map[1][/* count */1], map[0]);
    } else {
      return 0;
    }
  }
  
  function firstOrRaise$10(selector, map) {
    if (map) {
      return _2(map[1][/* firstOrRaise */2], selector, map[0]);
    } else {
      return failwith("empty");
    }
  }
  
  function get$14(key, map) {
    if (map) {
      return _2(map[1][/* get */3], key, map[0]);
    }
    
  }
  
  function getOrDefault$7($$default, key, map) {
    if (map) {
      return _3(map[1][/* getOrDefault */4], $$default, key, map[0]);
    } else {
      return $$default;
    }
  }
  
  function getOrRaise$11(key, map) {
    if (map) {
      return _2(map[1][/* getOrRaise */5], key, map[0]);
    } else {
      return failwith("not found");
    }
  }
  
  function lastOrRaise$6(selector, map) {
    if (map) {
      return _2(map[2][/* firstOrRaise */2], selector, map[0]);
    } else {
      return failwith("empty");
    }
  }
  
  function reduce$29(predicate, f, acc, iter) {
    if (iter) {
      return _4(iter[1][/* reduce */6], predicate, f, acc, iter[0]);
    } else {
      return acc;
    }
  }
  
  function reduceReversed$10(predicate, f, acc, iter) {
    if (iter) {
      return _4(iter[2][/* reduce */6], predicate, f, acc, iter[0]);
    } else {
      return acc;
    }
  }
  
  function toSequence$22(selector, map) {
    if (map) {
      return _2(map[1][/* toSequence */7], selector, map[0]);
    } else {
      return empty$7(/* () */0);
    }
  }
  
  function toSequenceReversed$10(selector, map) {
    if (map) {
      return _2(map[2][/* toSequence */7], selector, map[0]);
    } else {
      return empty$7(/* () */0);
    }
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function MakeGeneric$6(Base) {
    var count = Base[0];
    var getOrRaise = Base[3];
    var get = function (index, indexed) {
      return noneIfIndexOutOfRange(_1(count, indexed), index, (function (param) {
                    return _2(getOrRaise, param, indexed);
                  }));
    };
    var getOrDefault = function ($$default, index, indexed) {
      if (index < 0 || index >= _1(count, indexed)) {
        return $$default;
      } else {
        return _2(getOrRaise, index, indexed);
      }
    };
    var count$1 = Base[0];
    var getOrRaise$1 = Base[3];
    var firstOrRaise = function (indexed) {
      return _2(getOrRaise$1, 0, indexed);
    };
    var lastOrRaise = function (indexed) {
      var lastIndex = _1(count$1, indexed) - 1 | 0;
      return _2(getOrRaise$1, lastIndex, indexed);
    };
    var include = MakeGeneric$9(/* module */[
          /* count */count$1,
          /* reduce */Base[1],
          /* toSequence */Base[2],
          /* firstOrRaise */firstOrRaise,
          /* lastOrRaise */lastOrRaise,
          /* reduceReversed */Base[4],
          /* toSequenceReversed */Base[5]
        ]);
    var count$2 = include[8];
    var isEmpty = include[9];
    var toSequence = include[12];
    var toSequenceReversed = include[23];
    var containsKey = function (index, indexed) {
      if (index >= 0) {
        return index < _1(count$2, indexed);
      } else {
        return false;
      }
    };
    var firstOrRaise$1 = function (selector, indexed) {
      if (_1(count$2, indexed) > 0) {
        return _2(selector, 0, _2(getOrRaise, 0, indexed));
      } else {
        return failwith("empty");
      }
    };
    var lastOrRaise$1 = function (selector, indexed) {
      var lastIndex = _1(count$2, indexed) - 1 | 0;
      if (lastIndex >= 0) {
        return _2(selector, lastIndex, _2(getOrRaise, lastIndex, indexed));
      } else {
        return failwith("empty");
      }
    };
    var reduceValues = Base[/* reduce */1];
    var reduceValuesReversed = Base[/* reduceReversed */4];
    var reduce = function (predicate, f, acc, indexed) {
      var index = /* record */[/* contents */0];
      var predicate$1 = function (acc, next) {
        return _3(predicate, acc, index[0], next);
      };
      var reducer = function (acc, next) {
        var acc$1 = _3(f, acc, index[0], next);
        index[0] = index[0] + 1 | 0;
        return acc$1;
      };
      return _4(Base[/* reduce */1], predicate$1, reducer, acc, indexed);
    };
    var reduceReversed = function (predicate, f, acc, indexed) {
      var index = /* record */[/* contents */_1(count$2, indexed) - 1 | 0];
      var predicate$1 = function (acc, next) {
        return _3(predicate, acc, index[0], next);
      };
      var reducer = function (acc, next) {
        var acc$1 = _3(f, acc, index[0], next);
        index[0] = index[0] - 1 | 0;
        return acc$1;
      };
      return _4(Base[/* reduceReversed */4], predicate$1, reducer, acc, indexed);
    };
    var reduceKeys = function (predicate, f, acc, indexed) {
      return reduce$7(predicate, f, acc, create$72(0, _1(count$2, indexed)));
    };
    var reduceKeysReversed = function (predicate, f, acc, indexed) {
      return reduceReversed$3(predicate, f, acc, create$72(0, _1(count$2, indexed)));
    };
    var toSequence$1 = function (selector, indexed) {
      var partial_arg = _1(Base[/* toSequence */2], indexed);
      var partial_arg$1 = toSequence$3(create$72(0, _1(count$2, indexed)));
      return (function (param) {
          return zip2With(selector, partial_arg$1, partial_arg, param);
        });
    };
    var toSequenceReversed$1 = function (selector, indexed) {
      var partial_arg = _1(Base[/* toSequenceReversed */5], indexed);
      var partial_arg$1 = toSequenceReversed$3(create$72(0, _1(count$2, indexed)));
      return (function (param) {
          return zip2With(selector, partial_arg$1, partial_arg, param);
        });
    };
    var NavigableMap$1 = MakeGeneric$7(/* module */[
          /* containsKey */containsKey,
          /* count */count$2,
          /* firstOrRaise */firstOrRaise$1,
          /* get */get,
          /* getOrDefault */getOrDefault,
          /* getOrRaise */getOrRaise,
          /* lastOrRaise */lastOrRaise$1,
          /* reduce */reduce,
          /* reduceReversed */reduceReversed,
          /* reduceKeys */reduceKeys,
          /* reduceKeysReversed */reduceKeysReversed,
          /* reduceValues */reduceValues,
          /* reduceValuesReversed */reduceValuesReversed,
          /* toSequence */toSequence$1,
          /* toSequenceReversed */toSequenceReversed$1
        ]);
    var toKeyedCollection = NavigableMap$1[/* toKeyedCollection */46];
    var toKeyedCollectionReversed = NavigableMap$1[/* toKeyedCollectionReversed */15];
    var toKeyedIterable = NavigableMap$1[/* toKeyedIterable */38];
    var toKeyedIterableReversed = NavigableMap$1[/* toKeyedIterableReversed */16];
    var toMap = NavigableMap$1[/* toMap */53];
    var toMapReversed = NavigableMap$1[/* toMapReversed */57];
    var toNavigableKeyedCollection = NavigableMap$1[/* toNavigableKeyedCollection */17];
    var toNavigableKeyedCollectionReversed = NavigableMap$1[/* toNavigableKeyedCollectionReversed */18];
    var toNavigableMap = NavigableMap$1[/* toNavigableMap */58];
    var toNavigableMapReversed = NavigableMap$1[/* toNavigableMapReversed */59];
    var indexedBase_002 = /* reduce */Base[/* reduce */1];
    var indexedBase = /* record */[
      /* count */count$2,
      /* getOrRaise */getOrRaise,
      indexedBase_002,
      /* toSequence */toSequence
    ];
    var indexedReversedBase_001 = function (i, indexed) {
      return _2(getOrRaise, (_1(count$2, indexed) - i | 0) - 1 | 0, indexed);
    };
    var indexedReversedBase_002 = /* reduce */Base[/* reduceReversed */4];
    var indexedReversedBase = /* record */[
      /* count */count$2,
      indexedReversedBase_001,
      indexedReversedBase_002,
      /* toSequence */toSequenceReversed
    ];
    var toIndexed = function (indexed) {
      if (_1(isEmpty, indexed)) {
        return /* Empty */0;
      } else {
        return /* Instance */[
                indexed,
                indexedBase,
                indexedReversedBase
              ];
      }
    };
    var toIndexedReversed = function (indexed) {
      if (_1(isEmpty, indexed)) {
        return /* Empty */0;
      } else {
        return /* Instance */[
                indexed,
                indexedReversedBase,
                indexedBase
              ];
      }
    };
    return /* module */[
            /* every */include[0],
            /* find */include[1],
            /* findOrRaise */include[2],
            /* forEach */include[3],
            /* none */include[4],
            /* reduce */include[5],
            /* some */include[6],
            /* toIterable */include[7],
            /* count */count$2,
            /* isEmpty */isEmpty,
            /* isNotEmpty */include[10],
            /* toCollection */include[11],
            /* toSequence */toSequence,
            /* first */include[13],
            /* firstOrRaise */include[14],
            /* toSequentialCollection */include[15],
            /* last */include[16],
            /* lastOrRaise */include[17],
            /* reduceReversed */include[18],
            /* toCollectionReversed */include[19],
            /* toIterableReversed */include[20],
            /* toNavigableCollection */include[21],
            /* toNavigableCollectionReversed */include[22],
            /* toSequenceReversed */toSequenceReversed,
            /* toSequentialCollectionReversed */include[24],
            /* get */get,
            /* getOrDefault */getOrDefault,
            /* getOrRaise */getOrRaise,
            /* toIndexed */toIndexed,
            /* toIndexedReversed */toIndexedReversed,
            /* toKeyedCollection */toKeyedCollection,
            /* toKeyedCollectionReversed */toKeyedCollectionReversed,
            /* toKeyedIterable */toKeyedIterable,
            /* toKeyedIterableReversed */toKeyedIterableReversed,
            /* toMap */toMap,
            /* toMapReversed */toMapReversed,
            /* toNavigableKeyedCollection */toNavigableKeyedCollection,
            /* toNavigableKeyedCollectionReversed */toNavigableKeyedCollectionReversed,
            /* toNavigableMap */toNavigableMap,
            /* toNavigableMapReversed */toNavigableMapReversed
          ];
  }
  
  function count$17(indexed) {
    if (indexed) {
      return _1(indexed[1][/* count */0], indexed[0]);
    } else {
      return 0;
    }
  }
  
  function getOrRaise$10(index, indexed) {
    if (indexed) {
      return _2(indexed[1][/* getOrRaise */1], index, indexed[0]);
    } else {
      return failwith("empty");
    }
  }
  
  function reduce$28(predicate, f, acc, collection) {
    if (collection) {
      return _4(collection[1][/* reduce */2], predicate, f, acc, collection[0]);
    } else {
      return acc;
    }
  }
  
  function reduceReversed$9(predicate, f, acc, collection) {
    if (collection) {
      return _4(collection[2][/* reduce */2], predicate, f, acc, collection[0]);
    } else {
      return acc;
    }
  }
  
  function toSequence$21(indexed) {
    if (indexed) {
      return _1(indexed[1][/* toSequence */3], indexed[0]);
    } else {
      return empty$7(/* () */0);
    }
  }
  
  function toSequenceReversed$9(indexed) {
    if (indexed) {
      return _1(indexed[2][/* toSequence */3], indexed[0]);
    } else {
      return empty$7(/* () */0);
    }
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function count$23(param) {
    return param[/* count */0];
  }
  
  function firstOrRaise$15(param) {
    return firstOrRaise$2(param[/* list */1]);
  }
  
  function reduce$34(predicate, f, acc, param) {
    return reduce$6(predicate, f, acc, param[/* list */1]);
  }
  
  function toSequence$27(param) {
    var list = param[/* list */1];
    return (function (param) {
        return ofList(list, param);
      });
  }
  
  function addFirst$6(value, param) {
    return /* record */[
            /* count */param[/* count */0] + 1 | 0,
            /* list : :: */[
              value,
              param[/* list */1]
            ]
          ];
  }
  
  function empty$27() {
    return /* record */[
            /* count */0,
            /* list : [] */0
          ];
  }
  
  function fromList$2(list) {
    return /* record */[
            /* count */count$3(list),
            /* list */list
          ];
  }
  
  function removeAll$10() {
    return /* record */[
            /* count */0,
            /* list : [] */0
          ];
  }
  
  function removeFirstOrRaise$8(param) {
    var list = param[/* list */1];
    return /* record */[
            /* count */param[/* count */0] - 1 | 0,
            /* list */list ? list[1] : failwith("stack is empty")
          ];
  }
  
  function $$return$8(value) {
    return /* record */[
            /* count */1,
            /* list : :: */[
              value,
              /* [] */0
            ]
          ];
  }
  
  function toList(param) {
    return param[/* list */1];
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function MakeGeneric$12(Base) {
    var reduce = Base[0];
    var reduceKeys = function (predicate, reducer, acc, iter) {
      var reducer$1 = function (acc, k, _) {
        return _2(reducer, acc, k);
      };
      if (predicate === alwaysTrue2) {
        return _4(reduce, alwaysTrue3, reducer$1, acc, iter);
      } else {
        var predicate$1 = function (acc, k, _) {
          return _2(predicate, acc, k);
        };
        return _4(reduce, predicate$1, reducer$1, acc, iter);
      }
    };
    var reduceValues = function (predicate, reducer, acc, iter) {
      var reducer$1 = function (acc, _, v) {
        return _2(reducer, acc, v);
      };
      if (predicate === alwaysTrue2) {
        return _4(reduce, alwaysTrue3, reducer$1, acc, iter);
      } else {
        var predicate$1 = function (acc, _, v) {
          return _2(predicate, acc, v);
        };
        return _4(reduce, predicate$1, reducer$1, acc, iter);
      }
    };
    return /* module */[
            /* reduce */reduce,
            /* reduceKeys */reduceKeys,
            /* reduceValues */reduceValues
          ];
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function MakeGeneric$14(Base) {
    var count = Base[0];
    var isEmpty = function (collection) {
      return _1(count, collection) === 0;
    };
    var isNotEmpty = function (collection) {
      return _1(count, collection) !== 0;
    };
    return /* module */[
            /* count */count,
            /* isEmpty */isEmpty,
            /* isNotEmpty */isNotEmpty,
            /* removeAll */Base[1]
          ];
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function MakeGeneric$13(Base) {
    var add = Base[2];
    var include = MakeGeneric$14([
          Base[0],
          Base[1]
        ]);
    var addAll = function (iter, $$transient) {
      return reduce$15(alwaysTrue2, (function (acc, next) {
                    return _2(add, next, acc);
                  }), $$transient, iter);
    };
    return /* module */[
            /* count */include[0],
            /* isEmpty */include[1],
            /* isNotEmpty */include[2],
            /* removeAll */include[3],
            /* add */add,
            /* addAll */addAll,
            /* contains */Base[3],
            /* remove */Base[4]
          ];
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function addFirst$7(value, $$transient) {
    var match = get$5($$transient);
    if (match.tag) {
      addLast$1$1(value, match[0]);
      return $$transient;
    } else {
      addFirst$1$1(value, match[0]);
      return $$transient;
    }
  }
  
  function addLast$5(value, $$transient) {
    var match = get$5($$transient);
    if (match.tag) {
      addFirst$1$1(value, match[0]);
      return $$transient;
    } else {
      addLast$1$1(value, match[0]);
      return $$transient;
    }
  }
  
  function count$24($$transient) {
    var match = get$5($$transient);
    return count$1$2(match[0]);
  }
  
  function firstOrRaise$16($$transient) {
    var match = get$5($$transient);
    if (match.tag) {
      return lastOrRaise$1$1(match[0]);
    } else {
      return firstOrRaise$6(match[0]);
    }
  }
  
  function lastOrRaise$10($$transient) {
    var match = get$5($$transient);
    if (match.tag) {
      return firstOrRaise$6(match[0]);
    } else {
      return lastOrRaise$1$1(match[0]);
    }
  }
  
  function removeAllImpl(_, _$1) {
    return /* Ascending */__(0, [empty$1$1(/* () */0)]);
  }
  
  function removeAll$11($$transient) {
    return update$7(removeAllImpl, $$transient);
  }
  
  function removeFirstOrRaise$9($$transient) {
    var match = get$5($$transient);
    if (match.tag) {
      removeLastOrRaise$1$1(match[0]);
      return $$transient;
    } else {
      removeFirstOrRaise$1$1(match[0]);
      return $$transient;
    }
  }
  
  function removeLastOrRaise$7($$transient) {
    var match = get$5($$transient);
    if (match.tag) {
      removeFirstOrRaise$1$1(match[0]);
      return $$transient;
    } else {
      removeLastOrRaise$1$1(match[0]);
      return $$transient;
    }
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  
  /* IntMap Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function addImpl(owner, value, set) {
    var count = set[/* count */0];
    var root = set[/* root */1];
    if (contains$5(value, set)) {
      return set;
    } else {
      var newRoot = add$3(updateLevelNodeTransient$1, owner, 0, value, root);
      set[/* count */0] = count + 1 | 0;
      set[/* root */1] = newRoot;
      return set;
    }
  }
  
  function add$7(value, $$transient) {
    return update1(addImpl, value, $$transient);
  }
  
  function contains$11(value, $$transient) {
    return contains$5(value, get$5($$transient));
  }
  
  function count$26($$transient) {
    return count$14(get$5($$transient));
  }
  
  function removeImpl$1(owner, value, set) {
    var count = set[/* count */0];
    var root = set[/* root */1];
    var newRoot = remove$3(updateLevelNodeTransient$1, owner, 0, value, root);
    if (newRoot === root) {
      return set;
    } else {
      return /* record */[
              /* count */count - 1 | 0,
              /* root */newRoot
            ];
    }
  }
  
  function remove$9(value, $$transient) {
    return update1(removeImpl$1, value, $$transient);
  }
  
  function removeAllImpl$2(_, _$1) {
    return empty$20(/* () */0);
  }
  
  function removeAll$13($$transient) {
    return update$7(removeAllImpl$2, $$transient);
  }
  
  
  /* IntSet Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  
  /* HashMap Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function addImpl$1(owner, value, set) {
    var count = set[/* count */0];
    var root = set[/* root */1];
    var keyHash = _1(set[/* hash */3], value);
    if (contains$7(value, set)) {
      return set;
    } else {
      var newRoot = add$5(set[/* comparator */2], updateLevelNodeTransient$3, owner, 0, keyHash, value, root);
      set[/* count */0] = count + 1 | 0;
      set[/* root */1] = newRoot;
      return set;
    }
  }
  
  function add$8(value, $$transient) {
    return update1(addImpl$1, value, $$transient);
  }
  
  function contains$12(value, $$transient) {
    return contains$7(value, get$5($$transient));
  }
  
  function count$28($$transient) {
    return count$16(get$5($$transient));
  }
  
  function removeImpl$2(owner, value, set) {
    var count = set[/* count */0];
    var root = set[/* root */1];
    var hash = set[/* hash */3];
    var comparator = set[/* comparator */2];
    var keyHash = _1(hash, value);
    var newRoot = remove$6(comparator, updateLevelNodeTransient$3, owner, 0, keyHash, value, root);
    if (newRoot === root) {
      return set;
    } else {
      return /* record */[
              /* count */count - 1 | 0,
              /* root */newRoot,
              /* comparator */comparator,
              /* hash */hash
            ];
    }
  }
  
  function remove$11(value, $$transient) {
    return update1(removeImpl$2, value, $$transient);
  }
  
  function removeAllImpl$4(_, param) {
    return emptyWith$1(param[/* hash */3], param[/* comparator */2]);
  }
  
  function removeAll$15($$transient) {
    return update$7(removeAllImpl$4, $$transient);
  }
  
  
  /* HashSet Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function MakeGeneric$16(Base) {
    var addFirst = Base[2];
    var firstOrRaise = Base[3];
    var include = MakeGeneric$14([
          Base[0],
          Base[1]
        ]);
    var isEmpty = include[1];
    var first = function (collection) {
      if (_1(isEmpty, collection)) {
        return undefined;
      } else {
        return some(_1(firstOrRaise, collection));
      }
    };
    var addFirstAll = function (iter, $$transient) {
      return reduce$15(alwaysTrue2, (function (acc, next) {
                    return _2(addFirst, next, acc);
                  }), $$transient, iter);
    };
    return /* module */[
            /* count */include[0],
            /* isEmpty */isEmpty,
            /* isNotEmpty */include[2],
            /* removeAll */include[3],
            /* addFirst */addFirst,
            /* addFirstAll */addFirstAll,
            /* first */first,
            /* firstOrRaise */firstOrRaise,
            /* removeFirstOrRaise */Base[4]
          ];
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function MakeGeneric$15(Base) {
    var addLast = Base[3];
    var lastOrRaise = Base[5];
    var include = MakeGeneric$16([
          Base[0],
          Base[1],
          Base[2],
          Base[4],
          Base[6]
        ]);
    var isEmpty = include[1];
    var last = function (collection) {
      if (_1(isEmpty, collection)) {
        return undefined;
      } else {
        return some(_1(lastOrRaise, collection));
      }
    };
    var addLastAll = function (iter, $$transient) {
      return reduce$15(alwaysTrue2, (function (acc, next) {
                    return _2(addLast, next, acc);
                  }), $$transient, iter);
    };
    return /* module */[
            /* count */include[0],
            /* isEmpty */isEmpty,
            /* isNotEmpty */include[2],
            /* removeAll */include[3],
            /* addFirst */include[4],
            /* addFirstAll */include[5],
            /* first */include[6],
            /* firstOrRaise */include[7],
            /* removeFirstOrRaise */include[8],
            /* addLast */addLast,
            /* addLastAll */addLastAll,
            /* last */last,
            /* lastOrRaise */lastOrRaise,
            /* removeLastOrRaise */Base[7]
          ];
  }
  
  
  /* No side effect */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  var include = MakeGeneric$3(/* module */[
        /* isEmpty */isEmpty$5,
        /* reduce */reduce$15
      ]);
  
  var reduce$3 = include[5];
  
  var include$1 = MakeGeneric$3(/* module */[
        /* isEmpty */isEmpty$3$1,
        /* reduce */reduce$8
      ]);
  
  var include$2 = MakeGeneric$2(/* module */[
        /* count */count$11,
        /* reduce */reduce$14,
        /* toSequence */toSequence$9
      ]);
  
  var include$3 = MakeGeneric$10(/* module */[
        /* count */count$21,
        /* reduce */reduce$32,
        /* toSequence */toSequence$25,
        /* firstOrRaise */firstOrRaise$13
      ]);
  
  var include$4 = MakeGeneric$9(/* module */[
        /* count */count$20,
        /* reduce */reduce$31,
        /* toSequence */toSequence$24,
        /* firstOrRaise */firstOrRaise$12,
        /* lastOrRaise */lastOrRaise$8,
        /* reduceReversed */reduceReversed$12,
        /* toSequenceReversed */toSequenceReversed$12
      ]);
  
  var include$5 = MakeGeneric$1(/* module */[
        /* contains */contains$4,
        /* count */count$10,
        /* reduce */reduce$13,
        /* toSequence */toSequence$8
      ]);
  
  var include$6 = MakeGeneric$8(/* module */[
        /* firstOrRaise */firstOrRaise$11,
        /* lastOrRaise */lastOrRaise$7,
        /* reduceReversed */reduceReversed$11,
        /* toSequenceReversed */toSequenceReversed$11,
        /* contains */contains$10,
        /* count */count$19,
        /* reduce */reduce$30,
        /* toSequence */toSequence$23
      ]);
  
  var include$7 = MakeGeneric$12(/* module */[/* reduce */reduce$17]);
  
  var include$8 = MakeGeneric$5(/* module */[
        /* isEmpty */isEmpty$7,
        /* reduce */include$7[0],
        /* reduceKeys */include$7[1],
        /* reduceValues */include$7[2]
      ]);
  
  var include$9 = MakeGeneric$12(/* module */[/* reduce */reduce$16]);
  
  var include$10 = MakeGeneric$4(/* module */[
        /* containsKey */containsKey$1,
        /* count */count$12,
        /* reduce */include$9[0],
        /* reduceKeys */include$9[1],
        /* reduceValues */include$9[2],
        /* toSequence */toSequence$10
      ]);
  
  var include$11 = MakeGeneric$12(/* module */[/* reduce */reduce$33]);
  
  var KeyedReducerReversed = MakeGeneric$12(/* module */[/* reduce */reduceReversed$13]);
  
  var reduceReversed = KeyedReducerReversed[/* reduce */0];
  
  var reduceKeysReversed = KeyedReducerReversed[/* reduceKeys */1];
  
  var reduceValuesReversed = KeyedReducerReversed[/* reduceValues */2];
  
  var include$12 = MakeGeneric$11(/* module */[
        /* containsKey */containsKey$8,
        /* count */count$22,
        /* firstOrRaise */firstOrRaise$14,
        /* lastOrRaise */lastOrRaise$9,
        /* reduce */include$11[0],
        /* reduceReversed */reduceReversed,
        /* reduceKeys */include$11[1],
        /* reduceKeysReversed */reduceKeysReversed,
        /* reduceValues */include$11[2],
        /* reduceValuesReversed */reduceValuesReversed,
        /* toSequence */toSequence$26,
        /* toSequenceReversed */toSequenceReversed$13
      ]);
  
  var include$13 = MakeGeneric$12(/* module */[/* reduce */reduce$12]);
  
  var include$14 = MakeGeneric(/* module */[
        /* containsKey */containsKey,
        /* count */count$9,
        /* get */get$8,
        /* getOrDefault */getOrDefault$1$1,
        /* getOrRaise */getOrRaise$4,
        /* reduce */include$13[0],
        /* reduceKeys */include$13[1],
        /* reduceValues */include$13[2],
        /* toSequence */toSequence$7
      ]);
  
  var include$15 = MakeGeneric$12(/* module */[/* reduce */reduce$29]);
  
  var KeyedReducerReversed$1 = MakeGeneric$12(/* module */[/* reduce */reduceReversed$10]);
  
  var reduceReversed$1 = KeyedReducerReversed$1[/* reduce */0];
  
  var reduceKeysReversed$1 = KeyedReducerReversed$1[/* reduceKeys */1];
  
  var reduceValuesReversed$1 = KeyedReducerReversed$1[/* reduceValues */2];
  
  var include$16 = MakeGeneric$7(/* module */[
        /* containsKey */containsKey$7,
        /* count */count$18,
        /* firstOrRaise */firstOrRaise$10,
        /* get */get$14,
        /* getOrDefault */getOrDefault$7,
        /* getOrRaise */getOrRaise$11,
        /* lastOrRaise */lastOrRaise$6,
        /* reduce */include$15[0],
        /* reduceReversed */reduceReversed$1,
        /* reduceKeys */include$15[1],
        /* reduceKeysReversed */reduceKeysReversed$1,
        /* reduceValues */include$15[2],
        /* reduceValuesReversed */reduceValuesReversed$1,
        /* toSequence */toSequence$22,
        /* toSequenceReversed */toSequenceReversed$10
      ]);
  
  var include$17 = MakeGeneric$6(/* module */[
        /* count */count$17,
        /* reduce */reduce$28,
        /* toSequence */toSequence$21,
        /* getOrRaise */getOrRaise$10,
        /* reduceReversed */reduceReversed$9,
        /* toSequenceReversed */toSequenceReversed$9
      ]);
  
  var include$18 = MakeGeneric$9(/* module */[
        /* count */count$1$1,
        /* reduce */reduce$4,
        /* toSequence */toSequence$1$1,
        /* firstOrRaise */firstOrRaise$1,
        /* lastOrRaise */lastOrRaise$1,
        /* reduceReversed */reduceReversed$1$1,
        /* toSequenceReversed */toSequenceReversed$1
      ]);
  
  var include$19 = MakeGeneric$15(/* module */[
        /* count */count$24,
        /* removeAll */removeAll$11,
        /* addFirst */addFirst$7,
        /* addLast */addLast$5,
        /* firstOrRaise */firstOrRaise$16,
        /* lastOrRaise */lastOrRaise$10,
        /* removeFirstOrRaise */removeFirstOrRaise$9,
        /* removeLastOrRaise */removeLastOrRaise$7
      ]);
  
  var include$20 = MakeGeneric$12(/* module */[/* reduce */reduce$22]);
  
  var include$21 = MakeGeneric(/* module */[
        /* containsKey */containsKey$4,
        /* count */count$15,
        /* get */get$11,
        /* getOrDefault */getOrDefault$4,
        /* getOrRaise */getOrRaise$7,
        /* reduce */include$20[0],
        /* reduceKeys */include$20[1],
        /* reduceValues */include$20[2],
        /* toSequence */toSequence$15
      ]);
  
  var include$22 = MakeGeneric$1(/* module */[
        /* contains */contains$7,
        /* count */count$16,
        /* reduce */reduce$25,
        /* toSequence */toSequence$18
      ]);
  
  var include$23 = MakeGeneric$13(/* module */[
        /* count */count$28,
        /* removeAll */removeAll$15,
        /* add */add$8,
        /* contains */contains$12,
        /* remove */remove$11
      ]);
  
  var include$24 = MakeGeneric$12(/* module */[/* reduce */reduce$18]);
  
  var include$25 = MakeGeneric(/* module */[
        /* containsKey */containsKey$2,
        /* count */count$13,
        /* get */get$9,
        /* getOrDefault */getOrDefault$2,
        /* getOrRaise */getOrRaise$5,
        /* reduce */include$24[0],
        /* reduceKeys */include$24[1],
        /* reduceValues */include$24[2],
        /* toSequence */toSequence$11
      ]);
  
  var $$let = MakeGeneric$8(/* module */[
        /* firstOrRaise */firstOrRaise$3,
        /* lastOrRaise */lastOrRaise$2,
        /* reduceReversed */reduceReversed$3,
        /* toSequenceReversed */toSequenceReversed$3,
        /* contains */contains$3,
        /* count */count$4,
        /* reduce */reduce$7,
        /* toSequence */toSequence$3
      ]);
  
  var $$let$1 = MakeGeneric$1(/* module */[
        /* contains */contains$5,
        /* count */count$14,
        /* reduce */reduce$20,
        /* toSequence */toSequence$13
      ]);
  
  var include$26 = MakeGeneric$13(/* module */[
        /* count */count$26,
        /* removeAll */removeAll$13,
        /* add */add$7,
        /* contains */contains$11,
        /* remove */remove$9
      ]);
  
  var include$27 = MakeGeneric$3(/* module */[
        /* isEmpty */isEmpty$2$1,
        /* reduce */reduceImpl
      ]);
  
  var include$28 = MakeGeneric$6(/* module */[
        /* count */count$6,
        /* reduce */reduce$10,
        /* toSequence */toSequence$5,
        /* getOrRaise */getOrRaise$1,
        /* reduceReversed */reduceReversed$5,
        /* toSequenceReversed */toSequenceReversed$5
      ]);
  
  var include$29 = MakeGeneric$10(/* module */[
        /* count */count$23,
        /* reduce */reduce$34,
        /* toSequence */toSequence$27,
        /* firstOrRaise */firstOrRaise$15
      ]);
  
  function addFirstAll$2(values, param) {
    var newCount = /* record */[/* contents */param[/* count */0]];
    var newList = _4(reduce$3, alwaysTrue2, (function (acc, next) {
            newCount[0] = newCount[0] + 1 | 0;
            return /* :: */[
                    next,
                    acc
                  ];
          }), param[/* list */1], values);
    return /* record */[
            /* count */newCount[0],
            /* list */newList
          ];
  }
  
  function fromReverse$1(iter) {
    return addFirstAll$2(iter, empty$27(/* () */0));
  }
  
  var include$30 = MakeGeneric$15(/* module */[
        /* count */count$1$2,
        /* removeAll */removeAll$4,
        /* addFirst */addFirst$1$1,
        /* addLast */addLast$1$1,
        /* firstOrRaise */firstOrRaise$6,
        /* lastOrRaise */lastOrRaise$1$1,
        /* removeFirstOrRaise */removeFirstOrRaise$1$1,
        /* removeLastOrRaise */removeLastOrRaise$1$1
      ]);
  
  var include$31 = MakeGeneric$6(/* module */[
        /* count */count$2,
        /* reduce */reduce$5,
        /* toSequence */toSequence$2,
        /* getOrRaise */getOrRaise,
        /* reduceReversed */reduceReversed$2$1,
        /* toSequenceReversed */toSequenceReversed$2
      ]);
  
  var Stack_001 = include$29[0];
  
  var Stack_002 = include$29[1];
  
  var Stack_003 = include$29[2];
  
  var Stack_004 = include$29[3];
  
  var Stack_005 = include$29[4];
  
  var Stack_006 = include$29[5];
  
  var Stack_007 = include$29[6];
  
  var Stack_008 = include$29[7];
  
  var Stack_009 = include$29[8];
  
  var Stack_010 = include$29[9];
  
  var Stack_011 = include$29[10];
  
  var Stack_012 = include$29[11];
  
  var Stack_013 = include$29[12];
  
  var Stack_014 = include$29[13];
  
  var Stack_015 = include$29[14];
  
  var Stack_016 = include$29[15];
  
  var Stack = [
    removeAll$10,
    Stack_001,
    Stack_002,
    Stack_003,
    Stack_004,
    Stack_005,
    Stack_006,
    Stack_007,
    Stack_008,
    Stack_009,
    Stack_010,
    Stack_011,
    Stack_012,
    Stack_013,
    Stack_014,
    Stack_015,
    Stack_016,
    addFirst$6,
    addFirstAll$2,
    removeFirstOrRaise$8,
    empty$27,
    fromList$2,
    fromReverse$1,
    $$return$8,
    toList
  ];
  
  
  /* include Not a pure module */
  
  function _createCopiedRedoUndoStackRecord() {
    return /* record */[
            /* uiRedoStack */Stack[/* empty */20](/* () */0),
            /* uiUndoStack */Stack[/* empty */20](/* () */0),
            /* editorRedoStack */Stack[/* empty */20](/* () */0),
            /* editorUndoStack */Stack[/* empty */20](/* () */0),
            /* engineForEditRedoStack */Stack[/* empty */20](/* () */0),
            /* engineForEditUndoStack */Stack[/* empty */20](/* () */0),
            /* engineForRunRedoStack */Stack[/* empty */20](/* () */0),
            /* engineForRunUndoStack */Stack[/* empty */20](/* () */0)
          ];
  }
  
  function createHistoryState() {
    return /* record */[
            /* markRedoUndoStack */Stack[/* empty */20](/* () */0),
            /* copiedRedoUndoStackRecord */_createCopiedRedoUndoStackRecord(/* () */0),
            /* uiRedoStack */Stack[/* empty */20](/* () */0),
            /* uiUndoStack */Stack[/* empty */20](/* () */0),
            /* editorRedoStack */Stack[/* empty */20](/* () */0),
            /* editorUndoStack */Stack[/* empty */20](/* () */0),
            /* engineForEditRedoStack */Stack[/* empty */20](/* () */0),
            /* engineForEditUndoStack */Stack[/* empty */20](/* () */0),
            /* engineForRunRedoStack */Stack[/* empty */20](/* () */0),
            /* engineForRunUndoStack */Stack[/* empty */20](/* () */0)
          ];
  }
  
  var allStateData = /* record */[/* historyState */createHistoryState(/* () */0)];
  
  function getHistoryState() {
    return allStateData[/* historyState */0];
  }
  
  function setHistoryState(state) {
    allStateData[/* historyState */0] = state;
    return /* () */0;
  }
  
  
  /* allStateData Not a pure module */
  
  function getLoopId(editorState) {
    return editorState[/* loopId */5];
  }
  
  function setLoopId(id, editorState) {
    return /* record */[
            /* sceneRecord */editorState[/* sceneRecord */0],
            /* assetRecord */editorState[/* assetRecord */1],
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */id
          ];
  }
  
  
  /* No side effect */
  
  function loop$1() {
    var _loopRequest = function () {
      var id = requestAnimationFrame((function (time) {
              getAndSetEditAndRunEngineState((function (param) {
                      return loopBody(time, param);
                    }));
              return _loopRequest(time);
            }));
      return getAndSetEditorState((function (param) {
                    return setLoopId(id, param);
                  }));
    };
    _loopRequest(0);
    return /* () */0;
  }
  
  function stopLoop(loopId) {
    cancelAnimationFrame(loopId);
    return /* () */0;
  }
  
  
  /* StateLogicService-WonderEditor Not a pure module */
  
  function getStateForHistory() {
    return /* tuple */[
            getState(/* () */0),
            getEditEngineState(/* () */0),
            getRunEngineState(/* () */0)
          ];
  }
  
  function refreshStateForHistory(param) {
    setState(param[0]);
    setEditEngineState(loopBody(0, param[1]));
    return setRunEngineState(loopBody(0, param[2]));
  }
  
  function getAndRefreshStateForHistory(handleFunc) {
    return refreshStateForHistory(_1(handleFunc, getStateForHistory(/* () */0)));
  }
  
  
  /* StateLogicService-WonderEditor Not a pure module */
  
  function mapReducer(_, action) {
    return /* record */[/* componentsMap */action[0]];
  }
  
  
  /* No side effect */
  
  function updateReducer(_, action) {
    return /* record */[/* componentTypeArr */action[0]];
  }
  
  
  /* No side effect */
  
  function sceneTreeReducer(_, action) {
    return /* record */[/* sceneGraphData */action[0]];
  }
  
  
  /* No side effect */
  
  var ReplaceState = create("AppStore-WonderEditor.ReplaceState");
  
  var IsDidMounted = create("AppStore-WonderEditor.IsDidMounted");
  
  var StartEngineAction = create("AppStore-WonderEditor.StartEngineAction");
  
  var SceneTreeAction = create("AppStore-WonderEditor.SceneTreeAction");
  
  var MapAction = create("AppStore-WonderEditor.MapAction");
  
  var UpdateAction = create("AppStore-WonderEditor.UpdateAction");
  
  var state_002 = /* mapState : record */[/* componentsMap */undefined];
  
  var state_003 = /* sceneTreeState : record */[/* sceneGraphData */undefined];
  
  var state_004 = /* updateState : record */[/* componentTypeArr : array */[/* All */0]];
  
  var state = /* record */[
    /* isEditorAndEngineStart */false,
    /* isDidMounted */false,
    state_002,
    state_003,
    state_004
  ];
  
  function appReducter(state, action) {
    if (action === IsDidMounted) {
      return /* record */[
              /* isEditorAndEngineStart */state[/* isEditorAndEngineStart */0],
              /* isDidMounted */true,
              /* mapState */state[/* mapState */2],
              /* sceneTreeState */state[/* sceneTreeState */3],
              /* updateState */state[/* updateState */4]
            ];
    } else if (action === StartEngineAction) {
      return /* record */[
              /* isEditorAndEngineStart */true,
              /* isDidMounted */state[/* isDidMounted */1],
              /* mapState */state[/* mapState */2],
              /* sceneTreeState */state[/* sceneTreeState */3],
              /* updateState */state[/* updateState */4]
            ];
    } else if (action[0] === SceneTreeAction) {
      return /* record */[
              /* isEditorAndEngineStart */state[/* isEditorAndEngineStart */0],
              /* isDidMounted */state[/* isDidMounted */1],
              /* mapState */state[/* mapState */2],
              /* sceneTreeState */sceneTreeReducer(state[/* sceneTreeState */3], action[1]),
              /* updateState */state[/* updateState */4]
            ];
    } else if (action[0] === MapAction) {
      return /* record */[
              /* isEditorAndEngineStart */state[/* isEditorAndEngineStart */0],
              /* isDidMounted */state[/* isDidMounted */1],
              /* mapState */mapReducer(state[/* mapState */2], action[1]),
              /* sceneTreeState */state[/* sceneTreeState */3],
              /* updateState */state[/* updateState */4]
            ];
    } else if (action[0] === UpdateAction) {
      return /* record */[
              /* isEditorAndEngineStart */state[/* isEditorAndEngineStart */0],
              /* isDidMounted */state[/* isDidMounted */1],
              /* mapState */state[/* mapState */2],
              /* sceneTreeState */state[/* sceneTreeState */3],
              /* updateState */updateReducer(state[/* updateState */4], action[1])
            ];
    } else if (action[0] === ReplaceState) {
      return action[1];
    } else {
      return state;
    }
  }
  
  
  /* No side effect */
  
  function copyHistoryStack(store, param, historyState) {
    var engineStateForEdit = deepCopyForRestore$11(param[1]);
    var engineStateForRun = deepCopyForRestore$11(param[2]);
    return setHistoryState(/* record */[
                /* markRedoUndoStack */historyState[/* markRedoUndoStack */0],
                /* copiedRedoUndoStackRecord : record */[
                  /* uiRedoStack */historyState[/* uiRedoStack */2],
                  /* uiUndoStack */Stack[/* addFirst */17](store, historyState[/* uiUndoStack */3]),
                  /* editorRedoStack */historyState[/* editorRedoStack */4],
                  /* editorUndoStack */Stack[/* addFirst */17](param[0], historyState[/* editorUndoStack */5]),
                  /* engineForEditRedoStack */historyState[/* engineForEditRedoStack */6],
                  /* engineForEditUndoStack */Stack[/* addFirst */17](engineStateForEdit, historyState[/* engineForEditUndoStack */7]),
                  /* engineForRunRedoStack */historyState[/* engineForRunRedoStack */8],
                  /* engineForRunUndoStack */Stack[/* addFirst */17](engineStateForRun, historyState[/* engineForRunUndoStack */9])
                ],
                /* uiRedoStack */historyState[/* uiRedoStack */2],
                /* uiUndoStack */historyState[/* uiUndoStack */3],
                /* editorRedoStack */historyState[/* editorRedoStack */4],
                /* editorUndoStack */historyState[/* editorUndoStack */5],
                /* engineForEditRedoStack */historyState[/* engineForEditRedoStack */6],
                /* engineForEditUndoStack */historyState[/* engineForEditUndoStack */7],
                /* engineForRunRedoStack */historyState[/* engineForRunRedoStack */8],
                /* engineForRunUndoStack */historyState[/* engineForRunUndoStack */9]
              ]);
  }
  
  function restoreHistoryStack(dispatchFunc, engineStateForEdit, engineStateForRun, historyState) {
    var match = _1(Stack[/* first */14], historyState[/* copiedRedoUndoStackRecord */1][/* uiUndoStack */1]);
    var match$1 = _1(Stack[/* first */14], historyState[/* copiedRedoUndoStackRecord */1][/* editorUndoStack */3]);
    var match$2 = _1(Stack[/* first */14], historyState[/* copiedRedoUndoStackRecord */1][/* engineForEditUndoStack */5]);
    var match$3 = _1(Stack[/* first */14], historyState[/* copiedRedoUndoStackRecord */1][/* engineForRunUndoStack */7]);
    var exit = 0;
    if (match !== undefined && match$1 !== undefined && match$2 !== undefined && match$3 !== undefined) {
      _1(dispatchFunc, [
            ReplaceState,
            match
          ]);
      refreshStateForHistory(/* tuple */[
            match$1,
            restoreState(engineStateForEdit, match$2),
            restoreState(engineStateForRun, match$3)
          ]);
      return setHistoryState(/* record */[
                  /* markRedoUndoStack */historyState[/* markRedoUndoStack */0],
                  /* copiedRedoUndoStackRecord */historyState[/* copiedRedoUndoStackRecord */1],
                  /* uiRedoStack */historyState[/* copiedRedoUndoStackRecord */1][/* uiRedoStack */0],
                  /* uiUndoStack */Stack[/* removeFirstOrRaise */19](historyState[/* copiedRedoUndoStackRecord */1][/* uiUndoStack */1]),
                  /* editorRedoStack */historyState[/* copiedRedoUndoStackRecord */1][/* editorRedoStack */2],
                  /* editorUndoStack */Stack[/* removeFirstOrRaise */19](historyState[/* copiedRedoUndoStackRecord */1][/* editorUndoStack */3]),
                  /* engineForEditRedoStack */historyState[/* copiedRedoUndoStackRecord */1][/* engineForEditRedoStack */4],
                  /* engineForEditUndoStack */Stack[/* removeFirstOrRaise */19](historyState[/* copiedRedoUndoStackRecord */1][/* engineForEditUndoStack */5]),
                  /* engineForRunRedoStack */historyState[/* copiedRedoUndoStackRecord */1][/* engineForRunRedoStack */6],
                  /* engineForRunUndoStack */Stack[/* removeFirstOrRaise */19](historyState[/* copiedRedoUndoStackRecord */1][/* engineForRunUndoStack */7])
                ]);
    } else {
      exit = 1;
    }
    if (exit === 1) {
      return fatal(buildFatalMessage("restoreHistoryStack", "expect history copiedRedoUndoStackRecord undo stack have value, but not", "", "check history copiedRedoUndoStackRecord undo stack", "historyState:" + (String(historyState) + "")));
    }
    
  }
  
  
  /* Immutable Not a pure module */
  
  function run(store, _) {
    getAndSetEditorState((function (param) {
            return setIsRun(true, param);
          }));
    copyHistoryStack(store, getStateForHistory(/* () */0), getHistoryState(/* () */0));
    loop$1(/* () */0);
    return /* () */0;
  }
  
  function stop(dispatchFunc, _) {
    stopLoop(getLoopId(getState(/* () */0)));
    restoreHistoryStack(dispatchFunc, getEditEngineState(/* () */0), getRunEngineState(/* () */0), getHistoryState(/* () */0));
    getAndSetEditorState((function (param) {
            return setIsRun(false, param);
          }));
    return /* () */0;
  }
  
  
  /* AllStateData-WonderEditor Not a pure module */
  
  function operateHistory(currentState, currentStack, getNewHistoryStateFunc) {
    var match = _1(Stack[/* first */14], currentStack);
    if (match !== undefined) {
      setHistoryState(_1(getNewHistoryStateFunc, /* () */0));
      return valFromOption(match);
    } else {
      return currentState;
    }
  }
  
  
  /* Immutable Not a pure module */
  
  function undo(historyState, currentState) {
    return operateHistory(currentState, historyState[/* uiUndoStack */3], (function () {
                  return /* record */[
                          /* markRedoUndoStack */historyState[/* markRedoUndoStack */0],
                          /* copiedRedoUndoStackRecord */historyState[/* copiedRedoUndoStackRecord */1],
                          /* uiRedoStack */Stack[/* addFirst */17](currentState, historyState[/* uiRedoStack */2]),
                          /* uiUndoStack */Stack[/* removeFirstOrRaise */19](historyState[/* uiUndoStack */3]),
                          /* editorRedoStack */historyState[/* editorRedoStack */4],
                          /* editorUndoStack */historyState[/* editorUndoStack */5],
                          /* engineForEditRedoStack */historyState[/* engineForEditRedoStack */6],
                          /* engineForEditUndoStack */historyState[/* engineForEditUndoStack */7],
                          /* engineForRunRedoStack */historyState[/* engineForRunRedoStack */8],
                          /* engineForRunUndoStack */historyState[/* engineForRunUndoStack */9]
                        ];
                }));
  }
  
  function redo(historyState, currentState) {
    return operateHistory(currentState, historyState[/* uiRedoStack */2], (function () {
                  return /* record */[
                          /* markRedoUndoStack */historyState[/* markRedoUndoStack */0],
                          /* copiedRedoUndoStackRecord */historyState[/* copiedRedoUndoStackRecord */1],
                          /* uiRedoStack */Stack[/* removeFirstOrRaise */19](historyState[/* uiRedoStack */2]),
                          /* uiUndoStack */Stack[/* addFirst */17](currentState, historyState[/* uiUndoStack */3]),
                          /* editorRedoStack */historyState[/* editorRedoStack */4],
                          /* editorUndoStack */historyState[/* editorUndoStack */5],
                          /* engineForEditRedoStack */historyState[/* engineForEditRedoStack */6],
                          /* engineForEditUndoStack */historyState[/* engineForEditUndoStack */7],
                          /* engineForRunRedoStack */historyState[/* engineForRunRedoStack */8],
                          /* engineForRunUndoStack */historyState[/* engineForRunUndoStack */9]
                        ];
                }));
  }
  
  function storeUIState(currentState, historyState) {
    return /* record */[
            /* markRedoUndoStack */historyState[/* markRedoUndoStack */0],
            /* copiedRedoUndoStackRecord */historyState[/* copiedRedoUndoStackRecord */1],
            /* uiRedoStack */Stack[/* empty */20](/* () */0),
            /* uiUndoStack */Stack[/* addFirst */17](currentState, historyState[/* uiUndoStack */3]),
            /* editorRedoStack */historyState[/* editorRedoStack */4],
            /* editorUndoStack */historyState[/* editorUndoStack */5],
            /* engineForEditRedoStack */historyState[/* engineForEditRedoStack */6],
            /* engineForEditUndoStack */historyState[/* engineForEditUndoStack */7],
            /* engineForRunRedoStack */historyState[/* engineForRunRedoStack */8],
            /* engineForRunUndoStack */historyState[/* engineForRunUndoStack */9]
          ];
  }
  
  
  /* Immutable Not a pure module */
  
  function undo$1(historyState, currentState) {
    return operateHistory(currentState, historyState[/* editorUndoStack */5], (function () {
                  return /* record */[
                          /* markRedoUndoStack */historyState[/* markRedoUndoStack */0],
                          /* copiedRedoUndoStackRecord */historyState[/* copiedRedoUndoStackRecord */1],
                          /* uiRedoStack */historyState[/* uiRedoStack */2],
                          /* uiUndoStack */historyState[/* uiUndoStack */3],
                          /* editorRedoStack */Stack[/* addFirst */17](currentState, historyState[/* editorRedoStack */4]),
                          /* editorUndoStack */Stack[/* removeFirstOrRaise */19](historyState[/* editorUndoStack */5]),
                          /* engineForEditRedoStack */historyState[/* engineForEditRedoStack */6],
                          /* engineForEditUndoStack */historyState[/* engineForEditUndoStack */7],
                          /* engineForRunRedoStack */historyState[/* engineForRunRedoStack */8],
                          /* engineForRunUndoStack */historyState[/* engineForRunUndoStack */9]
                        ];
                }));
  }
  
  function redo$1(historyState, currentState) {
    return operateHistory(currentState, historyState[/* editorRedoStack */4], (function () {
                  return /* record */[
                          /* markRedoUndoStack */historyState[/* markRedoUndoStack */0],
                          /* copiedRedoUndoStackRecord */historyState[/* copiedRedoUndoStackRecord */1],
                          /* uiRedoStack */historyState[/* uiRedoStack */2],
                          /* uiUndoStack */historyState[/* uiUndoStack */3],
                          /* editorRedoStack */Stack[/* removeFirstOrRaise */19](historyState[/* editorRedoStack */4]),
                          /* editorUndoStack */Stack[/* addFirst */17](currentState, historyState[/* editorUndoStack */5]),
                          /* engineForEditRedoStack */historyState[/* engineForEditRedoStack */6],
                          /* engineForEditUndoStack */historyState[/* engineForEditUndoStack */7],
                          /* engineForRunRedoStack */historyState[/* engineForRunRedoStack */8],
                          /* engineForRunUndoStack */historyState[/* engineForRunUndoStack */9]
                        ];
                }));
  }
  
  function storeState(currentState, historyState) {
    return /* record */[
            /* markRedoUndoStack */historyState[/* markRedoUndoStack */0],
            /* copiedRedoUndoStackRecord */historyState[/* copiedRedoUndoStackRecord */1],
            /* uiRedoStack */historyState[/* uiRedoStack */2],
            /* uiUndoStack */historyState[/* uiUndoStack */3],
            /* editorRedoStack */Stack[/* empty */20](/* () */0),
            /* editorUndoStack */Stack[/* addFirst */17](currentState, historyState[/* editorUndoStack */5]),
            /* engineForEditRedoStack */historyState[/* engineForEditRedoStack */6],
            /* engineForEditUndoStack */historyState[/* engineForEditUndoStack */7],
            /* engineForRunRedoStack */historyState[/* engineForRunRedoStack */8],
            /* engineForRunUndoStack */historyState[/* engineForRunUndoStack */9]
          ];
  }
  
  
  /* Immutable Not a pure module */
  
  function undo$2(historyState, currentState) {
    return restoreState(currentState, operateHistory(currentState, historyState[/* engineForRunUndoStack */9], (function () {
                      return /* record */[
                              /* markRedoUndoStack */historyState[/* markRedoUndoStack */0],
                              /* copiedRedoUndoStackRecord */historyState[/* copiedRedoUndoStackRecord */1],
                              /* uiRedoStack */historyState[/* uiRedoStack */2],
                              /* uiUndoStack */historyState[/* uiUndoStack */3],
                              /* editorRedoStack */historyState[/* editorRedoStack */4],
                              /* editorUndoStack */historyState[/* editorUndoStack */5],
                              /* engineForEditRedoStack */historyState[/* engineForEditRedoStack */6],
                              /* engineForEditUndoStack */historyState[/* engineForEditUndoStack */7],
                              /* engineForRunRedoStack */Stack[/* addFirst */17](deepCopyForRestore$11(currentState), historyState[/* engineForRunRedoStack */8]),
                              /* engineForRunUndoStack */Stack[/* removeFirstOrRaise */19](historyState[/* engineForRunUndoStack */9])
                            ];
                    })));
  }
  
  function redo$2(historyState, currentState) {
    return restoreState(currentState, operateHistory(currentState, historyState[/* engineForRunRedoStack */8], (function () {
                      return /* record */[
                              /* markRedoUndoStack */historyState[/* markRedoUndoStack */0],
                              /* copiedRedoUndoStackRecord */historyState[/* copiedRedoUndoStackRecord */1],
                              /* uiRedoStack */historyState[/* uiRedoStack */2],
                              /* uiUndoStack */historyState[/* uiUndoStack */3],
                              /* editorRedoStack */historyState[/* editorRedoStack */4],
                              /* editorUndoStack */historyState[/* editorUndoStack */5],
                              /* engineForEditRedoStack */historyState[/* engineForEditRedoStack */6],
                              /* engineForEditUndoStack */historyState[/* engineForEditUndoStack */7],
                              /* engineForRunRedoStack */Stack[/* removeFirstOrRaise */19](historyState[/* engineForRunRedoStack */8]),
                              /* engineForRunUndoStack */Stack[/* addFirst */17](deepCopyForRestore$11(currentState), historyState[/* engineForRunUndoStack */9])
                            ];
                    })));
  }
  
  function storeHasCopyState(currentState, historyState) {
    return /* record */[
            /* markRedoUndoStack */historyState[/* markRedoUndoStack */0],
            /* copiedRedoUndoStackRecord */historyState[/* copiedRedoUndoStackRecord */1],
            /* uiRedoStack */historyState[/* uiRedoStack */2],
            /* uiUndoStack */historyState[/* uiUndoStack */3],
            /* editorRedoStack */historyState[/* editorRedoStack */4],
            /* editorUndoStack */historyState[/* editorUndoStack */5],
            /* engineForEditRedoStack */historyState[/* engineForEditRedoStack */6],
            /* engineForEditUndoStack */historyState[/* engineForEditUndoStack */7],
            /* engineForRunRedoStack */Stack[/* empty */20](/* () */0),
            /* engineForRunUndoStack */Stack[/* addFirst */17](currentState, historyState[/* engineForRunUndoStack */9])
          ];
  }
  
  function storeNoCopyState(currentState, historyState) {
    return /* record */[
            /* markRedoUndoStack */historyState[/* markRedoUndoStack */0],
            /* copiedRedoUndoStackRecord */historyState[/* copiedRedoUndoStackRecord */1],
            /* uiRedoStack */historyState[/* uiRedoStack */2],
            /* uiUndoStack */historyState[/* uiUndoStack */3],
            /* editorRedoStack */historyState[/* editorRedoStack */4],
            /* editorUndoStack */historyState[/* editorUndoStack */5],
            /* engineForEditRedoStack */historyState[/* engineForEditRedoStack */6],
            /* engineForEditUndoStack */historyState[/* engineForEditUndoStack */7],
            /* engineForRunRedoStack */Stack[/* empty */20](/* () */0),
            /* engineForRunUndoStack */Stack[/* addFirst */17](deepCopyForRestore$11(currentState), historyState[/* engineForRunUndoStack */9])
          ];
  }
  
  
  /* Immutable Not a pure module */
  
  function undo$3(historyState, currentState) {
    return restoreState(currentState, operateHistory(currentState, historyState[/* engineForEditUndoStack */7], (function () {
                      return /* record */[
                              /* markRedoUndoStack */historyState[/* markRedoUndoStack */0],
                              /* copiedRedoUndoStackRecord */historyState[/* copiedRedoUndoStackRecord */1],
                              /* uiRedoStack */historyState[/* uiRedoStack */2],
                              /* uiUndoStack */historyState[/* uiUndoStack */3],
                              /* editorRedoStack */historyState[/* editorRedoStack */4],
                              /* editorUndoStack */historyState[/* editorUndoStack */5],
                              /* engineForEditRedoStack */Stack[/* addFirst */17](deepCopyForRestore$11(currentState), historyState[/* engineForEditRedoStack */6]),
                              /* engineForEditUndoStack */Stack[/* removeFirstOrRaise */19](historyState[/* engineForEditUndoStack */7]),
                              /* engineForRunRedoStack */historyState[/* engineForRunRedoStack */8],
                              /* engineForRunUndoStack */historyState[/* engineForRunUndoStack */9]
                            ];
                    })));
  }
  
  function redo$3(historyState, currentState) {
    return restoreState(currentState, operateHistory(currentState, historyState[/* engineForEditRedoStack */6], (function () {
                      return /* record */[
                              /* markRedoUndoStack */historyState[/* markRedoUndoStack */0],
                              /* copiedRedoUndoStackRecord */historyState[/* copiedRedoUndoStackRecord */1],
                              /* uiRedoStack */historyState[/* uiRedoStack */2],
                              /* uiUndoStack */historyState[/* uiUndoStack */3],
                              /* editorRedoStack */historyState[/* editorRedoStack */4],
                              /* editorUndoStack */historyState[/* editorUndoStack */5],
                              /* engineForEditRedoStack */Stack[/* removeFirstOrRaise */19](historyState[/* engineForEditRedoStack */6]),
                              /* engineForEditUndoStack */Stack[/* addFirst */17](deepCopyForRestore$11(currentState), historyState[/* engineForEditUndoStack */7]),
                              /* engineForRunRedoStack */historyState[/* engineForRunRedoStack */8],
                              /* engineForRunUndoStack */historyState[/* engineForRunUndoStack */9]
                            ];
                    })));
  }
  
  function storeHasCopyState$1(currentState, historyState) {
    return /* record */[
            /* markRedoUndoStack */historyState[/* markRedoUndoStack */0],
            /* copiedRedoUndoStackRecord */historyState[/* copiedRedoUndoStackRecord */1],
            /* uiRedoStack */historyState[/* uiRedoStack */2],
            /* uiUndoStack */historyState[/* uiUndoStack */3],
            /* editorRedoStack */historyState[/* editorRedoStack */4],
            /* editorUndoStack */historyState[/* editorUndoStack */5],
            /* engineForEditRedoStack */Stack[/* empty */20](/* () */0),
            /* engineForEditUndoStack */Stack[/* addFirst */17](currentState, historyState[/* engineForEditUndoStack */7]),
            /* engineForRunRedoStack */historyState[/* engineForRunRedoStack */8],
            /* engineForRunUndoStack */historyState[/* engineForRunUndoStack */9]
          ];
  }
  
  function storeNoCopyState$1(currentState, historyState) {
    return /* record */[
            /* markRedoUndoStack */historyState[/* markRedoUndoStack */0],
            /* copiedRedoUndoStackRecord */historyState[/* copiedRedoUndoStackRecord */1],
            /* uiRedoStack */historyState[/* uiRedoStack */2],
            /* uiUndoStack */historyState[/* uiUndoStack */3],
            /* editorRedoStack */historyState[/* editorRedoStack */4],
            /* editorUndoStack */historyState[/* editorUndoStack */5],
            /* engineForEditRedoStack */Stack[/* empty */20](/* () */0),
            /* engineForEditUndoStack */Stack[/* addFirst */17](deepCopyForRestore$11(currentState), historyState[/* engineForEditUndoStack */7]),
            /* engineForRunRedoStack */historyState[/* engineForRunRedoStack */8],
            /* engineForRunUndoStack */historyState[/* engineForRunUndoStack */9]
          ];
  }
  
  
  /* Immutable Not a pure module */
  
  function storeCopiedEngineHistoryState(store, param, historyState) {
    return storeHasCopyState(param[2], storeHasCopyState$1(param[1], storeState(param[0], storeUIState(store, historyState))));
  }
  
  function storeHistoryState(store, param, historyState) {
    return storeNoCopyState(param[2], storeNoCopyState$1(param[1], storeState(param[0], storeUIState(store, historyState))));
  }
  
  function undoHistoryState(store, dispatchFunc, param) {
    _1(dispatchFunc, [
          ReplaceState,
          undo(getHistoryState(/* () */0), store)
        ]);
    _1(dispatchFunc, [
          UpdateAction,
          /* Update */[/* array */[/* All */0]]
        ]);
    return /* tuple */[
            undo$1(getHistoryState(/* () */0), param[0]),
            undo$3(getHistoryState(/* () */0), param[1]),
            undo$2(getHistoryState(/* () */0), param[2])
          ];
  }
  
  function redoHistoryState(store, dispatchFunc, param) {
    _1(dispatchFunc, [
          ReplaceState,
          redo(getHistoryState(/* () */0), store)
        ]);
    _1(dispatchFunc, [
          UpdateAction,
          /* Update */[/* array */[/* All */0]]
        ]);
    return /* tuple */[
            redo$1(getHistoryState(/* () */0), param[0]),
            redo$3(getHistoryState(/* () */0), param[1]),
            redo$2(getHistoryState(/* () */0), param[2])
          ];
  }
  
  
  /* AllStateData-WonderEditor Not a pure module */
  
  var setLocalStorage = (
    function(key, val) {
      window.localStorage[key] = val;
    }
    );
  
  var getLocalStorage = (
    function(key) {
      return window.localStorage[key];
    }
    );
  
  
  /* setLocalStorage Not a pure module */
  
  function getExtension(key) {
    return undefined_to_opt(_1(getLocalStorage, key));
  }
  
  function setExtension(key, value) {
    return _2(setLocalStorage, key, value);
  }
  
  
  /* LocalStorage-WonderEditor Not a pure module */
  
  var propTypes = createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  
  {
    var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
      Symbol.for &&
      Symbol.for('react.element')) ||
      0xeac7;
  
    var isValidElement = function(object) {
      return typeof object === 'object' &&
        object !== null &&
        object.$$typeof === REACT_ELEMENT_TYPE;
    };
  
    // By explicitly using `prop-types` you are opting into new development behavior.
    // http://fb.me/prop-types-in-prod
    var throwOnDirectAccess = true;
    module.exports = factoryWithTypeCheckers(isValidElement, throwOnDirectAccess);
  }
  });
  
  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  
  var _freeGlobal = freeGlobal;
  
  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  
  /** Used as a reference to the global object. */
  var root$1 = _freeGlobal || freeSelf || Function('return this')();
  
  var _root = root$1;
  
  /** Built-in value references. */
  var Symbol$1 = _root.Symbol;
  
  var _Symbol = Symbol$1;
  
  /** Used for built-in method references. */
  var objectProto = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty$3 = objectProto.hasOwnProperty;
  
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;
  
  /** Built-in value references. */
  var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;
  
  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty$3.call(value, symToStringTag$1),
        tag = value[symToStringTag$1];
  
    try {
      value[symToStringTag$1] = undefined;
      var unmasked = true;
    } catch (e) {}
  
    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }
    return result;
  }
  
  var _getRawTag = getRawTag;
  
  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;
  
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$1.toString;
  
  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString$1.call(value);
  }
  
  var _objectToString = objectToString;
  
  /** `Object#toString` result references. */
  var nullTag = '[object Null]';
  var undefinedTag = '[object Undefined]';
  
  /** Built-in value references. */
  var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
  
  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag && symToStringTag in Object(value))
      ? _getRawTag(value)
      : _objectToString(value);
  }
  
  var _baseGetTag = baseGetTag;
  
  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;
  
  var isArray_1 = isArray;
  
  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }
  
  var isObjectLike_1 = isObjectLike;
  
  /** `Object#toString` result references. */
  var stringTag = '[object String]';
  
  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a string, else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */
  function isString(value) {
    return typeof value == 'string' ||
      (!isArray_1(value) && isObjectLike_1(value) && _baseGetTag(value) == stringTag);
  }
  
  var isString_1 = isString;
  
  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;
  
      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }
  
  var _createBaseFor = createBaseFor;
  
  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor = _createBaseFor();
  
  var _baseFor = baseFor;
  
  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);
  
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }
  
  var _baseTimes = baseTimes;
  
  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]';
  
  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments(value) {
    return isObjectLike_1(value) && _baseGetTag(value) == argsTag;
  }
  
  var _baseIsArguments = baseIsArguments;
  
  /** Used for built-in method references. */
  var objectProto$3 = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty$5 = objectProto$3.hasOwnProperty;
  
  /** Built-in value references. */
  var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
  
  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {
    return isObjectLike_1(value) && hasOwnProperty$5.call(value, 'callee') &&
      !propertyIsEnumerable.call(value, 'callee');
  };
  
  var isArguments_1 = isArguments;
  
  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }
  
  var stubFalse_1 = stubFalse;
  
  var isBuffer_1 = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports = 'object' == 'object' && exports && !exports.nodeType && exports;
  
  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
  
  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;
  
  /** Built-in value references. */
  var Buffer = moduleExports ? _root.Buffer : undefined;
  
  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
  
  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse_1;
  
  module.exports = isBuffer;
  });
  
  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;
  
  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  
  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
  
    return !!length &&
      (type == 'number' ||
        (type != 'symbol' && reIsUint.test(value))) &&
          (value > -1 && value % 1 == 0 && value < length);
  }
  
  var _isIndex = isIndex;
  
  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$1 = 9007199254740991;
  
  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
  }
  
  var isLength_1 = isLength;
  
  /** `Object#toString` result references. */
  var argsTag$1 = '[object Arguments]';
  var arrayTag = '[object Array]';
  var boolTag = '[object Boolean]';
  var dateTag = '[object Date]';
  var errorTag = '[object Error]';
  var funcTag = '[object Function]';
  var mapTag = '[object Map]';
  var numberTag = '[object Number]';
  var objectTag = '[object Object]';
  var regexpTag = '[object RegExp]';
  var setTag = '[object Set]';
  var stringTag$1 = '[object String]';
  var weakMapTag = '[object WeakMap]';
  
  var arrayBufferTag = '[object ArrayBuffer]';
  var dataViewTag = '[object DataView]';
  var float32Tag = '[object Float32Array]';
  var float64Tag = '[object Float64Array]';
  var int8Tag = '[object Int8Array]';
  var int16Tag = '[object Int16Array]';
  var int32Tag = '[object Int32Array]';
  var uint8Tag = '[object Uint8Array]';
  var uint8ClampedTag = '[object Uint8ClampedArray]';
  var uint16Tag = '[object Uint16Array]';
  var uint32Tag = '[object Uint32Array]';
  
  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag$1] =
  typedArrayTags[weakMapTag] = false;
  
  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray(value) {
    return isObjectLike_1(value) &&
      isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
  }
  
  var _baseIsTypedArray = baseIsTypedArray;
  
  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  
  var _baseUnary = baseUnary;
  
  var _nodeUtil = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports = 'object' == 'object' && exports && !exports.nodeType && exports;
  
  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
  
  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;
  
  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && _freeGlobal.process;
  
  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;
  
      if (types) {
        return types;
      }
  
      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());
  
  module.exports = nodeUtil;
  });
  
  /* Node.js helper references. */
  var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;
  
  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;
  
  var isTypedArray_1 = isTypedArray;
  
  /** Used for built-in method references. */
  var objectProto$2 = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty$4 = objectProto$2.hasOwnProperty;
  
  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray_1(value),
        isArg = !isArr && isArguments_1(value),
        isBuff = !isArr && !isArg && isBuffer_1(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? _baseTimes(value.length, String) : [],
        length = result.length;
  
    for (var key in value) {
      if ((inherited || hasOwnProperty$4.call(value, key)) &&
          !(skipIndexes && (
             // Safari 9 has enumerable `arguments.length` in strict mode.
             key == 'length' ||
             // Node.js 0.10 has enumerable non-index properties on buffers.
             (isBuff && (key == 'offset' || key == 'parent')) ||
             // PhantomJS 2 has enumerable non-index properties on typed arrays.
             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
             // Skip index properties.
             _isIndex(key, length)
          ))) {
        result.push(key);
      }
    }
    return result;
  }
  
  var _arrayLikeKeys = arrayLikeKeys;
  
  /** Used for built-in method references. */
  var objectProto$5 = Object.prototype;
  
  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;
  
    return value === proto;
  }
  
  var _isPrototype = isPrototype;
  
  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  
  var _overArg = overArg;
  
  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys = _overArg(Object.keys, Object);
  
  var _nativeKeys = nativeKeys;
  
  /** Used for built-in method references. */
  var objectProto$4 = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty$6 = objectProto$4.hasOwnProperty;
  
  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!_isPrototype(object)) {
      return _nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty$6.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }
  
  var _baseKeys = baseKeys;
  
  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }
  
  var isObject_1 = isObject;
  
  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]';
  var funcTag$1 = '[object Function]';
  var genTag = '[object GeneratorFunction]';
  var proxyTag = '[object Proxy]';
  
  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    if (!isObject_1(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = _baseGetTag(value);
    return tag == funcTag$1 || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  
  var isFunction_1 = isFunction;
  
  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike$1(value) {
    return value != null && isLength_1(value.length) && !isFunction_1(value);
  }
  
  var isArrayLike_1 = isArrayLike$1;
  
  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
  }
  
  var keys_1 = keys;
  
  /**
   * The base implementation of `_.forOwn` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForOwn(object, iteratee) {
    return object && _baseFor(object, iteratee, keys_1);
  }
  
  var _baseForOwn = baseForOwn;
  
  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity$4(value) {
    return value;
  }
  
  var identity_1 = identity$4;
  
  /**
   * Casts `value` to `identity` if it's not a function.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Function} Returns cast function.
   */
  function castFunction(value) {
    return typeof value == 'function' ? value : identity_1;
  }
  
  var _castFunction = castFunction;
  
  /**
   * Iterates over own enumerable string keyed properties of an object and
   * invokes `iteratee` for each property. The iteratee is invoked with three
   * arguments: (value, key, object). Iteratee functions may exit iteration
   * early by explicitly returning `false`.
   *
   * @static
   * @memberOf _
   * @since 0.3.0
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Object} Returns `object`.
   * @see _.forOwnRight
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.forOwn(new Foo, function(value, key) {
   *   console.log(key);
   * });
   * // => Logs 'a' then 'b' (iteration order is not guaranteed).
   */
  function forOwn(object, iteratee) {
    return object && _baseForOwn(object, _castFunction(iteratee));
  }
  
  var forOwn_1 = forOwn;
  
  /** Built-in value references. */
  var getPrototype = _overArg(Object.getPrototypeOf, Object);
  
  var _getPrototype = getPrototype;
  
  /** `Object#toString` result references. */
  var objectTag$1 = '[object Object]';
  
  /** Used for built-in method references. */
  var funcProto = Function.prototype;
  var objectProto$6 = Object.prototype;
  
  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty$7 = objectProto$6.hasOwnProperty;
  
  /** Used to infer the `Object` constructor. */
  var objectCtorString = funcToString.call(Object);
  
  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */
  function isPlainObject(value) {
    if (!isObjectLike_1(value) || _baseGetTag(value) != objectTag$1) {
      return false;
    }
    var proto = _getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty$7.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor &&
      funcToString.call(Ctor) == objectCtorString;
  }
  
  var isPlainObject_1 = isPlainObject;
  
  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);
  
    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }
  
  var _arrayMap = arrayMap;
  
  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }
  
  var _listCacheClear = listCacheClear;
  
  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq$1(value, other) {
    return value === other || (value !== value && other !== other);
  }
  
  var eq_1 = eq$1;
  
  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq_1(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  
  var _assocIndexOf = assocIndexOf;
  
  /** Used for built-in method references. */
  var arrayProto = Array.prototype;
  
  /** Built-in value references. */
  var splice = arrayProto.splice;
  
  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);
  
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }
  
  var _listCacheDelete = listCacheDelete;
  
  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);
  
    return index < 0 ? undefined : data[index][1];
  }
  
  var _listCacheGet = listCacheGet;
  
  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return _assocIndexOf(this.__data__, key) > -1;
  }
  
  var _listCacheHas = listCacheHas;
  
  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet(key, value) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);
  
    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }
  
  var _listCacheSet = listCacheSet;
  
  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
  
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  
  // Add methods to `ListCache`.
  ListCache.prototype.clear = _listCacheClear;
  ListCache.prototype['delete'] = _listCacheDelete;
  ListCache.prototype.get = _listCacheGet;
  ListCache.prototype.has = _listCacheHas;
  ListCache.prototype.set = _listCacheSet;
  
  var _ListCache = ListCache;
  
  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear() {
    this.__data__ = new _ListCache;
    this.size = 0;
  }
  
  var _stackClear = stackClear;
  
  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);
  
    this.size = data.size;
    return result;
  }
  
  var _stackDelete = stackDelete;
  
  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }
  
  var _stackGet = stackGet;
  
  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }
  
  var _stackHas = stackHas;
  
  /** Used to detect overreaching core-js shims. */
  var coreJsData = _root['__core-js_shared__'];
  
  var _coreJsData = coreJsData;
  
  /** Used to detect methods masquerading as native. */
  var maskSrcKey = (function() {
    var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());
  
  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && (maskSrcKey in func);
  }
  
  var _isMasked = isMasked;
  
  /** Used for built-in method references. */
  var funcProto$2 = Function.prototype;
  
  /** Used to resolve the decompiled source of functions. */
  var funcToString$2 = funcProto$2.toString;
  
  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString$2.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }
  
  var _toSource = toSource;
  
  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  
  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  
  /** Used for built-in method references. */
  var funcProto$1 = Function.prototype;
  var objectProto$7 = Object.prototype;
  
  /** Used to resolve the decompiled source of functions. */
  var funcToString$1 = funcProto$1.toString;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty$8 = objectProto$7.hasOwnProperty;
  
  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    funcToString$1.call(hasOwnProperty$8).replace(reRegExpChar, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );
  
  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject_1(value) || _isMasked(value)) {
      return false;
    }
    var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
    return pattern.test(_toSource(value));
  }
  
  var _baseIsNative = baseIsNative;
  
  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue$2(object, key) {
    return object == null ? undefined : object[key];
  }
  
  var _getValue$1 = getValue$2;
  
  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = _getValue$1(object, key);
    return _baseIsNative(value) ? value : undefined;
  }
  
  var _getNative = getNative;
  
  /* Built-in method references that are verified to be native. */
  var Map$2 = _getNative(_root, 'Map');
  
  var _Map = Map$2;
  
  /* Built-in method references that are verified to be native. */
  var nativeCreate = _getNative(Object, 'create');
  
  var _nativeCreate = nativeCreate;
  
  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
    this.size = 0;
  }
  
  var _hashClear = hashClear;
  
  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }
  
  var _hashDelete = hashDelete;
  
  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  
  /** Used for built-in method references. */
  var objectProto$8 = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty$9 = objectProto$8.hasOwnProperty;
  
  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (_nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty$9.call(data, key) ? data[key] : undefined;
  }
  
  var _hashGet = hashGet;
  
  /** Used for built-in method references. */
  var objectProto$9 = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty$10 = objectProto$9.hasOwnProperty;
  
  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$10.call(data, key);
  }
  
  var _hashHas = hashHas;
  
  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';
  
  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
    return this;
  }
  
  var _hashSet = hashSet;
  
  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash$1(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
  
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  
  // Add methods to `Hash`.
  Hash$1.prototype.clear = _hashClear;
  Hash$1.prototype['delete'] = _hashDelete;
  Hash$1.prototype.get = _hashGet;
  Hash$1.prototype.has = _hashHas;
  Hash$1.prototype.set = _hashSet;
  
  var _Hash = Hash$1;
  
  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new _Hash,
      'map': new (_Map || _ListCache),
      'string': new _Hash
    };
  }
  
  var _mapCacheClear = mapCacheClear;
  
  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }
  
  var _isKeyable = isKeyable;
  
  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return _isKeyable(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }
  
  var _getMapData = getMapData;
  
  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    var result = _getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }
  
  var _mapCacheDelete = mapCacheDelete;
  
  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return _getMapData(this, key).get(key);
  }
  
  var _mapCacheGet = mapCacheGet;
  
  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return _getMapData(this, key).has(key);
  }
  
  var _mapCacheHas = mapCacheHas;
  
  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    var data = _getMapData(this, key),
        size = data.size;
  
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }
  
  var _mapCacheSet = mapCacheSet;
  
  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
  
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  
  // Add methods to `MapCache`.
  MapCache.prototype.clear = _mapCacheClear;
  MapCache.prototype['delete'] = _mapCacheDelete;
  MapCache.prototype.get = _mapCacheGet;
  MapCache.prototype.has = _mapCacheHas;
  MapCache.prototype.set = _mapCacheSet;
  
  var _MapCache = MapCache;
  
  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;
  
  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof _ListCache) {
      var pairs = data.__data__;
      if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new _MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }
  
  var _stackSet = stackSet;
  
  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack$1(entries) {
    var data = this.__data__ = new _ListCache(entries);
    this.size = data.size;
  }
  
  // Add methods to `Stack`.
  Stack$1.prototype.clear = _stackClear;
  Stack$1.prototype['delete'] = _stackDelete;
  Stack$1.prototype.get = _stackGet;
  Stack$1.prototype.has = _stackHas;
  Stack$1.prototype.set = _stackSet;
  
  var _Stack = Stack$1;
  
  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';
  
  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED$2);
    return this;
  }
  
  var _setCacheAdd = setCacheAdd;
  
  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */
  function setCacheHas(value) {
    return this.__data__.has(value);
  }
  
  var _setCacheHas = setCacheHas;
  
  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */
  function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;
  
    this.__data__ = new _MapCache;
    while (++index < length) {
      this.add(values[index]);
    }
  }
  
  // Add methods to `SetCache`.
  SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
  SetCache.prototype.has = _setCacheHas;
  
  var _SetCache = SetCache;
  
  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;
  
    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }
  
  var _arraySome = arraySome;
  
  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }
  
  var _cacheHas = cacheHas;
  
  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$2 = 1;
  var COMPARE_UNORDERED_FLAG$1 = 2;
  
  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2,
        arrLength = array.length,
        othLength = other.length;
  
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    // Assume cyclic values are equal.
    var stacked = stack.get(array);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var index = -1,
        result = true,
        seen = (bitmask & COMPARE_UNORDERED_FLAG$1) ? new _SetCache : undefined;
  
    stack.set(array, other);
    stack.set(other, array);
  
    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];
  
      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, arrValue, index, other, array, stack)
          : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (seen) {
        if (!_arraySome(other, function(othValue, othIndex) {
              if (!_cacheHas(seen, othIndex) &&
                  (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
          result = false;
          break;
        }
      } else if (!(
            arrValue === othValue ||
              equalFunc(arrValue, othValue, bitmask, customizer, stack)
          )) {
        result = false;
        break;
      }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
  }
  
  var _equalArrays = equalArrays;
  
  /** Built-in value references. */
  var Uint8Array$1 = _root.Uint8Array;
  
  var _Uint8Array = Uint8Array$1;
  
  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);
  
    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }
  
  var _mapToArray = mapToArray;
  
  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);
  
    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }
  
  var _setToArray = setToArray;
  
  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$3 = 1;
  var COMPARE_UNORDERED_FLAG$2 = 2;
  
  /** `Object#toString` result references. */
  var boolTag$1 = '[object Boolean]';
  var dateTag$1 = '[object Date]';
  var errorTag$1 = '[object Error]';
  var mapTag$1 = '[object Map]';
  var numberTag$1 = '[object Number]';
  var regexpTag$1 = '[object RegExp]';
  var setTag$1 = '[object Set]';
  var stringTag$2 = '[object String]';
  var symbolTag = '[object Symbol]';
  
  var arrayBufferTag$1 = '[object ArrayBuffer]';
  var dataViewTag$1 = '[object DataView]';
  
  /** Used to convert symbols to primitives and strings. */
  var symbolProto = _Symbol ? _Symbol.prototype : undefined;
  var symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
  
  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag$1:
        if ((object.byteLength != other.byteLength) ||
            (object.byteOffset != other.byteOffset)) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;
  
      case arrayBufferTag$1:
        if ((object.byteLength != other.byteLength) ||
            !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {
          return false;
        }
        return true;
  
      case boolTag$1:
      case dateTag$1:
      case numberTag$1:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq_1(+object, +other);
  
      case errorTag$1:
        return object.name == other.name && object.message == other.message;
  
      case regexpTag$1:
      case stringTag$2:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == (other + '');
  
      case mapTag$1:
        var convert = _mapToArray;
  
      case setTag$1:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3;
        convert || (convert = _setToArray);
  
        if (object.size != other.size && !isPartial) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG$2;
  
        // Recursively compare objects (susceptible to call stack limits).
        stack.set(object, other);
        var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;
  
      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }
  
  var _equalByTag = equalByTag;
  
  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;
  
    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }
  
  var _arrayPush = arrayPush;
  
  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));
  }
  
  var _baseGetAllKeys = baseGetAllKeys;
  
  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];
  
    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }
  
  var _arrayFilter = arrayFilter;
  
  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }
  
  var stubArray_1 = stubArray;
  
  /** Used for built-in method references. */
  var objectProto$12 = Object.prototype;
  
  /** Built-in value references. */
  var propertyIsEnumerable$1 = objectProto$12.propertyIsEnumerable;
  
  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  
  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbols = !nativeGetSymbols ? stubArray_1 : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return _arrayFilter(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable$1.call(object, symbol);
    });
  };
  
  var _getSymbols = getSymbols;
  
  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys(object) {
    return _baseGetAllKeys(object, keys_1, _getSymbols);
  }
  
  var _getAllKeys = getAllKeys;
  
  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$4 = 1;
  
  /** Used for built-in method references. */
  var objectProto$11 = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty$12 = objectProto$11.hasOwnProperty;
  
  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4,
        objProps = _getAllKeys(object),
        objLength = objProps.length,
        othProps = _getAllKeys(other),
        othLength = othProps.length;
  
    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty$12.call(other, key))) {
        return false;
      }
    }
    // Assume cyclic values are equal.
    var stacked = stack.get(object);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
  
    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];
  
      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, objValue, key, other, object, stack)
          : customizer(objValue, othValue, key, object, other, stack);
      }
      // Recursively compare objects (susceptible to call stack limits).
      if (!(compared === undefined
            ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
            : compared
          )) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;
  
      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor &&
          ('constructor' in object && 'constructor' in other) &&
          !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
  }
  
  var _equalObjects = equalObjects;
  
  /* Built-in method references that are verified to be native. */
  var DataView$1 = _getNative(_root, 'DataView');
  
  var _DataView = DataView$1;
  
  /* Built-in method references that are verified to be native. */
  var Promise$1 = _getNative(_root, 'Promise');
  
  var _Promise = Promise$1;
  
  /* Built-in method references that are verified to be native. */
  var Set$1 = _getNative(_root, 'Set');
  
  var _Set = Set$1;
  
  /* Built-in method references that are verified to be native. */
  var WeakMap = _getNative(_root, 'WeakMap');
  
  var _WeakMap = WeakMap;
  
  /** `Object#toString` result references. */
  var mapTag$2 = '[object Map]';
  var objectTag$3 = '[object Object]';
  var promiseTag = '[object Promise]';
  var setTag$2 = '[object Set]';
  var weakMapTag$1 = '[object WeakMap]';
  
  var dataViewTag$2 = '[object DataView]';
  
  /** Used to detect maps, sets, and weakmaps. */
  var dataViewCtorString = _toSource(_DataView);
  var mapCtorString = _toSource(_Map);
  var promiseCtorString = _toSource(_Promise);
  var setCtorString = _toSource(_Set);
  var weakMapCtorString = _toSource(_WeakMap);
  
  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  var getTag = _baseGetTag;
  
  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$2) ||
      (_Map && getTag(new _Map) != mapTag$2) ||
      (_Promise && getTag(_Promise.resolve()) != promiseTag) ||
      (_Set && getTag(new _Set) != setTag$2) ||
      (_WeakMap && getTag(new _WeakMap) != weakMapTag$1)) {
    getTag = function(value) {
      var result = _baseGetTag(value),
          Ctor = result == objectTag$3 ? value.constructor : undefined,
          ctorString = Ctor ? _toSource(Ctor) : '';
  
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString: return dataViewTag$2;
          case mapCtorString: return mapTag$2;
          case promiseCtorString: return promiseTag;
          case setCtorString: return setTag$2;
          case weakMapCtorString: return weakMapTag$1;
        }
      }
      return result;
    };
  }
  
  var _getTag = getTag;
  
  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$1 = 1;
  
  /** `Object#toString` result references. */
  var argsTag$2 = '[object Arguments]';
  var arrayTag$1 = '[object Array]';
  var objectTag$2 = '[object Object]';
  
  /** Used for built-in method references. */
  var objectProto$10 = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty$11 = objectProto$10.hasOwnProperty;
  
  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray_1(object),
        othIsArr = isArray_1(other),
        objTag = objIsArr ? arrayTag$1 : _getTag(object),
        othTag = othIsArr ? arrayTag$1 : _getTag(other);
  
    objTag = objTag == argsTag$2 ? objectTag$2 : objTag;
    othTag = othTag == argsTag$2 ? objectTag$2 : othTag;
  
    var objIsObj = objTag == objectTag$2,
        othIsObj = othTag == objectTag$2,
        isSameTag = objTag == othTag;
  
    if (isSameTag && isBuffer_1(object)) {
      if (!isBuffer_1(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new _Stack);
      return (objIsArr || isTypedArray_1(object))
        ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack)
        : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG$1)) {
      var objIsWrapped = objIsObj && hasOwnProperty$11.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty$11.call(other, '__wrapped__');
  
      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;
  
        stack || (stack = new _Stack);
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new _Stack);
    return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }
  
  var _baseIsEqualDeep = baseIsEqualDeep;
  
  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || (!isObjectLike_1(value) && !isObjectLike_1(other))) {
      return value !== value && other !== other;
    }
    return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }
  
  var _baseIsEqual = baseIsEqual;
  
  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1;
  var COMPARE_UNORDERED_FLAG = 2;
  
  /**
   * The base implementation of `_.isMatch` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @param {Array} matchData The property names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparisons.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */
  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;
  
    if (object == null) {
      return !length;
    }
    object = Object(object);
    while (index--) {
      var data = matchData[index];
      if ((noCustomizer && data[2])
            ? data[1] !== object[data[0]]
            : !(data[0] in object)
          ) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];
  
      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new _Stack;
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }
        if (!(result === undefined
              ? _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
              : result
            )) {
          return false;
        }
      }
    }
    return true;
  }
  
  var _baseIsMatch = baseIsMatch;
  
  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */
  function isStrictComparable(value) {
    return value === value && !isObject_1(value);
  }
  
  var _isStrictComparable = isStrictComparable;
  
  /**
   * Gets the property names, values, and compare flags of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the match data of `object`.
   */
  function getMatchData(object) {
    var result = keys_1(object),
        length = result.length;
  
    while (length--) {
      var key = result[length],
          value = object[key];
  
      result[length] = [key, value, _isStrictComparable(value)];
    }
    return result;
  }
  
  var _getMatchData = getMatchData;
  
  /**
   * A specialized version of `matchesProperty` for source values suitable
   * for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function matchesStrictComparable(key, srcValue) {
    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue &&
        (srcValue !== undefined || (key in Object(object)));
    };
  }
  
  var _matchesStrictComparable = matchesStrictComparable;
  
  /**
   * The base implementation of `_.matches` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatches(source) {
    var matchData = _getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return _matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }
    return function(object) {
      return object === source || _baseIsMatch(object, source, matchData);
    };
  }
  
  var _baseMatches = baseMatches;
  
  /** `Object#toString` result references. */
  var symbolTag$1 = '[object Symbol]';
  
  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol(value) {
    return typeof value == 'symbol' ||
      (isObjectLike_1(value) && _baseGetTag(value) == symbolTag$1);
  }
  
  var isSymbol_1 = isSymbol;
  
  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
  var reIsPlainProp = /^\w*$/;
  
  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey(value, object) {
    if (isArray_1(value)) {
      return false;
    }
    var type = typeof value;
    if (type == 'number' || type == 'symbol' || type == 'boolean' ||
        value == null || isSymbol_1(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
      (object != null && value in Object(object));
  }
  
  var _isKey = isKey;
  
  /** Error message constants. */
  var FUNC_ERROR_TEXT = 'Expected a function';
  
  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */
  function memoize(func, resolver) {
    if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;
  
      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };
    memoized.cache = new (memoize.Cache || _MapCache);
    return memoized;
  }
  
  // Expose `MapCache`.
  memoize.Cache = _MapCache;
  
  var memoize_1 = memoize;
  
  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;
  
  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */
  function memoizeCapped(func) {
    var result = memoize_1(func, function(key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }
      return key;
    });
  
    var cache = result.cache;
    return result;
  }
  
  var _memoizeCapped = memoizeCapped;
  
  /** Used to match property names within property paths. */
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  
  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;
  
  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */
  var stringToPath = _memoizeCapped(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */) {
      result.push('');
    }
    string.replace(rePropName, function(match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
    });
    return result;
  });
  
  var _stringToPath = stringToPath;
  
  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0;
  
  /** Used to convert symbols to primitives and strings. */
  var symbolProto$1 = _Symbol ? _Symbol.prototype : undefined;
  var symbolToString = symbolProto$1 ? symbolProto$1.toString : undefined;
  
  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isArray_1(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return _arrayMap(value, baseToString) + '';
    }
    if (isSymbol_1(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
  }
  
  var _baseToString = baseToString;
  
  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString(value) {
    return value == null ? '' : _baseToString(value);
  }
  
  var toString_1 = toString;
  
  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */
  function castPath(value, object) {
    if (isArray_1(value)) {
      return value;
    }
    return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
  }
  
  var _castPath = castPath;
  
  /** Used as references for various `Number` constants. */
  var INFINITY$1 = 1 / 0;
  
  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey(value) {
    if (typeof value == 'string' || isSymbol_1(value)) {
      return value;
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
  }
  
  var _toKey = toKey;
  
  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */
  function baseGet(object, path) {
    path = _castPath(path, object);
  
    var index = 0,
        length = path.length;
  
    while (object != null && index < length) {
      object = object[_toKey(path[index++])];
    }
    return (index && index == length) ? object : undefined;
  }
  
  var _baseGet = baseGet;
  
  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */
  function get$17(object, path, defaultValue) {
    var result = object == null ? undefined : _baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }
  
  var get_1 = get$17;
  
  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }
  
  var _baseHasIn = baseHasIn;
  
  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */
  function hasPath(object, path, hasFunc) {
    path = _castPath(path, object);
  
    var index = -1,
        length = path.length,
        result = false;
  
    while (++index < length) {
      var key = _toKey(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result || ++index != length) {
      return result;
    }
    length = object == null ? 0 : object.length;
    return !!length && isLength_1(length) && _isIndex(key, length) &&
      (isArray_1(object) || isArguments_1(object));
  }
  
  var _hasPath = hasPath;
  
  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */
  function hasIn(object, path) {
    return object != null && _hasPath(object, path, _baseHasIn);
  }
  
  var hasIn_1 = hasIn;
  
  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$5 = 1;
  var COMPARE_UNORDERED_FLAG$3 = 2;
  
  /**
   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatchesProperty(path, srcValue) {
    if (_isKey(path) && _isStrictComparable(srcValue)) {
      return _matchesStrictComparable(_toKey(path), srcValue);
    }
    return function(object) {
      var objValue = get_1(object, path);
      return (objValue === undefined && objValue === srcValue)
        ? hasIn_1(object, path)
        : _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$5 | COMPARE_UNORDERED_FLAG$3);
    };
  }
  
  var _baseMatchesProperty = baseMatchesProperty;
  
  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }
  
  var _baseProperty = baseProperty;
  
  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyDeep(path) {
    return function(object) {
      return _baseGet(object, path);
    };
  }
  
  var _basePropertyDeep = basePropertyDeep;
  
  /**
   * Creates a function that returns the value at `path` of a given object.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': 2 } },
   *   { 'a': { 'b': 1 } }
   * ];
   *
   * _.map(objects, _.property('a.b'));
   * // => [2, 1]
   *
   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
   * // => [1, 2]
   */
  function property(path) {
    return _isKey(path) ? _baseProperty(_toKey(path)) : _basePropertyDeep(path);
  }
  
  var property_1 = property;
  
  /**
   * The base implementation of `_.iteratee`.
   *
   * @private
   * @param {*} [value=_.identity] The value to convert to an iteratee.
   * @returns {Function} Returns the iteratee.
   */
  function baseIteratee(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') {
      return value;
    }
    if (value == null) {
      return identity_1;
    }
    if (typeof value == 'object') {
      return isArray_1(value)
        ? _baseMatchesProperty(value[0], value[1])
        : _baseMatches(value);
    }
    return property_1(value);
  }
  
  var _baseIteratee = baseIteratee;
  
  /**
   * Creates a `baseEach` or `baseEachRight` function.
   *
   * @private
   * @param {Function} eachFunc The function to iterate over a collection.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike_1(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length = collection.length,
          index = fromRight ? length : -1,
          iterable = Object(collection);
  
      while ((fromRight ? index-- : ++index < length)) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }
  
  var _createBaseEach = createBaseEach;
  
  /**
   * The base implementation of `_.forEach` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   */
  var baseEach = _createBaseEach(_baseForOwn);
  
  var _baseEach = baseEach;
  
  /**
   * The base implementation of `_.map` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function baseMap(collection, iteratee) {
    var index = -1,
        result = isArrayLike_1(collection) ? Array(collection.length) : [];
  
    _baseEach(collection, function(value, key, collection) {
      result[++index] = iteratee(value, key, collection);
    });
    return result;
  }
  
  var _baseMap = baseMap;
  
  /**
   * Creates an array of values by running each element in `collection` thru
   * `iteratee`. The iteratee is invoked with three arguments:
   * (value, index|key, collection).
   *
   * Many lodash methods are guarded to work as iteratees for methods like
   * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
   *
   * The guarded methods are:
   * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
   * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
   * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
   * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   * @example
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * _.map([4, 8], square);
   * // => [16, 64]
   *
   * _.map({ 'a': 4, 'b': 8 }, square);
   * // => [16, 64] (iteration order is not guaranteed)
   *
   * var users = [
   *   { 'user': 'barney' },
   *   { 'user': 'fred' }
   * ];
   *
   * // The `_.property` iteratee shorthand.
   * _.map(users, 'user');
   * // => ['barney', 'fred']
   */
  function map$15(collection, iteratee) {
    var func = isArray_1(collection) ? _arrayMap : _baseMap;
    return func(collection, _baseIteratee(iteratee, 3));
  }
  
  var map_1 = map$15;
  
  var flattenNames_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.flattenNames = undefined;
  
  
  
  var _isString3 = _interopRequireDefault(isString_1);
  
  
  
  var _forOwn3 = _interopRequireDefault(forOwn_1);
  
  
  
  var _isPlainObject3 = _interopRequireDefault(isPlainObject_1);
  
  
  
  var _map3 = _interopRequireDefault(map_1);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  var flattenNames = exports.flattenNames = function flattenNames() {
    var things = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  
    var names = [];
  
    (0, _map3.default)(things, function (thing) {
      if (Array.isArray(thing)) {
        flattenNames(thing).map(function (name) {
          return names.push(name);
        });
      } else if ((0, _isPlainObject3.default)(thing)) {
        (0, _forOwn3.default)(thing, function (value, key) {
          value === true && names.push(key);
          names.push(key + '-' + value);
        });
      } else if ((0, _isString3.default)(thing)) {
        names.push(thing);
      }
    });
  
    return names;
  };
  
  exports.default = flattenNames;
  });
  
  unwrapExports(flattenNames_1);
  var flattenNames_2 = flattenNames_1.flattenNames;
  
  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;
  
    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }
  
  var _arrayEach = arrayEach;
  
  var defineProperty = (function() {
    try {
      var func = _getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }());
  
  var _defineProperty = defineProperty;
  
  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && _defineProperty) {
      _defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }
  
  var _baseAssignValue = baseAssignValue;
  
  /** Used for built-in method references. */
  var objectProto$13 = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty$13 = objectProto$13.hasOwnProperty;
  
  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty$13.call(object, key) && eq_1(objValue, value)) ||
        (value === undefined && !(key in object))) {
      _baseAssignValue(object, key, value);
    }
  }
  
  var _assignValue = assignValue;
  
  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
  
    var index = -1,
        length = props.length;
  
    while (++index < length) {
      var key = props[index];
  
      var newValue = customizer
        ? customizer(object[key], source[key], key, object, source)
        : undefined;
  
      if (newValue === undefined) {
        newValue = source[key];
      }
      if (isNew) {
        _baseAssignValue(object, key, newValue);
      } else {
        _assignValue(object, key, newValue);
      }
    }
    return object;
  }
  
  var _copyObject = copyObject;
  
  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssign(object, source) {
    return object && _copyObject(source, keys_1(source), object);
  }
  
  var _baseAssign = baseAssign;
  
  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }
  
  var _nativeKeysIn = nativeKeysIn;
  
  /** Used for built-in method references. */
  var objectProto$14 = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty$14 = objectProto$14.hasOwnProperty;
  
  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeysIn(object) {
    if (!isObject_1(object)) {
      return _nativeKeysIn(object);
    }
    var isProto = _isPrototype(object),
        result = [];
  
    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty$14.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }
  
  var _baseKeysIn = baseKeysIn;
  
  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn$1(object) {
    return isArrayLike_1(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);
  }
  
  var keysIn_1 = keysIn$1;
  
  /**
   * The base implementation of `_.assignIn` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssignIn(object, source) {
    return object && _copyObject(source, keysIn_1(source), object);
  }
  
  var _baseAssignIn = baseAssignIn;
  
  var _cloneBuffer = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports = 'object' == 'object' && exports && !exports.nodeType && exports;
  
  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
  
  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;
  
  /** Built-in value references. */
  var Buffer = moduleExports ? _root.Buffer : undefined,
      allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
  
  /**
   * Creates a clone of  `buffer`.
   *
   * @private
   * @param {Buffer} buffer The buffer to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Buffer} Returns the cloned buffer.
   */
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length,
        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
  
    buffer.copy(result);
    return result;
  }
  
  module.exports = cloneBuffer;
  });
  
  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source, array) {
    var index = -1,
        length = source.length;
  
    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }
  
  var _copyArray = copyArray;
  
  /**
   * Copies own symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbols(source, object) {
    return _copyObject(source, _getSymbols(source), object);
  }
  
  var _copySymbols = copySymbols;
  
  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
  
  /**
   * Creates an array of the own and inherited enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbolsIn = !nativeGetSymbols$1 ? stubArray_1 : function(object) {
    var result = [];
    while (object) {
      _arrayPush(result, _getSymbols(object));
      object = _getPrototype(object);
    }
    return result;
  };
  
  var _getSymbolsIn = getSymbolsIn;
  
  /**
   * Copies own and inherited symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbolsIn(source, object) {
    return _copyObject(source, _getSymbolsIn(source), object);
  }
  
  var _copySymbolsIn = copySymbolsIn;
  
  /**
   * Creates an array of own and inherited enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeysIn(object) {
    return _baseGetAllKeys(object, keysIn_1, _getSymbolsIn);
  }
  
  var _getAllKeysIn = getAllKeysIn;
  
  /** Used for built-in method references. */
  var objectProto$15 = Object.prototype;
  
  /** Used to check objects for own properties. */
  var hasOwnProperty$15 = objectProto$15.hasOwnProperty;
  
  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */
  function initCloneArray(array) {
    var length = array.length,
        result = new array.constructor(length);
  
    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty$15.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }
  
  var _initCloneArray = initCloneArray;
  
  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));
    return result;
  }
  
  var _cloneArrayBuffer = cloneArrayBuffer;
  
  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }
  
  var _cloneDataView = cloneDataView;
  
  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;
  
  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }
  
  var _cloneRegExp = cloneRegExp;
  
  /** Used to convert symbols to primitives and strings. */
  var symbolProto$2 = _Symbol ? _Symbol.prototype : undefined;
  var symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;
  
  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */
  function cloneSymbol(symbol) {
    return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
  }
  
  var _cloneSymbol = cloneSymbol;
  
  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  
  var _cloneTypedArray = cloneTypedArray;
  
  /** `Object#toString` result references. */
  var boolTag$3 = '[object Boolean]';
  var dateTag$3 = '[object Date]';
  var mapTag$4 = '[object Map]';
  var numberTag$3 = '[object Number]';
  var regexpTag$3 = '[object RegExp]';
  var setTag$4 = '[object Set]';
  var stringTag$4 = '[object String]';
  var symbolTag$3 = '[object Symbol]';
  
  var arrayBufferTag$3 = '[object ArrayBuffer]';
  var dataViewTag$4 = '[object DataView]';
  var float32Tag$2 = '[object Float32Array]';
  var float64Tag$2 = '[object Float64Array]';
  var int8Tag$2 = '[object Int8Array]';
  var int16Tag$2 = '[object Int16Array]';
  var int32Tag$2 = '[object Int32Array]';
  var uint8Tag$2 = '[object Uint8Array]';
  var uint8ClampedTag$2 = '[object Uint8ClampedArray]';
  var uint16Tag$2 = '[object Uint16Array]';
  var uint32Tag$2 = '[object Uint32Array]';
  
  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag$3:
        return _cloneArrayBuffer(object);
  
      case boolTag$3:
      case dateTag$3:
        return new Ctor(+object);
  
      case dataViewTag$4:
        return _cloneDataView(object, isDeep);
  
      case float32Tag$2: case float64Tag$2:
      case int8Tag$2: case int16Tag$2: case int32Tag$2:
      case uint8Tag$2: case uint8ClampedTag$2: case uint16Tag$2: case uint32Tag$2:
        return _cloneTypedArray(object, isDeep);
  
      case mapTag$4:
        return new Ctor;
  
      case numberTag$3:
      case stringTag$4:
        return new Ctor(object);
  
      case regexpTag$3:
        return _cloneRegExp(object);
  
      case setTag$4:
        return new Ctor;
  
      case symbolTag$3:
        return _cloneSymbol(object);
    }
  }
  
  var _initCloneByTag = initCloneByTag;
  
  /** Built-in value references. */
  var objectCreate = Object.create;
  
  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  var baseCreate = (function() {
    function object() {}
    return function(proto) {
      if (!isObject_1(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object;
      object.prototype = undefined;
      return result;
    };
  }());
  
  var _baseCreate = baseCreate;
  
  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneObject(object) {
    return (typeof object.constructor == 'function' && !_isPrototype(object))
      ? _baseCreate(_getPrototype(object))
      : {};
  }
  
  var _initCloneObject = initCloneObject;
  
  /** `Object#toString` result references. */
  var mapTag$5 = '[object Map]';
  
  /**
   * The base implementation of `_.isMap` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   */
  function baseIsMap(value) {
    return isObjectLike_1(value) && _getTag(value) == mapTag$5;
  }
  
  var _baseIsMap = baseIsMap;
  
  /* Node.js helper references. */
  var nodeIsMap = _nodeUtil && _nodeUtil.isMap;
  
  /**
   * Checks if `value` is classified as a `Map` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   * @example
   *
   * _.isMap(new Map);
   * // => true
   *
   * _.isMap(new WeakMap);
   * // => false
   */
  var isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;
  
  var isMap_1 = isMap;
  
  /** `Object#toString` result references. */
  var setTag$5 = '[object Set]';
  
  /**
   * The base implementation of `_.isSet` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   */
  function baseIsSet(value) {
    return isObjectLike_1(value) && _getTag(value) == setTag$5;
  }
  
  var _baseIsSet = baseIsSet;
  
  /* Node.js helper references. */
  var nodeIsSet = _nodeUtil && _nodeUtil.isSet;
  
  /**
   * Checks if `value` is classified as a `Set` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   * @example
   *
   * _.isSet(new Set);
   * // => true
   *
   * _.isSet(new WeakSet);
   * // => false
   */
  var isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;
  
  var isSet_1 = isSet;
  
  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$1 = 1;
  var CLONE_FLAT_FLAG = 2;
  var CLONE_SYMBOLS_FLAG$1 = 4;
  
  /** `Object#toString` result references. */
  var argsTag$3 = '[object Arguments]';
  var arrayTag$2 = '[object Array]';
  var boolTag$2 = '[object Boolean]';
  var dateTag$2 = '[object Date]';
  var errorTag$2 = '[object Error]';
  var funcTag$2 = '[object Function]';
  var genTag$1 = '[object GeneratorFunction]';
  var mapTag$3 = '[object Map]';
  var numberTag$2 = '[object Number]';
  var objectTag$4 = '[object Object]';
  var regexpTag$2 = '[object RegExp]';
  var setTag$3 = '[object Set]';
  var stringTag$3 = '[object String]';
  var symbolTag$2 = '[object Symbol]';
  var weakMapTag$2 = '[object WeakMap]';
  
  var arrayBufferTag$2 = '[object ArrayBuffer]';
  var dataViewTag$3 = '[object DataView]';
  var float32Tag$1 = '[object Float32Array]';
  var float64Tag$1 = '[object Float64Array]';
  var int8Tag$1 = '[object Int8Array]';
  var int16Tag$1 = '[object Int16Array]';
  var int32Tag$1 = '[object Int32Array]';
  var uint8Tag$1 = '[object Uint8Array]';
  var uint8ClampedTag$1 = '[object Uint8ClampedArray]';
  var uint16Tag$1 = '[object Uint16Array]';
  var uint32Tag$1 = '[object Uint32Array]';
  
  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag$3] = cloneableTags[arrayTag$2] =
  cloneableTags[arrayBufferTag$2] = cloneableTags[dataViewTag$3] =
  cloneableTags[boolTag$2] = cloneableTags[dateTag$2] =
  cloneableTags[float32Tag$1] = cloneableTags[float64Tag$1] =
  cloneableTags[int8Tag$1] = cloneableTags[int16Tag$1] =
  cloneableTags[int32Tag$1] = cloneableTags[mapTag$3] =
  cloneableTags[numberTag$2] = cloneableTags[objectTag$4] =
  cloneableTags[regexpTag$2] = cloneableTags[setTag$3] =
  cloneableTags[stringTag$3] = cloneableTags[symbolTag$2] =
  cloneableTags[uint8Tag$1] = cloneableTags[uint8ClampedTag$1] =
  cloneableTags[uint16Tag$1] = cloneableTags[uint32Tag$1] = true;
  cloneableTags[errorTag$2] = cloneableTags[funcTag$2] =
  cloneableTags[weakMapTag$2] = false;
  
  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Deep clone
   *  2 - Flatten inherited properties
   *  4 - Clone symbols
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */
  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG$1,
        isFlat = bitmask & CLONE_FLAT_FLAG,
        isFull = bitmask & CLONE_SYMBOLS_FLAG$1;
  
    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== undefined) {
      return result;
    }
    if (!isObject_1(value)) {
      return value;
    }
    var isArr = isArray_1(value);
    if (isArr) {
      result = _initCloneArray(value);
      if (!isDeep) {
        return _copyArray(value, result);
      }
    } else {
      var tag = _getTag(value),
          isFunc = tag == funcTag$2 || tag == genTag$1;
  
      if (isBuffer_1(value)) {
        return _cloneBuffer(value, isDeep);
      }
      if (tag == objectTag$4 || tag == argsTag$3 || (isFunc && !object)) {
        result = (isFlat || isFunc) ? {} : _initCloneObject(value);
        if (!isDeep) {
          return isFlat
            ? _copySymbolsIn(value, _baseAssignIn(result, value))
            : _copySymbols(value, _baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = _initCloneByTag(value, tag, isDeep);
      }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new _Stack);
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);
  
    if (isSet_1(value)) {
      value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
  
      return result;
    }
  
    if (isMap_1(value)) {
      value.forEach(function(subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
  
      return result;
    }
  
    var keysFunc = isFull
      ? (isFlat ? _getAllKeysIn : _getAllKeys)
      : (isFlat ? keysIn : keys_1);
  
    var props = isArr ? undefined : keysFunc(value);
    _arrayEach(props || value, function(subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }
      // Recursively populate clone (susceptible to call stack limits).
      _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }
  
  var _baseClone = baseClone;
  
  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1;
  var CLONE_SYMBOLS_FLAG = 4;
  
  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */
  function cloneDeep(value) {
    return _baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
  }
  
  var cloneDeep_1 = cloneDeep;
  
  var mergeClasses_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.mergeClasses = undefined;
  
  
  
  var _forOwn3 = _interopRequireDefault(forOwn_1);
  
  
  
  var _cloneDeep3 = _interopRequireDefault(cloneDeep_1);
  
  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  var mergeClasses = exports.mergeClasses = function mergeClasses(classes) {
    var activeNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  
    var styles = classes.default && (0, _cloneDeep3.default)(classes.default) || {};
    activeNames.map(function (name) {
      var toMerge = classes[name];
      if (toMerge) {
        (0, _forOwn3.default)(toMerge, function (value, key) {
          if (!styles[key]) {
            styles[key] = {};
          }
  
          styles[key] = _extends({}, styles[key], toMerge[key]);
        });
      }
  
      return name;
    });
    return styles;
  };
  
  exports.default = mergeClasses;
  });
  
  unwrapExports(mergeClasses_1);
  var mergeClasses_2 = mergeClasses_1.mergeClasses;
  
  var autoprefix_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.autoprefix = undefined;
  
  
  
  var _forOwn3 = _interopRequireDefault(forOwn_1);
  
  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  var transforms = {
    borderRadius: function borderRadius(value) {
      return {
        msBorderRadius: value,
        MozBorderRadius: value,
        OBorderRadius: value,
        WebkitBorderRadius: value,
        borderRadius: value
      };
    },
    boxShadow: function boxShadow(value) {
      return {
        msBoxShadow: value,
        MozBoxShadow: value,
        OBoxShadow: value,
        WebkitBoxShadow: value,
        boxShadow: value
      };
    },
    userSelect: function userSelect(value) {
      return {
        WebkitTouchCallout: value,
        KhtmlUserSelect: value,
        MozUserSelect: value,
        msUserSelect: value,
        WebkitUserSelect: value,
        userSelect: value
      };
    },
  
    flex: function flex(value) {
      return {
        WebkitBoxFlex: value,
        MozBoxFlex: value,
        WebkitFlex: value,
        msFlex: value,
        flex: value
      };
    },
    flexBasis: function flexBasis(value) {
      return {
        WebkitFlexBasis: value,
        flexBasis: value
      };
    },
    justifyContent: function justifyContent(value) {
      return {
        WebkitJustifyContent: value,
        justifyContent: value
      };
    },
  
    transition: function transition(value) {
      return {
        msTransition: value,
        MozTransition: value,
        OTransition: value,
        WebkitTransition: value,
        transition: value
      };
    },
  
    transform: function transform(value) {
      return {
        msTransform: value,
        MozTransform: value,
        OTransform: value,
        WebkitTransform: value,
        transform: value
      };
    },
    absolute: function absolute(value) {
      var direction = value && value.split(' ');
      return {
        position: 'absolute',
        top: direction && direction[0],
        right: direction && direction[1],
        bottom: direction && direction[2],
        left: direction && direction[3]
      };
    },
    extend: function extend(name, otherElementStyles) {
      var otherStyle = otherElementStyles[name];
      if (otherStyle) {
        return otherStyle;
      }
      return {
        'extend': name
      };
    }
  };
  
  var autoprefix = exports.autoprefix = function autoprefix(elements) {
    var prefixed = {};
    (0, _forOwn3.default)(elements, function (styles, element) {
      var expanded = {};
      (0, _forOwn3.default)(styles, function (value, key) {
        var transform = transforms[key];
        if (transform) {
          expanded = _extends({}, expanded, transform(value));
        } else {
          expanded[key] = value;
        }
      });
      prefixed[element] = expanded;
    });
    return prefixed;
  };
  
  exports.default = autoprefix;
  });
  
  unwrapExports(autoprefix_1);
  var autoprefix_2 = autoprefix_1.autoprefix;
  
  var hover_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.hover = undefined;
  
  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
  
  
  
  var _react2 = _interopRequireDefault(react$2);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
  
  var hover = exports.hover = function hover(Component) {
    var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'span';
  
    return function (_React$Component) {
      _inherits(Hover, _React$Component);
  
      function Hover() {
        var _ref;
  
        var _temp, _this, _ret;
  
        _classCallCheck(this, Hover);
  
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
  
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Hover.__proto__ || Object.getPrototypeOf(Hover)).call.apply(_ref, [this].concat(args))), _this), _this.state = { hover: false }, _this.handleMouseOver = function () {
          return _this.setState({ hover: true });
        }, _this.handleMouseOut = function () {
          return _this.setState({ hover: false });
        }, _this.render = function () {
          return _react2.default.createElement(
            Span,
            { onMouseOver: _this.handleMouseOver, onMouseOut: _this.handleMouseOut },
            _react2.default.createElement(Component, _extends({}, _this.props, _this.state))
          );
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }
  
      return Hover;
    }(_react2.default.Component);
  };
  
  exports.default = hover;
  });
  
  unwrapExports(hover_1);
  var hover_2 = hover_1.hover;
  
  var active_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.active = undefined;
  
  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
  
  
  
  var _react2 = _interopRequireDefault(react$2);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
  
  var active = exports.active = function active(Component) {
    var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'span';
  
    return function (_React$Component) {
      _inherits(Active, _React$Component);
  
      function Active() {
        var _ref;
  
        var _temp, _this, _ret;
  
        _classCallCheck(this, Active);
  
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
  
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Active.__proto__ || Object.getPrototypeOf(Active)).call.apply(_ref, [this].concat(args))), _this), _this.state = { active: false }, _this.handleMouseDown = function () {
          return _this.setState({ active: true });
        }, _this.handleMouseUp = function () {
          return _this.setState({ active: false });
        }, _this.render = function () {
          return _react2.default.createElement(
            Span,
            { onMouseDown: _this.handleMouseDown, onMouseUp: _this.handleMouseUp },
            _react2.default.createElement(Component, _extends({}, _this.props, _this.state))
          );
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }
  
      return Active;
    }(_react2.default.Component);
  };
  
  exports.default = active;
  });
  
  unwrapExports(active_1);
  var active_2 = active_1.active;
  
  var loop$2 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var loopable = function loopable(i, length) {
    var props = {};
    var setProp = function setProp(name) {
      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  
      props[name] = value;
    };
  
    i === 0 && setProp('first-child');
    i === length - 1 && setProp('last-child');
    (i === 0 || i % 2 === 0) && setProp('even');
    Math.abs(i % 2) === 1 && setProp('odd');
    setProp('nth-child', i);
  
    return props;
  };
  
  exports.default = loopable;
  });
  
  unwrapExports(loop$2);
  
  var lib = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ReactCSS = exports.loop = exports.handleActive = exports.handleHover = exports.hover = undefined;
  
  
  
  var _flattenNames2 = _interopRequireDefault(flattenNames_1);
  
  
  
  var _mergeClasses2 = _interopRequireDefault(mergeClasses_1);
  
  
  
  var _autoprefix2 = _interopRequireDefault(autoprefix_1);
  
  
  
  var _hover3 = _interopRequireDefault(hover_1);
  
  
  
  var _active2 = _interopRequireDefault(active_1);
  
  
  
  var _loop3 = _interopRequireDefault(loop$2);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  exports.hover = _hover3.default;
  exports.handleHover = _hover3.default;
  exports.handleActive = _active2.default;
  exports.loop = _loop3.default;
  var ReactCSS = exports.ReactCSS = function ReactCSS(classes) {
    for (var _len = arguments.length, activations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      activations[_key - 1] = arguments[_key];
    }
  
    var activeNames = (0, _flattenNames2.default)(activations);
    var merged = (0, _mergeClasses2.default)(classes, activeNames);
    return (0, _autoprefix2.default)(merged);
  };
  
  exports.default = ReactCSS;
  });
  
  unwrapExports(lib);
  var lib_1 = lib.ReactCSS;
  var lib_2 = lib.loop;
  var lib_3 = lib.handleActive;
  var lib_4 = lib.handleHover;
  var lib_5 = lib.hover;
  
  var alpha = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var calculateChange = exports.calculateChange = function calculateChange(e, skip, props, container) {
    e.preventDefault();
    var containerWidth = container.clientWidth;
    var containerHeight = container.clientHeight;
    var x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;
    var y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;
    var left = x - (container.getBoundingClientRect().left + window.pageXOffset);
    var top = y - (container.getBoundingClientRect().top + window.pageYOffset);
  
    if (props.direction === 'vertical') {
      var a = void 0;
      if (top < 0) {
        a = 0;
      } else if (top > containerHeight) {
        a = 1;
      } else {
        a = Math.round(top * 100 / containerHeight) / 100;
      }
  
      if (props.hsl.a !== a) {
        return {
          h: props.hsl.h,
          s: props.hsl.s,
          l: props.hsl.l,
          a: a,
          source: 'rgb'
        };
      }
    } else {
      var _a = void 0;
      if (left < 0) {
        _a = 0;
      } else if (left > containerWidth) {
        _a = 1;
      } else {
        _a = Math.round(left * 100 / containerWidth) / 100;
      }
  
      if (props.a !== _a) {
        return {
          h: props.hsl.h,
          s: props.hsl.s,
          l: props.hsl.l,
          a: _a,
          source: 'rgb'
        };
      }
    }
    return null;
  };
  });
  
  unwrapExports(alpha);
  var alpha_1 = alpha.calculateChange;
  
  var checkboard = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var checkboardCache = {};
  
  var render = exports.render = function render(c1, c2, size, serverCanvas) {
    if (typeof document === 'undefined' && !serverCanvas) {
      return null;
    }
    var canvas = serverCanvas ? new serverCanvas() : document.createElement('canvas');
    canvas.width = size * 2;
    canvas.height = size * 2;
    var ctx = canvas.getContext('2d');
    if (!ctx) {
      return null;
    } // If no context can be found, return early.
    ctx.fillStyle = c1;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = c2;
    ctx.fillRect(0, 0, size, size);
    ctx.translate(size, size);
    ctx.fillRect(0, 0, size, size);
    return canvas.toDataURL();
  };
  
  var get = exports.get = function get(c1, c2, size, serverCanvas) {
    var key = c1 + '-' + c2 + '-' + size + (serverCanvas ? '-server' : '');
    var checkboard = render(c1, c2, size, serverCanvas);
  
    if (checkboardCache[key]) {
      return checkboardCache[key];
    }
    checkboardCache[key] = checkboard;
    return checkboard;
  };
  });
  
  unwrapExports(checkboard);
  var checkboard_1 = checkboard.render;
  var checkboard_2 = checkboard.get;
  
  var Checkboard_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Checkboard = undefined;
  
  
  
  var _react2 = _interopRequireDefault(react$2);
  
  
  
  var _reactcss2 = _interopRequireDefault(lib);
  
  
  
  var checkboard$$1 = _interopRequireWildcard(checkboard);
  
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  var Checkboard = exports.Checkboard = function Checkboard(_ref) {
    var white = _ref.white,
        grey = _ref.grey,
        size = _ref.size,
        renderers = _ref.renderers,
        borderRadius = _ref.borderRadius,
        boxShadow = _ref.boxShadow;
  
    var styles = (0, _reactcss2.default)({
      'default': {
        grid: {
          borderRadius: borderRadius,
          boxShadow: boxShadow,
          absolute: '0px 0px 0px 0px',
          background: 'url(' + checkboard$$1.get(white, grey, size, renderers.canvas) + ') center left'
        }
      }
    });
  
    return _react2.default.createElement('div', { style: styles.grid });
  };
  
  Checkboard.defaultProps = {
    size: 8,
    white: 'transparent',
    grey: 'rgba(0,0,0,.08)',
    renderers: {}
  };
  
  exports.default = Checkboard;
  });
  
  unwrapExports(Checkboard_1);
  var Checkboard_2 = Checkboard_1.Checkboard;
  
  var Alpha_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Alpha = undefined;
  
  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
  
  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
  
  
  
  var _react2 = _interopRequireDefault(react$2);
  
  
  
  var _reactcss2 = _interopRequireDefault(lib);
  
  
  
  var alpha$$1 = _interopRequireWildcard(alpha);
  
  
  
  var _Checkboard2 = _interopRequireDefault(Checkboard_1);
  
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
  
  var Alpha = exports.Alpha = function (_ref) {
    _inherits(Alpha, _ref);
  
    function Alpha() {
      var _ref2;
  
      var _temp, _this, _ret;
  
      _classCallCheck(this, Alpha);
  
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
  
      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Alpha.__proto__ || Object.getPrototypeOf(Alpha)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function (e, skip) {
        var change = alpha$$1.calculateChange(e, skip, _this.props, _this.container);
        change && _this.props.onChange && _this.props.onChange(change, e);
      }, _this.handleMouseDown = function (e) {
        _this.handleChange(e, true);
        window.addEventListener('mousemove', _this.handleChange);
        window.addEventListener('mouseup', _this.handleMouseUp);
      }, _this.handleMouseUp = function () {
        _this.unbindEventListeners();
      }, _this.unbindEventListeners = function () {
        window.removeEventListener('mousemove', _this.handleChange);
        window.removeEventListener('mouseup', _this.handleMouseUp);
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }
  
    _createClass(Alpha, [{
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.unbindEventListeners();
      }
    }, {
      key: 'render',
      value: function render() {
        var _this2 = this;
  
        var rgb = this.props.rgb;
        var styles = (0, _reactcss2.default)({
          'default': {
            alpha: {
              absolute: '0px 0px 0px 0px',
              borderRadius: this.props.radius
            },
            checkboard: {
              absolute: '0px 0px 0px 0px',
              overflow: 'hidden',
              borderRadius: this.props.radius
            },
            gradient: {
              absolute: '0px 0px 0px 0px',
              background: 'linear-gradient(to right, rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 0) 0%,\n           rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 1) 100%)',
              boxShadow: this.props.shadow,
              borderRadius: this.props.radius
            },
            container: {
              position: 'relative',
              height: '100%',
              margin: '0 3px'
            },
            pointer: {
              position: 'absolute',
              left: rgb.a * 100 + '%'
            },
            slider: {
              width: '4px',
              borderRadius: '1px',
              height: '8px',
              boxShadow: '0 0 2px rgba(0, 0, 0, .6)',
              background: '#fff',
              marginTop: '1px',
              transform: 'translateX(-2px)'
            }
          },
          'vertical': {
            gradient: {
              background: 'linear-gradient(to bottom, rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 0) 0%,\n           rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 1) 100%)'
            },
            pointer: {
              left: 0,
              top: rgb.a * 100 + '%'
            }
          },
          'overwrite': _extends({}, this.props.style)
        }, {
          vertical: this.props.direction === 'vertical',
          overwrite: true
        });
  
        return _react2.default.createElement(
          'div',
          { style: styles.alpha },
          _react2.default.createElement(
            'div',
            { style: styles.checkboard },
            _react2.default.createElement(_Checkboard2.default, { renderers: this.props.renderers })
          ),
          _react2.default.createElement('div', { style: styles.gradient }),
          _react2.default.createElement(
            'div',
            {
              style: styles.container,
              ref: function ref(container) {
                return _this2.container = container;
              },
              onMouseDown: this.handleMouseDown,
              onTouchMove: this.handleChange,
              onTouchStart: this.handleChange
            },
            _react2.default.createElement(
              'div',
              { style: styles.pointer },
              this.props.pointer ? _react2.default.createElement(this.props.pointer, this.props) : _react2.default.createElement('div', { style: styles.slider })
            )
          )
        );
      }
    }]);
  
    return Alpha;
  }(react$2.PureComponent || react$2.Component);
  
  exports.default = Alpha;
  });
  
  unwrapExports(Alpha_1);
  var Alpha_2 = Alpha_1.Alpha;
  
  var EditableInput_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.EditableInput = undefined;
  
  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
  
  
  
  var _react2 = _interopRequireDefault(react$2);
  
  
  
  var _reactcss2 = _interopRequireDefault(lib);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
  
  var EditableInput = exports.EditableInput = function (_ref) {
    _inherits(EditableInput, _ref);
  
    function EditableInput(props) {
      _classCallCheck(this, EditableInput);
  
      var _this = _possibleConstructorReturn(this, (EditableInput.__proto__ || Object.getPrototypeOf(EditableInput)).call(this));
  
      _this.handleBlur = function () {
        if (_this.state.blurValue) {
          _this.setState({ value: _this.state.blurValue, blurValue: null });
        }
      };
  
      _this.handleChange = function (e) {
        if (_this.props.label) {
          _this.props.onChange && _this.props.onChange(_defineProperty({}, _this.props.label, e.target.value), e);
        } else {
          _this.props.onChange && _this.props.onChange(e.target.value, e);
        }
  
        _this.setState({ value: e.target.value });
      };
  
      _this.handleKeyDown = function (e) {
        // In case `e.target.value` is a percentage remove the `%` character
        // and update accordingly with a percentage
        // https://github.com/casesandberg/react-color/issues/383
        var stringValue = String(e.target.value);
        var isPercentage = stringValue.indexOf('%') > -1;
        var number = Number(stringValue.replace(/%/g, ''));
        if (!isNaN(number)) {
          var amount = _this.props.arrowOffset || 1;
  
          // Up
          if (e.keyCode === 38) {
            if (_this.props.label !== null) {
              _this.props.onChange && _this.props.onChange(_defineProperty({}, _this.props.label, number + amount), e);
            } else {
              _this.props.onChange && _this.props.onChange(number + amount, e);
            }
  
            if (isPercentage) {
              _this.setState({ value: number + amount + '%' });
            } else {
              _this.setState({ value: number + amount });
            }
          }
  
          // Down
          if (e.keyCode === 40) {
            if (_this.props.label !== null) {
              _this.props.onChange && _this.props.onChange(_defineProperty({}, _this.props.label, number - amount), e);
            } else {
              _this.props.onChange && _this.props.onChange(number - amount, e);
            }
  
            if (isPercentage) {
              _this.setState({ value: number - amount + '%' });
            } else {
              _this.setState({ value: number - amount });
            }
          }
        }
      };
  
      _this.handleDrag = function (e) {
        if (_this.props.dragLabel) {
          var newValue = Math.round(_this.props.value + e.movementX);
          if (newValue >= 0 && newValue <= _this.props.dragMax) {
            _this.props.onChange && _this.props.onChange(_defineProperty({}, _this.props.label, newValue), e);
          }
        }
      };
  
      _this.handleMouseDown = function (e) {
        if (_this.props.dragLabel) {
          e.preventDefault();
          _this.handleDrag(e);
          window.addEventListener('mousemove', _this.handleDrag);
          window.addEventListener('mouseup', _this.handleMouseUp);
        }
      };
  
      _this.handleMouseUp = function () {
        _this.unbindEventListeners();
      };
  
      _this.unbindEventListeners = function () {
        window.removeEventListener('mousemove', _this.handleDrag);
        window.removeEventListener('mouseup', _this.handleMouseUp);
      };
  
      _this.state = {
        value: String(props.value).toUpperCase(),
        blurValue: String(props.value).toUpperCase()
      };
      return _this;
    }
  
    _createClass(EditableInput, [{
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        var input = this.input;
        if (nextProps.value !== this.state.value) {
          if (input === document.activeElement) {
            this.setState({ blurValue: String(nextProps.value).toUpperCase() });
          } else {
            this.setState({ value: String(nextProps.value).toUpperCase(), blurValue: !this.state.blurValue && String(nextProps.value).toUpperCase() });
          }
        }
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.unbindEventListeners();
      }
    }, {
      key: 'render',
      value: function render() {
        var _this2 = this;
  
        var styles = (0, _reactcss2.default)({
          'default': {
            wrap: {
              position: 'relative'
            }
          },
          'user-override': {
            wrap: this.props.style && this.props.style.wrap ? this.props.style.wrap : {},
            input: this.props.style && this.props.style.input ? this.props.style.input : {},
            label: this.props.style && this.props.style.label ? this.props.style.label : {}
          },
          'dragLabel-true': {
            label: {
              cursor: 'ew-resize'
            }
          }
        }, {
          'user-override': true
        }, this.props);
  
        return _react2.default.createElement(
          'div',
          { style: styles.wrap },
          _react2.default.createElement('input', {
            style: styles.input,
            ref: function ref(input) {
              return _this2.input = input;
            },
            value: this.state.value,
            onKeyDown: this.handleKeyDown,
            onChange: this.handleChange,
            onBlur: this.handleBlur,
            placeholder: this.props.placeholder,
            spellCheck: 'false'
          }),
          this.props.label && !this.props.hideLabel ? _react2.default.createElement(
            'span',
            { style: styles.label, onMouseDown: this.handleMouseDown },
            this.props.label
          ) : null
        );
      }
    }]);
  
    return EditableInput;
  }(react$2.PureComponent || react$2.Component);
  
  exports.default = EditableInput;
  });
  
  unwrapExports(EditableInput_1);
  var EditableInput_2 = EditableInput_1.EditableInput;
  
  var hue = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var calculateChange = exports.calculateChange = function calculateChange(e, skip, props, container) {
    e.preventDefault();
    var containerWidth = container.clientWidth;
    var containerHeight = container.clientHeight;
    var x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;
    var y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;
    var left = x - (container.getBoundingClientRect().left + window.pageXOffset);
    var top = y - (container.getBoundingClientRect().top + window.pageYOffset);
  
    if (props.direction === 'vertical') {
      var h = void 0;
      if (top < 0) {
        h = 359;
      } else if (top > containerHeight) {
        h = 0;
      } else {
        var percent = -(top * 100 / containerHeight) + 100;
        h = 360 * percent / 100;
      }
  
      if (props.hsl.h !== h) {
        return {
          h: h,
          s: props.hsl.s,
          l: props.hsl.l,
          a: props.hsl.a,
          source: 'rgb'
        };
      }
    } else {
      var _h = void 0;
      if (left < 0) {
        _h = 0;
      } else if (left > containerWidth) {
        _h = 359;
      } else {
        var _percent = left * 100 / containerWidth;
        _h = 360 * _percent / 100;
      }
  
      if (props.hsl.h !== _h) {
        return {
          h: _h,
          s: props.hsl.s,
          l: props.hsl.l,
          a: props.hsl.a,
          source: 'rgb'
        };
      }
    }
    return null;
  };
  });
  
  unwrapExports(hue);
  var hue_1 = hue.calculateChange;
  
  var Hue_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Hue = undefined;
  
  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
  
  
  
  var _react2 = _interopRequireDefault(react$2);
  
  
  
  var _reactcss2 = _interopRequireDefault(lib);
  
  
  
  var hue$$1 = _interopRequireWildcard(hue);
  
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
  
  var Hue = exports.Hue = function (_ref) {
    _inherits(Hue, _ref);
  
    function Hue() {
      var _ref2;
  
      var _temp, _this, _ret;
  
      _classCallCheck(this, Hue);
  
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
  
      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Hue.__proto__ || Object.getPrototypeOf(Hue)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function (e, skip) {
        var change = hue$$1.calculateChange(e, skip, _this.props, _this.container);
        change && _this.props.onChange && _this.props.onChange(change, e);
      }, _this.handleMouseDown = function (e) {
        _this.handleChange(e, true);
        window.addEventListener('mousemove', _this.handleChange);
        window.addEventListener('mouseup', _this.handleMouseUp);
      }, _this.handleMouseUp = function () {
        _this.unbindEventListeners();
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }
  
    _createClass(Hue, [{
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.unbindEventListeners();
      }
    }, {
      key: 'unbindEventListeners',
      value: function unbindEventListeners() {
        window.removeEventListener('mousemove', this.handleChange);
        window.removeEventListener('mouseup', this.handleMouseUp);
      }
    }, {
      key: 'render',
      value: function render() {
        var _this2 = this;
  
        var _props$direction = this.props.direction,
            direction = _props$direction === undefined ? 'horizontal' : _props$direction;
  
  
        var styles = (0, _reactcss2.default)({
          'default': {
            hue: {
              absolute: '0px 0px 0px 0px',
              borderRadius: this.props.radius,
              boxShadow: this.props.shadow
            },
            container: {
              padding: '0 2px',
              position: 'relative',
              height: '100%',
              borderRadius: this.props.radius
            },
            pointer: {
              position: 'absolute',
              left: this.props.hsl.h * 100 / 360 + '%'
            },
            slider: {
              marginTop: '1px',
              width: '4px',
              borderRadius: '1px',
              height: '8px',
              boxShadow: '0 0 2px rgba(0, 0, 0, .6)',
              background: '#fff',
              transform: 'translateX(-2px)'
            }
          },
          'vertical': {
            pointer: {
              left: '0px',
              top: -(this.props.hsl.h * 100 / 360) + 100 + '%'
            }
          }
        }, { vertical: direction === 'vertical' });
  
        return _react2.default.createElement(
          'div',
          { style: styles.hue },
          _react2.default.createElement(
            'div',
            {
              className: 'hue-' + direction,
              style: styles.container,
              ref: function ref(container) {
                return _this2.container = container;
              },
              onMouseDown: this.handleMouseDown,
              onTouchMove: this.handleChange,
              onTouchStart: this.handleChange
            },
            _react2.default.createElement(
              'style',
              null,
              '\n            .hue-horizontal {\n              background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0\n                33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to right, #f00 0%, #ff0\n                17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n\n            .hue-vertical {\n              background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%,\n                #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to top, #f00 0%, #ff0 17%,\n                #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n          '
            ),
            _react2.default.createElement(
              'div',
              { style: styles.pointer },
              this.props.pointer ? _react2.default.createElement(this.props.pointer, this.props) : _react2.default.createElement('div', { style: styles.slider })
            )
          )
        );
      }
    }]);
  
    return Hue;
  }(react$2.PureComponent || react$2.Component);
  
  exports.default = Hue;
  });
  
  unwrapExports(Hue_1);
  var Hue_2 = Hue_1.Hue;
  
  var Raised_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Raised = undefined;
  
  
  
  var _react2 = _interopRequireDefault(react$2);
  
  
  
  var _propTypes2 = _interopRequireDefault(propTypes);
  
  
  
  var _reactcss2 = _interopRequireDefault(lib);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  var Raised = exports.Raised = function Raised(_ref) {
    var zDepth = _ref.zDepth,
        radius = _ref.radius,
        background = _ref.background,
        children = _ref.children;
  
    var styles = (0, _reactcss2.default)({
      'default': {
        wrap: {
          position: 'relative',
          display: 'inline-block'
        },
        content: {
          position: 'relative'
        },
        bg: {
          absolute: '0px 0px 0px 0px',
          boxShadow: '0 ' + zDepth + 'px ' + zDepth * 4 + 'px rgba(0,0,0,.24)',
          borderRadius: radius,
          background: background
        }
      },
      'zDepth-0': {
        bg: {
          boxShadow: 'none'
        }
      },
  
      'zDepth-1': {
        bg: {
          boxShadow: '0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16)'
        }
      },
      'zDepth-2': {
        bg: {
          boxShadow: '0 6px 20px rgba(0,0,0,.19), 0 8px 17px rgba(0,0,0,.2)'
        }
      },
      'zDepth-3': {
        bg: {
          boxShadow: '0 17px 50px rgba(0,0,0,.19), 0 12px 15px rgba(0,0,0,.24)'
        }
      },
      'zDepth-4': {
        bg: {
          boxShadow: '0 25px 55px rgba(0,0,0,.21), 0 16px 28px rgba(0,0,0,.22)'
        }
      },
      'zDepth-5': {
        bg: {
          boxShadow: '0 40px 77px rgba(0,0,0,.22), 0 27px 24px rgba(0,0,0,.2)'
        }
      },
      'square': {
        bg: {
          borderRadius: '0'
        }
      },
      'circle': {
        bg: {
          borderRadius: '50%'
        }
      }
    }, { 'zDepth-1': zDepth === 1 });
  
    return _react2.default.createElement(
      'div',
      { style: styles.wrap },
      _react2.default.createElement('div', { style: styles.bg }),
      _react2.default.createElement(
        'div',
        { style: styles.content },
        children
      )
    );
  };
  
  Raised.propTypes = {
    background: _propTypes2.default.string,
    zDepth: _propTypes2.default.oneOf([0, 1, 2, 3, 4, 5]),
    radius: _propTypes2.default.number
  };
  
  Raised.defaultProps = {
    background: '#fff',
    zDepth: 1,
    radius: 2
  };
  
  exports.default = Raised;
  });
  
  unwrapExports(Raised_1);
  var Raised_2 = Raised_1.Raised;
  
  /**
   * Gets the timestamp of the number of milliseconds that have elapsed since
   * the Unix epoch (1 January 1970 00:00:00 UTC).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Date
   * @returns {number} Returns the timestamp.
   * @example
   *
   * _.defer(function(stamp) {
   *   console.log(_.now() - stamp);
   * }, _.now());
   * // => Logs the number of milliseconds it took for the deferred invocation.
   */
  var now = function() {
    return _root.Date.now();
  };
  
  var now_1 = now;
  
  /** Used as references for various `Number` constants. */
  var NAN = 0 / 0;
  
  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g;
  
  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  
  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;
  
  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;
  
  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt;
  
  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol_1(value)) {
      return NAN;
    }
    if (isObject_1(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject_1(other) ? (other + '') : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return (isBinary || reIsOctal.test(value))
      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
      : (reIsBadHex.test(value) ? NAN : +value);
  }
  
  var toNumber_1 = toNumber;
  
  /** Error message constants. */
  var FUNC_ERROR_TEXT$2 = 'Expected a function';
  
  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;
  var nativeMin = Math.min;
  
  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked. The debounced function comes with a `cancel` method to cancel
   * delayed `func` invocations and a `flush` method to immediately invoke them.
   * Provide `options` to indicate whether `func` should be invoked on the
   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
   * with the last arguments provided to the debounced function. Subsequent
   * calls to the debounced function return the result of the last `func`
   * invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the debounced function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.debounce` and `_.throttle`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to debounce.
   * @param {number} [wait=0] The number of milliseconds to delay.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=false]
   *  Specify invoking on the leading edge of the timeout.
   * @param {number} [options.maxWait]
   *  The maximum time `func` is allowed to be delayed before it's invoked.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * // Avoid costly calculations while the window size is in flux.
   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
   *
   * // Invoke `sendMail` when clicked, debouncing subsequent calls.
   * jQuery(element).on('click', _.debounce(sendMail, 300, {
   *   'leading': true,
   *   'trailing': false
   * }));
   *
   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
   * var source = new EventSource('/stream');
   * jQuery(source).on('message', debounced);
   *
   * // Cancel the trailing debounced invocation.
   * jQuery(window).on('popstate', debounced.cancel);
   */
  function debounce$1(func, wait, options) {
    var lastArgs,
        lastThis,
        maxWait,
        result,
        timerId,
        lastCallTime,
        lastInvokeTime = 0,
        leading = false,
        maxing = false,
        trailing = true;
  
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$2);
    }
    wait = toNumber_1(wait) || 0;
    if (isObject_1(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax(toNumber_1(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
  
    function invokeFunc(time) {
      var args = lastArgs,
          thisArg = lastThis;
  
      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }
  
    function leadingEdge(time) {
      // Reset any `maxWait` timer.
      lastInvokeTime = time;
      // Start the timer for the trailing edge.
      timerId = setTimeout(timerExpired, wait);
      // Invoke the leading edge.
      return leading ? invokeFunc(time) : result;
    }
  
    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime,
          timeWaiting = wait - timeSinceLastCall;
  
      return maxing
        ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
        : timeWaiting;
    }
  
    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime;
  
      // Either this is the first call, activity has stopped and we're at the
      // trailing edge, the system time has gone backwards and we're treating
      // it as the trailing edge, or we've hit the `maxWait` limit.
      return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
        (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
    }
  
    function timerExpired() {
      var time = now_1();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      // Restart the timer.
      timerId = setTimeout(timerExpired, remainingWait(time));
    }
  
    function trailingEdge(time) {
      timerId = undefined;
  
      // Only invoke if we have `lastArgs` which means `func` has been
      // debounced at least once.
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = undefined;
      return result;
    }
  
    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }
  
    function flush() {
      return timerId === undefined ? result : trailingEdge(now_1());
    }
  
    function debounced() {
      var time = now_1(),
          isInvoking = shouldInvoke(time);
  
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;
  
      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          // Handle invocations in a tight loop.
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }
  
  var debounce_1 = debounce$1;
  
  /** Error message constants. */
  var FUNC_ERROR_TEXT$1 = 'Expected a function';
  
  /**
   * Creates a throttled function that only invokes `func` at most once per
   * every `wait` milliseconds. The throttled function comes with a `cancel`
   * method to cancel delayed `func` invocations and a `flush` method to
   * immediately invoke them. Provide `options` to indicate whether `func`
   * should be invoked on the leading and/or trailing edge of the `wait`
   * timeout. The `func` is invoked with the last arguments provided to the
   * throttled function. Subsequent calls to the throttled function return the
   * result of the last `func` invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the throttled function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.throttle` and `_.debounce`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to throttle.
   * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=true]
   *  Specify invoking on the leading edge of the timeout.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new throttled function.
   * @example
   *
   * // Avoid excessively updating the position while scrolling.
   * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
   *
   * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
   * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
   * jQuery(element).on('click', throttled);
   *
   * // Cancel the trailing throttled invocation.
   * jQuery(window).on('popstate', throttled.cancel);
   */
  function throttle$1(func, wait, options) {
    var leading = true,
        trailing = true;
  
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$1);
    }
    if (isObject_1(options)) {
      leading = 'leading' in options ? !!options.leading : leading;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    return debounce_1(func, wait, {
      'leading': leading,
      'maxWait': wait,
      'trailing': trailing
    });
  }
  
  var throttle_1 = throttle$1;
  
  var saturation = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var calculateChange = exports.calculateChange = function calculateChange(e, skip, props, container) {
    e.preventDefault();
  
    var _container$getBoundin = container.getBoundingClientRect(),
        containerWidth = _container$getBoundin.width,
        containerHeight = _container$getBoundin.height;
  
    var x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;
    var y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;
    var left = x - (container.getBoundingClientRect().left + window.pageXOffset);
    var top = y - (container.getBoundingClientRect().top + window.pageYOffset);
  
    if (left < 0) {
      left = 0;
    } else if (left > containerWidth) {
      left = containerWidth;
    } else if (top < 0) {
      top = 0;
    } else if (top > containerHeight) {
      top = containerHeight;
    }
  
    var saturation = left * 100 / containerWidth;
    var bright = -(top * 100 / containerHeight) + 100;
  
    return {
      h: props.hsl.h,
      s: saturation,
      v: bright,
      a: props.hsl.a,
      source: 'rgb'
    };
  };
  });
  
  unwrapExports(saturation);
  var saturation_1 = saturation.calculateChange;
  
  var Saturation_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Saturation = undefined;
  
  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
  
  
  
  var _react2 = _interopRequireDefault(react$2);
  
  
  
  var _reactcss2 = _interopRequireDefault(lib);
  
  
  
  var _throttle2 = _interopRequireDefault(throttle_1);
  
  
  
  var saturation$$1 = _interopRequireWildcard(saturation);
  
  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
  
  var Saturation = exports.Saturation = function (_ref) {
    _inherits(Saturation, _ref);
  
    function Saturation(props) {
      _classCallCheck(this, Saturation);
  
      var _this = _possibleConstructorReturn(this, (Saturation.__proto__ || Object.getPrototypeOf(Saturation)).call(this, props));
  
      _this.handleChange = function (e, skip) {
        _this.props.onChange && _this.throttle(_this.props.onChange, saturation$$1.calculateChange(e, skip, _this.props, _this.container), e);
      };
  
      _this.handleMouseDown = function (e) {
        _this.handleChange(e, true);
        window.addEventListener('mousemove', _this.handleChange);
        window.addEventListener('mouseup', _this.handleMouseUp);
      };
  
      _this.handleMouseUp = function () {
        _this.unbindEventListeners();
      };
  
      _this.throttle = (0, _throttle2.default)(function (fn, data, e) {
        fn(data, e);
      }, 50);
      return _this;
    }
  
    _createClass(Saturation, [{
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.unbindEventListeners();
      }
    }, {
      key: 'unbindEventListeners',
      value: function unbindEventListeners() {
        window.removeEventListener('mousemove', this.handleChange);
        window.removeEventListener('mouseup', this.handleMouseUp);
      }
    }, {
      key: 'render',
      value: function render() {
        var _this2 = this;
  
        var _ref2 = this.props.style || {},
            color = _ref2.color,
            white = _ref2.white,
            black = _ref2.black,
            pointer = _ref2.pointer,
            circle = _ref2.circle;
  
        var styles = (0, _reactcss2.default)({
          'default': {
            color: {
              absolute: '0px 0px 0px 0px',
              background: 'hsl(' + this.props.hsl.h + ',100%, 50%)',
              borderRadius: this.props.radius
            },
            white: {
              absolute: '0px 0px 0px 0px',
              borderRadius: this.props.radius
            },
            black: {
              absolute: '0px 0px 0px 0px',
              boxShadow: this.props.shadow,
              borderRadius: this.props.radius
            },
            pointer: {
              position: 'absolute',
              top: -(this.props.hsv.v * 100) + 100 + '%',
              left: this.props.hsv.s * 100 + '%',
              cursor: 'default'
            },
            circle: {
              width: '4px',
              height: '4px',
              boxShadow: '0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3),\n            0 0 1px 2px rgba(0,0,0,.4)',
              borderRadius: '50%',
              cursor: 'hand',
              transform: 'translate(-2px, -2px)'
            }
          },
          'custom': {
            color: color,
            white: white,
            black: black,
            pointer: pointer,
            circle: circle
          }
        }, { 'custom': !!this.props.style });
  
        return _react2.default.createElement(
          'div',
          {
            style: styles.color,
            ref: function ref(container) {
              return _this2.container = container;
            },
            onMouseDown: this.handleMouseDown,
            onTouchMove: this.handleChange,
            onTouchStart: this.handleChange
          },
          _react2.default.createElement(
            'style',
            null,
            '\n          .saturation-white {\n            background: -webkit-linear-gradient(to right, #fff, rgba(255,255,255,0));\n            background: linear-gradient(to right, #fff, rgba(255,255,255,0));\n          }\n          .saturation-black {\n            background: -webkit-linear-gradient(to top, #000, rgba(0,0,0,0));\n            background: linear-gradient(to top, #000, rgba(0,0,0,0));\n          }\n        '
          ),
          _react2.default.createElement(
            'div',
            { style: styles.white, className: 'saturation-white' },
            _react2.default.createElement('div', { style: styles.black, className: 'saturation-black' }),
            _react2.default.createElement(
              'div',
              { style: styles.pointer },
              this.props.pointer ? _react2.default.createElement(this.props.pointer, this.props) : _react2.default.createElement('div', { style: styles.circle })
            )
          )
        );
      }
    }]);
  
    return Saturation;
  }(react$2.PureComponent || react$2.Component);
  
  exports.default = Saturation;
  });
  
  unwrapExports(Saturation_1);
  var Saturation_2 = Saturation_1.Saturation;
  
  /**
   * Iterates over elements of `collection` and invokes `iteratee` for each element.
   * The iteratee is invoked with three arguments: (value, index|key, collection).
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * **Note:** As with other "Collections" methods, objects with a "length"
   * property are iterated like arrays. To avoid this behavior use `_.forIn`
   * or `_.forOwn` for object iteration.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @alias each
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   * @see _.forEachRight
   * @example
   *
   * _.forEach([1, 2], function(value) {
   *   console.log(value);
   * });
   * // => Logs `1` then `2`.
   *
   * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
   *   console.log(key);
   * });
   * // => Logs 'a' then 'b' (iteration order is not guaranteed).
   */
  function forEach$2(collection, iteratee) {
    var func = isArray_1(collection) ? _arrayEach : _baseEach;
    return func(collection, _castFunction(iteratee));
  }
  
  var forEach_1 = forEach$2;
  
  var each = forEach_1;
  
  var tinycolor = createCommonjsModule(function (module) {
  // TinyColor v1.4.1
  // https://github.com/bgrins/TinyColor
  // Brian Grinstead, MIT License
  
  (function(Math) {
  
  var trimLeft = /^\s+/,
      trimRight = /\s+$/,
      tinyCounter = 0,
      mathRound = Math.round,
      mathMin = Math.min,
      mathMax = Math.max,
      mathRandom = Math.random;
  
  function tinycolor (color, opts) {
  
      color = (color) ? color : '';
      opts = opts || { };
  
      // If input is already a tinycolor, return itself
      if (color instanceof tinycolor) {
         return color;
      }
      // If we are called as a function, call using new instead
      if (!(this instanceof tinycolor)) {
          return new tinycolor(color, opts);
      }
  
      var rgb = inputToRGB(color);
      this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100*this._a) / 100, this._format = opts.format || rgb.format;
      this._gradientType = opts.gradientType;
  
      // Don't let the range of [0,255] come back in [0,1].
      // Potentially lose a little bit of precision here, but will fix issues where
      // .5 gets interpreted as half of the total, instead of half of 1
      // If it was supposed to be 128, this was already taken care of by `inputToRgb`
      if (this._r < 1) { this._r = mathRound(this._r); }
      if (this._g < 1) { this._g = mathRound(this._g); }
      if (this._b < 1) { this._b = mathRound(this._b); }
  
      this._ok = rgb.ok;
      this._tc_id = tinyCounter++;
  }
  
  tinycolor.prototype = {
      isDark: function() {
          return this.getBrightness() < 128;
      },
      isLight: function() {
          return !this.isDark();
      },
      isValid: function() {
          return this._ok;
      },
      getOriginalInput: function() {
        return this._originalInput;
      },
      getFormat: function() {
          return this._format;
      },
      getAlpha: function() {
          return this._a;
      },
      getBrightness: function() {
          //http://www.w3.org/TR/AERT#color-contrast
          var rgb = this.toRgb();
          return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
      },
      getLuminance: function() {
          //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
          var rgb = this.toRgb();
          var RsRGB, GsRGB, BsRGB, R, G, B;
          RsRGB = rgb.r/255;
          GsRGB = rgb.g/255;
          BsRGB = rgb.b/255;
  
          if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}
          if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}
          if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}
          return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);
      },
      setAlpha: function(value) {
          this._a = boundAlpha(value);
          this._roundA = mathRound(100*this._a) / 100;
          return this;
      },
      toHsv: function() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
      },
      toHsvString: function() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
          return (this._a == 1) ?
            "hsv("  + h + ", " + s + "%, " + v + "%)" :
            "hsva(" + h + ", " + s + "%, " + v + "%, "+ this._roundA + ")";
      },
      toHsl: function() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
      },
      toHslString: function() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
          return (this._a == 1) ?
            "hsl("  + h + ", " + s + "%, " + l + "%)" :
            "hsla(" + h + ", " + s + "%, " + l + "%, "+ this._roundA + ")";
      },
      toHex: function(allow3Char) {
          return rgbToHex(this._r, this._g, this._b, allow3Char);
      },
      toHexString: function(allow3Char) {
          return '#' + this.toHex(allow3Char);
      },
      toHex8: function(allow4Char) {
          return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
      },
      toHex8String: function(allow4Char) {
          return '#' + this.toHex8(allow4Char);
      },
      toRgb: function() {
          return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
      },
      toRgbString: function() {
          return (this._a == 1) ?
            "rgb("  + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" :
            "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
      },
      toPercentageRgb: function() {
          return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
      },
      toPercentageRgbString: function() {
          return (this._a == 1) ?
            "rgb("  + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" :
            "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
      },
      toName: function() {
          if (this._a === 0) {
              return "transparent";
          }
  
          if (this._a < 1) {
              return false;
          }
  
          return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
      },
      toFilter: function(secondColor) {
          var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
          var secondHex8String = hex8String;
          var gradientType = this._gradientType ? "GradientType = 1, " : "";
  
          if (secondColor) {
              var s = tinycolor(secondColor);
              secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
          }
  
          return "progid:DXImageTransform.Microsoft.gradient("+gradientType+"startColorstr="+hex8String+",endColorstr="+secondHex8String+")";
      },
      toString: function(format) {
          var formatSet = !!format;
          format = format || this._format;
  
          var formattedString = false;
          var hasAlpha = this._a < 1 && this._a >= 0;
          var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
  
          if (needsAlphaFormat) {
              // Special case for "transparent", all other non-alpha formats
              // will return rgba when there is transparency.
              if (format === "name" && this._a === 0) {
                  return this.toName();
              }
              return this.toRgbString();
          }
          if (format === "rgb") {
              formattedString = this.toRgbString();
          }
          if (format === "prgb") {
              formattedString = this.toPercentageRgbString();
          }
          if (format === "hex" || format === "hex6") {
              formattedString = this.toHexString();
          }
          if (format === "hex3") {
              formattedString = this.toHexString(true);
          }
          if (format === "hex4") {
              formattedString = this.toHex8String(true);
          }
          if (format === "hex8") {
              formattedString = this.toHex8String();
          }
          if (format === "name") {
              formattedString = this.toName();
          }
          if (format === "hsl") {
              formattedString = this.toHslString();
          }
          if (format === "hsv") {
              formattedString = this.toHsvString();
          }
  
          return formattedString || this.toHexString();
      },
      clone: function() {
          return tinycolor(this.toString());
      },
  
      _applyModification: function(fn, args) {
          var color = fn.apply(null, [this].concat([].slice.call(args)));
          this._r = color._r;
          this._g = color._g;
          this._b = color._b;
          this.setAlpha(color._a);
          return this;
      },
      lighten: function() {
          return this._applyModification(lighten, arguments);
      },
      brighten: function() {
          return this._applyModification(brighten, arguments);
      },
      darken: function() {
          return this._applyModification(darken, arguments);
      },
      desaturate: function() {
          return this._applyModification(desaturate, arguments);
      },
      saturate: function() {
          return this._applyModification(saturate, arguments);
      },
      greyscale: function() {
          return this._applyModification(greyscale, arguments);
      },
      spin: function() {
          return this._applyModification(spin, arguments);
      },
  
      _applyCombination: function(fn, args) {
          return fn.apply(null, [this].concat([].slice.call(args)));
      },
      analogous: function() {
          return this._applyCombination(analogous, arguments);
      },
      complement: function() {
          return this._applyCombination(complement, arguments);
      },
      monochromatic: function() {
          return this._applyCombination(monochromatic, arguments);
      },
      splitcomplement: function() {
          return this._applyCombination(splitcomplement, arguments);
      },
      triad: function() {
          return this._applyCombination(triad, arguments);
      },
      tetrad: function() {
          return this._applyCombination(tetrad, arguments);
      }
  };
  
  // If input is an object, force 1 into "1.0" to handle ratios properly
  // String input requires "1.0" as input, so 1 will be treated as 1
  tinycolor.fromRatio = function(color, opts) {
      if (typeof color == "object") {
          var newColor = {};
          for (var i in color) {
              if (color.hasOwnProperty(i)) {
                  if (i === "a") {
                      newColor[i] = color[i];
                  }
                  else {
                      newColor[i] = convertToPercentage(color[i]);
                  }
              }
          }
          color = newColor;
      }
  
      return tinycolor(color, opts);
  };
  
  // Given a string or object, convert that input to RGB
  // Possible string inputs:
  //
  //     "red"
  //     "#f00" or "f00"
  //     "#ff0000" or "ff0000"
  //     "#ff000000" or "ff000000"
  //     "rgb 255 0 0" or "rgb (255, 0, 0)"
  //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
  //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
  //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
  //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
  //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
  //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
  //
  function inputToRGB(color) {
  
      var rgb = { r: 0, g: 0, b: 0 };
      var a = 1;
      var s = null;
      var v = null;
      var l = null;
      var ok = false;
      var format = false;
  
      if (typeof color == "string") {
          color = stringInputToObject(color);
      }
  
      if (typeof color == "object") {
          if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
              rgb = rgbToRgb(color.r, color.g, color.b);
              ok = true;
              format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
          }
          else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
              s = convertToPercentage(color.s);
              v = convertToPercentage(color.v);
              rgb = hsvToRgb(color.h, s, v);
              ok = true;
              format = "hsv";
          }
          else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
              s = convertToPercentage(color.s);
              l = convertToPercentage(color.l);
              rgb = hslToRgb(color.h, s, l);
              ok = true;
              format = "hsl";
          }
  
          if (color.hasOwnProperty("a")) {
              a = color.a;
          }
      }
  
      a = boundAlpha(a);
  
      return {
          ok: ok,
          format: color.format || format,
          r: mathMin(255, mathMax(rgb.r, 0)),
          g: mathMin(255, mathMax(rgb.g, 0)),
          b: mathMin(255, mathMax(rgb.b, 0)),
          a: a
      };
  }
  
  
  // Conversion Functions
  // --------------------
  
  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
  
  // `rgbToRgb`
  // Handle bounds / percentage checking to conform to CSS color spec
  // <http://www.w3.org/TR/css3-color/>
  // *Assumes:* r, g, b in [0, 255] or [0, 1]
  // *Returns:* { r, g, b } in [0, 255]
  function rgbToRgb(r, g, b){
      return {
          r: bound01(r, 255) * 255,
          g: bound01(g, 255) * 255,
          b: bound01(b, 255) * 255
      };
  }
  
  // `rgbToHsl`
  // Converts an RGB color value to HSL.
  // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
  // *Returns:* { h, s, l } in [0,1]
  function rgbToHsl(r, g, b) {
  
      r = bound01(r, 255);
      g = bound01(g, 255);
      b = bound01(b, 255);
  
      var max = mathMax(r, g, b), min = mathMin(r, g, b);
      var h, s, l = (max + min) / 2;
  
      if(max == min) {
          h = s = 0; // achromatic
      }
      else {
          var d = max - min;
          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
          switch(max) {
              case r: h = (g - b) / d + (g < b ? 6 : 0); break;
              case g: h = (b - r) / d + 2; break;
              case b: h = (r - g) / d + 4; break;
          }
  
          h /= 6;
      }
  
      return { h: h, s: s, l: l };
  }
  
  // `hslToRgb`
  // Converts an HSL color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]
  function hslToRgb(h, s, l) {
      var r, g, b;
  
      h = bound01(h, 360);
      s = bound01(s, 100);
      l = bound01(l, 100);
  
      function hue2rgb(p, q, t) {
          if(t < 0) t += 1;
          if(t > 1) t -= 1;
          if(t < 1/6) return p + (q - p) * 6 * t;
          if(t < 1/2) return q;
          if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
          return p;
      }
  
      if(s === 0) {
          r = g = b = l; // achromatic
      }
      else {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p = 2 * l - q;
          r = hue2rgb(p, q, h + 1/3);
          g = hue2rgb(p, q, h);
          b = hue2rgb(p, q, h - 1/3);
      }
  
      return { r: r * 255, g: g * 255, b: b * 255 };
  }
  
  // `rgbToHsv`
  // Converts an RGB color value to HSV
  // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
  // *Returns:* { h, s, v } in [0,1]
  function rgbToHsv(r, g, b) {
  
      r = bound01(r, 255);
      g = bound01(g, 255);
      b = bound01(b, 255);
  
      var max = mathMax(r, g, b), min = mathMin(r, g, b);
      var h, s, v = max;
  
      var d = max - min;
      s = max === 0 ? 0 : d / max;
  
      if(max == min) {
          h = 0; // achromatic
      }
      else {
          switch(max) {
              case r: h = (g - b) / d + (g < b ? 6 : 0); break;
              case g: h = (b - r) / d + 2; break;
              case b: h = (r - g) / d + 4; break;
          }
          h /= 6;
      }
      return { h: h, s: s, v: v };
  }
  
  // `hsvToRgb`
  // Converts an HSV color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]
   function hsvToRgb(h, s, v) {
  
      h = bound01(h, 360) * 6;
      s = bound01(s, 100);
      v = bound01(v, 100);
  
      var i = Math.floor(h),
          f = h - i,
          p = v * (1 - s),
          q = v * (1 - f * s),
          t = v * (1 - (1 - f) * s),
          mod = i % 6,
          r = [v, q, p, p, t, v][mod],
          g = [t, v, v, q, p, p][mod],
          b = [p, p, t, v, v, q][mod];
  
      return { r: r * 255, g: g * 255, b: b * 255 };
  }
  
  // `rgbToHex`
  // Converts an RGB color to hex
  // Assumes r, g, and b are contained in the set [0, 255]
  // Returns a 3 or 6 character hex
  function rgbToHex(r, g, b, allow3Char) {
  
      var hex = [
          pad2(mathRound(r).toString(16)),
          pad2(mathRound(g).toString(16)),
          pad2(mathRound(b).toString(16))
      ];
  
      // Return a 3 character hex if possible
      if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
      }
  
      return hex.join("");
  }
  
  // `rgbaToHex`
  // Converts an RGBA color plus alpha transparency to hex
  // Assumes r, g, b are contained in the set [0, 255] and
  // a in [0, 1]. Returns a 4 or 8 character rgba hex
  function rgbaToHex(r, g, b, a, allow4Char) {
  
      var hex = [
          pad2(mathRound(r).toString(16)),
          pad2(mathRound(g).toString(16)),
          pad2(mathRound(b).toString(16)),
          pad2(convertDecimalToHex(a))
      ];
  
      // Return a 4 character hex if possible
      if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
      }
  
      return hex.join("");
  }
  
  // `rgbaToArgbHex`
  // Converts an RGBA color to an ARGB Hex8 string
  // Rarely used, but required for "toFilter()"
  function rgbaToArgbHex(r, g, b, a) {
  
      var hex = [
          pad2(convertDecimalToHex(a)),
          pad2(mathRound(r).toString(16)),
          pad2(mathRound(g).toString(16)),
          pad2(mathRound(b).toString(16))
      ];
  
      return hex.join("");
  }
  
  // `equals`
  // Can be called with any tinycolor input
  tinycolor.equals = function (color1, color2) {
      if (!color1 || !color2) { return false; }
      return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
  };
  
  tinycolor.random = function() {
      return tinycolor.fromRatio({
          r: mathRandom(),
          g: mathRandom(),
          b: mathRandom()
      });
  };
  
  
  // Modification Functions
  // ----------------------
  // Thanks to less.js for some of the basics here
  // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>
  
  function desaturate(color, amount) {
      amount = (amount === 0) ? 0 : (amount || 10);
      var hsl = tinycolor(color).toHsl();
      hsl.s -= amount / 100;
      hsl.s = clamp01(hsl.s);
      return tinycolor(hsl);
  }
  
  function saturate(color, amount) {
      amount = (amount === 0) ? 0 : (amount || 10);
      var hsl = tinycolor(color).toHsl();
      hsl.s += amount / 100;
      hsl.s = clamp01(hsl.s);
      return tinycolor(hsl);
  }
  
  function greyscale(color) {
      return tinycolor(color).desaturate(100);
  }
  
  function lighten (color, amount) {
      amount = (amount === 0) ? 0 : (amount || 10);
      var hsl = tinycolor(color).toHsl();
      hsl.l += amount / 100;
      hsl.l = clamp01(hsl.l);
      return tinycolor(hsl);
  }
  
  function brighten(color, amount) {
      amount = (amount === 0) ? 0 : (amount || 10);
      var rgb = tinycolor(color).toRgb();
      rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));
      rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));
      rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));
      return tinycolor(rgb);
  }
  
  function darken (color, amount) {
      amount = (amount === 0) ? 0 : (amount || 10);
      var hsl = tinycolor(color).toHsl();
      hsl.l -= amount / 100;
      hsl.l = clamp01(hsl.l);
      return tinycolor(hsl);
  }
  
  // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
  // Values outside of this range will be wrapped into this range.
  function spin(color, amount) {
      var hsl = tinycolor(color).toHsl();
      var hue = (hsl.h + amount) % 360;
      hsl.h = hue < 0 ? 360 + hue : hue;
      return tinycolor(hsl);
  }
  
  // Combination Functions
  // ---------------------
  // Thanks to jQuery xColor for some of the ideas behind these
  // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>
  
  function complement(color) {
      var hsl = tinycolor(color).toHsl();
      hsl.h = (hsl.h + 180) % 360;
      return tinycolor(hsl);
  }
  
  function triad(color) {
      var hsl = tinycolor(color).toHsl();
      var h = hsl.h;
      return [
          tinycolor(color),
          tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),
          tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })
      ];
  }
  
  function tetrad(color) {
      var hsl = tinycolor(color).toHsl();
      var h = hsl.h;
      return [
          tinycolor(color),
          tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),
          tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),
          tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })
      ];
  }
  
  function splitcomplement(color) {
      var hsl = tinycolor(color).toHsl();
      var h = hsl.h;
      return [
          tinycolor(color),
          tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),
          tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})
      ];
  }
  
  function analogous(color, results, slices) {
      results = results || 6;
      slices = slices || 30;
  
      var hsl = tinycolor(color).toHsl();
      var part = 360 / slices;
      var ret = [tinycolor(color)];
  
      for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {
          hsl.h = (hsl.h + part) % 360;
          ret.push(tinycolor(hsl));
      }
      return ret;
  }
  
  function monochromatic(color, results) {
      results = results || 6;
      var hsv = tinycolor(color).toHsv();
      var h = hsv.h, s = hsv.s, v = hsv.v;
      var ret = [];
      var modification = 1 / results;
  
      while (results--) {
          ret.push(tinycolor({ h: h, s: s, v: v}));
          v = (v + modification) % 1;
      }
  
      return ret;
  }
  
  // Utility Functions
  // ---------------------
  
  tinycolor.mix = function(color1, color2, amount) {
      amount = (amount === 0) ? 0 : (amount || 50);
  
      var rgb1 = tinycolor(color1).toRgb();
      var rgb2 = tinycolor(color2).toRgb();
  
      var p = amount / 100;
  
      var rgba = {
          r: ((rgb2.r - rgb1.r) * p) + rgb1.r,
          g: ((rgb2.g - rgb1.g) * p) + rgb1.g,
          b: ((rgb2.b - rgb1.b) * p) + rgb1.b,
          a: ((rgb2.a - rgb1.a) * p) + rgb1.a
      };
  
      return tinycolor(rgba);
  };
  
  
  // Readability Functions
  // ---------------------
  // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)
  
  // `contrast`
  // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
  tinycolor.readability = function(color1, color2) {
      var c1 = tinycolor(color1);
      var c2 = tinycolor(color2);
      return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);
  };
  
  // `isReadable`
  // Ensure that foreground and background color combinations meet WCAG2 guidelines.
  // The third argument is an optional Object.
  //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
  //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
  // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.
  
  // *Example*
  //    tinycolor.isReadable("#000", "#111") => false
  //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
  tinycolor.isReadable = function(color1, color2, wcag2) {
      var readability = tinycolor.readability(color1, color2);
      var wcag2Parms, out;
  
      out = false;
  
      wcag2Parms = validateWCAG2Parms(wcag2);
      switch (wcag2Parms.level + wcag2Parms.size) {
          case "AAsmall":
          case "AAAlarge":
              out = readability >= 4.5;
              break;
          case "AAlarge":
              out = readability >= 3;
              break;
          case "AAAsmall":
              out = readability >= 7;
              break;
      }
      return out;
  
  };
  
  // `mostReadable`
  // Given a base color and a list of possible foreground or background
  // colors for that base, returns the most readable color.
  // Optionally returns Black or White if the most readable color is unreadable.
  // *Example*
  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
  tinycolor.mostReadable = function(baseColor, colorList, args) {
      var bestColor = null;
      var bestScore = 0;
      var readability;
      var includeFallbackColors, level, size;
      args = args || {};
      includeFallbackColors = args.includeFallbackColors ;
      level = args.level;
      size = args.size;
  
      for (var i= 0; i < colorList.length ; i++) {
          readability = tinycolor.readability(baseColor, colorList[i]);
          if (readability > bestScore) {
              bestScore = readability;
              bestColor = tinycolor(colorList[i]);
          }
      }
  
      if (tinycolor.isReadable(baseColor, bestColor, {"level":level,"size":size}) || !includeFallbackColors) {
          return bestColor;
      }
      else {
          args.includeFallbackColors=false;
          return tinycolor.mostReadable(baseColor,["#fff", "#000"],args);
      }
  };
  
  
  // Big List of Colors
  // ------------------
  // <http://www.w3.org/TR/css3-color/#svg-color>
  var names = tinycolor.names = {
      aliceblue: "f0f8ff",
      antiquewhite: "faebd7",
      aqua: "0ff",
      aquamarine: "7fffd4",
      azure: "f0ffff",
      beige: "f5f5dc",
      bisque: "ffe4c4",
      black: "000",
      blanchedalmond: "ffebcd",
      blue: "00f",
      blueviolet: "8a2be2",
      brown: "a52a2a",
      burlywood: "deb887",
      burntsienna: "ea7e5d",
      cadetblue: "5f9ea0",
      chartreuse: "7fff00",
      chocolate: "d2691e",
      coral: "ff7f50",
      cornflowerblue: "6495ed",
      cornsilk: "fff8dc",
      crimson: "dc143c",
      cyan: "0ff",
      darkblue: "00008b",
      darkcyan: "008b8b",
      darkgoldenrod: "b8860b",
      darkgray: "a9a9a9",
      darkgreen: "006400",
      darkgrey: "a9a9a9",
      darkkhaki: "bdb76b",
      darkmagenta: "8b008b",
      darkolivegreen: "556b2f",
      darkorange: "ff8c00",
      darkorchid: "9932cc",
      darkred: "8b0000",
      darksalmon: "e9967a",
      darkseagreen: "8fbc8f",
      darkslateblue: "483d8b",
      darkslategray: "2f4f4f",
      darkslategrey: "2f4f4f",
      darkturquoise: "00ced1",
      darkviolet: "9400d3",
      deeppink: "ff1493",
      deepskyblue: "00bfff",
      dimgray: "696969",
      dimgrey: "696969",
      dodgerblue: "1e90ff",
      firebrick: "b22222",
      floralwhite: "fffaf0",
      forestgreen: "228b22",
      fuchsia: "f0f",
      gainsboro: "dcdcdc",
      ghostwhite: "f8f8ff",
      gold: "ffd700",
      goldenrod: "daa520",
      gray: "808080",
      green: "008000",
      greenyellow: "adff2f",
      grey: "808080",
      honeydew: "f0fff0",
      hotpink: "ff69b4",
      indianred: "cd5c5c",
      indigo: "4b0082",
      ivory: "fffff0",
      khaki: "f0e68c",
      lavender: "e6e6fa",
      lavenderblush: "fff0f5",
      lawngreen: "7cfc00",
      lemonchiffon: "fffacd",
      lightblue: "add8e6",
      lightcoral: "f08080",
      lightcyan: "e0ffff",
      lightgoldenrodyellow: "fafad2",
      lightgray: "d3d3d3",
      lightgreen: "90ee90",
      lightgrey: "d3d3d3",
      lightpink: "ffb6c1",
      lightsalmon: "ffa07a",
      lightseagreen: "20b2aa",
      lightskyblue: "87cefa",
      lightslategray: "789",
      lightslategrey: "789",
      lightsteelblue: "b0c4de",
      lightyellow: "ffffe0",
      lime: "0f0",
      limegreen: "32cd32",
      linen: "faf0e6",
      magenta: "f0f",
      maroon: "800000",
      mediumaquamarine: "66cdaa",
      mediumblue: "0000cd",
      mediumorchid: "ba55d3",
      mediumpurple: "9370db",
      mediumseagreen: "3cb371",
      mediumslateblue: "7b68ee",
      mediumspringgreen: "00fa9a",
      mediumturquoise: "48d1cc",
      mediumvioletred: "c71585",
      midnightblue: "191970",
      mintcream: "f5fffa",
      mistyrose: "ffe4e1",
      moccasin: "ffe4b5",
      navajowhite: "ffdead",
      navy: "000080",
      oldlace: "fdf5e6",
      olive: "808000",
      olivedrab: "6b8e23",
      orange: "ffa500",
      orangered: "ff4500",
      orchid: "da70d6",
      palegoldenrod: "eee8aa",
      palegreen: "98fb98",
      paleturquoise: "afeeee",
      palevioletred: "db7093",
      papayawhip: "ffefd5",
      peachpuff: "ffdab9",
      peru: "cd853f",
      pink: "ffc0cb",
      plum: "dda0dd",
      powderblue: "b0e0e6",
      purple: "800080",
      rebeccapurple: "663399",
      red: "f00",
      rosybrown: "bc8f8f",
      royalblue: "4169e1",
      saddlebrown: "8b4513",
      salmon: "fa8072",
      sandybrown: "f4a460",
      seagreen: "2e8b57",
      seashell: "fff5ee",
      sienna: "a0522d",
      silver: "c0c0c0",
      skyblue: "87ceeb",
      slateblue: "6a5acd",
      slategray: "708090",
      slategrey: "708090",
      snow: "fffafa",
      springgreen: "00ff7f",
      steelblue: "4682b4",
      tan: "d2b48c",
      teal: "008080",
      thistle: "d8bfd8",
      tomato: "ff6347",
      turquoise: "40e0d0",
      violet: "ee82ee",
      wheat: "f5deb3",
      white: "fff",
      whitesmoke: "f5f5f5",
      yellow: "ff0",
      yellowgreen: "9acd32"
  };
  
  // Make it easy to access colors via `hexNames[hex]`
  var hexNames = tinycolor.hexNames = flip(names);
  
  
  // Utilities
  // ---------
  
  // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
  function flip(o) {
      var flipped = { };
      for (var i in o) {
          if (o.hasOwnProperty(i)) {
              flipped[o[i]] = i;
          }
      }
      return flipped;
  }
  
  // Return a valid alpha value [0,1] with all invalid values being set to 1
  function boundAlpha(a) {
      a = parseFloat(a);
  
      if (isNaN(a) || a < 0 || a > 1) {
          a = 1;
      }
  
      return a;
  }
  
  // Take input from [0, n] and return it as [0, 1]
  function bound01(n, max) {
      if (isOnePointZero(n)) { n = "100%"; }
  
      var processPercent = isPercentage(n);
      n = mathMin(max, mathMax(0, parseFloat(n)));
  
      // Automatically convert percentage into number
      if (processPercent) {
          n = parseInt(n * max, 10) / 100;
      }
  
      // Handle floating point rounding errors
      if ((Math.abs(n - max) < 0.000001)) {
          return 1;
      }
  
      // Convert into [0, 1] range if it isn't already
      return (n % max) / parseFloat(max);
  }
  
  // Force a number between 0 and 1
  function clamp01(val) {
      return mathMin(1, mathMax(0, val));
  }
  
  // Parse a base-16 hex value into a base-10 integer
  function parseIntFromHex(val) {
      return parseInt(val, 16);
  }
  
  // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
  // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
  function isOnePointZero(n) {
      return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
  }
  
  // Check to see if string passed in is a percentage
  function isPercentage(n) {
      return typeof n === "string" && n.indexOf('%') != -1;
  }
  
  // Force a hex value to have 2 characters
  function pad2(c) {
      return c.length == 1 ? '0' + c : '' + c;
  }
  
  // Replace a decimal with it's percentage value
  function convertToPercentage(n) {
      if (n <= 1) {
          n = (n * 100) + "%";
      }
  
      return n;
  }
  
  // Converts a decimal to a hex value
  function convertDecimalToHex(d) {
      return Math.round(parseFloat(d) * 255).toString(16);
  }
  // Converts a hex value to a decimal
  function convertHexToDecimal(h) {
      return (parseIntFromHex(h) / 255);
  }
  
  var matchers = (function() {
  
      // <http://www.w3.org/TR/css3-values/#integers>
      var CSS_INTEGER = "[-\\+]?\\d+%?";
  
      // <http://www.w3.org/TR/css3-values/#number-value>
      var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
  
      // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
      var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
  
      // Actual matching.
      // Parentheses and commas are optional, but not required.
      // Whitespace can take the place of commas or opening paren
      var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
      var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  
      return {
          CSS_UNIT: new RegExp(CSS_UNIT),
          rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
          rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
          hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
          hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
          hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
          hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
          hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
          hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
      };
  })();
  
  // `isValidCSSUnit`
  // Take in a single string / number and check to see if it looks like a CSS unit
  // (see `matchers` above for definition).
  function isValidCSSUnit(color) {
      return !!matchers.CSS_UNIT.exec(color);
  }
  
  // `stringInputToObject`
  // Permissive string parsing.  Take in a number of formats, and output an object
  // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
  function stringInputToObject(color) {
  
      color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();
      var named = false;
      if (names[color]) {
          color = names[color];
          named = true;
      }
      else if (color == 'transparent') {
          return { r: 0, g: 0, b: 0, a: 0, format: "name" };
      }
  
      // Try to match string input using regular expressions.
      // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
      // Just return an object and let the conversion functions handle that.
      // This way the result will be the same whether the tinycolor is initialized with string or object.
      var match;
      if ((match = matchers.rgb.exec(color))) {
          return { r: match[1], g: match[2], b: match[3] };
      }
      if ((match = matchers.rgba.exec(color))) {
          return { r: match[1], g: match[2], b: match[3], a: match[4] };
      }
      if ((match = matchers.hsl.exec(color))) {
          return { h: match[1], s: match[2], l: match[3] };
      }
      if ((match = matchers.hsla.exec(color))) {
          return { h: match[1], s: match[2], l: match[3], a: match[4] };
      }
      if ((match = matchers.hsv.exec(color))) {
          return { h: match[1], s: match[2], v: match[3] };
      }
      if ((match = matchers.hsva.exec(color))) {
          return { h: match[1], s: match[2], v: match[3], a: match[4] };
      }
      if ((match = matchers.hex8.exec(color))) {
          return {
              r: parseIntFromHex(match[1]),
              g: parseIntFromHex(match[2]),
              b: parseIntFromHex(match[3]),
              a: convertHexToDecimal(match[4]),
              format: named ? "name" : "hex8"
          };
      }
      if ((match = matchers.hex6.exec(color))) {
          return {
              r: parseIntFromHex(match[1]),
              g: parseIntFromHex(match[2]),
              b: parseIntFromHex(match[3]),
              format: named ? "name" : "hex"
          };
      }
      if ((match = matchers.hex4.exec(color))) {
          return {
              r: parseIntFromHex(match[1] + '' + match[1]),
              g: parseIntFromHex(match[2] + '' + match[2]),
              b: parseIntFromHex(match[3] + '' + match[3]),
              a: convertHexToDecimal(match[4] + '' + match[4]),
              format: named ? "name" : "hex8"
          };
      }
      if ((match = matchers.hex3.exec(color))) {
          return {
              r: parseIntFromHex(match[1] + '' + match[1]),
              g: parseIntFromHex(match[2] + '' + match[2]),
              b: parseIntFromHex(match[3] + '' + match[3]),
              format: named ? "name" : "hex"
          };
      }
  
      return false;
  }
  
  function validateWCAG2Parms(parms) {
      // return valid WCAG2 parms for isReadable.
      // If input parms are invalid, return {"level":"AA", "size":"small"}
      var level, size;
      parms = parms || {"level":"AA", "size":"small"};
      level = (parms.level || "AA").toUpperCase();
      size = (parms.size || "small").toLowerCase();
      if (level !== "AA" && level !== "AAA") {
          level = "AA";
      }
      if (size !== "small" && size !== "large") {
          size = "small";
      }
      return {"level":level, "size":size};
  }
  
  // Node: Export function
  if ('object' !== "undefined" && module.exports) {
      module.exports = tinycolor;
  }
  // AMD/requirejs: Define the module
  else if (typeof undefined === 'function' && undefined.amd) {
      undefined(function () {return tinycolor;});
  }
  // Browser: Expose to window
  else {
      window.tinycolor = tinycolor;
  }
  
  })(Math);
  });
  
  var color = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.red = undefined;
  
  
  
  var _each2 = _interopRequireDefault(each);
  
  
  
  var _tinycolor2 = _interopRequireDefault(tinycolor);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  exports.default = {
    simpleCheckForValidColor: function simpleCheckForValidColor(data) {
      var keysToCheck = ['r', 'g', 'b', 'a', 'h', 's', 'l', 'v'];
      var checked = 0;
      var passed = 0;
      (0, _each2.default)(keysToCheck, function (letter) {
        if (data[letter]) {
          checked += 1;
          if (!isNaN(data[letter])) {
            passed += 1;
          }
          if (letter === 's' || letter === 'l') {
            var percentPatt = /^\d+%$/;
            if (percentPatt.test(data[letter])) {
              passed += 1;
            }
          }
        }
      });
      return checked === passed ? data : false;
    },
    toState: function toState(data, oldHue) {
      var color = data.hex ? (0, _tinycolor2.default)(data.hex) : (0, _tinycolor2.default)(data);
      var hsl = color.toHsl();
      var hsv = color.toHsv();
      var rgb = color.toRgb();
      var hex = color.toHex();
      if (hsl.s === 0) {
        hsl.h = oldHue || 0;
        hsv.h = oldHue || 0;
      }
      var transparent = hex === '000000' && rgb.a === 0;
  
      return {
        hsl: hsl,
        hex: transparent ? 'transparent' : '#' + hex,
        rgb: rgb,
        hsv: hsv,
        oldHue: data.h || oldHue || hsl.h,
        source: data.source
      };
    },
    isValidHex: function isValidHex(hex) {
      // disable hex4 and hex8
      var lh = String(hex).charAt(0) === '#' ? 1 : 0;
      return hex.length !== 4 + lh && hex.length < 7 + lh && (0, _tinycolor2.default)(hex).isValid();
    },
    getContrastingColor: function getContrastingColor(data) {
      if (!data) {
        return '#fff';
      }
      var col = this.toState(data);
      if (col.hex === 'transparent') {
        return 'rgba(0,0,0,0.4)';
      }
      var yiq = (col.rgb.r * 299 + col.rgb.g * 587 + col.rgb.b * 114) / 1000;
      return yiq >= 128 ? '#000' : '#fff';
    }
  };
  var red = exports.red = {
    hsl: { a: 1, h: 0, l: 0.5, s: 1 },
    hex: '#ff0000',
    rgb: { r: 255, g: 0, b: 0, a: 1 },
    hsv: { h: 0, s: 1, v: 1, a: 1 }
  };
  });
  
  unwrapExports(color);
  var color_1 = color.red;
  
  var ColorWrap_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ColorWrap = undefined;
  
  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
  
  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
  
  
  
  var _react2 = _interopRequireDefault(react$2);
  
  
  
  var _debounce2 = _interopRequireDefault(debounce_1);
  
  
  
  var _color2 = _interopRequireDefault(color);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
  
  var ColorWrap = exports.ColorWrap = function ColorWrap(Picker) {
    var ColorPicker = function (_ref) {
      _inherits(ColorPicker, _ref);
  
      function ColorPicker(props) {
        _classCallCheck(this, ColorPicker);
  
        var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this));
  
        _this.handleChange = function (data, event) {
          var isValidColor = _color2.default.simpleCheckForValidColor(data);
          if (isValidColor) {
            var colors = _color2.default.toState(data, data.h || _this.state.oldHue);
            _this.setState(colors);
            _this.props.onChangeComplete && _this.debounce(_this.props.onChangeComplete, colors, event);
            _this.props.onChange && _this.props.onChange(colors, event);
          }
        };
  
        _this.handleSwatchHover = function (data, event) {
          var isValidColor = _color2.default.simpleCheckForValidColor(data);
          if (isValidColor) {
            var colors = _color2.default.toState(data, data.h || _this.state.oldHue);
            _this.setState(colors);
            _this.props.onSwatchHover && _this.props.onSwatchHover(colors, event);
          }
        };
  
        _this.state = _extends({}, _color2.default.toState(props.color, 0));
  
        _this.debounce = (0, _debounce2.default)(function (fn, data, event) {
          fn(data, event);
        }, 100);
        return _this;
      }
  
      _createClass(ColorPicker, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          this.setState(_extends({}, _color2.default.toState(nextProps.color, this.state.oldHue)));
        }
      }, {
        key: 'render',
        value: function render() {
          var optionalEvents = {};
          if (this.props.onSwatchHover) {
            optionalEvents.onSwatchHover = this.handleSwatchHover;
          }
  
          return _react2.default.createElement(Picker, _extends({}, this.props, this.state, {
            onChange: this.handleChange
          }, optionalEvents));
        }
      }]);
  
      return ColorPicker;
    }(react$2.PureComponent || react$2.Component);
  
    ColorPicker.propTypes = _extends({}, Picker.propTypes);
  
    ColorPicker.defaultProps = _extends({}, Picker.defaultProps, {
      color: {
        h: 250,
        s: 0.50,
        l: 0.20,
        a: 1
      }
    });
  
    return ColorPicker;
  };
  
  exports.default = ColorWrap;
  });
  
  unwrapExports(ColorWrap_1);
  var ColorWrap_2 = ColorWrap_1.ColorWrap;
  
  var interaction = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.handleFocus = undefined;
  
  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
  
  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
  
  
  
  var _react2 = _interopRequireDefault(react$2);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
  
  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable no-invalid-this */
  
  
  var handleFocus = exports.handleFocus = function handleFocus(Component) {
    var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'span';
    return function (_React$Component) {
      _inherits(Focus, _React$Component);
  
      function Focus() {
        var _ref;
  
        var _temp, _this, _ret;
  
        _classCallCheck(this, Focus);
  
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
  
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Focus.__proto__ || Object.getPrototypeOf(Focus)).call.apply(_ref, [this].concat(args))), _this), _this.state = { focus: false }, _this.handleFocus = function () {
          return _this.setState({ focus: true });
        }, _this.handleBlur = function () {
          return _this.setState({ focus: false });
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }
  
      _createClass(Focus, [{
        key: 'render',
        value: function render() {
          return _react2.default.createElement(
            Span,
            { onFocus: this.handleFocus, onBlur: this.handleBlur },
            _react2.default.createElement(Component, _extends({}, this.props, this.state))
          );
        }
      }]);
  
      return Focus;
    }(_react2.default.Component);
  };
  });
  
  unwrapExports(interaction);
  var interaction_1 = interaction.handleFocus;
  
  var Swatch_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Swatch = undefined;
  
  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
  
  
  
  var _react2 = _interopRequireDefault(react$2);
  
  
  
  var _reactcss2 = _interopRequireDefault(lib);
  
  
  
  
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  var ENTER = 13;
  
  var Swatch = exports.Swatch = function Swatch(_ref) {
    var color = _ref.color,
        style = _ref.style,
        _ref$onClick = _ref.onClick,
        onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,
        onHover = _ref.onHover,
        _ref$title = _ref.title,
        title = _ref$title === undefined ? color : _ref$title,
        children = _ref.children,
        focus = _ref.focus,
        _ref$focusStyle = _ref.focusStyle,
        focusStyle = _ref$focusStyle === undefined ? {} : _ref$focusStyle;
  
    var transparent = color === 'transparent';
    var styles = (0, _reactcss2.default)({
      default: {
        swatch: _extends({
          background: color,
          height: '100%',
          width: '100%',
          cursor: 'pointer',
          position: 'relative',
          outline: 'none'
        }, style, focus ? focusStyle : {})
      }
    });
  
    var handleClick = function handleClick(e) {
      return onClick(color, e);
    };
    var handleKeyDown = function handleKeyDown(e) {
      return e.keyCode === ENTER && onClick(color, e);
    };
    var handleHover = function handleHover(e) {
      return onHover(color, e);
    };
  
    var optionalEvents = {};
    if (onHover) {
      optionalEvents.onMouseOver = handleHover;
    }
  
    return _react2.default.createElement(
      'div',
      _extends({
        style: styles.swatch,
        onClick: handleClick,
        title: title,
        tabIndex: 0,
        onKeyDown: handleKeyDown
      }, optionalEvents),
      children,
      transparent && _react2.default.createElement(common.Checkboard, {
        borderRadius: styles.swatch.borderRadius,
        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,0.1)'
      })
    );
  };
  
  exports.default = (0, interaction.handleFocus)(Swatch);
  });
  
  unwrapExports(Swatch_1);
  var Swatch_2 = Swatch_1.Swatch;
  
  var common = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  
  
  
  Object.defineProperty(exports, 'Alpha', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(Alpha_1).default;
    }
  });
  
  
  
  Object.defineProperty(exports, 'Checkboard', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(Checkboard_1).default;
    }
  });
  
  
  
  Object.defineProperty(exports, 'EditableInput', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(EditableInput_1).default;
    }
  });
  
  
  
  Object.defineProperty(exports, 'Hue', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(Hue_1).default;
    }
  });
  
  
  
  Object.defineProperty(exports, 'Raised', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(Raised_1).default;
    }
  });
  
  
  
  Object.defineProperty(exports, 'Saturation', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(Saturation_1).default;
    }
  });
  
  
  
  Object.defineProperty(exports, 'ColorWrap', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(ColorWrap_1).default;
    }
  });
  
  
  
  Object.defineProperty(exports, 'Swatch', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(Swatch_1).default;
    }
  });
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  });
  
  unwrapExports(common);
  
  var SketchFields_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SketchFields = undefined;
  
  
  
  var _react2 = _interopRequireDefault(react$2);
  
  
  
  var _reactcss2 = _interopRequireDefault(lib);
  
  
  
  var _color2 = _interopRequireDefault(color);
  
  
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  /* eslint-disable no-param-reassign */
  
  var SketchFields = exports.SketchFields = function SketchFields(_ref) {
    var onChange = _ref.onChange,
        rgb = _ref.rgb,
        hsl = _ref.hsl,
        hex = _ref.hex,
        disableAlpha = _ref.disableAlpha;
  
    var styles = (0, _reactcss2.default)({
      'default': {
        fields: {
          display: 'flex',
          paddingTop: '4px'
        },
        single: {
          flex: '1',
          paddingLeft: '6px'
        },
        alpha: {
          flex: '1',
          paddingLeft: '6px'
        },
        double: {
          flex: '2'
        },
        input: {
          width: '80%',
          padding: '4px 10% 3px',
          border: 'none',
          boxShadow: 'inset 0 0 0 1px #ccc',
          fontSize: '11px'
        },
        label: {
          display: 'block',
          textAlign: 'center',
          fontSize: '11px',
          color: '#222',
          paddingTop: '3px',
          paddingBottom: '4px',
          textTransform: 'capitalize'
        }
      },
      'disableAlpha': {
        alpha: {
          display: 'none'
        }
      }
    }, { disableAlpha: disableAlpha });
  
    var handleChange = function handleChange(data, e) {
      if (data.hex) {
        _color2.default.isValidHex(data.hex) && onChange({
          hex: data.hex,
          source: 'hex'
        }, e);
      } else if (data.r || data.g || data.b) {
        onChange({
          r: data.r || rgb.r,
          g: data.g || rgb.g,
          b: data.b || rgb.b,
          a: rgb.a,
          source: 'rgb'
        }, e);
      } else if (data.a) {
        if (data.a < 0) {
          data.a = 0;
        } else if (data.a > 100) {
          data.a = 100;
        }
  
        data.a /= 100;
        onChange({
          h: hsl.h,
          s: hsl.s,
          l: hsl.l,
          a: data.a,
          source: 'rgb'
        }, e);
      }
    };
  
    return _react2.default.createElement(
      'div',
      { style: styles.fields, className: 'flexbox-fix' },
      _react2.default.createElement(
        'div',
        { style: styles.double },
        _react2.default.createElement(common.EditableInput, {
          style: { input: styles.input, label: styles.label },
          label: 'hex',
          value: hex.replace('#', ''),
          onChange: handleChange
        })
      ),
      _react2.default.createElement(
        'div',
        { style: styles.single },
        _react2.default.createElement(common.EditableInput, {
          style: { input: styles.input, label: styles.label },
          label: 'r',
          value: rgb.r,
          onChange: handleChange,
          dragLabel: 'true',
          dragMax: '255'
        })
      ),
      _react2.default.createElement(
        'div',
        { style: styles.single },
        _react2.default.createElement(common.EditableInput, {
          style: { input: styles.input, label: styles.label },
          label: 'g',
          value: rgb.g,
          onChange: handleChange,
          dragLabel: 'true',
          dragMax: '255'
        })
      ),
      _react2.default.createElement(
        'div',
        { style: styles.single },
        _react2.default.createElement(common.EditableInput, {
          style: { input: styles.input, label: styles.label },
          label: 'b',
          value: rgb.b,
          onChange: handleChange,
          dragLabel: 'true',
          dragMax: '255'
        })
      ),
      _react2.default.createElement(
        'div',
        { style: styles.alpha },
        _react2.default.createElement(common.EditableInput, {
          style: { input: styles.input, label: styles.label },
          label: 'a',
          value: Math.round(rgb.a * 100),
          onChange: handleChange,
          dragLabel: 'true',
          dragMax: '100'
        })
      )
    );
  };
  
  exports.default = SketchFields;
  });
  
  unwrapExports(SketchFields_1);
  var SketchFields_2 = SketchFields_1.SketchFields;
  
  var SketchPresetColors_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SketchPresetColors = undefined;
  
  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
  
  
  
  var _react2 = _interopRequireDefault(react$2);
  
  
  
  var _propTypes2 = _interopRequireDefault(propTypes);
  
  
  
  var _reactcss2 = _interopRequireDefault(lib);
  
  
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  var SketchPresetColors = exports.SketchPresetColors = function SketchPresetColors(_ref) {
    var colors = _ref.colors,
        _ref$onClick = _ref.onClick,
        onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,
        onSwatchHover = _ref.onSwatchHover;
  
    var styles = (0, _reactcss2.default)({
      'default': {
        colors: {
          margin: '0 -10px',
          padding: '10px 0 0 10px',
          borderTop: '1px solid #eee',
          display: 'flex',
          flexWrap: 'wrap',
          position: 'relative'
        },
        swatchWrap: {
          width: '16px',
          height: '16px',
          margin: '0 10px 10px 0'
        },
        swatch: {
          borderRadius: '3px',
          boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15)'
        }
      },
      'no-presets': {
        colors: {
          display: 'none'
        }
      }
    }, {
      'no-presets': !colors || !colors.length
    });
  
    var handleClick = function handleClick(hex, e) {
      onClick({
        hex: hex,
        source: 'hex'
      }, e);
    };
  
    return _react2.default.createElement(
      'div',
      { style: styles.colors, className: 'flexbox-fix' },
      colors.map(function (colorObjOrString) {
        var c = typeof colorObjOrString === 'string' ? { color: colorObjOrString } : colorObjOrString;
        var key = '' + c.color + (c.title || '');
        return _react2.default.createElement(
          'div',
          { key: key, style: styles.swatchWrap },
          _react2.default.createElement(common.Swatch, _extends({}, c, {
            style: styles.swatch,
            onClick: handleClick,
            onHover: onSwatchHover,
            focusStyle: {
              boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px ' + c.color
            }
          }))
        );
      })
    );
  };
  
  SketchPresetColors.propTypes = {
    colors: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
      color: _propTypes2.default.string,
      title: _propTypes2.default.string
    })])).isRequired
  };
  
  exports.default = SketchPresetColors;
  });
  
  unwrapExports(SketchPresetColors_1);
  var SketchPresetColors_2 = SketchPresetColors_1.SketchPresetColors;
  
  var Sketch_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Sketch = undefined;
  
  
  
  var _react2 = _interopRequireDefault(react$2);
  
  
  
  var _propTypes2 = _interopRequireDefault(propTypes);
  
  
  
  var _reactcss2 = _interopRequireDefault(lib);
  
  
  
  
  
  var _SketchFields2 = _interopRequireDefault(SketchFields_1);
  
  
  
  var _SketchPresetColors2 = _interopRequireDefault(SketchPresetColors_1);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  var Sketch = exports.Sketch = function Sketch(_ref) {
    var width = _ref.width,
        rgb = _ref.rgb,
        hex = _ref.hex,
        hsv = _ref.hsv,
        hsl = _ref.hsl,
        onChange = _ref.onChange,
        onSwatchHover = _ref.onSwatchHover,
        disableAlpha = _ref.disableAlpha,
        presetColors = _ref.presetColors,
        renderers = _ref.renderers,
        _ref$className = _ref.className,
        className = _ref$className === undefined ? '' : _ref$className;
  
    var styles = (0, _reactcss2.default)({
      'default': {
        picker: {
          width: width,
          padding: '10px 10px 0',
          boxSizing: 'initial',
          background: '#fff',
          borderRadius: '4px',
          boxShadow: '0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15)'
        },
        saturation: {
          width: '100%',
          paddingBottom: '75%',
          position: 'relative',
          overflow: 'hidden'
        },
        Saturation: {
          radius: '3px',
          shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'
        },
        controls: {
          display: 'flex'
        },
        sliders: {
          padding: '4px 0',
          flex: '1'
        },
        color: {
          width: '24px',
          height: '24px',
          position: 'relative',
          marginTop: '4px',
          marginLeft: '4px',
          borderRadius: '3px'
        },
        activeColor: {
          absolute: '0px 0px 0px 0px',
          borderRadius: '2px',
          background: 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + rgb.a + ')',
          boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'
        },
        hue: {
          position: 'relative',
          height: '10px',
          overflow: 'hidden'
        },
        Hue: {
          radius: '2px',
          shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'
        },
  
        alpha: {
          position: 'relative',
          height: '10px',
          marginTop: '4px',
          overflow: 'hidden'
        },
        Alpha: {
          radius: '2px',
          shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'
        }
      },
      'disableAlpha': {
        color: {
          height: '10px'
        },
        hue: {
          height: '10px'
        },
        alpha: {
          display: 'none'
        }
      }
    }, { disableAlpha: disableAlpha });
  
    return _react2.default.createElement(
      'div',
      { style: styles.picker, className: 'sketch-picker ' + className },
      _react2.default.createElement(
        'div',
        { style: styles.saturation },
        _react2.default.createElement(common.Saturation, {
          style: styles.Saturation,
          hsl: hsl,
          hsv: hsv,
          onChange: onChange
        })
      ),
      _react2.default.createElement(
        'div',
        { style: styles.controls, className: 'flexbox-fix' },
        _react2.default.createElement(
          'div',
          { style: styles.sliders },
          _react2.default.createElement(
            'div',
            { style: styles.hue },
            _react2.default.createElement(common.Hue, {
              style: styles.Hue,
              hsl: hsl,
              onChange: onChange
            })
          ),
          _react2.default.createElement(
            'div',
            { style: styles.alpha },
            _react2.default.createElement(common.Alpha, {
              style: styles.Alpha,
              rgb: rgb,
              hsl: hsl,
              renderers: renderers,
              onChange: onChange
            })
          )
        ),
        _react2.default.createElement(
          'div',
          { style: styles.color },
          _react2.default.createElement(common.Checkboard, null),
          _react2.default.createElement('div', { style: styles.activeColor })
        )
      ),
      _react2.default.createElement(_SketchFields2.default, {
        rgb: rgb,
        hsl: hsl,
        hex: hex,
        onChange: onChange,
        disableAlpha: disableAlpha
      }),
      _react2.default.createElement(_SketchPresetColors2.default, {
        colors: presetColors,
        onClick: onChange,
        onSwatchHover: onSwatchHover
      })
    );
  };
  
  Sketch.propTypes = {
    disableAlpha: _propTypes2.default.bool,
    width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
  };
  
  Sketch.defaultProps = {
    disableAlpha: false,
    width: 200,
    presetColors: ['#D0021B', '#F5A623', '#F8E71C', '#8B572A', '#7ED321', '#417505', '#BD10E0', '#9013FE', '#4A90E2', '#50E3C2', '#B8E986', '#000000', '#4A4A4A', '#9B9B9B', '#FFFFFF']
  };
  
  exports.default = (0, common.ColorWrap)(Sketch);
  });
  
  var Sketch = unwrapExports(Sketch_1);
  var Sketch_2 = Sketch_1.Sketch;
  
  function make$10(color, onChange, children) {
    return wrapJsForReason(Sketch, {
                color: fromOption(color),
                onChange: fromOption(onChange)
              }, children);
  }
  
  var Sketch$1 = /* module */[/* make */make$10];
  
  
  /* ReasonReact Not a pure module */
  
  var component$4 = reducerComponent("PickColorComponent");
  
  function reducer$2(param, action, state) {
    if (action) {
      _1(param[0], state[/* colorHex */0]);
      return /* Update */__(0, [/* record */[
                  /* colorHex */_1(param[1], /* () */0),
                  /* isShowColorPick */false
                ]]);
    } else {
      return /* Update */__(0, [/* record */[
                  /* colorHex */state[/* colorHex */0],
                  /* isShowColorPick */true
                ]]);
    }
  }
  
  function render$19(label, changeColorFunc, param) {
    var send = param[/* send */3];
    var state = param[/* state */1];
    var match = state[/* isShowColorPick */1];
    return react_3$1("article", {
                className: "wonder-material-color"
              }, react_3$1("div", {
                    className: ""
                  }, react_3$1("span", {
                        className: ""
                      }, textEl(label)), react_3$1("span", {
                        className: ""
                      }, textEl(state[/* colorHex */0])), react_3$1("button", {
                        className: "",
                        onClick: (function () {
                            return _1(send, /* ShowColorPick */0);
                          })
                      }, textEl("pick color")), match ? react_3$1("div", {
                          className: "color-pick-content"
                        }, react_3$1("div", {
                              className: "color-pick-item"
                            }, element(undefined, undefined, Sketch$1[/* make */0](state[/* colorHex */0], (function (value, _) {
                                        return _1(changeColorFunc, value);
                                      }), /* array */[]))), react_3$1("div", {
                              className: "color-pick-bg",
                              onClick: (function () {
                                  return _1(send, /* HideColorPick */1);
                                })
                            })) : null));
  }
  
  function make$9(label, getColorFunc, changeColorFunc, closeColorPickFunc, _) {
    var partial_arg = /* tuple */[
      closeColorPickFunc,
      getColorFunc
    ];
    return /* record */[
            /* debugName */component$4[/* debugName */0],
            /* reactClassInternal */component$4[/* reactClassInternal */1],
            /* handedOffState */component$4[/* handedOffState */2],
            /* willReceiveProps */component$4[/* willReceiveProps */3],
            /* didMount */component$4[/* didMount */4],
            /* didUpdate */component$4[/* didUpdate */5],
            /* willUnmount */component$4[/* willUnmount */6],
            /* willUpdate */component$4[/* willUpdate */7],
            /* shouldUpdate */component$4[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$19(label, changeColorFunc, self);
              }),
            /* initialState */(function () {
                return /* record */[
                        /* colorHex */_1(getColorFunc, /* () */0),
                        /* isShowColorPick */false
                      ];
              }),
            /* retainedProps */component$4[/* retainedProps */11],
            /* reducer */(function (param, param$1) {
                return reducer$2(partial_arg, param, param$1);
              }),
            /* subscriptions */component$4[/* subscriptions */13],
            /* jsElementWrapped */component$4[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function addGameObject(createGameObjectFunc) {
    var match = _2(createGameObjectFunc, undefined, getEditEngineState(/* () */0));
    var editGameObject = match[2];
    setEditEngineState(loopBody(0, addSceneChild(editGameObject, initGameObject(editGameObject, match[1]))));
    var match$1 = _2(createGameObjectFunc, getState(/* () */0), getRunEngineState(/* () */0));
    var runGameObject = match$1[2];
    var editorState = match$1[0];
    setRunEngineState(loopBody(0, addSceneChild(runGameObject, initGameObject(runGameObject, match$1[1]))));
    if (editorState !== undefined) {
      setState(editorState);
    }
    return runGameObject;
  }
  
  
  /* StateLogicService-WonderEditor Not a pure module */
  
  function unsafeGetSceneGraphDataFromStore(store) {
    return unsafeGet$3(store[/* sceneTreeState */3][/* sceneGraphData */0]);
  }
  
  function getUpdateComponentTypeArr(store) {
    return store[/* updateState */4][/* componentTypeArr */0];
  }
  
  function shouldComponentUpdate(componentType, updateComponentTypeArr) {
    if (updateComponentTypeArr.includes(componentType)) {
      return true;
    } else {
      return updateComponentTypeArr.includes(/* All */0);
    }
  }
  
  
  /* OptionService-WonderEditor Not a pure module */
  
  function storeHistoryStateWithCopiedEngineState(store, param) {
    return setHistoryState(storeCopiedEngineHistoryState(store, /* tuple */[
                    param[0],
                    param[1],
                    param[2]
                  ], getHistoryState(/* () */0)));
  }
  
  function storeHistoryStateWithNoCopyEngineState(store, param) {
    return setHistoryState(storeHistoryState(store, /* tuple */[
                    param[0],
                    param[1],
                    param[2]
                  ], getHistoryState(/* () */0)));
  }
  
  
  /* AllStateData-WonderEditor Not a pure module */
  
  function MakeEventHandler$1(EventItem) {
    var pushUndoStackWithNoCopyEngineState = function (reduxTuple, prepareTuple, dataTuple) {
      storeHistoryStateWithNoCopyEngineState(reduxTuple[0], getStateForHistory(/* () */0));
      return _3(EventItem[/* handleSelfLogic */0], reduxTuple, prepareTuple, dataTuple);
    };
    var pushUndoStackWithCopiedEngineState = function (reduxTuple, prepareTuple, dataTuple) {
      var match = _3(EventItem[/* setUndoValueToCopiedEngineState */1], reduxTuple, prepareTuple, dataTuple);
      return storeHistoryStateWithCopiedEngineState(reduxTuple[0], /* tuple */[
                  getState(/* () */0),
                  match[0],
                  match[1]
                ]);
    };
    return /* module */[
            /* pushUndoStackWithNoCopyEngineState */pushUndoStackWithNoCopyEngineState,
            /* pushUndoStackWithCopiedEngineState */pushUndoStackWithCopiedEngineState
          ];
  }
  
  
  /* StoreHistoryUtils-WonderEditor Not a pure module */
  
  function getFlag() {
    return /* SceneTree */0;
  }
  
  function isFlag(startFlag) {
    if (startFlag !== undefined) {
      return startFlag === /* SceneTree */0;
    } else {
      return false;
    }
  }
  
  function _isDragedGameObjectBeTargetGameObjectParent(targetGameObject, dragedGameObject, engineState) {
    var _targetTransform = getTransformComponent$1(targetGameObject, engineState);
    var dragedTransform = getTransformComponent$1(dragedGameObject, engineState);
    var engineState$1 = engineState;
    while(true) {
      var targetTransform = _targetTransform;
      var match = getParent$1(targetTransform, engineState$1);
      if (match !== undefined) {
        var match$1 = match === dragedTransform;
        if (match$1) {
          return true;
        } else {
          _targetTransform = match;
          continue ;
        }
      } else {
        return false;
      }
    }
  }
  
  function _isTargetGameObjectBeRemovedGameObjectParent(dragedGameObject, targetGameObject, engineState) {
    var match = getParent$1(getTransformComponent$1(dragedGameObject, engineState), engineState);
    if (match !== undefined) {
      var match$1 = match === getTransformComponent$1(targetGameObject, engineState);
      if (match$1) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }
  
  function isGameObjectRelationError(targetGameObject, dragedGameObject, param) {
    var engineState = param[1];
    var match = targetGameObject === dragedGameObject;
    if (match) {
      return true;
    } else {
      var match$1 = _isDragedGameObjectBeTargetGameObjectParent(targetGameObject, dragedGameObject, engineState);
      if (match$1) {
        return true;
      } else {
        return _isTargetGameObjectBeRemovedGameObjectParent(dragedGameObject, targetGameObject, engineState);
      }
    }
  }
  
  function _buildTreeNode(gameObject, engineState) {
    return /* record */[
            /* name */unsafeGetGameObjectName(gameObject, engineState),
            /* uid */gameObject,
            /* children : array */[]
          ];
  }
  
  function _buildSceneGraphData(gameObject, engineState) {
    var _buildSceneGraphDataRec = function (gameObject, treeNode, engineState) {
      var match = hasChildren(gameObject, engineState);
      if (match) {
        return reduceOneParam((function (treeNode, child) {
                      return /* record */[
                              /* name */treeNode[/* name */0],
                              /* uid */treeNode[/* uid */1],
                              /* children */push$2(_buildSceneGraphDataRec(child, _buildTreeNode(child, engineState), engineState), treeNode[/* children */2].slice())
                            ];
                    }), treeNode, getChildren(gameObject, engineState));
      } else {
        return treeNode;
      }
    };
    return _buildSceneGraphDataRec(gameObject, _buildTreeNode(gameObject, engineState), engineState);
  }
  
  function getSceneGraphDataFromEngine(param) {
    var engineState = param[1];
    return /* array */[_buildSceneGraphData(getSceneGameObject(engineState), engineState)];
  }
  
  function renameSceneGraphData(targetUid, newName, sceneGraphArray) {
    return sceneGraphArray.map((function (treeNode) {
                  var match = treeNode[/* uid */1] === targetUid;
                  if (match) {
                    return /* record */[
                            /* name */newName,
                            /* uid */treeNode[/* uid */1],
                            /* children */treeNode[/* children */2]
                          ];
                  } else {
                    return /* record */[
                            /* name */treeNode[/* name */0],
                            /* uid */treeNode[/* uid */1],
                            /* children */renameSceneGraphData(targetUid, newName, treeNode[/* children */2])
                          ];
                  }
                }));
  }
  
  function buildSceneGraphDataWithNewGameObject(newGameObject, oldSceneGraphData, engineState) {
    var scene = getFirst(oldSceneGraphData);
    return ensureCheck((function (sceneGraphArray) {
                  return test(buildAssertMessage("the draged scene graph data == scene data from engine", "not"), (function () {
                                return assertTrue(caml_equal(getStateToGetData(getSceneGraphDataFromEngine), sceneGraphArray));
                              }));
                }), getStateIsDebug(/* () */0), /* array */[/* record */[
                  /* name */scene[/* name */0],
                  /* uid */scene[/* uid */1],
                  /* children */push$2(_buildTreeNode(newGameObject, engineState), scene[/* children */2].slice())
                ]]);
  }
  
  function _checkDragedTreeNodeShouldExist(param) {
    var dragedTreeNode = param[1];
    requireCheck((function () {
            return test(buildAssertMessage("dragedTreeNode should exist", "not"), (function () {
                          return assertTrue(isSome(dragedTreeNode));
                        }));
          }), getStateIsDebug(/* () */0));
    return /* tuple */[
            param[0],
            unsafeGet$3(dragedTreeNode)
          ];
  }
  
  function removeDragedTreeNode(dragedUid, sceneGraphArray) {
    var _iterateSceneGraph = function (dragedUid, sceneGraphArray, newSceneGraphArray, dragedTreeNode) {
      return reduceOneParam((function (param, treeNode) {
                    var newSceneGraphArray = param[0];
                    var match = treeNode[/* uid */1] === dragedUid;
                    if (match) {
                      return /* tuple */[
                              newSceneGraphArray,
                              treeNode
                            ];
                    } else {
                      var match$1 = _iterateSceneGraph(dragedUid, treeNode[/* children */2], /* array */[], param[1]);
                      return /* tuple */[
                              push$2(/* record */[
                                    /* name */treeNode[/* name */0],
                                    /* uid */treeNode[/* uid */1],
                                    /* children */match$1[0]
                                  ], newSceneGraphArray),
                              match$1[1]
                            ];
                    }
                  }), /* tuple */[
                  newSceneGraphArray,
                  dragedTreeNode
                ], sceneGraphArray);
    };
    return _checkDragedTreeNodeShouldExist(_iterateSceneGraph(dragedUid, sceneGraphArray, /* array */[], undefined));
  }
  
  function dragedTreeNodeToTargetTreeNode(targetUid, param) {
    var dragedTreeNode = param[1];
    return param[0].map((function (treeNode) {
                  var children = treeNode[/* children */2];
                  var match = treeNode[/* uid */1] === targetUid;
                  if (match) {
                    return /* record */[
                            /* name */treeNode[/* name */0],
                            /* uid */treeNode[/* uid */1],
                            /* children */push$2(dragedTreeNode, children.slice())
                          ];
                  } else {
                    return /* record */[
                            /* name */treeNode[/* name */0],
                            /* uid */treeNode[/* uid */1],
                            /* children */dragedTreeNodeToTargetTreeNode(targetUid, /* tuple */[
                                  children,
                                  dragedTreeNode
                                ])
                          ];
                  }
                }));
  }
  
  function getDragedSceneGraphData(targetUid, dragedUid, sceneGraphArray) {
    return ensureCheck((function (dragedSceneGraph) {
                  return test(buildAssertMessage("the draged scene graph data == scene data from engine", "not"), (function () {
                                return assertTrue(caml_equal(getStateToGetData(getSceneGraphDataFromEngine), dragedSceneGraph));
                              }));
                }), getStateIsDebug(/* () */0), dragedTreeNodeToTargetTreeNode(targetUid, removeDragedTreeNode(dragedUid, sceneGraphArray)));
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function handleSelfLogic$1(_, _$1, _$2) {
    return /* () */0;
  }
  
  function setUndoValueToCopiedEngineState$1(_, _$1, _$2) {
    return /* tuple */[
            getEditEngineState(/* () */0),
            getRunEngineState(/* () */0)
          ];
  }
  
  var EmptyEventHandler = /* module */[
    /* handleSelfLogic */handleSelfLogic$1,
    /* setUndoValueToCopiedEngineState */setUndoValueToCopiedEngineState$1
  ];
  
  
  /* StateLogicService-WonderEditor Not a pure module */
  
  var setUndoValueToCopiedEngineState = EmptyEventHandler[1];
  
  function handleSelfLogic(param, type_, _) {
    var dispatchFunc = param[1];
    var newGameObject;
    switch (type_) {
      case "box" : 
          newGameObject = addGameObject(createBox);
          break;
      case "emptyGameObject" : 
          newGameObject = addGameObject(createEmptyGameObject);
          break;
      default:
        newGameObject = fatal(buildFatalMessage("addGameObject", "specific type:" + (String(type_) + " should exist"), "", "", "type:" + (String(type_) + "")));
    }
    var partial_arg = unsafeGetSceneGraphDataFromStore(param[0]);
    _1(dispatchFunc, [
          SceneTreeAction,
          /* SetSceneGraph */[getEngineStateToGetData((function (param) {
                    return buildSceneGraphDataWithNewGameObject(newGameObject, partial_arg, param);
                  }))]
        ]);
    _1(dispatchFunc, [
          UpdateAction,
          /* Update */[/* array */[/* SceneTree */3]]
        ]);
    return /* () */0;
  }
  
  var MakeEventHandler = MakeEventHandler$1([
        handleSelfLogic,
        setUndoValueToCopiedEngineState
      ]);
  
  
  /* MakeEventHandler Not a pure module */
  
  function disposeCurrentSceneTreeNode$1(currentTreeNode) {
    var _iterateSceneGraphRemove = function (removedTreeNodeArr) {
      removedTreeNodeArr.forEach((function (param) {
              getAndSetEngineStateWithDiff(/* array */[/* record */[
                      /* arguments : array */[param[/* uid */1]],
                      /* type_ : GameObject */0
                    ]], disposeGameObjectKeepOrder);
              return _iterateSceneGraphRemove(param[/* children */2]);
            }));
      return /* () */0;
    };
    _iterateSceneGraphRemove(/* array */[currentTreeNode]);
    return getAndSetEditorState(clearCurrentSceneTreeNode);
  }
  
  
  /* StateLogicService-WonderEditor Not a pure module */
  
  function checkEditAndRunMaterialWithDiff(param, type_, editEngineState, runEngineState) {
    var runMaterial = param[1];
    var editMaterial = param[0];
    requireCheck((function () {
            return test(buildAssertMessage("editMateral and runMaterial diff should == materialType diff value", "not"), (function () {
                          var diffValue = getEditEngineComponent$1(type_, unsafeGetDiffMap(getState(/* () */0)));
                          return Operators[/* = */0](editMaterial - runMaterial | 0, diffValue);
                        }));
          }), getStateIsDebug(/* () */0));
    return /* tuple */[
            runMaterial,
            editEngineState,
            runEngineState
          ];
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function createLightMaterial$1(editEngineState, runEngineState) {
    var match = create$68(editEngineState);
    var match$1 = create$68(runEngineState);
    return checkEditAndRunMaterialWithDiff(/* tuple */[
                match[1],
                match$1[1]
              ], /* LightMaterial */4, match[0], match$1[0]);
  }
  
  function disposeLightMaterial(gameObject, material, param) {
    return handleFuncWithDiff(/* array */[
                /* record */[
                  /* arguments : array */[gameObject],
                  /* type_ : GameObject */0
                ],
                /* record */[
                  /* arguments : array */[material],
                  /* type_ : LightMaterial */4
                ]
              ], disposeLightMaterialComponent, /* tuple */[
                param[0],
                param[1]
              ]);
  }
  
  function addLightMaterial(gameObject, material, param) {
    return handleFuncWithDiff(/* array */[
                /* record */[
                  /* arguments : array */[gameObject],
                  /* type_ : GameObject */0
                ],
                /* record */[
                  /* arguments : array */[material],
                  /* type_ : LightMaterial */4
                ]
              ], addLightMaterialComponent$1, /* tuple */[
                param[0],
                param[1]
              ]);
  }
  
  function setLightMaterialColor(color, material, param) {
    return handleFuncWithDiff(/* array */[/* record */[
                  /* arguments : array */[material],
                  /* type_ : LightMaterial */4
                ]], (function (param, param$1) {
                  return setLightMaterialDiffuseColor$1(color, param, param$1);
                }), /* tuple */[
                param[0],
                param[1]
              ]);
  }
  
  function setLightMaterialMapToEngineState(mapId, newMaterial, engineStateTuple) {
    return handleFuncWithDiff(/* array */[
                /* record */[
                  /* arguments : array */[mapId],
                  /* type_ : Texture */8
                ],
                /* record */[
                  /* arguments : array */[newMaterial],
                  /* type_ : LightMaterial */4
                ]
              ], setLightMaterialDiffuseMap$1, engineStateTuple);
  }
  
  function reInitAllMaterials() {
    var runEngineState = getRunEngineState(/* () */0);
    setRunEngineState(reInitMaterials$1(getAllLightMaterials(getSceneGameObject(runEngineState), runEngineState), runEngineState));
    var editEngineState = getEditEngineState(/* () */0);
    return setEditEngineState(reInitMaterials$1(getAllLightMaterials(getSceneGameObject(editEngineState), editEngineState), editEngineState));
  }
  
  
  /* MaterialService-WonderEditor Not a pure module */
  
  var setUndoValueToCopiedEngineState$2 = EmptyEventHandler[1];
  
  function _checkSceneGraphDataAndDispatch(dispatchFunc, newSceneGraphArr) {
    requireCheck((function () {
            return test(buildAssertMessage("the newSceneGraphArr should equal the sceneGraph from engine", "not"), (function () {
                          return assertTrue(caml_equal(getStateToGetData(getSceneGraphDataFromEngine), newSceneGraphArr));
                        }));
          }), getStateIsDebug(/* () */0));
    _1(dispatchFunc, [
          SceneTreeAction,
          /* SetSceneGraph */[newSceneGraphArr]
        ]);
    _1(dispatchFunc, [
          UpdateAction,
          /* Update */[/* array */[
              /* Inspector */1,
              /* SceneTree */3
            ]]
        ]);
    return /* () */0;
  }
  
  function _getRemovedSceneGraphData(sceneGraphArr) {
    var match = getEditorState(getCurrentSceneTreeNode);
    if (match !== undefined) {
      var gameObject = match;
      var match$1 = getEngineStateToGetData((function (param) {
              return hasCameraComponent(gameObject, param);
            }));
      if (match$1) {
        var match$2 = doesSceneHasRemoveableCamera(/* () */0);
        if (match$2) {
          var match$3 = removeDragedTreeNode(gameObject, sceneGraphArr);
          return /* tuple */[
                  match$3[0],
                  match$3[1]
                ];
        } else {
          warn("can\'t remove last camera");
          return /* tuple */[
                  sceneGraphArr,
                  undefined
                ];
        }
      } else {
        var match$4 = removeDragedTreeNode(gameObject, sceneGraphArr);
        return /* tuple */[
                match$4[0],
                match$4[1]
              ];
      }
    } else {
      error(buildErrorMessage("disposeCurrentSceneTreeNode", "current gameObject should exist, but actual is None", "", "set current gameObject", ""));
      return /* tuple */[
              sceneGraphArr,
              undefined
            ];
    }
  }
  
  function _hasLightComponent(removedTreeNode) {
    var runEngineState = getRunEngineState(/* () */0);
    var _iterateJudge = function (result, removedTreeNodeArr) {
      if (result) {
        return result;
      } else {
        return reduceOneParam((function (result, param) {
                      if (result) {
                        return result;
                      } else {
                        var uid = param[/* uid */1];
                        return _iterateJudge(hasDirectionLightComponent$1(uid, runEngineState) || hasPointLightComponent$1(uid, runEngineState), param[/* children */2]);
                      }
                    }), result, removedTreeNodeArr);
      }
    };
    return _iterateJudge(false, /* array */[removedTreeNode]);
  }
  
  function handleSelfLogic$2(param, _, _$1) {
    var sceneGraphArr = unsafeGetSceneGraphDataFromStore(param[0]);
    var match = _getRemovedSceneGraphData(sceneGraphArr);
    var removedTreeNode = match[1];
    if (removedTreeNode !== undefined) {
      var removedTreeNode$1 = removedTreeNode;
      var hasLightComponent = _hasLightComponent(removedTreeNode$1);
      disposeCurrentSceneTreeNode$1(removedTreeNode$1);
      refreshEditAndRunEngineState(/* () */0);
      if (hasLightComponent) {
        reInitAllMaterials(/* () */0);
      }
      refreshEditAndRunEngineState(/* () */0);
    }
    return _checkSceneGraphDataAndDispatch(param[1], match[0]);
  }
  
  var MakeEventHandler$2 = MakeEventHandler$1([
        handleSelfLogic$2,
        setUndoValueToCopiedEngineState$2
      ]);
  
  
  /* MakeEventHandler Not a pure module */
  
  function setUndoValueToCopiedEngineState$3(_, _$1, value) {
    return /* tuple */[
            setAmbientLightColor$2(convert16HexToRGBArr(value), deepCopyForRestore$11(getEditEngineState(/* () */0))),
            setAmbientLightColor$2(convert16HexToRGBArr(value), deepCopyForRestore$11(getRunEngineState(/* () */0)))
          ];
  }
  
  var CustomEventHandler_000 = /* handleSelfLogic */EmptyEventHandler[0];
  
  var CustomEventHandler$2 = /* module */[
    CustomEventHandler_000,
    /* setUndoValueToCopiedEngineState */setUndoValueToCopiedEngineState$3
  ];
  
  var MakeEventHandler$3 = MakeEventHandler$1(CustomEventHandler$2);
  
  
  /* MakeEventHandler Not a pure module */
  
  var addGameObjectByType = MakeEventHandler[/* pushUndoStackWithNoCopyEngineState */0];
  
  var disposeCurrentSceneTreeNode = MakeEventHandler$2[/* pushUndoStackWithNoCopyEngineState */0];
  
  function buildOperateHistoryComponent(store, dispatchFunc) {
    return react_3$1("div", {
                className: "header-item"
              }, react_3$1("div", {
                    className: "component-item"
                  }, react_3$1("button", {
                        onClick: (function () {
                            return getAndRefreshStateForHistory((function (param) {
                                          return undoHistoryState(store, dispatchFunc, param);
                                        }));
                          })
                      }, textEl("undo"))), react_3$1("div", {
                    className: "component-item"
                  }, react_3$1("button", {
                        onClick: (function () {
                            return getAndRefreshStateForHistory((function (param) {
                                          return redoHistoryState(store, dispatchFunc, param);
                                        }));
                          })
                      }, textEl("redo"))));
  }
  
  function buildOperateGameObjectComponent(store, dispatchFunc) {
    return react_3$1("div", {
                className: "header-item"
              }, react_3$1("div", {
                    className: "component-item"
                  }, react_3$1("button", {
                        onClick: (function () {
                            return _3(addGameObjectByType, /* tuple */[
                                        store,
                                        dispatchFunc
                                      ], "box", /* () */0);
                          })
                      }, textEl("add box"))), react_3$1("div", {
                    className: "component-item"
                  }, react_3$1("button", {
                        disabled: isGameObjectNotRemoveable(getEditorState(getCurrentSceneTreeNode)),
                        onClick: (function () {
                            return _3(disposeCurrentSceneTreeNode, /* tuple */[
                                        store,
                                        dispatchFunc
                                      ], /* () */0, /* () */0);
                          })
                      }, textEl("dispose"))));
  }
  
  function buildOperateExtensionComponent() {
    return react_3$1("div", {
                className: "header-item"
              }, react_3$1("div", {
                    className: "component-item"
                  }, element(undefined, undefined, make$4("show Input", (function (value) {
                              return setExtension("userExtension", value);
                            }), /* array */[]))));
  }
  
  function buildOperateControllerComponent(store, dispatchFunc) {
    return react_3$1("div", {
                className: "header-item"
              }, react_3$1("div", {
                    className: "component-item"
                  }, element(undefined, undefined, make$3("run", (function (param) {
                              return run(store, param);
                            }), "stop", (function (param) {
                              return stop(dispatchFunc, param);
                            }), getEditorState(getIsRun), /* array */[]))));
  }
  
  function changeColor(value) {
    var partial_arg = getEngineColorRgbArr(convertColorObjToColorPickType(value));
    return getAndRefreshEditAndRunEngineState((function (param) {
                  return setAmbientLightColor$2(partial_arg, param);
                }));
  }
  
  function getColor() {
    return getHexString(getEngineStateToGetData(getAmbientLightColor$2));
  }
  
  var closeColorPick = MakeEventHandler$3[/* pushUndoStackWithCopiedEngineState */1];
  
  function buildAmbientLightComponent(store, dispatchFunc) {
    return react_3$1("div", {
                className: "header-item"
              }, react_3$1("div", {
                    className: "component-item"
                  }, element(getRandomKey(/* () */0), undefined, make$9("ambient color : ", getColor, changeColor, _2(closeColorPick, /* tuple */[
                                store,
                                dispatchFunc
                              ], /* () */0), /* array */[]))));
  }
  
  function buildEmptyGameObject(store, dispatchFunc) {
    return react_3$1("div", {
                className: "header-item"
              }, react_3$1("div", {
                    className: "component-item"
                  }, react_3$1("button", {
                        onClick: (function () {
                            return _3(addGameObjectByType, /* tuple */[
                                        store,
                                        dispatchFunc
                                      ], "emptyGameObject", /* () */0);
                          })
                      }, textEl("add empty gameObject"))));
  }
  
  var component$1 = statelessComponent("Header");
  
  function render$1(store, dispatchFunc, _) {
    return react_3$1("article", {
                key: "header",
                className: "wonder-header-component"
              }, buildOperateHistoryComponent(store, dispatchFunc), buildOperateGameObjectComponent(store, dispatchFunc), buildOperateExtensionComponent(/* () */0), buildOperateControllerComponent(store, dispatchFunc), buildAmbientLightComponent(store, dispatchFunc), buildEmptyGameObject(store, dispatchFunc));
  }
  
  function make$2(store, dispatchFunc, _) {
    return /* record */[
            /* debugName */component$1[/* debugName */0],
            /* reactClassInternal */component$1[/* reactClassInternal */1],
            /* handedOffState */component$1[/* handedOffState */2],
            /* willReceiveProps */component$1[/* willReceiveProps */3],
            /* didMount */component$1[/* didMount */4],
            /* didUpdate */component$1[/* didUpdate */5],
            /* willUnmount */component$1[/* willUnmount */6],
            /* willUpdate */component$1[/* willUpdate */7],
            /* shouldUpdate */component$1[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$1(store, dispatchFunc, self);
              }),
            /* initialState */component$1[/* initialState */10],
            /* retainedProps */component$1[/* retainedProps */11],
            /* reducer */component$1[/* reducer */12],
            /* subscriptions */component$1[/* subscriptions */13],
            /* jsElementWrapped */component$1[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function createArcballCameraController(state) {
    var match = create$21(state[/* arcballCameraControllerRecord */26]);
    var newrecord = caml_array_dup(state);
    return /* tuple */[
            (newrecord[/* arcballCameraControllerRecord */26] = match[0], newrecord),
            match[1]
          ];
  }
  
  function unsafeGetArcballCameraControllerDistance$1(cameraController, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(cameraController, isAlive$15, state[/* arcballCameraControllerRecord */26]);
          }), getIsDebug(stateData));
    return unsafeGetDistance(cameraController, state[/* arcballCameraControllerRecord */26]);
  }
  
  function setArcballCameraControllerDistance$1(cameraController, value, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* arcballCameraControllerRecord */26] = setDistance(cameraController, value, state[/* arcballCameraControllerRecord */26]);
    return newrecord;
  }
  
  function unsafeGetArcballCameraControllerMinDistance$1(cameraController, state) {
    return unsafeGetMinDistance(cameraController, state[/* arcballCameraControllerRecord */26]);
  }
  
  function setArcballCameraControllerMinDistance$1(cameraController, value, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* arcballCameraControllerRecord */26] = setMinDistance(cameraController, value, state[/* arcballCameraControllerRecord */26]);
    return newrecord;
  }
  
  function setArcballCameraControllerTheta$1(cameraController, value, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* arcballCameraControllerRecord */26] = setTheta(cameraController, value, state[/* arcballCameraControllerRecord */26]);
    return newrecord;
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  function setArcballCameraControllerDistance(value, component, state) {
    return setArcballCameraControllerDistance$1(component, value, state);
  }
  
  function setArcballCameraControllerMinDistance(value, component, state) {
    return setArcballCameraControllerMinDistance$1(component, value, state);
  }
  
  var create$75 = createArcballCameraController;
  
  var unsafeGetArcballCameraControllerDistance = unsafeGetArcballCameraControllerDistance$1;
  
  var unsafeGetArcballCameraControllerMinDistance = unsafeGetArcballCameraControllerMinDistance$1;
  
  var setArcballCameraControllerTheta = setArcballCameraControllerTheta$1;
  
  
  /* ArcballCameraControllerAPI-Wonderjs Not a pure module */
  
  function createBasicMaterial(state) {
    return create$19(state);
  }
  
  function getBasicMaterialColor(material, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(material, isAlive$10, getRecord$1(state));
          }), getIsDebug(stateData));
    return getColor$8(material, state);
  }
  
  function setBasicMaterialColor(material, color, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(material, isAlive$10, getRecord$1(state));
          }), getIsDebug(stateData));
    return setColor$3(material, color, state);
  }
  
  function setBasicMaterialMap(material, texture, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(material, isAlive$10, getRecord$1(state));
          }), getIsDebug(stateData));
    return setMap(material, texture, state);
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  function setColor$6(color, material, engineState) {
    return setBasicMaterialColor(material, color, engineState);
  }
  
  function setMap$3(map, material, engineState) {
    return setBasicMaterialMap(material, map, engineState);
  }
  
  var create$77 = createBasicMaterial;
  
  var getColor$11 = getBasicMaterialColor;
  
  var getMap$3 = getMap;
  
  
  /* BasicMaterialAPI-Wonderjs Not a pure module */
  
  function _generateGridPlanePoints(_param, _param$1, _vertices, _indices) {
    while(true) {
      var param = _param$1;
      var param$1 = _param;
      var indices = _indices;
      var vertices = _vertices;
      var index = param[1];
      var num = param[0];
      var y = param$1[2];
      var step = param$1[1];
      var size = param$1[0];
      var match = num > size;
      if (match) {
        return /* tuple */[
                vertices,
                indices
              ];
      } else {
        _indices = pushMany$1(/* array */[
              index,
              index + 1 | 0,
              index + 2 | 0,
              index + 3 | 0
            ], indices);
        _vertices = pushMany$1(/* array */[
              num,
              y,
              size
            ], pushMany$1(/* array */[
                  num,
                  y,
                  -size
                ], pushMany$1(/* array */[
                      size,
                      y,
                      num
                    ], pushMany$1(/* array */[
                          -size,
                          y,
                          num
                        ], vertices))));
        _param$1 = /* tuple */[
          num + step,
          index + 4 | 0
        ];
        _param = /* tuple */[
          size,
          step,
          y
        ];
        continue ;
      }
    }
  }
  
  function createGridPlaneGameObject(param, color, param$1) {
    var size = param[0];
    var match = createGameObject$1(/* tuple */[
          param$1[0],
          param$1[1]
        ]);
    var match$1 = match[1];
    var gameObject = match$1[1];
    var match$2 = createCustomGeometry(match$1[0]);
    var customGeometry = match$2[1];
    var match$3 = _generateGridPlanePoints(/* tuple */[
          size,
          param[1],
          param[2]
        ], /* tuple */[
          -size,
          0
        ], /* array */[], /* array */[]);
    var engineState = setCustomGeometryIndices(customGeometry, new Uint16Array(match$3[1]), setCustomGeometryVertices(customGeometry, new Float32Array(match$3[0]), match$2[0]));
    var engineState$1 = setGameObjectName("gridPlane", gameObject, engineState);
    var match$4 = create$77(engineState$1);
    var material = match$4[1];
    var engineState$2 = setColor$6(color, material, match$4[0]);
    var match$5 = create$67(engineState$2);
    var meshRenderer = match$5[1];
    var engineState$3 = setDrawMode$2(meshRenderer, /* Lines */1, match$5[0]);
    var match$6 = addMeshRendererComponent$2(gameObject, meshRenderer, addCustomGeometryComponent$1(gameObject, customGeometry, addBasicMaterialComponent$2(gameObject, material, /* tuple */[
                  match[0],
                  engineState$3
                ])));
    return /* tuple */[
            match$6[0],
            match$6[1],
            gameObject
          ];
  }
  
  
  /* ArrayService-WonderEditor Not a pure module */
  
  function prepareSpecificGameObjectsForEditEngineState(editorState, engineStateForEdit) {
    var match = createGridPlaneGameObject(/* tuple */[
          200,
          6,
          0
        ], /* array */[
          0.9,
          0.9,
          0.9
        ], /* tuple */[
          editorState,
          engineStateForEdit
        ]);
    var match$1 = createCamera(match[0], match[1]);
    var camera = match$1[2];
    var match$2 = createBox(match$1[0], match$1[1]);
    var box = match$2[2];
    var match$3 = create$75(match$2[1]);
    var arcballController = match$3[1];
    var engineState = match$3[0];
    var engineState$1 = setCurrentCameraGameObject$1(camera, addSceneChild(camera, addSceneChild(match[2], setArcballCameraControllerTheta(arcballController, Math.PI / 5, setArcballCameraControllerDistance(200, arcballController, setLightMaterialDiffuseColor$1(/* array */[
                              1,
                              0.1,
                              0.1
                            ], getLightMaterialComponent$1(box, engineState), setLocalPosition(/* tuple */[
                                  20,
                                  0,
                                  100
                                ], getTransformComponent$1(camera, engineState), engineState)))))));
    var match$4 = addArcballCameraControllerComponent$2(camera, arcballController, /* tuple */[
          match$2[0],
          engineState$1
        ]);
    return /* tuple */[
            match$4[0],
            match$4[1],
            box
          ];
  }
  
  function computeDiffValue(editorState, engineState) {
    var diffMap = set("texture", 0, set("arcballCameraController", 1, set("pointLight", 0, set("directionLight", 0, set("lightMaterial", 1, set("basicMaterial", 1, set("meshRenderer", 3, set("transform", 3, set("gameObject", 3, createEmpty$1(/* () */0))))))))));
    return /* tuple */[
            setDiffMap(diffMap, editorState),
            engineState
          ];
  }
  
  function createDefaultScene(editorState, engineState) {
    var match = createDefaultSceneGameObjects(editorState, engineState, createCamera);
    var directionLight = match[5];
    var camera = match[2];
    var engineState$1 = match[1];
    return /* tuple */[
            match[0],
            addSceneChild(directionLight, addSceneChild(match[4], addSceneChild(match[3], addSceneChild(camera, setTransformLocalEulerAngles(/* tuple */[
                                  45,
                                  0,
                                  0
                                ], getTransformComponent$1(directionLight, engineState$1), setLocalPosition(/* tuple */[
                                      30,
                                      4,
                                      10
                                    ], getTransformComponent$1(directionLight, engineState$1), setLocalPosition(/* tuple */[
                                          0,
                                          0,
                                          40
                                        ], getTransformComponent$1(camera, engineState$1), engineState$1))))))),
            camera
          ];
  }
  
  
  /* HashMapService-WonderCommonlib Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function load$2(customTextureSourceDataArr, record) {
    return load((customTextureSourceDataArr == null) ? /* array */[] : customTextureSourceDataArr, fetch$1, record);
  }
  
  function addFont$1(fntFilePath, bitmapFilePath, record) {
    return addFont(/* tuple */[
                fntFilePath,
                bitmapFilePath
              ], record);
  }
  
  
  /* FetchService-WonderImgui Not a pure module */
  
  function createFetchJsonStream(filePath, fetchFunc) {
    return fromPromise(_1(fetchFunc, filePath).then((function (prim) {
                      return prim.json();
                    })));
  }
  
  
  /* most Not a pure module */
  
  /* No side effect */
  
  /* No side effect */
  
  /* Log-WonderLog Not a pure module */
  
  /* most Not a pure module */
  
  /* Log-WonderLog Not a pure module */
  
  /* ArrayService-Wonderjs Not a pure module */
  
  /* SceneAPI-Wonderjs Not a pure module */
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  function unsafeGetName$4(texture, state) {
    return unsafeGetName$1(texture, getRecord$4(state)[/* nameMap */15]);
  }
  
  function setName$4(texture, name, state) {
    var record = getRecord$4(state);
    var newrecord = caml_array_dup(state);
    newrecord[/* basicSourceTextureRecord */19] = /* record */[
      /* index */record[/* index */0],
      /* wrapSs */record[/* wrapSs */1],
      /* wrapTs */record[/* wrapTs */2],
      /* magFilters */record[/* magFilters */3],
      /* minFilters */record[/* minFilters */4],
      /* formats */record[/* formats */5],
      /* types */record[/* types */6],
      /* isNeedUpdates */record[/* isNeedUpdates */7],
      /* flipYs */record[/* flipYs */8],
      /* sourceMap */record[/* sourceMap */9],
      /* glTextureMap */record[/* glTextureMap */10],
      /* bindTextureUnitCacheMap */record[/* bindTextureUnitCacheMap */11],
      /* disposedIndexArray */record[/* disposedIndexArray */12],
      /* needAddedSourceArray */record[/* needAddedSourceArray */13],
      /* needInitedTextureIndexArray */record[/* needInitedTextureIndexArray */14],
      /* nameMap */setName$1(texture, name, record[/* nameMap */15])
    ];
    return newrecord;
  }
  
  
  /* NameService-Wonderjs Not a pure module */
  
  /* Log-WonderLog Not a pure module */
  
  /* OptionService-Wonderjs Not a pure module */
  
  /* AssembleCommon-Wonderjs Not a pure module */
  
  /* most Not a pure module */
  
  /* most Not a pure module */
  
  function join$2(pathArr) {
    return pathArr.join("");
  }
  
  
  /* win32SplitPath Not a pure module */
  
  // Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
  
  function _isInteger(value) {
    if (isFinite(value)) {
      return Math.floor(value) === value;
    } else {
      return false;
    }
  }
  
  var DecodeError = create("Json_decode-WonderBsJson.DecodeError");
  
  function bool(json) {
    if (typeof json === "boolean") {
      return json;
    } else {
      throw [
            DecodeError,
            "Expected boolean, got " + JSON.stringify(json)
          ];
    }
  }
  
  function $$float(json) {
    if (typeof json === "number") {
      return json;
    } else {
      throw [
            DecodeError,
            "Expected number, got " + JSON.stringify(json)
          ];
    }
  }
  
  function $$int$2(json) {
    var f = $$float(json);
    if (_isInteger(f)) {
      return f;
    } else {
      throw [
            DecodeError,
            "Expected integer, got " + JSON.stringify(json)
          ];
    }
  }
  
  function string$2(json) {
    if (typeof json === "string") {
      return json;
    } else {
      throw [
            DecodeError,
            "Expected string, got " + JSON.stringify(json)
          ];
    }
  }
  
  function array(decode, json) {
    if (Array.isArray(json)) {
      var length = json.length;
      var target = new Array(length);
      for(var i = 0 ,i_finish = length - 1 | 0; i <= i_finish; ++i){
        var value;
        try {
          value = _1(decode, json[i]);
        }
        catch (raw_exn){
          var exn = internalToOCamlException(raw_exn);
          if (exn[0] === DecodeError) {
            throw [
                  DecodeError,
                  exn[1] + ("\n\tin array at index " + String(i))
                ];
          } else {
            throw exn;
          }
        }
        target[i] = value;
      }
      return target;
    } else {
      throw [
            DecodeError,
            "Expected array, got " + JSON.stringify(json)
          ];
    }
  }
  
  function field(key, decode, json) {
    if (typeof json === "object" && !Array.isArray(json) && json !== null) {
      var match = json[key];
      if (match !== undefined) {
        try {
          return _1(decode, match);
        }
        catch (raw_exn){
          var exn = internalToOCamlException(raw_exn);
          if (exn[0] === DecodeError) {
            throw [
                  DecodeError,
                  exn[1] + ("\n\tat field '" + (key + "'"))
                ];
          } else {
            throw exn;
          }
        }
      } else {
        throw [
              DecodeError,
              "Expected field \'" + (String(key) + "\'")
            ];
      }
    } else {
      throw [
            DecodeError,
            "Expected object, got " + JSON.stringify(json)
          ];
    }
  }
  
  function optional(decode, json) {
    try {
      return some(_1(decode, json));
    }
    catch (raw_exn){
      var exn = internalToOCamlException(raw_exn);
      if (exn[0] === DecodeError) {
        return undefined;
      } else {
        throw exn;
      }
    }
  }
  
  
  /* No side effect */
  
  function convertToRecord(setting) {
    return /* record */[
            /* canvasId */optional((function (param) {
                    return field("canvas_id", string$2, param);
                  }), setting),
            /* memory */optional((function (param) {
                    return field("memory", (function (json) {
                                  return /* record */[
                                          /* maxDisposeCount */field("max_dispose_count", $$int$2, json),
                                          /* maxTypeArrayPoolSize */field("max_type_array_pool_size", $$int$2, json),
                                          /* maxBigTypeArrayPoolSize */field("max_big_type_array_pool_size", $$int$2, json)
                                        ];
                                }), param);
                  }), setting),
            /* buffer */optional((function (param) {
                    return field("buffer", (function (json) {
                                  return /* record */[
                                          /* customGeometryPointCount */field("custom_geometry_point_count", $$int$2, json),
                                          /* customGeometryCount */field("custom_geometry_count", $$int$2, json),
                                          /* transformCount */field("transform_count", $$int$2, json),
                                          /* basicMaterialCount */field("basic_material_count", $$int$2, json),
                                          /* lightMaterialCount */field("light_material_count", $$int$2, json),
                                          /* textureCountPerMaterial */field("texture_count_per_material", $$int$2, json),
                                          /* basicSourceTextureCount */field("basic_source_texture_count", $$int$2, json),
                                          /* arrayBufferViewSourceTextureCount */field("arrayBuffer_view_source_texture_count", $$int$2, json),
                                          /* meshRendererCount */field("meshRenderer_count", $$int$2, json),
                                          /* instanceBuffer */field("instance_buffer", (function (json) {
                                                  return /* record */[
                                                          /* sourceInstanceCount */field("sourceInstance_count", $$int$2, json),
                                                          /* objectInstanceCountPerSourceInstance */field("objectInstance_count_per_source_instance", $$int$2, json)
                                                        ];
                                                }), json)
                                        ];
                                }), param);
                  }), setting),
            /* isDebug */optional((function (param) {
                    return field("is_debug", bool, param);
                  }), setting),
            /* context */optional((function (param) {
                    return field("context", (function (json) {
                                  return /* record */[
                                          /* alpha */field("alpha", bool, json),
                                          /* depth */field("depth", bool, json),
                                          /* stencil */field("stencil", bool, json),
                                          /* antialias */field("antialias", bool, json),
                                          /* premultipliedAlpha */field("premultiplied_alpha", bool, json),
                                          /* preserveDrawingBuffer */field("preserve_drawing_buffer", bool, json)
                                        ];
                                }), param);
                  }), setting),
            /* gpu */optional((function (param) {
                    return field("gpu", (function (json) {
                                  return /* record */[/* useHardwareInstance */field("use_hardware_instance", bool, json)];
                                }), param);
                  }), setting),
            /* worker */optional((function (param) {
                    return field("worker", (function (json) {
                                  return /* record */[/* useWorker */field("use_worker", bool, json)];
                                }), param);
                  }), setting)
          ];
  }
  
  
  /* No side effect */
  
  function convertSettingToRecord(setting) {
    return /* record */[
            /* workerFileDir */field("worker_file_dir", string$2, setting),
            /* mainInitPipeline */field("main_init_pipeline", string$2, setting),
            /* mainLoopPipeline */field("main_loop_pipeline", string$2, setting),
            /* workerPipeline */field("worker_pipeline", string$2, setting)
          ];
  }
  
  function convertMainInitPipelinesToRecord(pipelines) {
    return array((function (json) {
                  return /* record */[
                          /* name */field("name", string$2, json),
                          /* jobs */field("jobs", (function (json) {
                                  return array((function (json) {
                                                return /* record */[
                                                        /* name */field("name", string$2, json),
                                                        /* link */field("link", string$2, json),
                                                        /* jobs */field("jobs", (function (json) {
                                                                return array((function (json) {
                                                                              return /* record */[/* name */field("name", string$2, json)];
                                                                            }), json);
                                                              }), json)
                                                      ];
                                              }), json);
                                }), json)
                        ];
                }), pipelines);
  }
  
  function convertMainLoopPipelinesToRecord(pipelines) {
    return array((function (json) {
                  return /* record */[
                          /* name */field("name", string$2, json),
                          /* jobs */field("jobs", (function (json) {
                                  return array((function (json) {
                                                return /* record */[
                                                        /* name */field("name", string$2, json),
                                                        /* link */field("link", string$2, json),
                                                        /* jobs */field("jobs", (function (json) {
                                                                return array((function (json) {
                                                                              return /* record */[/* name */field("name", string$2, json)];
                                                                            }), json);
                                                              }), json)
                                                      ];
                                              }), json);
                                }), json)
                        ];
                }), pipelines);
  }
  
  function convertWorkerPipelinesToRecord(pipelines) {
    return array((function (json) {
                  return /* record */[
                          /* name */field("name", string$2, json),
                          /* jobs */field("jobs", (function (json) {
                                  return /* record */[/* render */field("render", (function (json) {
                                                  return array((function (json) {
                                                                return array((function (json) {
                                                                              return /* record */[/* name */field("name", string$2, json)];
                                                                            }), json);
                                                              }), json);
                                                }), json)];
                                }), json)
                        ];
                }), pipelines);
  }
  
  function _convertJobsToRecord(jobs) {
    return array((function (json) {
                  return /* record */[
                          /* name */field("name", string$2, json),
                          /* flags */optional((function (param) {
                                  return field("flags", (function (json) {
                                                return array(string$2, json);
                                              }), param);
                                }), json)
                        ];
                }), jobs);
  }
  
  var convertMainInitJobsToRecord = _convertJobsToRecord;
  
  var convertMainLoopJobsToRecord = _convertJobsToRecord;
  
  var convertWorkerJobsToRecord = _convertJobsToRecord;
  
  
  /* No side effect */
  
  function create$79(param) {
    return /* record */[
            /* setting */param[0],
            /* mainInitPipelines */param[1],
            /* mainLoopPipelines */param[2],
            /* workerPipelines */param[5],
            /* mainInitJobs */param[3],
            /* mainLoopJobs */param[4],
            /* workerJobs */param[6]
          ];
  }
  
  
  /* No side effect */
  
  function execJob$82(_, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* timeControllerRecord */34] = execJob$1(state[/* timeControllerRecord */34]);
    return newrecord;
  }
  
  
  /* TickJobUtils-Wonderjs Not a pure module */
  
  function execJob$83(_, state) {
    var match = execJob$74(batchDisposeBasicMaterialComponent, batchDisposeLightMaterialComponentForWorker, state);
    var state$1 = match[0];
    var newrecord = caml_array_dup(state$1);
    newrecord[/* vboBufferRecord */35] = disposeSourceInstanceVboBuffer(match[3], disposeCustomGeometryVboBuffer(match[2], disposeBoxGeometryVboBuffer(match[1], state$1[/* vboBufferRecord */35])));
    return newrecord;
  }
  
  
  /* DisposeJobUtils-Wonderjs Not a pure module */
  
  function execJob$84(_, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* deviceManagerRecord */10] = setGl(createGl(convertContextConfigDataToJsObj(unsafeGetContext(state[/* settingRecord */1])), unsafeGetCanvas(state[/* viewRecord */9])), state[/* deviceManagerRecord */10]);
    return newrecord;
  }
  
  
  /* ViewService-Wonderjs Not a pure module */
  
  function execJob$85(_, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* gpuDetectRecord */6] = detect$1(unsafeGetGl(state[/* deviceManagerRecord */10]), getTextureCountPerMaterial(state[/* settingRecord */1]), state[/* gpuDetectRecord */6]);
    return newrecord;
  }
  
  
  /* GPUDetectService-Wonderjs Not a pure module */
  
  function execJob$86(_, state) {
    return initEvent(state);
  }
  
  
  /* InitEventJobUtils-Wonderjs Not a pure module */
  
  function execJob$87(_, state) {
    var gl = unsafeGetGl(state[/* deviceManagerRecord */10]);
    var state$1 = bindEvent$1(state);
    var newrecord = caml_array_dup(state$1);
    newrecord[/* imguiRecord */43] = /* record */[
      /* ioData */state[/* imguiRecord */43][/* ioData */0],
      /* wonderImguiIMGUIRecord */init$5(gl, getCanvasSize(state$1), getWonderIMGUIRecord(state$1))
    ];
    return newrecord;
  }
  
  
  /* ManageIMGUIAPI-WonderImgui Not a pure module */
  
  function execJob$88(_, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* deviceManagerRecord */10] = execJob$10(state[/* deviceManagerRecord */10]);
    return newrecord;
  }
  
  
  /* InitStateJobUtils-Wonderjs Not a pure module */
  
  function execJob$89(_, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* timeControllerRecord */34] = start(state[/* timeControllerRecord */34]);
    return newrecord;
  }
  
  
  /* TimeControllerService-Wonderjs Not a pure module */
  
  function execJob$90(flags, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* deviceManagerRecord */10] = execJob$13(flags, state[/* deviceManagerRecord */10]);
    return newrecord;
  }
  
  
  /* ClearColorJobUtils-Wonderjs Not a pure module */
  
  function execJob$91(_, state) {
    return init$3(init$4(state));
  }
  
  
  /* InitArcballCameraControllerMainService-Wonderjs Not a pure module */
  
  function execJob$92(flags, state) {
    var gl = unsafeGetGl(state[/* deviceManagerRecord */10]);
    var newrecord = caml_array_dup(state);
    newrecord[/* deviceManagerRecord */10] = clearBuffer(gl, getBit(gl, unsafeGetFlags(flags)), state[/* deviceManagerRecord */10]);
    return newrecord;
  }
  
  
  /* JobConfigService-Wonderjs Not a pure module */
  
  function execJob$93(_, state) {
    var basicSourceTextureRecord = getRecord$4(state);
    var arrayBufferViewSourceTextureRecord = getRecord$6(state);
    var newrecord = caml_array_dup(state);
    newrecord[/* basicSourceTextureRecord */19] = /* record */[
      /* index */basicSourceTextureRecord[/* index */0],
      /* wrapSs */basicSourceTextureRecord[/* wrapSs */1],
      /* wrapTs */basicSourceTextureRecord[/* wrapTs */2],
      /* magFilters */basicSourceTextureRecord[/* magFilters */3],
      /* minFilters */basicSourceTextureRecord[/* minFilters */4],
      /* formats */basicSourceTextureRecord[/* formats */5],
      /* types */basicSourceTextureRecord[/* types */6],
      /* isNeedUpdates */basicSourceTextureRecord[/* isNeedUpdates */7],
      /* flipYs */basicSourceTextureRecord[/* flipYs */8],
      /* sourceMap */basicSourceTextureRecord[/* sourceMap */9],
      /* glTextureMap */initTextures(unsafeGetGl(state[/* deviceManagerRecord */10]), range$1(0, basicSourceTextureRecord[/* index */0] - 1 | 0), basicSourceTextureRecord[/* glTextureMap */10]),
      /* bindTextureUnitCacheMap */basicSourceTextureRecord[/* bindTextureUnitCacheMap */11],
      /* disposedIndexArray */basicSourceTextureRecord[/* disposedIndexArray */12],
      /* needAddedSourceArray */basicSourceTextureRecord[/* needAddedSourceArray */13],
      /* needInitedTextureIndexArray */basicSourceTextureRecord[/* needInitedTextureIndexArray */14],
      /* nameMap */basicSourceTextureRecord[/* nameMap */15]
    ];
    newrecord[/* arrayBufferViewSourceTextureRecord */20] = /* record */[
      /* index */arrayBufferViewSourceTextureRecord[/* index */0],
      /* wrapSs */arrayBufferViewSourceTextureRecord[/* wrapSs */1],
      /* wrapTs */arrayBufferViewSourceTextureRecord[/* wrapTs */2],
      /* magFilters */arrayBufferViewSourceTextureRecord[/* magFilters */3],
      /* minFilters */arrayBufferViewSourceTextureRecord[/* minFilters */4],
      /* formats */arrayBufferViewSourceTextureRecord[/* formats */5],
      /* types */arrayBufferViewSourceTextureRecord[/* types */6],
      /* isNeedUpdates */arrayBufferViewSourceTextureRecord[/* isNeedUpdates */7],
      /* flipYs */arrayBufferViewSourceTextureRecord[/* flipYs */8],
      /* widths */arrayBufferViewSourceTextureRecord[/* widths */9],
      /* heights */arrayBufferViewSourceTextureRecord[/* heights */10],
      /* sourceMap */arrayBufferViewSourceTextureRecord[/* sourceMap */11],
      /* glTextureMap */initTextures(unsafeGetGl(state[/* deviceManagerRecord */10]), range$1(0, arrayBufferViewSourceTextureRecord[/* index */0] - 1 | 0), arrayBufferViewSourceTextureRecord[/* glTextureMap */12]),
      /* bindTextureUnitCacheMap */arrayBufferViewSourceTextureRecord[/* bindTextureUnitCacheMap */13],
      /* disposedIndexArray */arrayBufferViewSourceTextureRecord[/* disposedIndexArray */14],
      /* needAddedSourceArray */arrayBufferViewSourceTextureRecord[/* needAddedSourceArray */15],
      /* needInitedTextureIndexArray */arrayBufferViewSourceTextureRecord[/* needInitedTextureIndexArray */16],
      /* nameMap */arrayBufferViewSourceTextureRecord[/* nameMap */17]
    ];
    return newrecord;
  }
  
  
  /* ArrayService-Wonderjs Not a pure module */
  
  function createRenderState$1(state) {
    var settingRecord = state[/* settingRecord */1];
    var directionLightRecord = state[/* directionLightRecord */21];
    var pointLightRecord = state[/* pointLightRecord */22];
    var transformRecord = getRecord(state);
    var localToWorldMatrices = transformRecord[/* localToWorldMatrices */2];
    var localToWorldMatrixCacheMap = transformRecord[/* localToWorldMatrixCacheMap */19];
    var normalMatrixCacheMap = transformRecord[/* normalMatrixCacheMap */20];
    var boxGeometryRecord = getRecord$8(state);
    var customGeometryRecord = getRecord$9(state);
    var basicMaterialRecord = getRecord$1(state);
    var lightMaterialRecord = getRecord$3(state);
    var meshRendererRecord = getRecord$7(state);
    var basicSourceTextureRecord = getRecord$4(state);
    var arrayBufferViewSourceTextureRecord = getRecord$6(state);
    var sourceInstanceRecord = getRecord$10(state);
    var isUseWorker$$1 = isUseWorker(state);
    var renderStateTransformRecord = isUseWorker$$1 ? /* record */[
        /* localToWorldMatrices */unsafeGetCopiedLocalToWorldMatrices(transformRecord),
        /* localToWorldMatrixCacheMap */localToWorldMatrixCacheMap,
        /* normalMatrixCacheMap */normalMatrixCacheMap
      ] : /* record */[
        /* localToWorldMatrices */localToWorldMatrices,
        /* localToWorldMatrixCacheMap */localToWorldMatrixCacheMap,
        /* normalMatrixCacheMap */normalMatrixCacheMap
      ];
    return /* record */[
            /* sceneRecord : record */[/* ambientLight : record */[/* color */getAmbientLightColor$1(state)]],
            /* vboBufferRecord */state[/* vboBufferRecord */35],
            /* typeArrayPoolRecord */state[/* typeArrayPoolRecord */37],
            /* glslSenderRecord */state[/* glslSenderRecord */31],
            /* programRecord */state[/* programRecord */29],
            /* boxGeometryRecord : record */[
              /* vertices */boxGeometryRecord[/* vertices */1],
              /* texCoords */boxGeometryRecord[/* texCoords */2],
              /* normals */boxGeometryRecord[/* normals */3],
              /* indices */boxGeometryRecord[/* indices */4]
            ],
            /* customGeometryRecord : record */[
              /* vertices */customGeometryRecord[/* vertices */2],
              /* texCoords */customGeometryRecord[/* texCoords */3],
              /* normals */customGeometryRecord[/* normals */4],
              /* indices */customGeometryRecord[/* indices */5],
              /* verticesInfos */customGeometryRecord[/* verticesInfos */6],
              /* texCoordsInfos */customGeometryRecord[/* texCoordsInfos */7],
              /* normalsInfos */customGeometryRecord[/* normalsInfos */8],
              /* indicesInfos */customGeometryRecord[/* indicesInfos */9]
            ],
            /* cameraRecord */getCameraRecord(state),
            /* basicMaterialRecord : record */[
              /* shaderIndices */basicMaterialRecord[/* shaderIndices */2],
              /* colors */basicMaterialRecord[/* colors */3],
              /* textureIndices */basicMaterialRecord[/* textureIndices */4],
              /* mapUnits */basicMaterialRecord[/* mapUnits */5]
            ],
            /* lightMaterialRecord : record */[
              /* shaderIndices */lightMaterialRecord[/* shaderIndices */2],
              /* diffuseColors */lightMaterialRecord[/* diffuseColors */3],
              /* specularColors */lightMaterialRecord[/* specularColors */4],
              /* shininess */lightMaterialRecord[/* shininess */5],
              /* textureIndices */lightMaterialRecord[/* textureIndices */6],
              /* diffuseMapUnits */lightMaterialRecord[/* diffuseMapUnits */7],
              /* specularMapUnits */lightMaterialRecord[/* specularMapUnits */8]
            ],
            /* meshRendererRecord : record */[/* drawModes */meshRendererRecord[/* drawModes */2]],
            /* basicSourceTextureRecord : record */[
              /* wrapSs */basicSourceTextureRecord[/* wrapSs */1],
              /* wrapTs */basicSourceTextureRecord[/* wrapTs */2],
              /* magFilters */basicSourceTextureRecord[/* magFilters */3],
              /* minFilters */basicSourceTextureRecord[/* minFilters */4],
              /* formats */basicSourceTextureRecord[/* formats */5],
              /* types */basicSourceTextureRecord[/* types */6],
              /* isNeedUpdates */basicSourceTextureRecord[/* isNeedUpdates */7],
              /* flipYs */basicSourceTextureRecord[/* flipYs */8],
              /* sourceMap */basicSourceTextureRecord[/* sourceMap */9],
              /* glTextureMap */basicSourceTextureRecord[/* glTextureMap */10],
              /* bindTextureUnitCacheMap */basicSourceTextureRecord[/* bindTextureUnitCacheMap */11],
              /* setFlipYFunc */setFlipY$3
            ],
            /* arrayBufferViewSourceTextureRecord : record */[
              /* wrapSs */arrayBufferViewSourceTextureRecord[/* wrapSs */1],
              /* wrapTs */arrayBufferViewSourceTextureRecord[/* wrapTs */2],
              /* magFilters */arrayBufferViewSourceTextureRecord[/* magFilters */3],
              /* minFilters */arrayBufferViewSourceTextureRecord[/* minFilters */4],
              /* formats */arrayBufferViewSourceTextureRecord[/* formats */5],
              /* types */arrayBufferViewSourceTextureRecord[/* types */6],
              /* isNeedUpdates */arrayBufferViewSourceTextureRecord[/* isNeedUpdates */7],
              /* flipYs */arrayBufferViewSourceTextureRecord[/* flipYs */8],
              /* widths */arrayBufferViewSourceTextureRecord[/* widths */9],
              /* heights */arrayBufferViewSourceTextureRecord[/* heights */10],
              /* sourceMap */arrayBufferViewSourceTextureRecord[/* sourceMap */11],
              /* glTextureMap */arrayBufferViewSourceTextureRecord[/* glTextureMap */12],
              /* bindTextureUnitCacheMap */arrayBufferViewSourceTextureRecord[/* bindTextureUnitCacheMap */13],
              /* setFlipYFunc */setFlipY$3,
              /* textureIndexOffset */getArrayBufferViewSourceTextureIndexOffset$1(state)
            ],
            /* directionLightRecord : record */[
              /* index */directionLightRecord[/* index */0],
              /* colors */directionLightRecord[/* colors */2],
              /* intensities */directionLightRecord[/* intensities */3],
              /* directionMap */buildDirectionMap(directionLightRecord[/* index */0], getDirection$1, state)
            ],
            /* pointLightRecord : record */[
              /* index */pointLightRecord[/* index */0],
              /* colors */pointLightRecord[/* colors */2],
              /* intensities */pointLightRecord[/* intensities */3],
              /* constants */pointLightRecord[/* constants */4],
              /* linears */pointLightRecord[/* linears */5],
              /* quadratics */pointLightRecord[/* quadratics */6],
              /* ranges */pointLightRecord[/* ranges */7],
              /* positionMap */buildPositionMap(pointLightRecord[/* index */0], getPosition$3, state)
            ],
            /* transformRecord */renderStateTransformRecord,
            /* sourceInstanceRecord : record */[
              /* objectInstanceTransformIndexMap */sourceInstanceRecord[/* objectInstanceTransformIndexMap */1],
              /* objectInstanceTransformCollections */sourceInstanceRecord[/* objectInstanceTransformCollections */4],
              /* isTransformStatics */sourceInstanceRecord[/* isTransformStatics */3],
              /* matrixInstanceBufferCapacityMap */sourceInstanceRecord[/* matrixInstanceBufferCapacityMap */5],
              /* matrixFloat32ArrayMap */sourceInstanceRecord[/* matrixFloat32ArrayMap */6],
              /* isSendTransformMatrixDataMap */sourceInstanceRecord[/* isSendTransformMatrixDataMap */7]
            ],
            /* gpuDetectRecord */state[/* gpuDetectRecord */6],
            /* globalTempRecord */state[/* globalTempRecord */36],
            /* deviceManagerRecord */state[/* deviceManagerRecord */10],
            /* shaderRecord : record */[/* usedShaderIndexArray */state[/* shaderRecord */27][/* usedShaderIndexArray */2]],
            /* settingRecord : record */[
              /* gpu */unsafeGetGPU(settingRecord),
              /* instanceBuffer *//* record */[/* objectInstanceCountPerSourceInstance */getObjectInstanceCountPerSourceInstance(settingRecord)],
              /* textureCountPerMaterial */getTextureCountPerMaterial(settingRecord)
            ],
            /* workerDetectRecord : record */[/* isUseWorker */isUseWorker$$1],
            /* browserDetectRecord : record */[/* browser */state[/* browserDetectRecord */41][/* browser */0]]
          ];
  }
  
  
  /* BufferSettingService-Wonderjs Not a pure module */
  
  function _render$2(gl, state) {
    var match = getBasicRenderObjectRecord(state);
    if (match !== undefined) {
      var match$1 = match;
      render$6(gl, /* tuple */[
            match$1[/* count */1],
            match$1[/* transformIndices */2],
            match$1[/* materialIndices */3],
            match$1[/* meshRendererIndices */4],
            match$1[/* geometryIndices */5],
            match$1[/* geometryTypes */6],
            match$1[/* sourceInstanceIndices */7]
          ], createRenderState$1(state));
      return state;
    } else {
      return state;
    }
  }
  
  function execJob$94(_, state) {
    return _render$2(unsafeGetGl(state[/* deviceManagerRecord */10]), state);
  }
  
  
  /* RenderBasicJobUtils-Wonderjs Not a pure module */
  
  function execJob$95(_, state) {
    return resetPointEventStateWhenPointUp(render$5(unsafeGetGl(state[/* deviceManagerRecord */10]), getIOData$1(state), getAPIJsObj(state), /* tuple */[
                    getRecord$11,
                    setRecord
                  ], state));
  }
  
  
  /* IOIMGUIMainService-Wonderjs Not a pure module */
  
  function execJob$96(_, state) {
    var screenData = queryFullScreenData(/* () */0);
    var viewportData_000 = screenData[0];
    var viewportData_001 = screenData[1];
    var viewportData_002 = screenData[2];
    var viewportData_003 = screenData[3];
    var viewportData = /* tuple */[
      viewportData_000,
      viewportData_001,
      viewportData_002,
      viewportData_003
    ];
    var newrecord = caml_array_dup(state);
    newrecord[/* deviceManagerRecord */10] = setViewportData(viewportData, setViewportOfGl(unsafeGetGl(state[/* deviceManagerRecord */10]), viewportData, state[/* deviceManagerRecord */10]));
    return newrecord;
  }
  
  
  /* DeviceManagerService-Wonderjs Not a pure module */
  
  function execJob$97(_, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* viewRecord */9] = setCanvas(createCanvas(getCanvasId(state[/* settingRecord */1])), state[/* viewRecord */9]);
    return newrecord;
  }
  
  
  /* ViewService-Wonderjs Not a pure module */
  
  function execJob$98(_, state) {
    return update$2(update$1(state));
  }
  
  
  /* UpdateArcballCameraControllerMainService-Wonderjs Not a pure module */
  
  function execJob$99(_, state) {
    return setCameraRecord(getCameraData(state), state);
  }
  
  
  /* GetCameraDataJobUtils-Wonderjs Not a pure module */
  
  function execJob$100(_, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* viewRecord */9] = setCanvas(setToFullScreen(queryFullScreenData(/* () */0), unsafeGetCanvas(state[/* viewRecord */9])), state[/* viewRecord */9]);
    return newrecord;
  }
  
  
  /* ViewService-Wonderjs Not a pure module */
  
  function execJob$101(_, state) {
    var glslRecord = state[/* glslRecord */28];
    glslRecord[/* precision */0] = getPrecisionSource(state[/* gpuDetectRecord */6], state[/* glslChunkRecord */32]);
    return state;
  }
  
  
  /* PrecisionAllService-Wonderjs Not a pure module */
  
  function execJob$102(_, state) {
    var transformRecord = getRecord(state);
    var index = transformRecord[/* index */0];
    var newrecord = caml_array_dup(state);
    newrecord[/* transformRecord */12] = execJob$33(index, state[/* globalTempRecord */36], transformRecord);
    return newrecord;
  }
  
  
  /* UpdateTransformJobUtils-Wonderjs Not a pure module */
  
  function _render$3(gl, state) {
    var match = getLightRenderObjectRecord(state);
    if (match !== undefined) {
      var match$1 = match;
      render$14(gl, /* tuple */[
            match$1[/* count */1],
            match$1[/* transformIndices */2],
            match$1[/* materialIndices */3],
            match$1[/* meshRendererIndices */4],
            match$1[/* geometryIndices */5],
            match$1[/* geometryTypes */6],
            match$1[/* sourceInstanceIndices */7]
          ], createRenderState$1(state));
      return state;
    } else {
      return state;
    }
  }
  
  function execJob$103(_, state) {
    return _render$3(unsafeGetGl(state[/* deviceManagerRecord */10]), state);
  }
  
  
  /* DeviceManagerService-Wonderjs Not a pure module */
  
  function execJob$104(_, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var match = getRecord$1(state);
    var index = match[/* index */0];
    init(unsafeGetGl(state[/* deviceManagerRecord */10]), /* tuple */[
          buildMap(index, getRecord$1(state)[/* gameObjectMap */8], gameObjectRecord),
          isSupportInstance(state)
        ], createInitMaterialState(/* tuple */[
              index,
              match[/* disposedIndexArray */10]
            ], state));
    return state;
  }
  
  
  /* DeviceManagerService-Wonderjs Not a pure module */
  
  function execJob$105(_, state) {
    var gameObjectRecord = state[/* gameObjectRecord */11];
    var match = getRecord$3(state);
    var index = match[/* index */0];
    init$2(unsafeGetGl(state[/* deviceManagerRecord */10]), /* tuple */[
          buildMap(index, getRecord$3(state)[/* gameObjectMap */13], gameObjectRecord),
          isSupportInstance(state)
        ], createInitMaterialState$1(/* tuple */[
              index,
              match[/* disposedIndexArray */15]
            ], state));
    return state;
  }
  
  
  /* DeviceManagerService-Wonderjs Not a pure module */
  
  function execJob$106(_, state) {
    return execJob$50(state);
  }
  
  
  /* ReallocateCPUMemoryJobUtils-Wonderjs Not a pure module */
  
  function execJob$107(_, state) {
    execJob$70(createRenderState$1(state));
    return state;
  }
  
  
  /* CreateRenderStateMainService-Wonderjs Not a pure module */
  
  function execJob$108(_, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* glslSenderRecord */31] = execJob$72(state[/* glslSenderRecord */31]);
    return newrecord;
  }
  
  
  /* No side effect */
  
  function execJob$109(_, state) {
    var newrecord = caml_array_dup(state);
    var init = getRecord$12(state);
    newrecord[/* renderRecord */33] = /* record */[
      /* basicRenderObjectRecord */execJob$77(state),
      /* lightRenderObjectRecord */init[/* lightRenderObjectRecord */1],
      /* cameraRecord */init[/* cameraRecord */2]
    ];
    return newrecord;
  }
  
  
  /* RecordRenderMainService-Wonderjs Not a pure module */
  
  function execJob$110(_, state) {
    var newrecord = caml_array_dup(state);
    var init = getRecord$12(state);
    newrecord[/* renderRecord */33] = /* record */[
      /* basicRenderObjectRecord */init[/* basicRenderObjectRecord */0],
      /* lightRenderObjectRecord */execJob$79(state),
      /* cameraRecord */init[/* cameraRecord */2]
    ];
    return newrecord;
  }
  
  
  /* RecordRenderMainService-Wonderjs Not a pure module */
  
  function _getInitJobHandles() {
    return /* :: */[
            /* tuple */[
              "create_canvas",
              execJob$97
            ],
            /* :: */[
              /* tuple */[
                "create_gl",
                execJob$84
              ],
              /* :: */[
                /* tuple */[
                  "set_full_screen",
                  execJob$100
                ],
                /* :: */[
                  /* tuple */[
                    "set_viewport",
                    execJob$96
                  ],
                  /* :: */[
                    /* tuple */[
                      "detect_gl",
                      execJob$85
                    ],
                    /* :: */[
                      /* tuple */[
                        "init_event",
                        execJob$86
                      ],
                      /* :: */[
                        /* tuple */[
                          "init_camera",
                          execJob$91
                        ],
                        /* :: */[
                          /* tuple */[
                            "start_time",
                            execJob$89
                          ],
                          /* :: */[
                            /* tuple */[
                              "preget_glslData",
                              execJob$101
                            ],
                            /* :: */[
                              /* tuple */[
                                "init_imgui",
                                execJob$87
                              ],
                              /* :: */[
                                /* tuple */[
                                  "init_texture",
                                  execJob$93
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "init_state",
                                    execJob$88
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "init_basic_material",
                                      execJob$104
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "init_light_material",
                                        execJob$105
                                      ],
                                      /* [] */0
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ];
  }
  
  function _getLoopJobHandles() {
    return /* :: */[
            /* tuple */[
              "tick",
              execJob$82
            ],
            /* :: */[
              /* tuple */[
                "update_transform",
                execJob$102
              ],
              /* :: */[
                /* tuple */[
                  "update_camera",
                  execJob$98
                ],
                /* :: */[
                  /* tuple */[
                    "clear_color",
                    execJob$90
                  ],
                  /* :: */[
                    /* tuple */[
                      "clear_buffer",
                      execJob$92
                    ],
                    /* :: */[
                      /* tuple */[
                        "clear_last_send_component",
                        execJob$108
                      ],
                      /* :: */[
                        /* tuple */[
                          "get_camera_data",
                          execJob$99
                        ],
                        /* :: */[
                          /* tuple */[
                            "send_uniform_shader_data",
                            execJob$107
                          ],
                          /* :: */[
                            /* tuple */[
                              "create_basic_render_object_buffer",
                              execJob$109
                            ],
                            /* :: */[
                              /* tuple */[
                                "create_light_render_object_buffer",
                                execJob$110
                              ],
                              /* :: */[
                                /* tuple */[
                                  "dispose",
                                  execJob$83
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "reallocate_cpu_memory",
                                    execJob$106
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "render_basic",
                                      execJob$94
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "front_render_light",
                                        execJob$103
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "render_imgui",
                                          execJob$95
                                        ],
                                        /* [] */0
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ];
  }
  
  function createInitJobHandleMap() {
    return createJobHandleMap(_getInitJobHandles(/* () */0));
  }
  
  function createLoopJobHandleMap() {
    return createJobHandleMap(_getLoopJobHandles(/* () */0));
  }
  
  
  /* TickJob-Wonderjs Not a pure module */
  
  function convertSettingToRecord$1(loop_setting) {
    return /* record */[
            /* initPipeline */field("init_pipeline", string$2, loop_setting),
            /* loopPipeline */field("loop_pipeline", string$2, loop_setting)
          ];
  }
  
  function _convertPipelinesToRecord(pipelines) {
    return array((function (json) {
                  return /* record */[
                          /* name */field("name", string$2, json),
                          /* jobs */field("jobs", (function (param) {
                                  return array((function (json) {
                                                return /* record */[/* name */field("name", string$2, json)];
                                              }), param);
                                }), json)
                        ];
                }), pipelines);
  }
  
  function _convertJobsToRecord$1(jobs) {
    return array((function (json) {
                  return /* record */[
                          /* name */field("name", string$2, json),
                          /* flags */optional((function (param) {
                                  return field("flags", (function (json) {
                                                return array(string$2, json);
                                              }), param);
                                }), json)
                        ];
                }), jobs);
  }
  
  var convertInitPipelinesToRecord = _convertPipelinesToRecord;
  
  var convertInitJobsToRecord = _convertJobsToRecord$1;
  
  var convertLoopPipelinesToRecord = _convertPipelinesToRecord;
  
  var convertLoopJobsToRecord = _convertJobsToRecord$1;
  
  
  /* No side effect */
  
  function _convertShaderMapData(json) {
    return array((function (json) {
                  return /* record */[
                          /* name */field("name", string$2, json),
                          /* value */field("value", (function (param) {
                                  return array(string$2, param);
                                }), json)
                        ];
                }), json);
  }
  
  function _convertDynamicBranchData(json) {
    return array((function (json) {
                  return /* record */[
                          /* name */field("name", string$2, json),
                          /* condition */field("condition", string$2, json),
                          /* pass */optional((function (param) {
                                  return field("pass", string$2, param);
                                }), json),
                          /* fail */optional((function (param) {
                                  return field("fail", string$2, param);
                                }), json)
                        ];
                }), json);
  }
  
  function convertShadersToRecord(shaders) {
    return /* record */[
            /* staticBranchs */field("static_branchs", _convertShaderMapData, shaders),
            /* dynamicBranchs */field("dynamic_branchs", _convertDynamicBranchData, shaders),
            /* groups */field("groups", _convertShaderMapData, shaders),
            /* materialShaders */field("material_shaders", (function (json) {
                    return array((function (json) {
                                  return /* record */[
                                          /* name */field("name", string$2, json),
                                          /* shaderLibs */field("shader_libs", (function (param) {
                                                  return array((function (json) {
                                                                return /* record */[
                                                                        /* type_ */optional((function (param) {
                                                                                return field("type", string$2, param);
                                                                              }), json),
                                                                        /* name */field("name", string$2, json)
                                                                      ];
                                                              }), param);
                                                }), json)
                                        ];
                                }), json);
                  }), shaders)
          ];
  }
  
  function _convertGlslToRecord(json) {
    return optional((function (param) {
                  return field("glsls", (function (json) {
                                return array((function (json) {
                                              return /* record */[
                                                      /* type_ */field("type", string$2, json),
                                                      /* name */field("name", string$2, json)
                                                    ];
                                            }), json);
                              }), param);
                }), json);
  }
  
  function _convertVariableToRecord(json) {
    return optional((function (param) {
                  return field("variables", (function (json) {
                                return /* record */[
                                        /* uniforms */optional((function (param) {
                                                return field("uniforms", (function (json) {
                                                              return array((function (json) {
                                                                            return /* record */[
                                                                                    /* name */field("name", string$2, json),
                                                                                    /* field */field("field", string$2, json),
                                                                                    /* type_ */field("type", string$2, json),
                                                                                    /* from */field("from", string$2, json)
                                                                                  ];
                                                                          }), json);
                                                            }), param);
                                              }), json),
                                        /* attributes */optional((function (param) {
                                                return field("attributes", (function (json) {
                                                              return array((function (json) {
                                                                            return /* record */[
                                                                                    /* name */optional((function (param) {
                                                                                            return field("name", string$2, param);
                                                                                          }), json),
                                                                                    /* buffer */field("buffer", $$int$2, json),
                                                                                    /* type_ */optional((function (param) {
                                                                                            return field("type", string$2, param);
                                                                                          }), json)
                                                                                  ];
                                                                          }), json);
                                                            }), param);
                                              }), json)
                                      ];
                              }), param);
                }), json);
  }
  
  function convertShaderLibsToRecord(shaderLibs) {
    return array((function (json) {
                  return /* record */[
                          /* name */field("name", string$2, json),
                          /* glsls */_convertGlslToRecord(json),
                          /* variables */_convertVariableToRecord(json)
                        ];
                }), shaderLibs);
  }
  
  
  /* No side effect */
  
  function create$80(param) {
    return /* record */[
            /* setting */param[0],
            /* initPipelines */param[1],
            /* loopPipelines */param[2],
            /* initJobs */param[3],
            /* loopJobs */param[4]
          ];
  }
  
  
  /* No side effect */
  
  function _collectAllRecords(stream) {
    return reduce$1((function (arr, record) {
                  return push$1(record, arr);
                }), /* array */[], stream);
  }
  
  function _createFetchNoWorkerJobStreamArr(dataDir, fetchFunc) {
    return /* array */[
            map$4(convertSettingToRecord$1, createFetchJsonStream(join$2(/* array */[
                          dataDir,
                          "no_worker/setting/setting.json"
                        ]), fetchFunc)),
            map$4(convertInitPipelinesToRecord, createFetchJsonStream(join$2(/* array */[
                          dataDir,
                          "no_worker/pipeline/init_pipelines.json"
                        ]), fetchFunc)),
            map$4(convertLoopPipelinesToRecord, createFetchJsonStream(join$2(/* array */[
                          dataDir,
                          "no_worker/pipeline/loop_pipelines.json"
                        ]), fetchFunc)),
            map$4(convertInitJobsToRecord, createFetchJsonStream(join$2(/* array */[
                          dataDir,
                          "no_worker/job/init_jobs.json"
                        ]), fetchFunc)),
            map$4(convertLoopJobsToRecord, createFetchJsonStream(join$2(/* array */[
                          dataDir,
                          "no_worker/job/loop_jobs.json"
                        ]), fetchFunc))
          ];
  }
  
  function _createFetchRenderConfigStreamArr(dataDir, fetchFunc) {
    return /* array */[
            map$4(convertShadersToRecord, createFetchJsonStream(join$2(/* array */[
                          dataDir,
                          "render/shader/shaders.json"
                        ]), fetchFunc)),
            map$4(convertShaderLibsToRecord, createFetchJsonStream(join$2(/* array */[
                          dataDir,
                          "render/shader/shader_libs.json"
                        ]), fetchFunc))
          ];
  }
  
  function _setSetting(stateData, state, setting) {
    setIsDebug(stateData, unsafeGetIsDebug(setting));
    var newrecord = caml_array_dup(state);
    newrecord[/* settingRecord */1] = setSetting(setting);
    return newrecord;
  }
  
  function _createHandleNoWorkerJobConfigStreamArr(dataDir, fetchFunc, state) {
    return fromPromise(_collectAllRecords(concatArray(_createFetchNoWorkerJobStreamArr(dataDir, fetchFunc))).then((function (recordArr) {
                      var newrecord = caml_array_dup(state);
                      return Promise.resolve(init$10(/* tuple */[
                                      createInitJobHandleMap,
                                      createLoopJobHandleMap
                                    ], (newrecord[/* noWorkerJobRecord */3] = create$80(recordArr), newrecord)));
                    })));
  }
  
  function _createHandleRenderConfigStreamArr(dataDir, fetchFunc, state) {
    return fromPromise(_collectAllRecords(concatArray(_createFetchRenderConfigStreamArr(dataDir, fetchFunc))).then((function (recordArr) {
                      var newrecord = caml_array_dup(state);
                      return Promise.resolve((newrecord[/* renderConfigRecord */5] = create$64(recordArr), newrecord));
                    })));
  }
  
  function _createFetchWorkerJobStreamArr(dataDir, fetchFunc) {
    return /* array */[
            map$4(convertSettingToRecord, createFetchJsonStream(join$2(/* array */[
                          dataDir,
                          "worker/setting/setting.json"
                        ]), fetchFunc)),
            map$4(convertMainInitPipelinesToRecord, createFetchJsonStream(join$2(/* array */[
                          dataDir,
                          "worker/pipeline/main/main_init_pipelines.json"
                        ]), fetchFunc)),
            map$4(convertMainLoopPipelinesToRecord, createFetchJsonStream(join$2(/* array */[
                          dataDir,
                          "worker/pipeline/main/main_loop_pipelines.json"
                        ]), fetchFunc)),
            map$4(convertMainInitJobsToRecord, createFetchJsonStream(join$2(/* array */[
                          dataDir,
                          "worker/job/main/main_init_jobs.json"
                        ]), fetchFunc)),
            map$4(convertMainLoopJobsToRecord, createFetchJsonStream(join$2(/* array */[
                          dataDir,
                          "worker/job/main/main_loop_jobs.json"
                        ]), fetchFunc)),
            map$4(convertWorkerPipelinesToRecord, createFetchJsonStream(join$2(/* array */[
                          dataDir,
                          "worker/pipeline/worker/worker_pipelines.json"
                        ]), fetchFunc)),
            map$4(convertWorkerJobsToRecord, createFetchJsonStream(join$2(/* array */[
                          dataDir,
                          "worker/job/worker/worker_jobs.json"
                        ]), fetchFunc))
          ];
  }
  
  function _createHandleWorkerJobConfigStreamArr(dataDir, fetchFunc, state) {
    return fromPromise(_collectAllRecords(concatArray(_createFetchWorkerJobStreamArr(dataDir, fetchFunc))).then((function (recordArr) {
                      var newrecord = caml_array_dup(state);
                      return Promise.resolve((newrecord[/* workerJobRecord */4] = create$79(recordArr), newrecord));
                    })));
  }
  
  function _createHandleJobConfigStreamArr(dataDir, fetchFunc, state) {
    var match = isUseWorker(state);
    if (match) {
      return _createHandleWorkerJobConfigStreamArr(dataDir, fetchFunc, state);
    } else {
      return _createHandleNoWorkerJobConfigStreamArr(dataDir, fetchFunc, state);
    }
  }
  
  function _createRecordWithState(state) {
    return create$60(create$55(create$24(create$26(create$11(create$9(create$10(create$18(create$8(create$5(create$2(state)))))))))));
  }
  
  function _createAndSetState(stateData) {
    setState$2(stateData, createState$2(/* () */0));
    return /* () */0;
  }
  
  function load$4(jsonPathArr, fetchFunc, stateData) {
    var settingFilePath = jsonPathArr[0];
    var dataDir = jsonPathArr[1];
    _createAndSetState(stateData);
    return flatMap((function (json) {
                  return tap((function (state) {
                                setState$2(stateData, state);
                                return /* () */0;
                              }), concatMap((function (state) {
                                    return _createHandleRenderConfigStreamArr(dataDir, fetchFunc, state);
                                  }), _createHandleJobConfigStreamArr(dataDir, fetchFunc, _createRecordWithState(detect$2(detect(_setSetting(stateData, unsafeGetState$1(stateData), convertToRecord(json))))))));
                }), createFetchJsonStream(settingFilePath, fetchFunc));
  }
  
  
  /* most Not a pure module */
  
  var loadConfig$1 = load$4;
  
  function loadIMGUIAsset$1(param, customTextureSourceDataArr, _, state) {
    return load$2(customTextureSourceDataArr, addFont$1(param[0], param[1], getWonderIMGUIRecord(state))).then((function (imguiRecord) {
                  var newrecord = caml_array_dup(state);
                  var init = state[/* imguiRecord */43];
                  newrecord[/* imguiRecord */43] = /* record */[
                    /* ioData */init[/* ioData */0],
                    /* wonderImguiIMGUIRecord */imguiRecord
                  ];
                  return Promise.resolve(newrecord);
                }));
  }
  
  
  /* IOIMGUIAPI-WonderImgui Not a pure module */
  
  function _fetch(filePath) {
    return fetch(filePath);
  }
  
  function loadIMGUIAsset(fntFilePath, bitmapFilePath, customTextureSourceDataArr, state) {
    return loadIMGUIAsset$1(/* tuple */[
                fntFilePath,
                bitmapFilePath
              ], customTextureSourceDataArr, _fetch, state);
  }
  
  
  /* StateDataMain-Wonderjs Not a pure module */
  
  function loadToData(jsonPathArr, stateData) {
    return loadConfig$1(jsonPathArr, _fetch, stateData);
  }
  
  
  /* LoaderManagerAPI-Wonderjs Not a pure module */
  
  var sendUniformProjectionMatData$4 = sendUniformProjectionMatData;
  
  var setIMGUIFunc$5 = setIMGUIFunc;
  
  
  /* ManageIMGUIAPI-WonderImgui Not a pure module */
  
  var setIMGUIFunc$4 = setIMGUIFunc$5;
  
  var sendUniformProjectionMatData$3 = sendUniformProjectionMatData$4;
  
  
  /* ManageIMGUIAPI-Wonderjs Not a pure module */
  
  var loadIMGUIAsset$2 = loadIMGUIAsset;
  
  
  /* LoaderManagerAPI-Wonderjs Not a pure module */
  
  function _getLoadData(type_) {
    var engineDataDir = "./src/engine/data/";
    switch (type_) {
      case "edit" : 
          return loadToData(/* array */[
                      "./src/engine/setting/editSetting.json",
                      engineDataDir
                    ], getEditEngineStateData(/* () */0));
      case "run" : 
          return loadToData(/* array */[
                      "./src/engine/setting/runSetting.json",
                      engineDataDir
                    ], getRunEngineStateData(/* () */0));
      default:
        return fatal(buildFatalMessage("_getLoadData", "the type_ is not find", "", "check the param", "type:" + (String(type_) + "")));
    }
  }
  
  function _buildSetStateFunc(setEngineStateFunc) {
    return (function (state) {
        var match = getEditorState(getIsRun);
        var state$1 = match ? state : loopBody(0, state);
        _1(setEngineStateFunc, state$1);
        return state$1;
      });
  }
  
  function _setUnsafeGetStateFuncAndSetStateFuncForEvent(getEngineStateFunc, setEngineStateFunc, engineState) {
    return setSetStateFunc(_buildSetStateFunc(setEngineStateFunc), setUnsafeGetStateFunc((function () {
                      return _1(getEngineStateFunc, /* () */0);
                    }), engineState));
  }
  
  function _setIMGUIFunc(scene, editEngineState) {
    return setIMGUIFunc$4(scene, (function (scene, apiJsObj, state) {
                  var imageFunc = apiJsObj.image;
                  var unsafeGetTransformChildren = apiJsObj.unsafeGetTransformChildren;
                  var getTransformPosition = apiJsObj.getTransformPosition;
                  var unsafeGetGameObjectTransformComponent = apiJsObj.unsafeGetGameObjectTransformComponent;
                  var unsafeGetGameObjectPerspectiveCameraProjectionComponent = apiJsObj.unsafeGetGameObjectPerspectiveCameraProjectionComponent;
                  var unsafeGetGameObjectBasicCameraViewComponent = apiJsObj.unsafeGetGameObjectBasicCameraViewComponent;
                  var unsafeGetTransformGameObject = apiJsObj.unsafeGetTransformGameObject;
                  var convertWorldToScreen = apiJsObj.convertWorldToScreen;
                  var _getChildren = function (gameObject, engineState) {
                    return unsafeGetTransformChildren(unsafeGetGameObjectTransformComponent(gameObject, engineState), engineState).map((function (transform) {
                                  return unsafeGetTransformGameObject(transform, engineState);
                                }));
                  };
                  var sceneChildren = _getChildren(scene, state);
                  var camera = sceneChildren[1];
                  var directionLightGameObject = sceneChildren[5];
                  var match = getTransformPosition(unsafeGetGameObjectTransformComponent(directionLightGameObject, state), state);
                  var match$1 = convertWorldToScreen(unsafeGetGameObjectBasicCameraViewComponent(camera, state), unsafeGetGameObjectPerspectiveCameraProjectionComponent(camera, state), /* tuple */[
                        match[0],
                        match[1],
                        match[2],
                        553.0,
                        427.0
                      ], state);
                  return imageFunc(/* tuple */[
                              match$1[0],
                              match$1[1],
                              80,
                              80
                            ], /* tuple */[
                              0,
                              0,
                              1,
                              1
                            ], "directionLight", state);
                }), editEngineState);
  }
  
  function init$14(editorState) {
    return drain(map$4((function (editEngineState) {
                          setIsDebug$1(true);
                          var scene = getSceneGameObject(editEngineState);
                          var match = prepareSpecificGameObjectsForEditEngineState(undefined, editEngineState);
                          var match$1 = createDefaultScene(undefined, match[1]);
                          var match$2 = computeDiffValue(editorState, match$1[1]);
                          var editEngineState$1 = _setUnsafeGetStateFuncAndSetStateFuncForEvent(getEditEngineState, setEditEngineState, match$2[1]);
                          var editEngineState$2 = _setIMGUIFunc(scene, editEngineState$1);
                          var editEngineState$3 = init$7(setParentKeepOrder(match$1[2], match[2], setGameObjectName("scene", scene, editEngineState$2)));
                          setEditEngineState(loopBody(0, editEngineState$3));
                          setState(match$2[0]);
                          return /* () */0;
                        }), flatMap((function (editEngineState) {
                              return fromPromise(loadIMGUIAsset$2("./public/font/myFont.fnt", "./public/font/myFont.png", /* array */[
                                              /* tuple */[
                                                "./public/img/camera.png",
                                                "camera"
                                              ],
                                              /* tuple */[
                                                "./public/img/sun.png",
                                                "directionLight"
                                              ],
                                              /* tuple */[
                                                "./public/img/point.jpg",
                                                "pointLight"
                                              ]
                                            ], editEngineState));
                            }), _getLoadData("edit"))).concat(map$4((function (runEngineState) {
                            var editorState = getState(/* () */0);
                            var editorStateForComponent = editorState;
                            var scene = getSceneGameObject(runEngineState);
                            var match = createDefaultScene(editorStateForComponent, runEngineState);
                            var editorStateForComponent$1 = match[0];
                            var runEngineState$1 = _setUnsafeGetStateFuncAndSetStateFuncForEvent(getRunEngineState, setRunEngineState, match[1]);
                            var runEngineState$2 = init$7(setGameObjectName("scene", scene, runEngineState$1));
                            setRunEngineState(loopBody(0, runEngineState$2));
                            if (editorStateForComponent$1 !== undefined) {
                              setState(editorStateForComponent$1);
                              return /* () */0;
                            } else {
                              setState(editorState);
                              return /* () */0;
                            }
                          }), _getLoadData("run")))).then((function () {
                  return Promise.resolve(getState(/* () */0));
                }));
  }
  
  function start$1() {
    return init$14(getState(/* () */0)).then((function (editorState) {
                  return Promise.resolve(setState(editorState));
                }));
  }
  
  
  /* most Not a pure module */
  
  function addStyleProp(name, prop, style) {
    return Style[/* unsafeAddProp */1](style, name, prop);
  }
  
  
  /* ReactDOMRe Not a pure module */
  
  function getDragedUid(e) {
    return Number(e.dataTransfer.getData("dragedUid"));
  }
  
  function setDragedUid(dragedUid, e) {
    return e.dataTransfer.setData("dragedUid", dragedUid);
  }
  
  function setDataTransferEffectIsMove(e) {
    e.dataTransfer.effectAllowed = "move";
    return /* () */0;
  }
  
  
  /* No side effect */
  
  function getCurrentDragSource(editorState) {
    return editorState[/* currentDragSource */3];
  }
  
  function setCurrentDragSource(param, editorState) {
    return /* record */[
            /* sceneRecord */editorState[/* sceneRecord */0],
            /* assetRecord */editorState[/* assetRecord */1],
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource : tuple */[
              param[0],
              param[1]
            ],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  function clearCurrentDragSource(editorState) {
    return /* record */[
            /* sceneRecord */editorState[/* sceneRecord */0],
            /* assetRecord */editorState[/* assetRecord */1],
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource : tuple */[
              undefined,
              undefined
            ],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  
  /* No side effect */
  
  function dragStart(uid, flag, dragImg, $$event) {
    stopPropagation($$event);
    $$event.dataTransfer.setDragImage(dragImg, 0, 0);
    setDataTransferEffectIsMove($$event);
    setDragedUid(uid, $$event);
    var partial_arg = /* tuple */[
      flag,
      uid
    ];
    return getAndSetEditorState((function (param) {
                  return setCurrentDragSource(partial_arg, param);
                }));
  }
  
  function _isTreeNodeRelationValid(targetId, startId, handleRelationErrorFunc) {
    if (startId !== undefined) {
      return !getStateToGetData(_2(handleRelationErrorFunc, targetId, valFromOption(startId)));
    } else {
      return false;
    }
  }
  
  function isTriggerDragEnter(id, handleFlagFunc, handleRelationErrorFunc) {
    var match = getCurrentDragSource(getState(/* () */0));
    if (_1(handleFlagFunc, match[0])) {
      return _isTreeNodeRelationValid(id, match[1], handleRelationErrorFunc);
    } else {
      return false;
    }
  }
  
  function isTriggerDragLeave(id, handleFlagFunc, handleRelationErrorFunc) {
    var match = getCurrentDragSource(getState(/* () */0));
    if (_1(handleFlagFunc, match[0])) {
      return _isTreeNodeRelationValid(id, match[1], handleRelationErrorFunc);
    } else {
      return false;
    }
  }
  
  function isTriggerDragDrop(id, startId, handleFlagFunc, handleRelationErrorFunc) {
    var match = getCurrentDragSource(getState(/* () */0));
    if (_1(handleFlagFunc, match[0])) {
      return _isTreeNodeRelationValid(id, some(startId), handleRelationErrorFunc);
    } else {
      return false;
    }
  }
  
  
  /* DomHelper-WonderEditor Not a pure module */
  
  function handleDragStart(id, flag, dragImg, $$event) {
    dragStart(id, flag, dragImg, $$event);
    return /* DragStart */4;
  }
  
  function handleDragEnter(id, handleFlagFunc, handleRelationErrorFunc, _) {
    var match = isTriggerDragEnter(id, handleFlagFunc, handleRelationErrorFunc);
    if (match) {
      return /* DragEnter */1;
    } else {
      return /* Nothing */0;
    }
  }
  
  function handleDragLeave(id, handleFlagFunc, handleRelationErrorFunc, $$event) {
    stopPropagation($$event);
    var match = isTriggerDragLeave(id, handleFlagFunc, handleRelationErrorFunc);
    if (match) {
      return /* DragLeave */2;
    } else {
      return /* Nothing */0;
    }
  }
  
  var handleDragOver = preventDefault;
  
  function handleDrop(uid, handleFlagFunc, handleRelationErrorFunc, $$event) {
    var startId = getDragedUid($$event);
    var match = isTriggerDragDrop(uid, startId, handleFlagFunc, handleRelationErrorFunc);
    if (match) {
      return /* DragDrop */[
              uid,
              startId
            ];
    } else {
      return /* DragLeave */2;
    }
  }
  
  function handleDrageEnd() {
    getAndSetEditorState(clearCurrentDragSource);
    return /* DragEnd */3;
  }
  
  
  /* DomHelper-WonderEditor Not a pure module */
  
  function buildNotDragableUl(treeChildren, content) {
    return react_3$1("ul", {
                className: "wonder-tree-node"
              }, content, treeChildren);
  }
  
  function buildDragableUl(send, param, content) {
    var dragImg = param[2];
    var flag = param[1];
    var uid = param[0];
    return react_3$1("ul", {
                className: "wonder-tree-node",
                draggable: true,
                onDragEnd: (function (_e) {
                    return _1(send, handleDrageEnd(_e));
                  }),
                onDragStart: (function (_e) {
                    return _1(send, handleDragStart(uid, flag, dragImg, _e));
                  })
              }, content, param[3]);
  }
  
  function getContent(param, param$1, param$2) {
    var handleRelationErrorFunc = param$2[2];
    var handleFlagFunc = param$2[1];
    var onSelectFunc = param$2[0];
    var icon = param$1[1];
    var uid = param$1[0];
    var send = param[1];
    return react_3$1("li", {
                style: param[0][/* style */0],
                onClick: (function () {
                    return _1(onSelectFunc, uid);
                  })
              }, react_3$1("div", {
                    className: "item-ground",
                    draggable: true,
                    onDragEnter: (function (_e) {
                        return _1(send, handleDragEnter(uid, handleFlagFunc, handleRelationErrorFunc, _e));
                      }),
                    onDragLeave: (function (_e) {
                        return _1(send, handleDragLeave(uid, handleFlagFunc, handleRelationErrorFunc, _e));
                      }),
                    onDragOver: handleDragOver,
                    onDrop: (function (_e) {
                        return _1(send, handleDrop(uid, handleFlagFunc, handleRelationErrorFunc, _e));
                      })
                  }), icon !== undefined ? react_3$1("img", {
                      src: icon
                    }) : null, textEl(param$1[2]));
  }
  
  var component$8 = reducerComponent("TreeNode");
  
  function reducer$3(onDropFunc, action) {
    if (typeof action === "number") {
      switch (action) {
        case 0 : 
            return (function () {
                return /* NoUpdate */0;
              });
        case 1 : 
            return (function (state) {
                return /* Update */__(0, [/* record */[/* style */addStyleProp("border", "2px dashed blue", state[/* style */0])]]);
              });
        case 2 : 
            return (function (state) {
                return /* Update */__(0, [/* record */[/* style */addStyleProp("border", "1px solid red", state[/* style */0])]]);
              });
        case 3 : 
            return (function (state) {
                return /* Update */__(0, [/* record */[/* style */addStyleProp("border", "1px solid red", addStyleProp("opacity", "1", state[/* style */0]))]]);
              });
        case 4 : 
            return (function (state) {
                return /* Update */__(0, [/* record */[/* style */addStyleProp("opacity", "0.2", state[/* style */0])]]);
              });
        
      }
    } else {
      var removedId = action[1];
      var targetId = action[0];
      return (function () {
          return sideEffects((function () {
                        return _1(onDropFunc, /* tuple */[
                                    targetId,
                                    removedId
                                  ]);
                      }));
        });
    }
  }
  
  function render$23(param, param$1, treeChildren, param$2) {
    var send = param$2[/* send */3];
    var state = param$2[/* state */1];
    var handleRelationErrorFunc = param$1[2];
    var handleFlagFunc = param$1[1];
    var onSelectFunc = param$1[0];
    var isDragable = param[5];
    var icon = param[4];
    var dragImg = param[3];
    var flag = param[2];
    var name = param[1];
    var uid = param[0];
    if (isDragable !== undefined && !isDragable) {
      return buildNotDragableUl(treeChildren, getContent(/* tuple */[
                      state,
                      send
                    ], /* tuple */[
                      uid,
                      icon,
                      name
                    ], /* tuple */[
                      onSelectFunc,
                      handleFlagFunc,
                      handleRelationErrorFunc
                    ]));
    } else {
      return buildDragableUl(send, /* tuple */[
                  uid,
                  flag,
                  dragImg,
                  treeChildren
                ], getContent(/* tuple */[
                      state,
                      send
                    ], /* tuple */[
                      uid,
                      icon,
                      name
                    ], /* tuple */[
                      onSelectFunc,
                      handleFlagFunc,
                      handleRelationErrorFunc
                    ]));
    }
  }
  
  function initalState(isSelected, isActive) {
    if (isSelected) {
      if (isActive) {
        return /* record */[/* style */{
                  background: "red"
                }];
      } else {
        return /* record */[/* style */{
                  background: "#c0c0c0"
                }];
      }
    } else {
      return /* record */[/* style */{
                border: "1px solid red"
              }];
    }
  }
  
  function make$14(uid, name, isSelected, isActive, dragImg, flag, icon, isDragable, onSelect, onDrop, isFlag, handleRelationError, treeChildren, _) {
    return /* record */[
            /* debugName */component$8[/* debugName */0],
            /* reactClassInternal */component$8[/* reactClassInternal */1],
            /* handedOffState */component$8[/* handedOffState */2],
            /* willReceiveProps */component$8[/* willReceiveProps */3],
            /* didMount */component$8[/* didMount */4],
            /* didUpdate */component$8[/* didUpdate */5],
            /* willUnmount */component$8[/* willUnmount */6],
            /* willUpdate */component$8[/* willUpdate */7],
            /* shouldUpdate */component$8[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$23(/* tuple */[
                            uid,
                            name,
                            flag,
                            dragImg,
                            icon,
                            isDragable
                          ], /* tuple */[
                            onSelect,
                            isFlag,
                            handleRelationError
                          ], treeChildren, self);
              }),
            /* initialState */(function () {
                return initalState(isSelected, isActive);
              }),
            /* retainedProps */component$8[/* retainedProps */11],
            /* reducer */(function (param) {
                return reducer$3(onDrop, param);
              }),
            /* subscriptions */component$8[/* subscriptions */13],
            /* jsElementWrapped */component$8[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function getIndex(assetRecord) {
    return assetRecord[/* index */1];
  }
  
  function increaseIndex(record) {
    return /* record */[
            /* assetTreeRoot */record[/* assetTreeRoot */0],
            /* index */record[/* index */1] + 1 | 0,
            /* currentNodeData */record[/* currentNodeData */2],
            /* currentNodeParentId */record[/* currentNodeParentId */3],
            /* textureNodeMap */record[/* textureNodeMap */4],
            /* jsonNodeMap */record[/* jsonNodeMap */5],
            /* folderNodeMap */record[/* folderNodeMap */6],
            /* imageBase64Map */record[/* imageBase64Map */7]
          ];
  }
  
  
  /* No side effect */
  
  function getAssetTreeRoot$1(assetRecord) {
    return assetRecord[/* assetTreeRoot */0];
  }
  
  function unsafeGetAssetTreeRoot$1(assetRecord) {
    return unsafeGet$3(assetRecord[/* assetTreeRoot */0]);
  }
  
  function setAssetTreeRoot$1(assetTreeRoot, assetRecord) {
    return /* record */[
            /* assetTreeRoot */assetTreeRoot,
            /* index */assetRecord[/* index */1],
            /* currentNodeData */assetRecord[/* currentNodeData */2],
            /* currentNodeParentId */assetRecord[/* currentNodeParentId */3],
            /* textureNodeMap */assetRecord[/* textureNodeMap */4],
            /* jsonNodeMap */assetRecord[/* jsonNodeMap */5],
            /* folderNodeMap */assetRecord[/* folderNodeMap */6],
            /* imageBase64Map */assetRecord[/* imageBase64Map */7]
          ];
  }
  
  
  /* OptionService-WonderEditor Not a pure module */
  
  function getAssetTreeRoot(editorState) {
    return getAssetTreeRoot$1(editorState[/* assetRecord */1]);
  }
  
  function unsafeGetAssetTreeRoot(editorState) {
    return unsafeGetAssetTreeRoot$1(editorState[/* assetRecord */1]);
  }
  
  function setAssetTreeRoot(assetTreeRoot, editorState) {
    return /* record */[
            /* sceneRecord */editorState[/* sceneRecord */0],
            /* assetRecord */setAssetTreeRoot$1(assetTreeRoot, editorState[/* assetRecord */1]),
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  function getRootTreeNodeId(editorState) {
    var match = getAssetTreeRoot$1(editorState[/* assetRecord */1]);
    if (match !== undefined) {
      return match[/* id */0];
    } else {
      return getIndex(editorState[/* assetRecord */1]);
    }
  }
  
  
  /* AssetTreeRootAssetService-WonderEditor Not a pure module */
  
  function getBaseNameAndExtName(fileName) {
    var match = (/^(.*)(\.\w+)$/).exec(fileName);
    if (match !== null) {
      return /* tuple */[
              caml_array_get(match, 1),
              caml_array_get(match, 2)
            ];
    } else {
      return /* tuple */[
              fileName,
              ""
            ];
    }
  }
  
  
  /* No side effect */
  
  function getJsonNodeMap$1(assetRecord) {
    return assetRecord[/* jsonNodeMap */5];
  }
  
  function setJsonNodeMap$1(jsonNodeMap, assetRecord) {
    return /* record */[
            /* assetTreeRoot */assetRecord[/* assetTreeRoot */0],
            /* index */assetRecord[/* index */1],
            /* currentNodeData */assetRecord[/* currentNodeData */2],
            /* currentNodeParentId */assetRecord[/* currentNodeParentId */3],
            /* textureNodeMap */assetRecord[/* textureNodeMap */4],
            /* jsonNodeMap */jsonNodeMap,
            /* folderNodeMap */assetRecord[/* folderNodeMap */6],
            /* imageBase64Map */assetRecord[/* imageBase64Map */7]
          ];
  }
  
  function setResult$1(index, result, assetRecord) {
    return /* record */[
            /* assetTreeRoot */assetRecord[/* assetTreeRoot */0],
            /* index */assetRecord[/* index */1],
            /* currentNodeData */assetRecord[/* currentNodeData */2],
            /* currentNodeParentId */assetRecord[/* currentNodeParentId */3],
            /* textureNodeMap */assetRecord[/* textureNodeMap */4],
            /* jsonNodeMap */immutableSet(index, result, assetRecord[/* jsonNodeMap */5]),
            /* folderNodeMap */assetRecord[/* folderNodeMap */6],
            /* imageBase64Map */assetRecord[/* imageBase64Map */7]
          ];
  }
  
  
  /* SparseMapService-WonderEditor Not a pure module */
  
  function getJsonNodeMap(editorState) {
    return getJsonNodeMap$1(editorState[/* assetRecord */1]);
  }
  
  function setJsonNodeMap(jsonNodeMap, editorState) {
    return /* record */[
            /* sceneRecord */editorState[/* sceneRecord */0],
            /* assetRecord */setJsonNodeMap$1(jsonNodeMap, editorState[/* assetRecord */1]),
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  function setResult(index, result, editorState) {
    return /* record */[
            /* sceneRecord */editorState[/* sceneRecord */0],
            /* assetRecord */setResult$1(index, result, editorState[/* assetRecord */1]),
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  function getJsonBaseNameAndExtName(currentNodeId, jsonNodeMap) {
    return getBaseNameAndExtName(unsafeGet$1(currentNodeId, jsonNodeMap)[/* name */0]);
  }
  
  
  /* JsonNodeMapAssetService-WonderEditor Not a pure module */
  
  function getFolderNodeMap$1(assetRecord) {
    return assetRecord[/* folderNodeMap */6];
  }
  
  function setFolderNodeMap$1(folderNodeMap, assetRecord) {
    return /* record */[
            /* assetTreeRoot */assetRecord[/* assetTreeRoot */0],
            /* index */assetRecord[/* index */1],
            /* currentNodeData */assetRecord[/* currentNodeData */2],
            /* currentNodeParentId */assetRecord[/* currentNodeParentId */3],
            /* textureNodeMap */assetRecord[/* textureNodeMap */4],
            /* jsonNodeMap */assetRecord[/* jsonNodeMap */5],
            /* folderNodeMap */folderNodeMap,
            /* imageBase64Map */assetRecord[/* imageBase64Map */7]
          ];
  }
  
  function setResult$3(index, result, assetRecord) {
    return /* record */[
            /* assetTreeRoot */assetRecord[/* assetTreeRoot */0],
            /* index */assetRecord[/* index */1],
            /* currentNodeData */assetRecord[/* currentNodeData */2],
            /* currentNodeParentId */assetRecord[/* currentNodeParentId */3],
            /* textureNodeMap */assetRecord[/* textureNodeMap */4],
            /* jsonNodeMap */assetRecord[/* jsonNodeMap */5],
            /* folderNodeMap */immutableSet(index, result, assetRecord[/* folderNodeMap */6]),
            /* imageBase64Map */assetRecord[/* imageBase64Map */7]
          ];
  }
  
  
  /* SparseMapService-WonderEditor Not a pure module */
  
  function getFolderNodeMap(editorState) {
    return getFolderNodeMap$1(editorState[/* assetRecord */1]);
  }
  
  function setFolderNodeMap(folderNodeMap, editorState) {
    return /* record */[
            /* sceneRecord */editorState[/* sceneRecord */0],
            /* assetRecord */setFolderNodeMap$1(folderNodeMap, editorState[/* assetRecord */1]),
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  function setResult$2(index, result, editorState) {
    return /* record */[
            /* sceneRecord */editorState[/* sceneRecord */0],
            /* assetRecord */setResult$3(index, result, editorState[/* assetRecord */1]),
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  function getFolderBaseNameAndExtName(currentNodeId, folderNodeMap) {
    return getBaseNameAndExtName(unsafeGet$1(currentNodeId, folderNodeMap)[/* name */0]);
  }
  
  
  /* FolderNodeMapAssetService-WonderEditor Not a pure module */
  
  function getTextureNodeMap$1(assetRecord) {
    return assetRecord[/* textureNodeMap */4];
  }
  
  function setTextureNodeMap$1(textureNodeMap, assetRecord) {
    return /* record */[
            /* assetTreeRoot */assetRecord[/* assetTreeRoot */0],
            /* index */assetRecord[/* index */1],
            /* currentNodeData */assetRecord[/* currentNodeData */2],
            /* currentNodeParentId */assetRecord[/* currentNodeParentId */3],
            /* textureNodeMap */textureNodeMap,
            /* jsonNodeMap */assetRecord[/* jsonNodeMap */5],
            /* folderNodeMap */assetRecord[/* folderNodeMap */6],
            /* imageBase64Map */assetRecord[/* imageBase64Map */7]
          ];
  }
  
  function setResult$5(index, result, assetRecord) {
    return /* record */[
            /* assetTreeRoot */assetRecord[/* assetTreeRoot */0],
            /* index */assetRecord[/* index */1],
            /* currentNodeData */assetRecord[/* currentNodeData */2],
            /* currentNodeParentId */assetRecord[/* currentNodeParentId */3],
            /* textureNodeMap */immutableSet(index, result, assetRecord[/* textureNodeMap */4]),
            /* jsonNodeMap */assetRecord[/* jsonNodeMap */5],
            /* folderNodeMap */assetRecord[/* folderNodeMap */6],
            /* imageBase64Map */assetRecord[/* imageBase64Map */7]
          ];
  }
  
  
  /* SparseMapService-WonderEditor Not a pure module */
  
  function getTextureNodeMap(editorState) {
    return getTextureNodeMap$1(editorState[/* assetRecord */1]);
  }
  
  function setTextureNodeMap(textureNodeMap, editorState) {
    return /* record */[
            /* sceneRecord */editorState[/* sceneRecord */0],
            /* assetRecord */setTextureNodeMap$1(textureNodeMap, editorState[/* assetRecord */1]),
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  function setResult$4(index, result, editorState) {
    return /* record */[
            /* sceneRecord */editorState[/* sceneRecord */0],
            /* assetRecord */setResult$5(index, result, editorState[/* assetRecord */1]),
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  
  /* TextureNodeMapAssetService-WonderEditor Not a pure module */
  
  function getCurrentNodeParentId$1(assetRecord) {
    return assetRecord[/* currentNodeParentId */3];
  }
  
  function clearCurrentNodeParentId$1(assetRecord) {
    return /* record */[
            /* assetTreeRoot */assetRecord[/* assetTreeRoot */0],
            /* index */assetRecord[/* index */1],
            /* currentNodeData */assetRecord[/* currentNodeData */2],
            /* currentNodeParentId */undefined,
            /* textureNodeMap */assetRecord[/* textureNodeMap */4],
            /* jsonNodeMap */assetRecord[/* jsonNodeMap */5],
            /* folderNodeMap */assetRecord[/* folderNodeMap */6],
            /* imageBase64Map */assetRecord[/* imageBase64Map */7]
          ];
  }
  
  function setCurrentNodeParentId$1(currentNodeParentId, assetRecord) {
    return /* record */[
            /* assetTreeRoot */assetRecord[/* assetTreeRoot */0],
            /* index */assetRecord[/* index */1],
            /* currentNodeData */assetRecord[/* currentNodeData */2],
            /* currentNodeParentId */currentNodeParentId,
            /* textureNodeMap */assetRecord[/* textureNodeMap */4],
            /* jsonNodeMap */assetRecord[/* jsonNodeMap */5],
            /* folderNodeMap */assetRecord[/* folderNodeMap */6],
            /* imageBase64Map */assetRecord[/* imageBase64Map */7]
          ];
  }
  
  
  /* OptionService-WonderEditor Not a pure module */
  
  function getCurrentNodeParentId(editorState) {
    return getCurrentNodeParentId$1(editorState[/* assetRecord */1]);
  }
  
  function clearCurrentNodeParentId(editorState) {
    return /* record */[
            /* sceneRecord */editorState[/* sceneRecord */0],
            /* assetRecord */clearCurrentNodeParentId$1(editorState[/* assetRecord */1]),
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  function setCurrentNodeParentId(currentNodeParentId, editorState) {
    return /* record */[
            /* sceneRecord */editorState[/* sceneRecord */0],
            /* assetRecord */setCurrentNodeParentId$1(currentNodeParentId, editorState[/* assetRecord */1]),
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  
  /* CurrentNodeParentIdAssetService-WonderEditor Not a pure module */
  
  function getFlag$1() {
    return /* Asset */1;
  }
  
  function isFlag$1(startFlag) {
    if (startFlag !== undefined) {
      return startFlag === /* Asset */1;
    } else {
      return false;
    }
  }
  
  function getTargetTreeNodeId(editorState) {
    var match = getCurrentNodeParentId(editorState);
    if (match !== undefined) {
      return match;
    } else {
      return getRootTreeNodeId(editorState);
    }
  }
  
  function isIdEqual(id, targetId) {
    return id === targetId;
  }
  
  function getSpecificTreeNodeById(id, node) {
    var match = id === node[/* id */0];
    if (match) {
      return node;
    } else {
      return reduceOneParam((function (param, child) {
                      var id = param[1];
                      var resultNode = param[0];
                      if (resultNode !== undefined) {
                        return /* tuple */[
                                resultNode,
                                id
                              ];
                      } else {
                        return /* tuple */[
                                getSpecificTreeNodeById(id, child),
                                id
                              ];
                      }
                    }), /* tuple */[
                    undefined,
                    id
                  ], node[/* children */1])[0];
    }
  }
  
  function _isRemovedTreeNodeBeTargetParent(targetId, removedTreeNode) {
    var match = targetId === removedTreeNode[/* id */0];
    if (match) {
      return true;
    } else {
      return reduceOneParam((function (result, child) {
                    if (result) {
                      return true;
                    } else {
                      return _isRemovedTreeNodeBeTargetParent(targetId, child);
                    }
                  }), false, removedTreeNode[/* children */1]);
    }
  }
  
  function _isTargetTreeNodeBeRemovedParent(targetTreeNode, removedId) {
    var len = targetTreeNode[/* children */1].filter((function (child) {
            return child[/* id */0] === removedId;
          })).length;
    var match = len >= 1;
    if (match) {
      return true;
    } else {
      return false;
    }
  }
  
  function isTreeNodeRelationError(targetId, removedId, param) {
    var editorState = param[0];
    var match = targetId === removedId;
    if (match) {
      return true;
    } else {
      var match$1 = _isRemovedTreeNodeBeTargetParent(targetId, unsafeGet$3(getSpecificTreeNodeById(removedId, unsafeGetAssetTreeRoot(editorState))));
      if (match$1) {
        return true;
      } else {
        return _isTargetTreeNodeBeRemovedParent(unsafeGet$3(getSpecificTreeNodeById(targetId, unsafeGetAssetTreeRoot(editorState))), removedId);
      }
    }
  }
  
  function deepRemoveTreeNode(removedTreeNode) {
    var _iterateRemovedTreeNode = function (nodeArr) {
      nodeArr.forEach((function (param) {
              var id = param[/* id */0];
              switch (param[/* type_ */2]) {
                case 0 : 
                    var editorState = getState(/* () */0);
                    setState(setFolderNodeMap(_2(deleteKeyInDict, id, copy$7(getFolderNodeMap(editorState))), editorState));
                    break;
                case 1 : 
                    var editorState$1 = getState(/* () */0);
                    setState(setJsonNodeMap(_2(deleteKeyInDict, id, copy$7(getJsonNodeMap(editorState$1))), editorState$1));
                    break;
                case 2 : 
                    var editorState$2 = getState(/* () */0);
                    setState(setTextureNodeMap(_2(deleteKeyInDict, id, copy$7(getTextureNodeMap(editorState$2))), editorState$2));
                    break;
                
              }
              return _iterateRemovedTreeNode(param[/* children */1]);
            }));
      return /* () */0;
    };
    _iterateRemovedTreeNode(/* array */[removedTreeNode]);
    return getState(/* () */0);
  }
  
  function _checkRemovedTreeNodeAndGetVal(param) {
    var removedTreeNode = param[1];
    requireCheck((function () {
            return test(buildAssertMessage("removedTreeNode should exist", "not"), (function () {
                          return assertTrue(isSome(removedTreeNode));
                        }));
          }), getStateIsDebug(/* () */0));
    return /* tuple */[
            getFirst(param[0]),
            unsafeGet$3(removedTreeNode)
          ];
  }
  
  function removeSpecificTreeNode(targetId, assetTreeRoot) {
    var _iterateAssetTree = function (targetId, assetTreeArr, newAssetTree, removedTreeNode) {
      return reduceOneParam((function (param, treeNode) {
                    var newAssetTree = param[0];
                    var match = treeNode[/* id */0] === targetId;
                    if (match) {
                      return /* tuple */[
                              newAssetTree,
                              treeNode
                            ];
                    } else {
                      var match$1 = _iterateAssetTree(targetId, treeNode[/* children */1], /* array */[], param[1]);
                      return /* tuple */[
                              push$2(/* record */[
                                    /* id */treeNode[/* id */0],
                                    /* children */match$1[0],
                                    /* type_ */treeNode[/* type_ */2]
                                  ], newAssetTree),
                              match$1[1]
                            ];
                    }
                  }), /* tuple */[
                  newAssetTree,
                  removedTreeNode
                ], assetTreeArr);
    };
    return _checkRemovedTreeNodeAndGetVal(_iterateAssetTree(targetId, /* array */[assetTreeRoot], /* array */[], undefined));
  }
  
  function insertSourceTreeNodeToTargetTreeNodeChildren(targetId, newTreeNode, assetTreeRoot) {
    var _iterateInsertAssetTree = function (targetId, newTreeNode, assetTreeArr) {
      return assetTreeArr.map((function (treeNode) {
                    var children = treeNode[/* children */1];
                    var match = treeNode[/* id */0] === targetId;
                    if (match) {
                      return /* record */[
                              /* id */treeNode[/* id */0],
                              /* children */push$2(newTreeNode, children.slice()),
                              /* type_ */treeNode[/* type_ */2]
                            ];
                    } else {
                      return /* record */[
                              /* id */treeNode[/* id */0],
                              /* children */_iterateInsertAssetTree(targetId, newTreeNode, children),
                              /* type_ */treeNode[/* type_ */2]
                            ];
                    }
                  }));
    };
    return getFirst(_iterateInsertAssetTree(targetId, newTreeNode, /* array */[assetTreeRoot]));
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function getCurrentSelectSource(editorState) {
    return editorState[/* currentSelectSource */4];
  }
  
  function setCurrentSelectSource(currentSelectSource, editorState) {
    return /* record */[
            /* sceneRecord */editorState[/* sceneRecord */0],
            /* assetRecord */editorState[/* assetRecord */1],
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */currentSelectSource,
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  
  /* No side effect */
  
  function getCurrentNodeData$1(assetRecord) {
    return assetRecord[/* currentNodeData */2];
  }
  
  function unsafeGetCurrentNodeData$1(assetRecord) {
    return unsafeGet$3(assetRecord[/* currentNodeData */2]);
  }
  
  function clearCurrentNodeData$1(assetRecord) {
    return /* record */[
            /* assetTreeRoot */assetRecord[/* assetTreeRoot */0],
            /* index */assetRecord[/* index */1],
            /* currentNodeData */undefined,
            /* currentNodeParentId */assetRecord[/* currentNodeParentId */3],
            /* textureNodeMap */assetRecord[/* textureNodeMap */4],
            /* jsonNodeMap */assetRecord[/* jsonNodeMap */5],
            /* folderNodeMap */assetRecord[/* folderNodeMap */6],
            /* imageBase64Map */assetRecord[/* imageBase64Map */7]
          ];
  }
  
  function setCurrentNodeData$1(currentNodeData, assetRecord) {
    return /* record */[
            /* assetTreeRoot */assetRecord[/* assetTreeRoot */0],
            /* index */assetRecord[/* index */1],
            /* currentNodeData */currentNodeData,
            /* currentNodeParentId */assetRecord[/* currentNodeParentId */3],
            /* textureNodeMap */assetRecord[/* textureNodeMap */4],
            /* jsonNodeMap */assetRecord[/* jsonNodeMap */5],
            /* folderNodeMap */assetRecord[/* folderNodeMap */6],
            /* imageBase64Map */assetRecord[/* imageBase64Map */7]
          ];
  }
  
  
  /* OptionService-WonderEditor Not a pure module */
  
  function getCurrentNodeData(editorState) {
    return getCurrentNodeData$1(editorState[/* assetRecord */1]);
  }
  
  function unsafeGetCurrentNodeData(editorState) {
    return unsafeGetCurrentNodeData$1(editorState[/* assetRecord */1]);
  }
  
  function clearCurrentNodeData(editorState) {
    return /* record */[
            /* sceneRecord */editorState[/* sceneRecord */0],
            /* assetRecord */clearCurrentNodeData$1(editorState[/* assetRecord */1]),
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  function setCurrentNodeData(currentNodeData, editorState) {
    return /* record */[
            /* sceneRecord */editorState[/* sceneRecord */0],
            /* assetRecord */setCurrentNodeData$1(currentNodeData, editorState[/* assetRecord */1]),
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  
  /* CurrentNodeDataAssetService-WonderEditor Not a pure module */
  
  var setUndoValueToCopiedEngineState$4 = EmptyEventHandler[1];
  
  function handleSelfLogic$3(param, _, param$1) {
    var removedId = param$1[1];
    var targetId = param$1[0];
    var dispatchFunc = param[1];
    var editorState = getState(/* () */0);
    var match = isIdEqual(targetId, removedId);
    if (match) {
      _1(dispatchFunc, [
            UpdateAction,
            /* Update */[/* array */[/* Asset */2]]
          ]);
      return /* () */0;
    } else {
      var match$1 = removeSpecificTreeNode(removedId, unsafeGetAssetTreeRoot(editorState));
      setState(setAssetTreeRoot(insertSourceTreeNodeToTargetTreeNodeChildren(targetId, match$1[1], match$1[0]), editorState));
      _1(dispatchFunc, [
            UpdateAction,
            /* Update */[/* array */[/* Asset */2]]
          ]);
      return /* () */0;
    }
  }
  
  var MakeEventHandler$4 = MakeEventHandler$1([
        handleSelfLogic$3,
        setUndoValueToCopiedEngineState$4
      ]);
  
  
  /* MakeEventHandler Not a pure module */
  
  function onSelect(dispatchFunc, nodeType, nodeId) {
    setState(setCurrentNodeParentId(nodeId, setCurrentNodeData(/* record */[
                  /* currentNodeId */nodeId,
                  /* nodeType */nodeType
                ], getState(/* () */0))));
    setState(setCurrentSelectSource(/* Asset */1, clearCurrentSceneTreeNode(getState(/* () */0))));
    _1(dispatchFunc, [
          UpdateAction,
          /* Update */[/* array */[/* All */0]]
        ]);
    return /* () */0;
  }
  
  var dragNodeToFolderFunc = MakeEventHandler$4[/* pushUndoStackWithNoCopyEngineState */0];
  
  
  /* SceneEditorService-WonderEditor Not a pure module */
  
  function _isActive() {
    var editorState = getState(/* () */0);
    var match = getCurrentNodeData(editorState);
    if (match !== undefined) {
      return isIdEqual(getTargetTreeNodeId(editorState), match[/* currentNodeId */0]);
    } else {
      return false;
    }
  }
  
  function _isNotRoot(id) {
    return getRootTreeNodeId(getState(/* () */0)) !== id;
  }
  
  function buildAssetTreeArray(dragImg, param, assetTreeRoot) {
    var _iterateAssetTreeArray = function (onSelectFunc, onDropFunc, assetTreeArray) {
      return assetTreeArray.map((function (param) {
                    var type_ = param[/* type_ */2];
                    var id = param[/* id */0];
                    if (type_ !== 0) {
                      return null;
                    } else {
                      var match = unsafeGet$1(id, getFolderNodeMap(getState(/* () */0)));
                      return element(getRandomKey(/* () */0), undefined, make$14(id, match[/* name */0], getEditorState(getTargetTreeNodeId) === id, _isActive(/* () */0), dragImg, getFlag$1(/* () */0), "./public/img/12.jpg", _isNotRoot(id), _1(onSelectFunc, type_), onDropFunc, isFlag$1, isTreeNodeRelationError, _iterateAssetTreeArray(onSelectFunc, onDropFunc, param[/* children */1]), /* array */[]));
                    }
                  }));
    };
    return _iterateAssetTreeArray(param[0], param[1], /* array */[assetTreeRoot]);
  }
  
  var component$7 = statelessComponent("AssetTree");
  
  function render$22(param, dragImg, _) {
    var dispatchFunc = param[1];
    return react_3$1("article", {
                key: "assetTreeRoot",
                className: "wonder-asset-assetTree"
              }, buildAssetTreeArray(dragImg, /* tuple */[
                    (function (param, param$1) {
                        return onSelect(dispatchFunc, param, param$1);
                      }),
                    _2(dragNodeToFolderFunc, /* tuple */[
                          param[0],
                          dispatchFunc
                        ], /* () */0)
                  ], unsafeGetAssetTreeRoot(getState(/* () */0))));
  }
  
  function make$13(store, dispatchFunc, dragImg, _) {
    return /* record */[
            /* debugName */component$7[/* debugName */0],
            /* reactClassInternal */component$7[/* reactClassInternal */1],
            /* handedOffState */component$7[/* handedOffState */2],
            /* willReceiveProps */component$7[/* willReceiveProps */3],
            /* didMount */component$7[/* didMount */4],
            /* didUpdate */component$7[/* didUpdate */5],
            /* willUnmount */component$7[/* willUnmount */6],
            /* willUpdate */component$7[/* willUpdate */7],
            /* shouldUpdate */component$7[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$22(/* tuple */[
                            store,
                            dispatchFunc
                          ], dragImg, self);
              }),
            /* initialState */component$7[/* initialState */10],
            /* retainedProps */component$7[/* retainedProps */11],
            /* reducer */component$7[/* reducer */12],
            /* subscriptions */component$7[/* subscriptions */13],
            /* jsElementWrapped */component$7[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  var onload = (
        function (reader,handleFunc) {
            reader.onload = function() {
                handleFunc(this.result);
            };
        }
    );
  
  
  /* onload Not a pure module */
  
  var onload$1 = (
      function (url, handleFunc) {
          var image = new Image();
          image.src = url;
  
          if (image.complete) {
            // 圖片已經被載入
            handleFunc(image);
          } else {
            // 如果圖片未被載入，則設定載入時的回調
            image.onload = function () {
              handleFunc(image);
            };
          }
        }
      );
  
  
  /* onload Not a pure module */
  
  function create$82(state) {
    var basicSourceTextureRecord = getRecord$4(state);
    var match = generateIndex(basicSourceTextureRecord[/* index */0], basicSourceTextureRecord[/* disposedIndexArray */12]);
    var index = generateBasicSourceTextureIndex$1(match[0]);
    state[/* basicSourceTextureRecord */19] = /* record */[
      /* index */match[1],
      /* wrapSs */basicSourceTextureRecord[/* wrapSs */1],
      /* wrapTs */basicSourceTextureRecord[/* wrapTs */2],
      /* magFilters */basicSourceTextureRecord[/* magFilters */3],
      /* minFilters */basicSourceTextureRecord[/* minFilters */4],
      /* formats */basicSourceTextureRecord[/* formats */5],
      /* types */basicSourceTextureRecord[/* types */6],
      /* isNeedUpdates */basicSourceTextureRecord[/* isNeedUpdates */7],
      /* flipYs */basicSourceTextureRecord[/* flipYs */8],
      /* sourceMap */basicSourceTextureRecord[/* sourceMap */9],
      /* glTextureMap */basicSourceTextureRecord[/* glTextureMap */10],
      /* bindTextureUnitCacheMap */basicSourceTextureRecord[/* bindTextureUnitCacheMap */11],
      /* disposedIndexArray */basicSourceTextureRecord[/* disposedIndexArray */12],
      /* needAddedSourceArray */basicSourceTextureRecord[/* needAddedSourceArray */13],
      /* needInitedTextureIndexArray */basicSourceTextureRecord[/* needInitedTextureIndexArray */14],
      /* nameMap */basicSourceTextureRecord[/* nameMap */15]
    ];
    return checkNotExceedMaxCount(getBasicSourceTextureCount(state[/* settingRecord */1]), /* tuple */[
                state,
                index
              ]);
  }
  
  
  /* BufferService-Wonderjs Not a pure module */
  
  function createBasicSourceTexture(state) {
    return create$82(state);
  }
  
  var setBasicSourceTextureSource = setSource$1;
  
  var getBasicSourceTextureWrapS = getWrapS$2;
  
  var setBasicSourceTextureWrapS = setWrapS$2;
  
  var getBasicSourceTextureWrapT = getWrapT$2;
  
  var setBasicSourceTextureWrapT = setWrapT$2;
  
  var getBasicSourceTextureMagFilter = getMagFilter$2;
  
  var setBasicSourceTextureMagFilter = setMagFilter$2;
  
  var getBasicSourceTextureMinFilter = getMinFilter$2;
  
  var setBasicSourceTextureMinFilter = setMinFilter$2;
  
  var unsafeGetBasicSourceTextureName$1 = unsafeGetName$4;
  
  function setBasicSourceTextureName$1(texture, name, state) {
    return setName$4(texture, name, state);
  }
  
  
  /* NameBasicSourceTextureMainService-Wonderjs Not a pure module */
  
  function setSource$2(source, texture, engineState) {
    return setBasicSourceTextureSource(texture, source, engineState);
  }
  
  function setBasicSourceTextureName(name, texture, engineState) {
    return setBasicSourceTextureName$1(texture, name, engineState);
  }
  
  function setWrapS$3(wrapS, texture, engineState) {
    return setBasicSourceTextureWrapS(texture, wrapS, engineState);
  }
  
  function setWrapT$3(wrapT, texture, engineTtate) {
    return setBasicSourceTextureWrapT(texture, wrapT, engineTtate);
  }
  
  function setMagFilter$3(filter, texture, engineState) {
    return setBasicSourceTextureMagFilter(texture, filter, engineState);
  }
  
  function setMinFilter$3(filter, texture, engineState) {
    return setBasicSourceTextureMinFilter(texture, filter, engineState);
  }
  
  function initTexture$2(texture, state) {
    return initTexture(texture, state);
  }
  
  var create$81 = createBasicSourceTexture;
  
  var unsafeGetBasicSourceTextureName = unsafeGetBasicSourceTextureName$1;
  
  var getWrapS$3 = getBasicSourceTextureWrapS;
  
  var getWrapT$3 = getBasicSourceTextureWrapT;
  
  var getMagFilter$3 = getBasicSourceTextureMagFilter;
  
  var getMinFilter$3 = getBasicSourceTextureMinFilter;
  
  
  /* BasicSourceTextureAPI-Wonderjs Not a pure module */
  
  function _checkEditAndRunTextureWithDiff(param, type_, editEngineState, runEngineState) {
    var runTexture = param[1];
    var editTexture = param[0];
    requireCheck((function () {
            return test(buildAssertMessage("editMateral and runTexture diff should == materialType diff value", "not"), (function () {
                          var diffValue = getEditEngineComponent$1(type_, unsafeGetDiffMap(getState(/* () */0)));
                          return Operators[/* = */0](editTexture - runTexture | 0, diffValue);
                        }));
          }), getStateIsDebug(/* () */0));
    return /* tuple */[
            runTexture,
            editEngineState,
            runEngineState
          ];
  }
  
  function createAndInitTexture(textureName, editEngineState, runEngineState) {
    var match = create$81(editEngineState);
    var editTexture = match[1];
    var match$1 = create$81(runEngineState);
    var runTexture = match$1[1];
    return _checkEditAndRunTextureWithDiff(/* tuple */[
                editTexture,
                runTexture
              ], /* Texture */8, initTexture$2(editTexture, setBasicSourceTextureName(textureName, editTexture, match[0])), initTexture$2(runTexture, setBasicSourceTextureName(textureName, runTexture, match$1[0])));
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function _getTreeNodeName(index, state) {
    var match = index === getRootTreeNodeId(state);
    if (match) {
      return "Asset";
    } else {
      return "newFolder";
    }
  }
  
  function buildFolderResult(index, state) {
    return /* record */[/* name */_getTreeNodeName(index, state)];
  }
  
  function renameFolderNodeResult(name, _) {
    return /* record */[/* name */name];
  }
  
  function buildJsonNodeResult(fileResult) {
    return /* record */[
            /* name */fileResult[/* name */0],
            /* jsonResult */fileResult[/* result */2]
          ];
  }
  
  function renameJsonNodeResult(name, jsonNodeResult) {
    return /* record */[
            /* name */name,
            /* jsonResult */jsonNodeResult[/* jsonResult */1]
          ];
  }
  
  function buildTextureNodeResult(textureIndex) {
    return /* record */[/* textureIndex */textureIndex];
  }
  
  function buildAssetTreeNodeByIndex(index, type_) {
    return /* record */[
            /* id */index,
            /* children : array */[],
            /* type_ */type_
          ];
  }
  
  
  /* AssetTreeRootEditorService-WonderEditor Not a pure module */
  
  function getIndex$1(editorState) {
    return getIndex(editorState[/* assetRecord */1]);
  }
  
  function increaseIndex$1(editorState) {
    return /* record */[
            /* sceneRecord */editorState[/* sceneRecord */0],
            /* assetRecord */increaseIndex(editorState[/* assetRecord */1]),
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  
  /* No side effect */
  
  function getImageBase64Map$1(assetRecord) {
    return assetRecord[/* imageBase64Map */7];
  }
  
  function setResult$7(textureIndex, base64, assetRecord) {
    return /* record */[
            /* assetTreeRoot */assetRecord[/* assetTreeRoot */0],
            /* index */assetRecord[/* index */1],
            /* currentNodeData */assetRecord[/* currentNodeData */2],
            /* currentNodeParentId */assetRecord[/* currentNodeParentId */3],
            /* textureNodeMap */assetRecord[/* textureNodeMap */4],
            /* jsonNodeMap */assetRecord[/* jsonNodeMap */5],
            /* folderNodeMap */assetRecord[/* folderNodeMap */6],
            /* imageBase64Map */immutableSet(textureIndex, base64, assetRecord[/* imageBase64Map */7])
          ];
  }
  
  
  /* SparseMapService-WonderEditor Not a pure module */
  
  function getImageBase64Map(editorState) {
    return getImageBase64Map$1(editorState[/* assetRecord */1]);
  }
  
  function setResult$6(textureIndex, base64, editorState) {
    return /* record */[
            /* sceneRecord */editorState[/* sceneRecord */0],
            /* assetRecord */setResult$7(textureIndex, base64, editorState[/* assetRecord */1]),
            /* inspectorRecord */editorState[/* inspectorRecord */2],
            /* currentDragSource */editorState[/* currentDragSource */3],
            /* currentSelectSource */editorState[/* currentSelectSource */4],
            /* loopId */editorState[/* loopId */5]
          ];
  }
  
  
  /* ImageBase64MapAssetService-WonderEditor Not a pure module */
  
  function addFolderIntoNodeMap(index, editorState) {
    var __x = buildFolderResult(index, editorState);
    return setResult$2(index, __x, editorState);
  }
  
  function initRootAssetTree(editorState) {
    var match = getAssetTreeRoot(editorState);
    if (match !== undefined) {
      return /* tuple */[
              match,
              editorState
            ];
    } else {
      var rootIndex = getIndex$1(editorState);
      return /* tuple */[
              buildAssetTreeNodeByIndex(rootIndex, /* Folder */0),
              addFolderIntoNodeMap(rootIndex, editorState)
            ];
    }
  }
  
  function convertFileJsObjectToFileInfoRecord(fileObject) {
    return /* record */[
            /* name */fileObject.name,
            /* type_ */fileObject.type,
            /* file */fileObject
          ];
  }
  
  function getUploadFileType(type_) {
    switch (type_) {
      case "application/json" : 
          return /* LoadJson */1;
      case "image/jpeg" : 
      case "image/png" : 
          return /* LoadImage */0;
      default:
        return fatal(buildFatalMessage("getUploadFileType", "the type:" + (String(type_) + " not exist"), "", "", ""));
    }
  }
  
  function _handleSpecificFuncByType(type_, param) {
    if (type_) {
      return _1(param[0], /* () */0);
    } else {
      return _1(param[1], /* () */0);
    }
  }
  
  function readFileByType(reader, fileInfo) {
    return _handleSpecificFuncByType(getUploadFileType(fileInfo[/* type_ */1]), /* tuple */[
                (function () {
                    reader.readAsText(fileInfo[/* file */2]);
                    return /* () */0;
                  }),
                (function () {
                    reader.readAsDataURL(fileInfo[/* file */2]);
                    return /* () */0;
                  })
              ]);
  }
  
  function createNodeAndAddToTargetNodeChildren(targetTreeNode, newIndex, type_, editorState) {
    return setAssetTreeRoot(insertSourceTreeNodeToTargetTreeNodeChildren(targetTreeNode, buildAssetTreeNodeByIndex(newIndex, type_), unsafeGetAssetTreeRoot(editorState)), editorState);
  }
  
  function _handleJsonType(fileResult, newIndex, param, _) {
    var editorState = param[1];
    var editorState$1 = setState(createNodeAndAddToTargetNodeChildren(getTargetTreeNodeId(editorState), newIndex, /* Json */1, setResult(newIndex, buildJsonNodeResult(fileResult), editorState)));
    return param[0](editorState$1);
  }
  
  function _handleImageType(fileResult, newIndex, param, _) {
    var editorState = param[1];
    var resolve = param[0];
    var match = getBaseNameAndExtName(fileResult[/* name */0]);
    var match$1 = createAndInitTexture(match[0], getEditEngineState(/* () */0), getRunEngineState(/* () */0));
    var runEngineState = match$1[2];
    var editEngineState = match$1[1];
    var texture = match$1[0];
    return _2(onload$1, fileResult[/* result */2], (function (loadedImg) {
                  setEditEngineState(setSource$2(loadedImg, texture, editEngineState));
                  setRunEngineState(setSource$2(loadedImg, texture, runEngineState));
                  var editorState$1 = setState(createNodeAndAddToTargetNodeChildren(getTargetTreeNodeId(editorState), newIndex, /* Texture */2, setResult$4(newIndex, buildTextureNodeResult(texture), setResult$6(texture, fileResult[/* result */2], editorState))));
                  return resolve(editorState$1);
                }));
  }
  
  function handleFileByType(fileResult) {
    var editorState = getEditorState(increaseIndex$1);
    var newIndex = getIndex$1(editorState);
    return new Promise((function (resolve, _) {
                  var partial_arg = /* tuple */[
                    resolve,
                    editorState
                  ];
                  var partial_arg$1 = /* tuple */[
                    resolve,
                    editorState
                  ];
                  return _handleSpecificFuncByType(fileResult[/* type_ */1], /* tuple */[
                              (function (param) {
                                  return _handleJsonType(fileResult, newIndex, partial_arg, param);
                                }),
                              (function (param) {
                                  return _handleImageType(fileResult, newIndex, partial_arg$1, param);
                                })
                            ]);
                }));
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function fileLoad$1(dispatchFunc, $$event) {
    preventDefault($$event);
    var fileInfoArr = values($$event.target.files).map(convertFileJsObjectToFileInfoRecord);
    return drain(flatMap((function (fileResult) {
                        return fromPromise(handleFileByType(fileResult));
                      }), flatMap((function (fileInfo) {
                            return fromPromise(new Promise((function (resolve, _) {
                                              var reader = new FileReader();
                                              _2(onload, reader, (function (result) {
                                                      return resolve(/* record */[
                                                                  /* name */fileInfo[/* name */0],
                                                                  /* type_ */getUploadFileType(fileInfo[/* type_ */1]),
                                                                  /* result */result
                                                                ]);
                                                    }));
                                              return readFileByType(reader, fileInfo);
                                            })));
                          }), from(fileInfoArr)))).then((function () {
                  return Promise.resolve(_1(dispatchFunc, [
                                  UpdateAction,
                                  /* Update */[/* array */[/* Asset */2]]
                                ]));
                }));
  }
  
  
  /* most Not a pure module */
  
  var setUndoValueToCopiedEngineState$5 = EmptyEventHandler[1];
  
  function handleSelfLogic$4(param, _, $$event) {
    fileLoad$1(param[1], $$event);
    return /* () */0;
  }
  
  var MakeEventHandler$5 = MakeEventHandler$1([
        handleSelfLogic$4,
        setUndoValueToCopiedEngineState$5
      ]);
  
  
  /* MakeEventHandler Not a pure module */
  
  var setUndoValueToCopiedEngineState$6 = EmptyEventHandler[1];
  
  function handleSelfLogic$5(param, _, _$1) {
    getAndSetEditorState((function (editorState) {
            var editorState$1 = increaseIndex$1(editorState);
            var nextIndex = getIndex$1(editorState$1);
            return createNodeAndAddToTargetNodeChildren(getTargetTreeNodeId(editorState$1), nextIndex, /* Folder */0, addFolderIntoNodeMap(nextIndex, editorState$1));
          }));
    _1(param[1], [
          UpdateAction,
          /* Update */[/* array */[/* Asset */2]]
        ]);
    return /* () */0;
  }
  
  var MakeEventHandler$6 = MakeEventHandler$1([
        handleSelfLogic$5,
        setUndoValueToCopiedEngineState$6
      ]);
  
  
  /* MakeEventHandler Not a pure module */
  
  var setUndoValueToCopiedEngineState$7 = EmptyEventHandler[1];
  
  function handleSelfLogic$6(param, _, _$1) {
    getAndSetEditorState((function (editorState) {
            var match = unsafeGetCurrentNodeData(editorState);
            var currentNodeId = match[/* currentNodeId */0];
            var match$1 = removeSpecificTreeNode(currentNodeId, unsafeGetAssetTreeRoot(editorState));
            var newAssetTreeRoot = match$1[0];
            var editorState$1 = deepRemoveTreeNode(match$1[1]);
            var currentNodeParentId = getTargetTreeNodeId(editorState$1);
            var match$2 = isIdEqual(currentNodeParentId, currentNodeId);
            if (match$2) {
              return clearCurrentNodeData(setAssetTreeRoot(newAssetTreeRoot, clearCurrentNodeParentId(editorState$1)));
            } else {
              return clearCurrentNodeData(setAssetTreeRoot(newAssetTreeRoot, editorState$1));
            }
          }));
    _1(param[1], [
          UpdateAction,
          /* Update */[/* array */[
              /* Asset */2,
              /* Inspector */1
            ]]
        ]);
    return /* () */0;
  }
  
  var MakeEventHandler$7 = MakeEventHandler$1([
        handleSelfLogic$6,
        setUndoValueToCopiedEngineState$7
      ]);
  
  
  /* MakeEventHandler Not a pure module */
  
  function isCurrentNodeIdEqualRootId(editorState) {
    var match = getCurrentNodeData(editorState);
    if (match !== undefined) {
      return isIdEqual(match[/* currentNodeId */0], getRootTreeNodeId(editorState));
    } else {
      return true;
    }
  }
  
  var addFolder = MakeEventHandler$6[/* pushUndoStackWithNoCopyEngineState */0];
  
  var removeAssetNode = MakeEventHandler$7[/* pushUndoStackWithNoCopyEngineState */0];
  
  var fileLoad = MakeEventHandler$5[/* pushUndoStackWithNoCopyEngineState */0];
  
  var component$9 = statelessComponent("MainEditorAssetHeader");
  
  function render$24(param, _) {
    var dispatchFunc = param[1];
    var store = param[0];
    return react_3$1("article", {
                key: "assetHeader",
                className: "wonder-asset-header"
              }, react_3$1("div", {
                    className: "header-item"
                  }, react_3$1("button", {
                        onClick: (function () {
                            return _3(addFolder, /* tuple */[
                                        store,
                                        dispatchFunc
                                      ], /* () */0, /* () */0);
                          })
                      }, textEl("addFolder"))), react_3$1("div", {
                    className: "header-item"
                  }, react_3$1("button", {
                        disabled: getEditorState(isCurrentNodeIdEqualRootId),
                        onClick: (function () {
                            return _3(removeAssetNode, /* tuple */[
                                        store,
                                        dispatchFunc
                                      ], /* () */0, /* () */0);
                          })
                      }, textEl("remove"))), react_3$1("div", {
                    className: "header-item"
                  }, react_3$1("input", {
                        className: "file-upload",
                        multiple: true,
                        type: "file",
                        onChange: (function (e) {
                            return _3(fileLoad, /* tuple */[
                                        store,
                                        dispatchFunc
                                      ], /* () */0, e);
                          })
                      })));
  }
  
  function make$15(store, dispatchFunc, _) {
    return /* record */[
            /* debugName */component$9[/* debugName */0],
            /* reactClassInternal */component$9[/* reactClassInternal */1],
            /* handedOffState */component$9[/* handedOffState */2],
            /* willReceiveProps */component$9[/* willReceiveProps */3],
            /* didMount */component$9[/* didMount */4],
            /* didUpdate */component$9[/* didUpdate */5],
            /* willUnmount */component$9[/* willUnmount */6],
            /* willUpdate */component$9[/* willUpdate */7],
            /* shouldUpdate */component$9[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$24(/* tuple */[
                            store,
                            dispatchFunc
                          ], self);
              }),
            /* initialState */component$9[/* initialState */10],
            /* retainedProps */component$9[/* retainedProps */11],
            /* reducer */component$9[/* reducer */12],
            /* subscriptions */component$9[/* subscriptions */13],
            /* jsElementWrapped */component$9[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function onSelect$1(fileId, fileType, dispatchFunc, _) {
    setState(setCurrentNodeData(/* record */[
              /* currentNodeId */fileId,
              /* nodeType */fileType
            ], getState(/* () */0)));
    setState(setCurrentSelectSource(/* Asset */1, clearCurrentSceneTreeNode(getState(/* () */0))));
    _1(dispatchFunc, [
          UpdateAction,
          /* Update */[/* array */[/* All */0]]
        ]);
    return /* () */0;
  }
  
  var Method$9 = /* module */[/* onSelect */onSelect$1];
  
  var component$11 = statelessComponent("FileBox");
  
  function render$26(param, param$1, _) {
    var flag = param$1[5];
    var fileType = param$1[3];
    var fileId = param$1[2];
    var dragImg = param$1[0];
    var dispatchFunc = param[1];
    var className = "wonder-asset-fileBox " + (
      param$1[6] ? "item-active" : ""
    );
    return react_3$1("article", {
                className: className,
                onClick: (function (_event) {
                    return onSelect$1(fileId, fileType, dispatchFunc, _event);
                  })
              }, react_3$1("img", {
                    src: param$1[1],
                    onDragStart: (function (param) {
                        return dragStart(fileId, flag, dragImg, param);
                      })
                  }), react_3$1("span", {
                    className: "item-text"
                  }, textEl(param$1[4])));
  }
  
  function make$17(store, dispatchFunc, dragImg, imgSrc, fileId, fileType, fileName, flag, isSelected, _) {
    return /* record */[
            /* debugName */component$11[/* debugName */0],
            /* reactClassInternal */component$11[/* reactClassInternal */1],
            /* handedOffState */component$11[/* handedOffState */2],
            /* willReceiveProps */component$11[/* willReceiveProps */3],
            /* didMount */component$11[/* didMount */4],
            /* didUpdate */component$11[/* didUpdate */5],
            /* willUnmount */component$11[/* willUnmount */6],
            /* willUpdate */component$11[/* willUpdate */7],
            /* shouldUpdate */component$11[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$26(/* tuple */[
                            store,
                            dispatchFunc
                          ], /* tuple */[
                            dragImg,
                            imgSrc,
                            fileId,
                            fileType,
                            fileName,
                            flag,
                            isSelected
                          ], self);
              }),
            /* initialState */component$11[/* initialState */10],
            /* retainedProps */component$11[/* retainedProps */11],
            /* reducer */component$11[/* reducer */12],
            /* subscriptions */component$11[/* subscriptions */13],
            /* jsElementWrapped */component$11[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function bindClickStream(isSingleClick, debounceTime, clickStream) {
    var count = /* record */[/* contents */0];
    return tap((function () {
                  count[0] = 0;
                  return /* () */0;
                }), filter$1((function () {
                      if (isSingleClick) {
                        return count[0] === 1;
                      } else {
                        return count[0] >= 2;
                      }
                    }), tap((function () {
                          if (isSingleClick) {
                            if (count[0] !== 1) {
                              count[0] = 0;
                              return /* () */0;
                            } else {
                              return 0;
                            }
                          } else if (count[0] < 2) {
                            count[0] = 0;
                            return /* () */0;
                          } else {
                            return 0;
                          }
                        }), debounce(debounceTime, tap((function () {
                                  count[0] = count[0] + 1 | 0;
                                  return /* () */0;
                                }), clickStream)))));
  }
  
  
  /* most Not a pure module */
  
  var onClick = Method$9[/* onSelect */0];
  
  var component$12 = reducerComponent("FolderBox");
  
  function reducer$4(onDrop, action, state) {
    if (typeof action === "number") {
      switch (action) {
        case 0 : 
            return /* NoUpdate */0;
        case 1 : 
            return /* Update */__(0, [/* record */[/* style */addStyleProp("border", "2px dashed blue", state[/* style */0])]]);
        case 2 : 
            return /* Update */__(0, [/* record */[/* style */addStyleProp("border", "1px solid red", state[/* style */0])]]);
        case 3 : 
            return /* Update */__(0, [/* record */[/* style */addStyleProp("border", "1px solid red", addStyleProp("opacity", "1", state[/* style */0]))]]);
        case 4 : 
            return /* Update */__(0, [/* record */[/* style */addStyleProp("opacity", "0.2", state[/* style */0])]]);
        
      }
    } else {
      var removedId = action[1];
      var targetId = action[0];
      return sideEffects((function () {
                    return _1(onDrop, /* tuple */[
                                targetId,
                                removedId
                              ]);
                  }));
    }
  }
  
  function render$27(_, param, param$1, param$2) {
    var send = param$2[/* send */3];
    var handleRelationError = param$1[1];
    var isFlag = param$1[0];
    var flag = param[4];
    var folderId = param[2];
    var dragImg = param[0];
    var id = "folder-" + String(folderId);
    return react_3$1("article", {
                className: "wonder-asset-folderBox",
                id: id,
                style: param$2[/* state */1][/* style */0]
              }, react_3$1("div", {
                    className: "item-ground",
                    draggable: true,
                    onDragEnd: (function (_e) {
                        return _1(send, handleDrageEnd(_e));
                      }),
                    onDragEnter: (function (_e) {
                        return _1(send, handleDragEnter(folderId, isFlag, handleRelationError, _e));
                      }),
                    onDragLeave: (function (_e) {
                        return _1(send, handleDragLeave(folderId, isFlag, handleRelationError, _e));
                      }),
                    onDragOver: handleDragOver,
                    onDragStart: (function (_e) {
                        return _1(send, handleDragStart(folderId, flag, dragImg, _e));
                      }),
                    onDrop: (function (_e) {
                        return _1(send, handleDrop(folderId, isFlag, handleRelationError, _e));
                      })
                  }), react_3$1("img", {
                    src: param[1]
                  }), react_3$1("span", {
                    className: "item-text"
                  }, textEl(param[3])));
  }
  
  function make$18(store, dispatchFunc, dragImg, imgSrc, folderId, fileType, name, isSelected, flag, debounceTime, onDrop, isFlag, handleRelationError, _) {
    return /* record */[
            /* debugName */component$12[/* debugName */0],
            /* reactClassInternal */component$12[/* reactClassInternal */1],
            /* handedOffState */component$12[/* handedOffState */2],
            /* willReceiveProps */component$12[/* willReceiveProps */3],
            /* didMount */(function () {
                var clickStream = fromEvent("mousedown", document.getElementById("folder-" + String(folderId)), true);
                observe((function () {
                        return onSelect(dispatchFunc, fileType, folderId);
                      }), bindClickStream(false, debounceTime, clickStream));
                observe((function ($$event) {
                        return _4(onClick, folderId, fileType, dispatchFunc, $$event);
                      }), bindClickStream(true, debounceTime, clickStream));
                return /* () */0;
              }),
            /* didUpdate */component$12[/* didUpdate */5],
            /* willUnmount */component$12[/* willUnmount */6],
            /* willUpdate */component$12[/* willUpdate */7],
            /* shouldUpdate */component$12[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$27(/* tuple */[
                            store,
                            dispatchFunc
                          ], /* tuple */[
                            dragImg,
                            imgSrc,
                            folderId,
                            name,
                            flag
                          ], /* tuple */[
                            isFlag,
                            handleRelationError
                          ], self);
              }),
            /* initialState */(function () {
                if (isSelected) {
                  return /* record */[/* style */{
                            background: "red"
                          }];
                } else {
                  return /* record */[/* style */{
                            border: "1px solid red"
                          }];
                }
              }),
            /* retainedProps */component$12[/* retainedProps */11],
            /* reducer */(function (param, param$1) {
                return reducer$4(onDrop, param, param$1);
              }),
            /* subscriptions */component$12[/* subscriptions */13],
            /* jsElementWrapped */component$12[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function _isSelected$1(currentNodeData, nodeId) {
    if (currentNodeData !== undefined) {
      return isIdEqual(nodeId, currentNodeData[/* currentNodeId */0]);
    } else {
      return false;
    }
  }
  
  function showSpecificTreeNodeChildren(param, param$1, editorState, assetTreeNodeChildrenArr) {
    var currentNodeData = param$1[2];
    var debounceTime = param$1[1];
    var dragImg = param$1[0];
    var dispatchFunc = param[1];
    var store = param[0];
    return assetTreeNodeChildrenArr.map((function (param) {
                  var nodeId = param[/* id */0];
                  var type_ = param[/* type_ */2];
                  switch (type_) {
                    case 0 : 
                        var match = unsafeGet$1(nodeId, getFolderNodeMap(editorState));
                        return element(getRandomKey(/* () */0), undefined, make$18(store, dispatchFunc, dragImg, "./public/img/11.jpg", nodeId, type_, match[/* name */0], _isSelected$1(currentNodeData, nodeId), getFlag$1(/* () */0), debounceTime, _2(dragNodeToFolderFunc, /* tuple */[
                                            store,
                                            dispatchFunc
                                          ], /* () */0), isFlag$1, isTreeNodeRelationError, /* array */[]));
                    case 1 : 
                        var match$1 = unsafeGet$1(nodeId, getJsonNodeMap(editorState));
                        return element(getRandomKey(/* () */0), undefined, make$17(store, dispatchFunc, dragImg, "./public/img/12.jpg", nodeId, type_, match$1[/* name */0], getFlag$1(/* () */0), _isSelected$1(currentNodeData, nodeId), /* array */[]));
                    case 2 : 
                        var match$2 = unsafeGet$1(nodeId, getTextureNodeMap(editorState));
                        var textureIndex = match$2[/* textureIndex */0];
                        return element(getRandomKey(/* () */0), undefined, make$17(store, dispatchFunc, dragImg, unsafeGet$1(textureIndex, getImageBase64Map(editorState)), nodeId, type_, getEngineStateToGetData((function (param) {
                                              return unsafeGetBasicSourceTextureName(textureIndex, param);
                                            })), getFlag$1(/* () */0), _isSelected$1(currentNodeData, nodeId), /* array */[]));
                    
                  }
                }));
  }
  
  function buildCurrentTreeNodeChildrenComponent(param, dragImg, debounceTime) {
    var editorState = getState(/* () */0);
    return showSpecificTreeNodeChildren(/* tuple */[
                param[0],
                param[1]
              ], /* tuple */[
                dragImg,
                debounceTime,
                getCurrentNodeData(editorState)
              ], editorState, unsafeGet$3(getSpecificTreeNodeById(getTargetTreeNodeId(editorState), unsafeGetAssetTreeRoot(editorState)))[/* children */1]);
  }
  
  var component$10 = statelessComponent("MainEditorAssetHeader");
  
  function render$25(param, dragImg, debounceTime, _) {
    return react_3$1("article", {
                key: "assetChildrenNode",
                className: "wonder-asset-assetChildren"
              }, buildCurrentTreeNodeChildrenComponent(/* tuple */[
                    param[0],
                    param[1]
                  ], dragImg, debounceTime));
  }
  
  function make$16(store, dispatchFunc, dragImg, debounceTime, _) {
    return /* record */[
            /* debugName */component$10[/* debugName */0],
            /* reactClassInternal */component$10[/* reactClassInternal */1],
            /* handedOffState */component$10[/* handedOffState */2],
            /* willReceiveProps */component$10[/* willReceiveProps */3],
            /* didMount */component$10[/* didMount */4],
            /* didUpdate */component$10[/* didUpdate */5],
            /* willUnmount */component$10[/* willUnmount */6],
            /* willUpdate */component$10[/* willUpdate */7],
            /* shouldUpdate */component$10[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$25(/* tuple */[
                            store,
                            dispatchFunc
                          ], dragImg, debounceTime, self);
              }),
            /* initialState */component$10[/* initialState */10],
            /* retainedProps */component$10[/* retainedProps */11],
            /* reducer */component$10[/* reducer */12],
            /* subscriptions */component$10[/* subscriptions */13],
            /* jsElementWrapped */component$10[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  var component$6 = statelessComponentWithRetainedProps("MainEditorAsset");
  
  function render$21(param, _) {
    var dispatchFunc = param[1];
    var store = param[0];
    var dragImg = document.createElement("img");
    return react_3$1("article", {
                key: "asset",
                className: "wonder-asset-component"
              }, react_3$1("div", {
                    className: "asset-tree"
                  }, element(undefined, undefined, make$15(store, dispatchFunc, /* array */[])), element(undefined, undefined, make$13(store, dispatchFunc, dragImg, /* array */[]))), element(undefined, undefined, make$16(store, dispatchFunc, dragImg, 200, /* array */[])));
  }
  
  function shouldUpdate(param) {
    return shouldComponentUpdate(/* Asset */2, param[/* newSelf */1][/* retainedProps */2][/* updateTypeArr */0]);
  }
  
  function make$12(store, dispatchFunc, _) {
    return /* record */[
            /* debugName */component$6[/* debugName */0],
            /* reactClassInternal */component$6[/* reactClassInternal */1],
            /* handedOffState */component$6[/* handedOffState */2],
            /* willReceiveProps */component$6[/* willReceiveProps */3],
            /* didMount */component$6[/* didMount */4],
            /* didUpdate */component$6[/* didUpdate */5],
            /* willUnmount */component$6[/* willUnmount */6],
            /* willUpdate */component$6[/* willUpdate */7],
            /* shouldUpdate */shouldUpdate,
            /* render */(function (self) {
                return render$21(/* tuple */[
                            store,
                            dispatchFunc
                          ], self);
              }),
            /* initialState */component$6[/* initialState */10],
            /* retainedProps : record */[/* updateTypeArr */getUpdateComponentTypeArr(store)],
            /* reducer */component$6[/* reducer */12],
            /* subscriptions */component$6[/* subscriptions */13],
            /* jsElementWrapped */component$6[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function isValueEqual(_, sourceValue, targetValue) {
    return caml_equal(sourceValue, targetValue);
  }
  
  
  /* No side effect */
  
  function handleSpeficFuncByAssetNodeType(type_, param) {
    switch (type_) {
      case 0 : 
          return _1(param[0], getFolderNodeMap(getState(/* () */0)));
      case 1 : 
          return _1(param[1], getJsonNodeMap(getState(/* () */0)));
      case 2 : 
          return _1(param[2], getTextureNodeMap(getState(/* () */0)));
      
    }
  }
  
  
  /* StateEditorService-WonderEditor Not a pure module */
  
  function change$2($$event) {
    var inputVal = caml_int_of_string($$event.target.value);
    return /* Change */[inputVal];
  }
  
  function renderContent(options, _) {
    return options.map((function (param) {
                  var value = param[/* value */1];
                  return react_3$1("option", {
                              key: value,
                              value: String(param[/* key */0])
                            }, textEl(value));
                }));
  }
  
  var component$16 = reducerComponent("Select");
  
  function reducer$6(onChange, action) {
    var selectedKey = action[0];
    return (function () {
        return updateWithSideEffects(/* record */[/* selectedKey */selectedKey], (function () {
                      return _1(onChange, selectedKey);
                    }));
      });
  }
  
  function render$31(label, options, param) {
    var send = param[/* send */3];
    var state = param[/* state */1];
    return react_3$1("article", {
                key: "Select",
                className: "wonder-select"
              }, label !== undefined ? react_3$1("span", {
                      className: ""
                    }, textEl(label)) : null, react_3$1("select", {
                    value: String(state[/* selectedKey */0]),
                    onChange: (function (e) {
                        return _1(send, change$2(e));
                      })
                  }, renderContent(options, state)));
  }
  
  function make$22(label, options, selectedKey, onChange, _) {
    return /* record */[
            /* debugName */component$16[/* debugName */0],
            /* reactClassInternal */component$16[/* reactClassInternal */1],
            /* handedOffState */component$16[/* handedOffState */2],
            /* willReceiveProps */component$16[/* willReceiveProps */3],
            /* didMount */component$16[/* didMount */4],
            /* didUpdate */component$16[/* didUpdate */5],
            /* willUnmount */component$16[/* willUnmount */6],
            /* willUpdate */component$16[/* willUpdate */7],
            /* shouldUpdate */component$16[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$31(label, options, self);
              }),
            /* initialState */(function () {
                return /* record */[/* selectedKey */selectedKey];
              }),
            /* retainedProps */component$16[/* retainedProps */11],
            /* reducer */(function (param) {
                return reducer$6(onChange, param);
              }),
            /* subscriptions */component$16[/* subscriptions */13],
            /* jsElementWrapped */component$16[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function change$3($$event) {
    var inputVal = $$event.target.value;
    return /* Change */[inputVal];
  }
  
  function triggerOnChange(value, onChangeFunc) {
    if (onChangeFunc !== undefined) {
      return _1(onChangeFunc, value);
    } else {
      return /* () */0;
    }
  }
  
  function triggerOnBlur(value, onBlurFunc) {
    if (onBlurFunc !== undefined) {
      return _1(onBlurFunc, value);
    } else {
      return /* () */0;
    }
  }
  
  function handleBlurAction(state, canBeNull, onBlurFunc) {
    if (canBeNull !== undefined) {
      if (canBeNull) {
        triggerOnBlur(state[/* inputValue */0], onBlurFunc);
        return /* NoUpdate */0;
      } else {
        var value = state[/* inputValue */0];
        if (value === "") {
          return /* Update */__(0, [/* record */[
                      /* inputValue */state[/* originalName */1],
                      /* originalName */state[/* originalName */1]
                    ]]);
        } else {
          return updateWithSideEffects(/* record */[
                      /* inputValue */state[/* inputValue */0],
                      /* originalName */value
                    ], (function () {
                        return triggerOnBlur(state[/* inputValue */0], onBlurFunc);
                      }));
        }
      }
    } else {
      triggerOnBlur(state[/* inputValue */0], onBlurFunc);
      return /* NoUpdate */0;
    }
  }
  
  var component$17 = reducerComponent("StringInput");
  
  function reducer$7(param, canBeNull, action, state) {
    var onChangeFunc = param[0];
    if (action) {
      var value = action[0];
      return updateWithSideEffects(/* record */[
                  /* inputValue */value,
                  /* originalName */state[/* originalName */1]
                ], (function () {
                    return triggerOnChange(value, onChangeFunc);
                  }));
    } else {
      return handleBlurAction(state, canBeNull, param[1]);
    }
  }
  
  function render$32(label, param) {
    var send = param[/* send */3];
    return react_3$1("article", {
                className: "wonder-string-input"
              }, label !== undefined ? react_3$1("span", {
                      className: "component-label"
                    }, textEl(label + " : ")) : null, react_3$1("input", {
                    className: "input-component float-input",
                    type: "text",
                    value: param[/* state */1][/* inputValue */0],
                    onBlur: (function () {
                        return _1(send, /* Blur */0);
                      }),
                    onChange: (function (_e) {
                        return _1(send, change$3(_e));
                      })
                  }));
  }
  
  function make$23(defaultValue, label, onChange, onBlur, canBeNull, _) {
    var partial_arg = /* tuple */[
      onChange,
      onBlur
    ];
    return /* record */[
            /* debugName */component$17[/* debugName */0],
            /* reactClassInternal */component$17[/* reactClassInternal */1],
            /* handedOffState */component$17[/* handedOffState */2],
            /* willReceiveProps */component$17[/* willReceiveProps */3],
            /* didMount */component$17[/* didMount */4],
            /* didUpdate */component$17[/* didUpdate */5],
            /* willUnmount */component$17[/* willUnmount */6],
            /* willUpdate */component$17[/* willUpdate */7],
            /* shouldUpdate */component$17[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$32(label, self);
              }),
            /* initialState */(function () {
                if (defaultValue !== undefined) {
                  var value = defaultValue;
                  return /* record */[
                          /* inputValue */value,
                          /* originalName */value
                        ];
                } else {
                  return /* record */[
                          /* inputValue */"",
                          /* originalName */""
                        ];
                }
              }),
            /* retainedProps */component$17[/* retainedProps */11],
            /* reducer */(function (param, param$1) {
                return reducer$7(partial_arg, canBeNull, param, param$1);
              }),
            /* subscriptions */component$17[/* subscriptions */13],
            /* jsElementWrapped */component$17[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function getWrapOptions() {
    return /* array */[
            /* record */[
              /* key : REPEAT */2,
              /* value */"REPEAT"
            ],
            /* record */[
              /* key : MIRRORED_REPEAT */1,
              /* value */"MIRRORED_REPEAT"
            ],
            /* record */[
              /* key : CLAMP_TO_EDGE */0,
              /* value */"CLAMP_TO_EDGE"
            ]
          ];
  }
  
  function changeWrapS(textureIndex, value) {
    return getAndRefreshEngineStateWithDiff(/* array */[/* record */[
                  /* arguments : array */[textureIndex],
                  /* type_ : Texture */8
                ]], (function (param, param$1) {
                  return setWrapS$3(value, param, param$1);
                }));
  }
  
  function changeWrapT(textureIndex, value) {
    return getAndRefreshEngineStateWithDiff(/* array */[/* record */[
                  /* arguments : array */[textureIndex],
                  /* type_ : Texture */8
                ]], (function (param, param$1) {
                  return setWrapT$3(value, param, param$1);
                }));
  }
  
  
  /* StateLogicService-WonderEditor Not a pure module */
  
  function getFilterOptions() {
    return /* array */[
            /* record */[
              /* key : NEAREST */0,
              /* value */"NEAREST"
            ],
            /* record */[
              /* key : LINEAR */1,
              /* value */"LINEAR"
            ],
            /* record */[
              /* key : NEAREST_MIPMAP_NEAREST */2,
              /* value */"NEAREST_MIPMAP_NEAREST"
            ],
            /* record */[
              /* key : LINEAR_MIPMAP_NEAREST */3,
              /* value */"LINEAR_MIPMAP_NEAREST"
            ],
            /* record */[
              /* key : NEAREST_MIPMAP_LINEAR */4,
              /* value */"NEAREST_MIPMAP_LINEAR"
            ],
            /* record */[
              /* key : LINEAR_MIPMAP_LINEAR */5,
              /* value */"LINEAR_MIPMAP_LINEAR"
            ]
          ];
  }
  
  function changeMagFilter(textureIndex, value) {
    return getAndRefreshEngineStateWithDiff(/* array */[/* record */[
                  /* arguments : array */[textureIndex],
                  /* type_ : Texture */8
                ]], (function (param, param$1) {
                  return setMagFilter$3(value, param, param$1);
                }));
  }
  
  function changeMinFilter(textureIndex, value) {
    return getAndRefreshEngineStateWithDiff(/* array */[/* record */[
                  /* arguments : array */[textureIndex],
                  /* type_ : Texture */8
                ]], (function (param, param$1) {
                  return setMinFilter$3(value, param, param$1);
                }));
  }
  
  
  /* StateLogicService-WonderEditor Not a pure module */
  
  function renderWrapSSelect(textureIndex) {
    return element(undefined, undefined, make$22("WrapS Mode", getWrapOptions(/* () */0), getEngineStateToGetData((function (param) {
                          return getWrapS$3(textureIndex, param);
                        })), (function (param) {
                      return changeWrapS(textureIndex, param);
                    }), /* array */[]));
  }
  
  function renderWrapTSelect(textureIndex) {
    return element(undefined, undefined, make$22("WrapT Mode", getWrapOptions(/* () */0), getEngineStateToGetData((function (param) {
                          return getWrapT$3(textureIndex, param);
                        })), (function (param) {
                      return changeWrapT(textureIndex, param);
                    }), /* array */[]));
  }
  
  function renderMagFilterSelect(textureIndex) {
    return element(undefined, undefined, make$22("Mag Filter Mode", getFilterOptions(/* () */0), getEngineStateToGetData((function (param) {
                          return getMagFilter$3(textureIndex, param);
                        })), (function (param) {
                      return changeMagFilter(textureIndex, param);
                    }), /* array */[]));
  }
  
  function renderMinFilterSelect(textureIndex) {
    return element(undefined, undefined, make$22("Min Filter Mode", getFilterOptions(/* () */0), getEngineStateToGetData((function (param) {
                          return getMinFilter$3(textureIndex, param);
                        })), (function (param) {
                      return changeMinFilter(textureIndex, param);
                    }), /* array */[]));
  }
  
  var component$15 = statelessComponent("TextureInspector");
  
  function render$30(param, name, textureIndex, _) {
    return react_3$1("article", {
                key: "TextureInspector",
                className: "wonder-texture-assetTree"
              }, react_3$1("div", {
                    className: ""
                  }, react_3$1("h1", undefined, textEl("Texture")), react_3$1("hr", undefined), react_3$1("div", {
                        className: ""
                      }, element(undefined, undefined, make$23(name, "name", undefined, param[1], false, /* array */[]))), react_3$1("div", {
                        className: ""
                      }, renderWrapSSelect(textureIndex)), react_3$1("div", {
                        className: ""
                      }, renderWrapTSelect(textureIndex)), react_3$1("div", {
                        className: ""
                      }, renderMagFilterSelect(textureIndex)), react_3$1("div", {
                        className: ""
                      }, renderMinFilterSelect(textureIndex))));
  }
  
  function make$21(_, dispatchFunc, name, textureIndex, renameFunc, _$1) {
    return /* record */[
            /* debugName */component$15[/* debugName */0],
            /* reactClassInternal */component$15[/* reactClassInternal */1],
            /* handedOffState */component$15[/* handedOffState */2],
            /* willReceiveProps */component$15[/* willReceiveProps */3],
            /* didMount */component$15[/* didMount */4],
            /* didUpdate */component$15[/* didUpdate */5],
            /* willUnmount */component$15[/* willUnmount */6],
            /* willUpdate */component$15[/* willUpdate */7],
            /* shouldUpdate */component$15[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$30(/* tuple */[
                            dispatchFunc,
                            renameFunc
                          ], name, textureIndex, self);
              }),
            /* initialState */component$15[/* initialState */10],
            /* retainedProps */component$15[/* retainedProps */11],
            /* reducer */component$15[/* reducer */12],
            /* subscriptions */component$15[/* subscriptions */13],
            /* jsElementWrapped */component$15[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function getTextureBaseNameAndExtName(currentNodeId, textureNodeMap) {
    var partial_arg = unsafeGet$1(currentNodeId, textureNodeMap)[/* textureIndex */0];
    return getBaseNameAndExtName(getEngineStateToGetData((function (param) {
                      return unsafeGetBasicSourceTextureName(partial_arg, param);
                    })));
  }
  
  function renameTextureToEngine(texture, newName) {
    return getAndSetEngineStateWithDiff(/* array */[/* record */[
                  /* arguments : array */[texture],
                  /* type_ : Texture */8
                ]], (function (param, param$1) {
                  return setBasicSourceTextureName(newName, param, param$1);
                }));
  }
  
  function changeTextureMapAndRereshEngineState(material, mapId, setMapFunc) {
    var match = _3(setMapFunc, mapId, material, /* tuple */[
          getEditEngineState(/* () */0),
          getRunEngineState(/* () */0)
        ]);
    setEditEngineState(loopBody(0, match[0]));
    return setRunEngineState(loopBody(0, match[1]));
  }
  
  function _replaceMaterialAndRefreshEngineState(gameObject, material, param, setMapFunc) {
    var color = getEngineStateToGetData((function (param) {
            return getColor$11(material, param);
          }));
    var match = _3(param[0], gameObject, material, /* tuple */[
          getEditEngineState(/* () */0),
          getRunEngineState(/* () */0)
        ]);
    var match$1 = _2(param[2], match[0], match[1]);
    var newMaterial = match$1[0];
    var engineStateTuple = _3(param[1], color, newMaterial, /* tuple */[
          match$1[1],
          match$1[2]
        ]);
    var match$2 = handleFuncWithDiff(/* array */[/* record */[
            /* arguments : array */[gameObject],
            /* type_ : GameObject */0
          ]], initGameObject, _3(param[3], gameObject, newMaterial, setMapFunc !== undefined ? _2(setMapFunc, newMaterial, engineStateTuple) : engineStateTuple));
    setEditEngineState(loopBody(0, match$2[0]));
    return setRunEngineState(loopBody(0, match$2[1]));
  }
  
  function replaceMaterialComponentToHasMapOne(gameObject, material, mapId, param, setMapFunc) {
    return _replaceMaterialAndRefreshEngineState(gameObject, material, /* tuple */[
                param[0],
                param[1],
                param[2],
                param[3]
              ], _1(setMapFunc, mapId));
  }
  
  function replaceMaterialComponentToNoMapOne(gameObject, material, param) {
    return _replaceMaterialAndRefreshEngineState(gameObject, material, /* tuple */[
                param[0],
                param[1],
                param[2],
                param[3]
              ], undefined);
  }
  
  
  /* StateLogicService-WonderEditor Not a pure module */
  
  var setUndoValueToCopiedEngineState$8 = EmptyEventHandler[1];
  
  function _renameFolderNode(folderId, name, editorState, folderNodeMap) {
    var __x = renameFolderNodeResult(name, unsafeGet$1(folderId, folderNodeMap));
    setState(setResult$2(folderId, __x, editorState));
    return /* () */0;
  }
  
  function _renameJsonNode(jsonId, name, editorState, jsonNodeMap) {
    var __x = renameJsonNodeResult(name, unsafeGet$1(jsonId, jsonNodeMap));
    setState(setResult(jsonId, __x, editorState));
    return /* () */0;
  }
  
  function handleSelfLogic$7(param, param$1, value) {
    var nodeId = param$1[0];
    var editorState = getState(/* () */0);
    handleSpeficFuncByAssetNodeType(param$1[1], /* tuple */[
          (function (param) {
              return _renameFolderNode(nodeId, value, editorState, param);
            }),
          (function (param) {
              return _renameJsonNode(nodeId, value, editorState, param);
            }),
          (function () {
              return renameTextureToEngine(nodeId, value);
            })
        ]);
    _1(param[1], [
          UpdateAction,
          /* Update */[/* array */[/* Asset */2]]
        ]);
    return /* () */0;
  }
  
  var MakeEventHandler$8 = MakeEventHandler$1([
        handleSelfLogic$7,
        setUndoValueToCopiedEngineState$8
      ]);
  
  
  /* MakeEventHandler Not a pure module */
  
  function change$1($$event) {
    var inputVal = $$event.target.value;
    return /* Change */[inputVal];
  }
  
  var renameAssetTreeNode = MakeEventHandler$8[/* pushUndoStackWithNoCopyEngineState */0];
  
  function buildFolderComponent(state, send, currentNodeId, _) {
    return react_3$1("div", {
                className: ""
              }, react_3$1("h1", undefined, textEl("Folder")), react_3$1("hr", undefined), react_3$1("span", {
                    className: ""
                  }, textEl("name:")), react_3$1("input", {
                    className: "input-component float-input",
                    disabled: isIdEqual(getEditorState(getRootTreeNodeId), currentNodeId),
                    type: "text",
                    value: state[/* inputValue */0],
                    onBlur: (function () {
                        return _1(send, /* Blur */0);
                      }),
                    onChange: (function (_e) {
                        return _1(send, change$1(_e));
                      })
                  }));
  }
  
  function buildJsonComponent(state, send, currentNodeId, jsonNodeMap) {
    var match = unsafeGet$1(currentNodeId, jsonNodeMap);
    return react_3$1("div", undefined, react_3$1("h1", undefined, textEl("Json")), react_3$1("hr", undefined), react_3$1("span", {
                    className: ""
                  }, textEl("name:")), react_3$1("input", {
                    className: "input-component float-input",
                    type: "text",
                    value: state[/* inputValue */0],
                    onBlur: (function () {
                        return _1(send, /* Blur */0);
                      }),
                    onChange: (function (_e) {
                        return _1(send, change$1(_e));
                      })
                  }), react_3$1("p", undefined, textEl(match[/* jsonResult */1])));
  }
  
  function buildTextureComponent(param, param$1, state, textureNodeMap) {
    var dispatchFunc = param[1];
    var store = param[0];
    var match = unsafeGet$1(param$1[0], textureNodeMap);
    var textureIndex = match[/* textureIndex */0];
    return element(undefined, undefined, make$21(store, dispatchFunc, state[/* inputValue */0], textureIndex, _2(renameAssetTreeNode, /* tuple */[
                        store,
                        dispatchFunc
                      ], /* tuple */[
                        textureIndex,
                        param$1[1]
                      ]), /* array */[]));
  }
  
  function showAssetNodeComponent(reduxTuple, currentNodeId, nodeType, param) {
    var send = param[/* send */3];
    var state = param[/* state */1];
    var partial_arg = /* tuple */[
      currentNodeId,
      nodeType
    ];
    return handleSpeficFuncByAssetNodeType(nodeType, /* tuple */[
                (function (param) {
                    return buildFolderComponent(state, send, currentNodeId, param);
                  }),
                (function (param) {
                    return buildJsonComponent(state, send, currentNodeId, param);
                  }),
                (function (param) {
                    return buildTextureComponent(reduxTuple, partial_arg, state, param);
                  })
              ]);
  }
  
  function initFolderName(currentNodeId, folderNodeMap) {
    var match = getFolderBaseNameAndExtName(currentNodeId, folderNodeMap);
    var fileName = match[0];
    return /* record */[
            /* inputValue */fileName,
            /* originalName */fileName,
            /* postfix */match[1]
          ];
  }
  
  function initJsonName(currentNodeId, jsonNodeMap) {
    var match = getJsonBaseNameAndExtName(currentNodeId, jsonNodeMap);
    var fileName = match[0];
    return /* record */[
            /* inputValue */fileName,
            /* originalName */fileName,
            /* postfix */match[1]
          ];
  }
  
  function initTextureName(currentNodeId, textureNodeMap) {
    var match = getTextureBaseNameAndExtName(currentNodeId, textureNodeMap);
    var fileName = match[0];
    return /* record */[
            /* inputValue */fileName,
            /* originalName */fileName,
            /* postfix */match[1]
          ];
  }
  
  var component$14 = reducerComponent("AssetTreeInspector");
  
  function reducer$5(param, currentNodeId, nodeType, action) {
    var dispatchFunc = param[1];
    var store = param[0];
    if (action) {
      var value = action[0];
      return (function (state) {
          return /* Update */__(0, [/* record */[
                      /* inputValue */value,
                      /* originalName */state[/* originalName */1],
                      /* postfix */state[/* postfix */2]
                    ]]);
        });
    } else {
      return (function (state) {
          var value = state[/* inputValue */0];
          if (value === "") {
            return /* Update */__(0, [/* record */[
                        /* inputValue */state[/* originalName */1],
                        /* originalName */state[/* originalName */1],
                        /* postfix */state[/* postfix */2]
                      ]]);
          } else {
            var match = isValueEqual(/* String */0, state[/* originalName */1], state[/* inputValue */0]);
            if (match) {
              return /* NoUpdate */0;
            } else {
              return updateWithSideEffects(/* record */[
                          /* inputValue */state[/* inputValue */0],
                          /* originalName */value,
                          /* postfix */state[/* postfix */2]
                        ], (function () {
                            return _3(renameAssetTreeNode, /* tuple */[
                                        store,
                                        dispatchFunc
                                      ], /* tuple */[
                                        currentNodeId,
                                        nodeType
                                      ], value + state[/* postfix */2]);
                          }));
            }
          }
        });
    }
  }
  
  function render$29(param, currentNodeId, nodeType, self) {
    return react_3$1("article", {
                key: "AssetTreeInspector",
                className: "wonder-inspector-assetTree"
              }, showAssetNodeComponent(/* tuple */[
                    param[0],
                    param[1]
                  ], currentNodeId, nodeType, self));
  }
  
  function make$20(store, dispatchFunc, currentNodeId, nodeType, _) {
    var partial_arg = /* tuple */[
      store,
      dispatchFunc
    ];
    return /* record */[
            /* debugName */component$14[/* debugName */0],
            /* reactClassInternal */component$14[/* reactClassInternal */1],
            /* handedOffState */component$14[/* handedOffState */2],
            /* willReceiveProps */component$14[/* willReceiveProps */3],
            /* didMount */component$14[/* didMount */4],
            /* didUpdate */component$14[/* didUpdate */5],
            /* willUnmount */component$14[/* willUnmount */6],
            /* willUpdate */component$14[/* willUpdate */7],
            /* shouldUpdate */component$14[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$29(/* tuple */[
                            store,
                            dispatchFunc
                          ], currentNodeId, nodeType, self);
              }),
            /* initialState */(function () {
                return handleSpeficFuncByAssetNodeType(nodeType, /* tuple */[
                            (function (param) {
                                return initFolderName(currentNodeId, param);
                              }),
                            (function (param) {
                                return initJsonName(currentNodeId, param);
                              }),
                            (function (param) {
                                return initTextureName(currentNodeId, param);
                              })
                          ]);
              }),
            /* retainedProps */component$14[/* retainedProps */11],
            /* reducer */(function (param) {
                return reducer$5(partial_arg, currentNodeId, nodeType, param);
              }),
            /* subscriptions */component$14[/* subscriptions */13],
            /* jsElementWrapped */component$14[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  var objectWithoutProperties = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  
  exports.default = function (obj, keys) {
    var target = {};
  
    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }
  
    return target;
  };
  });
  
  var _objectWithoutProperties = unwrapExports(objectWithoutProperties);
  
  var _global = createCommonjsModule(function (module) {
  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global = module.exports = typeof window != 'undefined' && window.Math == Math
    ? window : typeof self != 'undefined' && self.Math == Math ? self
    // eslint-disable-next-line no-new-func
    : Function('return this')();
  if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
  });
  
  var _core = createCommonjsModule(function (module) {
  var core = module.exports = { version: '2.5.7' };
  if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
  });
  
  var _core_1 = _core.version;
  
  var _aFunction = function (it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  };
  
  // optional / simple context binding
  
  var _ctx = function (fn, that, length) {
    _aFunction(fn);
    if (that === undefined) return fn;
    switch (length) {
      case 1: return function (a) {
        return fn.call(that, a);
      };
      case 2: return function (a, b) {
        return fn.call(that, a, b);
      };
      case 3: return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
    }
    return function (/* ...args */) {
      return fn.apply(that, arguments);
    };
  };
  
  var _isObject = function (it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };
  
  var _anObject = function (it) {
    if (!_isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
  };
  
  var _fails = function (exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };
  
  // Thank's IE8 for his funny defineProperty
  var _descriptors = !_fails(function () {
    return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
  });
  
  var document$1 = _global.document;
  // typeof document.createElement is 'object' in old IE
  var is$1 = _isObject(document$1) && _isObject(document$1.createElement);
  var _domCreate = function (it) {
    return is$1 ? document$1.createElement(it) : {};
  };
  
  var _ie8DomDefine = !_descriptors && !_fails(function () {
    return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
  });
  
  // 7.1.1 ToPrimitive(input [, PreferredType])
  
  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string
  var _toPrimitive = function (it, S) {
    if (!_isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };
  
  var dP = Object.defineProperty;
  
  var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    _anObject(O);
    P = _toPrimitive(P, true);
    _anObject(Attributes);
    if (_ie8DomDefine) try {
      return dP(O, P, Attributes);
    } catch (e) { /* empty */ }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };
  
  var _objectDp = {
    f: f
  };
  
  var _propertyDesc = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };
  
  var _hide = _descriptors ? function (object, key, value) {
    return _objectDp.f(object, key, _propertyDesc(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };
  
  var hasOwnProperty$16 = {}.hasOwnProperty;
  var _has = function (it, key) {
    return hasOwnProperty$16.call(it, key);
  };
  
  var PROTOTYPE = 'prototype';
  
  var $export = function (type, name, source) {
    var IS_FORCED = type & $export.F;
    var IS_GLOBAL = type & $export.G;
    var IS_STATIC = type & $export.S;
    var IS_PROTO = type & $export.P;
    var IS_BIND = type & $export.B;
    var IS_WRAP = type & $export.W;
    var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
    var expProto = exports[PROTOTYPE];
    var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] : (_global[name] || {})[PROTOTYPE];
    var key, own, out;
    if (IS_GLOBAL) source = name;
    for (key in source) {
      // contains in native
      own = !IS_FORCED && target && target[key] !== undefined;
      if (own && _has(exports, key)) continue;
      // export native or passed
      out = own ? target[key] : source[key];
      // prevent global pollution for namespaces
      exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
      // bind timers to global for call from export context
      : IS_BIND && own ? _ctx(out, _global)
      // wrap global constructors for prevent change them in library
      : IS_WRAP && target[key] == out ? (function (C) {
        var F = function (a, b, c) {
          if (this instanceof C) {
            switch (arguments.length) {
              case 0: return new C();
              case 1: return new C(a);
              case 2: return new C(a, b);
            } return new C(a, b, c);
          } return C.apply(this, arguments);
        };
        F[PROTOTYPE] = C[PROTOTYPE];
        return F;
      // make static versions for prototype methods
      })(out) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
      // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
      if (IS_PROTO) {
        (exports.virtual || (exports.virtual = {}))[key] = out;
        // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
        if (type & $export.R && expProto && !expProto[key]) _hide(expProto, key, out);
      }
    }
  };
  // type bitmap
  $export.F = 1;   // forced
  $export.G = 2;   // global
  $export.S = 4;   // static
  $export.P = 8;   // proto
  $export.B = 16;  // bind
  $export.W = 32;  // wrap
  $export.U = 64;  // safe
  $export.R = 128; // real proto method for `library`
  var _export = $export;
  
  // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
  _export(_export.S + _export.F * !_descriptors, 'Object', { defineProperty: _objectDp.f });
  
  var $Object = _core.Object;
  var defineProperty$5 = function defineProperty(it, key, desc) {
    return $Object.defineProperty(it, key, desc);
  };
  
  var defineProperty$3 = createCommonjsModule(function (module) {
  module.exports = { "default": defineProperty$5, __esModule: true };
  });
  
  unwrapExports(defineProperty$3);
  
  var defineProperty$2 = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  
  
  
  var _defineProperty2 = _interopRequireDefault(defineProperty$3);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  exports.default = function (obj, key, value) {
    if (key in obj) {
      (0, _defineProperty2.default)(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
  
    return obj;
  };
  });
  
  var _defineProperty$2 = unwrapExports(defineProperty$2);
  
  var toString$2 = {}.toString;
  
  var _cof = function (it) {
    return toString$2.call(it).slice(8, -1);
  };
  
  // fallback for non-array-like ES3 and non-enumerable old V8 strings
  
  // eslint-disable-next-line no-prototype-builtins
  var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
    return _cof(it) == 'String' ? it.split('') : Object(it);
  };
  
  // 7.2.1 RequireObjectCoercible(argument)
  var _defined = function (it) {
    if (it == undefined) throw TypeError("Can't call method on  " + it);
    return it;
  };
  
  // to indexed object, toObject with fallback for non-array-like ES3 strings
  
  
  var _toIobject = function (it) {
    return _iobject(_defined(it));
  };
  
  // 7.1.4 ToInteger
  var ceil$1 = Math.ceil;
  var floor$1 = Math.floor;
  var _toInteger = function (it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor$1 : ceil$1)(it);
  };
  
  // 7.1.15 ToLength
  
  var min$2 = Math.min;
  var _toLength = function (it) {
    return it > 0 ? min$2(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
  };
  
  var max$2 = Math.max;
  var min$3 = Math.min;
  var _toAbsoluteIndex = function (index, length) {
    index = _toInteger(index);
    return index < 0 ? max$2(index + length, 0) : min$3(index, length);
  };
  
  // false -> Array#indexOf
  // true  -> Array#includes
  
  
  
  var _arrayIncludes = function (IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = _toIobject($this);
      var length = _toLength(O.length);
      var index = _toAbsoluteIndex(fromIndex, length);
      var value;
      // Array#includes uses SameValueZero equality algorithm
      // eslint-disable-next-line no-self-compare
      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++];
        // eslint-disable-next-line no-self-compare
        if (value != value) return true;
      // Array#indexOf ignores holes, Array#includes - not
      } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
        if (O[index] === el) return IS_INCLUDES || index || 0;
      } return !IS_INCLUDES && -1;
    };
  };
  
  var _library = true;
  
  var _shared = createCommonjsModule(function (module) {
  var SHARED = '__core-js_shared__';
  var store = _global[SHARED] || (_global[SHARED] = {});
  
  (module.exports = function (key, value) {
    return store[key] || (store[key] = value !== undefined ? value : {});
  })('versions', []).push({
    version: _core.version,
    mode: _library ? 'pure' : 'global',
    copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
  });
  });
  
  var id$2 = 0;
  var px = Math.random();
  var _uid = function (key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id$2 + px).toString(36));
  };
  
  var shared = _shared('keys');
  
  var _sharedKey = function (key) {
    return shared[key] || (shared[key] = _uid(key));
  };
  
  var arrayIndexOf = _arrayIncludes(false);
  var IE_PROTO = _sharedKey('IE_PROTO');
  
  var _objectKeysInternal = function (object, names) {
    var O = _toIobject(object);
    var i = 0;
    var result = [];
    var key;
    for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);
    // Don't enum bug & hidden keys
    while (names.length > i) if (_has(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
    return result;
  };
  
  // IE 8- don't enum bug keys
  var _enumBugKeys = (
    'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
  ).split(',');
  
  // 19.1.2.14 / 15.2.3.14 Object.keys(O)
  
  
  
  var _objectKeys = Object.keys || function keys(O) {
    return _objectKeysInternal(O, _enumBugKeys);
  };
  
  var f$1 = Object.getOwnPropertySymbols;
  
  var _objectGops = {
    f: f$1
  };
  
  var f$2 = {}.propertyIsEnumerable;
  
  var _objectPie = {
    f: f$2
  };
  
  // 7.1.13 ToObject(argument)
  
  var _toObject = function (it) {
    return Object(_defined(it));
  };
  
  // 19.1.2.1 Object.assign(target, source, ...)
  
  
  
  
  
  var $assign = Object.assign;
  
  // should work with symbols and should have deterministic property order (V8 bug)
  var _objectAssign = !$assign || _fails(function () {
    var A = {};
    var B = {};
    // eslint-disable-next-line no-undef
    var S = Symbol();
    var K = 'abcdefghijklmnopqrst';
    A[S] = 7;
    K.split('').forEach(function (k) { B[k] = k; });
    return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
  }) ? function assign(target, source) { // eslint-disable-line no-unused-vars
    var T = _toObject(target);
    var aLen = arguments.length;
    var index = 1;
    var getSymbols = _objectGops.f;
    var isEnum = _objectPie.f;
    while (aLen > index) {
      var S = _iobject(arguments[index++]);
      var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);
      var length = keys.length;
      var j = 0;
      var key;
      while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
    } return T;
  } : $assign;
  
  // 19.1.3.1 Object.assign(target, source)
  
  
  _export(_export.S + _export.F, 'Object', { assign: _objectAssign });
  
  var assign$2 = _core.Object.assign;
  
  var assign = createCommonjsModule(function (module) {
  module.exports = { "default": assign$2, __esModule: true };
  });
  
  unwrapExports(assign);
  
  var _extends = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  
  
  
  var _assign2 = _interopRequireDefault(assign);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  exports.default = _assign2.default || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
  
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
  
    return target;
  };
  });
  
  var _extends$1 = unwrapExports(_extends);
  
  var classCallCheck$2 = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  
  exports.default = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };
  });
  
  var _classCallCheck = unwrapExports(classCallCheck$2);
  
  var createClass$5 = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  
  
  
  var _defineProperty2 = _interopRequireDefault(defineProperty$3);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  exports.default = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        (0, _defineProperty2.default)(target, descriptor.key, descriptor);
      }
    }
  
    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  });
  
  var _createClass = unwrapExports(createClass$5);
  
  // true  -> String#at
  // false -> String#codePointAt
  var _stringAt = function (TO_STRING) {
    return function (that, pos) {
      var s = String(_defined(that));
      var i = _toInteger(pos);
      var l = s.length;
      var a, b;
      if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
        ? TO_STRING ? s.charAt(i) : a
        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };
  
  var _redefine = _hide;
  
  var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
    _anObject(O);
    var keys = _objectKeys(Properties);
    var length = keys.length;
    var i = 0;
    var P;
    while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);
    return O;
  };
  
  var document$2 = _global.document;
  var _html = document$2 && document$2.documentElement;
  
  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
  
  
  
  var IE_PROTO$1 = _sharedKey('IE_PROTO');
  var Empty = function () { /* empty */ };
  var PROTOTYPE$1 = 'prototype';
  
  // Create object with fake `null` prototype: use iframe Object with cleared prototype
  var createDict = function () {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = _domCreate('iframe');
    var i = _enumBugKeys.length;
    var lt = '<';
    var gt = '>';
    var iframeDocument;
    iframe.style.display = 'none';
    _html.appendChild(iframe);
    iframe.src = 'javascript:'; // eslint-disable-line no-script-url
    // createDict = iframe.contentWindow.Object;
    // html.removeChild(iframe);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
    iframeDocument.close();
    createDict = iframeDocument.F;
    while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];
    return createDict();
  };
  
  var _objectCreate = Object.create || function create(O, Properties) {
    var result;
    if (O !== null) {
      Empty[PROTOTYPE$1] = _anObject(O);
      result = new Empty();
      Empty[PROTOTYPE$1] = null;
      // add "__proto__" for Object.getPrototypeOf polyfill
      result[IE_PROTO$1] = O;
    } else result = createDict();
    return Properties === undefined ? result : _objectDps(result, Properties);
  };
  
  var _wks = createCommonjsModule(function (module) {
  var store = _shared('wks');
  
  var Symbol = _global.Symbol;
  var USE_SYMBOL = typeof Symbol == 'function';
  
  var $exports = module.exports = function (name) {
    return store[name] || (store[name] =
      USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));
  };
  
  $exports.store = store;
  });
  
  var def = _objectDp.f;
  
  var TAG = _wks('toStringTag');
  
  var _setToStringTag = function (it, tag, stat) {
    if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
  };
  
  var IteratorPrototype = {};
  
  // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
  _hide(IteratorPrototype, _wks('iterator'), function () { return this; });
  
  var _iterCreate = function (Constructor, NAME, next) {
    Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });
    _setToStringTag(Constructor, NAME + ' Iterator');
  };
  
  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
  
  
  var IE_PROTO$2 = _sharedKey('IE_PROTO');
  var ObjectProto = Object.prototype;
  
  var _objectGpo = Object.getPrototypeOf || function (O) {
    O = _toObject(O);
    if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];
    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    } return O instanceof Object ? ObjectProto : null;
  };
  
  var ITERATOR = _wks('iterator');
  var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
  var FF_ITERATOR = '@@iterator';
  var KEYS = 'keys';
  var VALUES = 'values';
  
  var returnThis = function () { return this; };
  
  var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    _iterCreate(Constructor, NAME, next);
    var getMethod = function (kind) {
      if (!BUGGY && kind in proto) return proto[kind];
      switch (kind) {
        case KEYS: return function keys() { return new Constructor(this, kind); };
        case VALUES: return function values() { return new Constructor(this, kind); };
      } return function entries() { return new Constructor(this, kind); };
    };
    var TAG = NAME + ' Iterator';
    var DEF_VALUES = DEFAULT == VALUES;
    var VALUES_BUG = false;
    var proto = Base.prototype;
    var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
    var $default = $native || getMethod(DEFAULT);
    var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
    var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
    var methods, key, IteratorPrototype;
    // Fix native
    if ($anyNative) {
      IteratorPrototype = _objectGpo($anyNative.call(new Base()));
      if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
        // Set @@toStringTag to native iterators
        _setToStringTag(IteratorPrototype, TAG, true);
        // fix for some old engines
        if (!_library && typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);
      }
    }
    // fix Array#{values, @@iterator}.name in V8 / FF
    if (DEF_VALUES && $native && $native.name !== VALUES) {
      VALUES_BUG = true;
      $default = function values() { return $native.call(this); };
    }
    // Define iterator
    if ((!_library || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
      _hide(proto, ITERATOR, $default);
    }
    // Plug for library
    if (DEFAULT) {
      methods = {
        values: DEF_VALUES ? $default : getMethod(VALUES),
        keys: IS_SET ? $default : getMethod(KEYS),
        entries: $entries
      };
      if (FORCED) for (key in methods) {
        if (!(key in proto)) _redefine(proto, key, methods[key]);
      } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }
    return methods;
  };
  
  var $at$1 = _stringAt(true);
  
  // 21.1.3.27 String.prototype[@@iterator]()
  _iterDefine(String, 'String', function (iterated) {
    this._t = String(iterated); // target
    this._i = 0;                // next index
  // 21.1.5.2.1 %StringIteratorPrototype%.next()
  }, function () {
    var O = this._t;
    var index = this._i;
    var point;
    if (index >= O.length) return { value: undefined, done: true };
    point = $at$1(O, index);
    this._i += point.length;
    return { value: point, done: false };
  });
  
  var _iterStep = function (done, value) {
    return { value: value, done: !!done };
  };
  
  // 22.1.3.4 Array.prototype.entries()
  // 22.1.3.13 Array.prototype.keys()
  // 22.1.3.29 Array.prototype.values()
  // 22.1.3.30 Array.prototype[@@iterator]()
  var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
    this._t = _toIobject(iterated); // target
    this._i = 0;                   // next index
    this._k = kind;                // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
  }, function () {
    var O = this._t;
    var kind = this._k;
    var index = this._i++;
    if (!O || index >= O.length) {
      this._t = undefined;
      return _iterStep(1);
    }
    if (kind == 'keys') return _iterStep(0, index);
    if (kind == 'values') return _iterStep(0, O[index]);
    return _iterStep(0, [index, O[index]]);
  }, 'values');
  
  var TO_STRING_TAG = _wks('toStringTag');
  
  var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
    'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
    'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
    'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
    'TextTrackList,TouchList').split(',');
  
  for (var i$1 = 0; i$1 < DOMIterables.length; i$1++) {
    var NAME = DOMIterables[i$1];
    var Collection = _global[NAME];
    var proto = Collection && Collection.prototype;
    if (proto && !proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME);
    
  }
  
  var f$3 = _wks;
  
  var _wksExt = {
    f: f$3
  };
  
  var iterator$2 = _wksExt.f('iterator');
  
  var iterator = createCommonjsModule(function (module) {
  module.exports = { "default": iterator$2, __esModule: true };
  });
  
  unwrapExports(iterator);
  
  var _meta = createCommonjsModule(function (module) {
  var META = _uid('meta');
  
  
  var setDesc = _objectDp.f;
  var id = 0;
  var isExtensible = Object.isExtensible || function () {
    return true;
  };
  var FREEZE = !_fails(function () {
    return isExtensible(Object.preventExtensions({}));
  });
  var setMeta = function (it) {
    setDesc(it, META, { value: {
      i: 'O' + ++id, // object ID
      w: {}          // weak collections IDs
    } });
  };
  var fastKey = function (it, create) {
    // return primitive with prefix
    if (!_isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    if (!_has(it, META)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return 'F';
      // not necessary to add metadata
      if (!create) return 'E';
      // add missing metadata
      setMeta(it);
    // return object ID
    } return it[META].i;
  };
  var getWeak = function (it, create) {
    if (!_has(it, META)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return true;
      // not necessary to add metadata
      if (!create) return false;
      // add missing metadata
      setMeta(it);
    // return hash weak collections IDs
    } return it[META].w;
  };
  // add metadata on freeze-family methods calling
  var onFreeze = function (it) {
    if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);
    return it;
  };
  var meta = module.exports = {
    KEY: META,
    NEED: false,
    fastKey: fastKey,
    getWeak: getWeak,
    onFreeze: onFreeze
  };
  });
  
  var _meta_1 = _meta.KEY;
  var _meta_2 = _meta.NEED;
  var _meta_3 = _meta.fastKey;
  var _meta_4 = _meta.getWeak;
  var _meta_5 = _meta.onFreeze;
  
  var defineProperty$7 = _objectDp.f;
  var _wksDefine = function (name) {
    var $Symbol = _core.Symbol || (_core.Symbol = _library ? {} : _global.Symbol || {});
    if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty$7($Symbol, name, { value: _wksExt.f(name) });
  };
  
  // all enumerable object keys, includes symbols
  
  
  
  var _enumKeys = function (it) {
    var result = _objectKeys(it);
    var getSymbols = _objectGops.f;
    if (getSymbols) {
      var symbols = getSymbols(it);
      var isEnum = _objectPie.f;
      var i = 0;
      var key;
      while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
    } return result;
  };
  
  // 7.2.2 IsArray(argument)
  
  var _isArray = Array.isArray || function isArray(arg) {
    return _cof(arg) == 'Array';
  };
  
  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
  
  var hiddenKeys = _enumBugKeys.concat('length', 'prototype');
  
  var f$5 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return _objectKeysInternal(O, hiddenKeys);
  };
  
  var _objectGopn = {
    f: f$5
  };
  
  // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
  
  var gOPN$1 = _objectGopn.f;
  var toString$3 = {}.toString;
  
  var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
    ? Object.getOwnPropertyNames(window) : [];
  
  var getWindowNames = function (it) {
    try {
      return gOPN$1(it);
    } catch (e) {
      return windowNames.slice();
    }
  };
  
  var f$4 = function getOwnPropertyNames(it) {
    return windowNames && toString$3.call(it) == '[object Window]' ? getWindowNames(it) : gOPN$1(_toIobject(it));
  };
  
  var _objectGopnExt = {
    f: f$4
  };
  
  var gOPD$1 = Object.getOwnPropertyDescriptor;
  
  var f$6 = _descriptors ? gOPD$1 : function getOwnPropertyDescriptor(O, P) {
    O = _toIobject(O);
    P = _toPrimitive(P, true);
    if (_ie8DomDefine) try {
      return gOPD$1(O, P);
    } catch (e) { /* empty */ }
    if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);
  };
  
  var _objectGopd = {
    f: f$6
  };
  
  // ECMAScript 6 symbols shim
  
  
  
  
  
  var META = _meta.KEY;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  var gOPD = _objectGopd.f;
  var dP$1 = _objectDp.f;
  var gOPN = _objectGopnExt.f;
  var $Symbol = _global.Symbol;
  var $JSON = _global.JSON;
  var _stringify = $JSON && $JSON.stringify;
  var PROTOTYPE$2 = 'prototype';
  var HIDDEN = _wks('_hidden');
  var TO_PRIMITIVE = _wks('toPrimitive');
  var isEnum = {}.propertyIsEnumerable;
  var SymbolRegistry = _shared('symbol-registry');
  var AllSymbols = _shared('symbols');
  var OPSymbols = _shared('op-symbols');
  var ObjectProto$1 = Object[PROTOTYPE$2];
  var USE_NATIVE = typeof $Symbol == 'function';
  var QObject = _global.QObject;
  // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
  var setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild;
  
  // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
  var setSymbolDesc = _descriptors && _fails(function () {
    return _objectCreate(dP$1({}, 'a', {
      get: function () { return dP$1(this, 'a', { value: 7 }).a; }
    })).a != 7;
  }) ? function (it, key, D) {
    var protoDesc = gOPD(ObjectProto$1, key);
    if (protoDesc) delete ObjectProto$1[key];
    dP$1(it, key, D);
    if (protoDesc && it !== ObjectProto$1) dP$1(ObjectProto$1, key, protoDesc);
  } : dP$1;
  
  var wrap = function (tag) {
    var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);
    sym._k = tag;
    return sym;
  };
  
  var isSymbol$2 = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
    return typeof it == 'symbol';
  } : function (it) {
    return it instanceof $Symbol;
  };
  
  var $defineProperty = function defineProperty(it, key, D) {
    if (it === ObjectProto$1) $defineProperty(OPSymbols, key, D);
    _anObject(it);
    key = _toPrimitive(key, true);
    _anObject(D);
    if (_has(AllSymbols, key)) {
      if (!D.enumerable) {
        if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));
        it[HIDDEN][key] = true;
      } else {
        if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
        D = _objectCreate(D, { enumerable: _propertyDesc(0, false) });
      } return setSymbolDesc(it, key, D);
    } return dP$1(it, key, D);
  };
  var $defineProperties = function defineProperties(it, P) {
    _anObject(it);
    var keys = _enumKeys(P = _toIobject(P));
    var i = 0;
    var l = keys.length;
    var key;
    while (l > i) $defineProperty(it, key = keys[i++], P[key]);
    return it;
  };
  var $create = function create(it, P) {
    return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);
  };
  var $propertyIsEnumerable = function propertyIsEnumerable(key) {
    var E = isEnum.call(this, key = _toPrimitive(key, true));
    if (this === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;
    return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
  };
  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
    it = _toIobject(it);
    key = _toPrimitive(key, true);
    if (it === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;
    var D = gOPD(it, key);
    if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
    return D;
  };
  var $getOwnPropertyNames = function getOwnPropertyNames(it) {
    var names = gOPN(_toIobject(it));
    var result = [];
    var i = 0;
    var key;
    while (names.length > i) {
      if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
    } return result;
  };
  var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
    var IS_OP = it === ObjectProto$1;
    var names = gOPN(IS_OP ? OPSymbols : _toIobject(it));
    var result = [];
    var i = 0;
    var key;
    while (names.length > i) {
      if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto$1, key) : true)) result.push(AllSymbols[key]);
    } return result;
  };
  
  // 19.4.1.1 Symbol([description])
  if (!USE_NATIVE) {
    $Symbol = function Symbol() {
      if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
      var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);
      var $set = function (value) {
        if (this === ObjectProto$1) $set.call(OPSymbols, value);
        if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
        setSymbolDesc(this, tag, _propertyDesc(1, value));
      };
      if (_descriptors && setter) setSymbolDesc(ObjectProto$1, tag, { configurable: true, set: $set });
      return wrap(tag);
    };
    _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {
      return this._k;
    });
  
    _objectGopd.f = $getOwnPropertyDescriptor;
    _objectDp.f = $defineProperty;
    _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;
    _objectPie.f = $propertyIsEnumerable;
    _objectGops.f = $getOwnPropertySymbols;
  
    if (_descriptors && !_library) {
      _redefine(ObjectProto$1, 'propertyIsEnumerable', $propertyIsEnumerable, true);
    }
  
    _wksExt.f = function (name) {
      return wrap(_wks(name));
    };
  }
  
  _export(_export.G + _export.W + _export.F * !USE_NATIVE, { Symbol: $Symbol });
  
  for (var es6Symbols = (
    // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
    'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
  ).split(','), j = 0; es6Symbols.length > j;)_wks(es6Symbols[j++]);
  
  for (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) _wksDefine(wellKnownSymbols[k++]);
  
  _export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {
    // 19.4.2.1 Symbol.for(key)
    'for': function (key) {
      return _has(SymbolRegistry, key += '')
        ? SymbolRegistry[key]
        : SymbolRegistry[key] = $Symbol(key);
    },
    // 19.4.2.5 Symbol.keyFor(sym)
    keyFor: function keyFor(sym) {
      if (!isSymbol$2(sym)) throw TypeError(sym + ' is not a symbol!');
      for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
    },
    useSetter: function () { setter = true; },
    useSimple: function () { setter = false; }
  });
  
  _export(_export.S + _export.F * !USE_NATIVE, 'Object', {
    // 19.1.2.2 Object.create(O [, Properties])
    create: $create,
    // 19.1.2.4 Object.defineProperty(O, P, Attributes)
    defineProperty: $defineProperty,
    // 19.1.2.3 Object.defineProperties(O, Properties)
    defineProperties: $defineProperties,
    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
    // 19.1.2.7 Object.getOwnPropertyNames(O)
    getOwnPropertyNames: $getOwnPropertyNames,
    // 19.1.2.8 Object.getOwnPropertySymbols(O)
    getOwnPropertySymbols: $getOwnPropertySymbols
  });
  
  // 24.3.2 JSON.stringify(value [, replacer [, space]])
  $JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {
    var S = $Symbol();
    // MS Edge converts symbol values to JSON as {}
    // WebKit converts symbol values to JSON as null
    // V8 throws on boxed symbols
    return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
  })), 'JSON', {
    stringify: function stringify(it) {
      var args = [it];
      var i = 1;
      var replacer, $replacer;
      while (arguments.length > i) args.push(arguments[i++]);
      $replacer = replacer = args[1];
      if (!_isObject(replacer) && it === undefined || isSymbol$2(it)) return; // IE8 returns string on undefined
      if (!_isArray(replacer)) replacer = function (key, value) {
        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
        if (!isSymbol$2(value)) return value;
      };
      args[1] = replacer;
      return _stringify.apply($JSON, args);
    }
  });
  
  // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
  $Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf);
  // 19.4.3.5 Symbol.prototype[@@toStringTag]
  _setToStringTag($Symbol, 'Symbol');
  // 20.2.1.9 Math[@@toStringTag]
  _setToStringTag(Math, 'Math', true);
  // 24.3.3 JSON[@@toStringTag]
  _setToStringTag(_global.JSON, 'JSON', true);
  
  _wksDefine('asyncIterator');
  
  _wksDefine('observable');
  
  var symbol$2 = _core.Symbol;
  
  var symbol = createCommonjsModule(function (module) {
  module.exports = { "default": symbol$2, __esModule: true };
  });
  
  unwrapExports(symbol);
  
  var _typeof_1 = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  
  
  
  var _iterator2 = _interopRequireDefault(iterator);
  
  
  
  var _symbol2 = _interopRequireDefault(symbol);
  
  var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof(obj);
  } : function (obj) {
    return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
  };
  });
  
  var _typeof = unwrapExports(_typeof_1);
  
  var possibleConstructorReturn = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  
  
  
  var _typeof3 = _interopRequireDefault(_typeof_1);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  exports.default = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
  
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
  };
  });
  
  var _possibleConstructorReturn = unwrapExports(possibleConstructorReturn);
  
  // Works with __proto__ only. Old v8 can't work with null proto objects.
  /* eslint-disable no-proto */
  
  
  var check = function (O, proto) {
    _anObject(O);
    if (!_isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
  };
  var _setProto = {
    set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
      function (test, buggy, set) {
        try {
          set = _ctx(Function.call, _objectGopd.f(Object.prototype, '__proto__').set, 2);
          set(test, []);
          buggy = !(test instanceof Array);
        } catch (e) { buggy = true; }
        return function setPrototypeOf(O, proto) {
          check(O, proto);
          if (buggy) O.__proto__ = proto;
          else set(O, proto);
          return O;
        };
      }({}, false) : undefined),
    check: check
  };
  
  // 19.1.3.19 Object.setPrototypeOf(O, proto)
  
  _export(_export.S, 'Object', { setPrototypeOf: _setProto.set });
  
  var setPrototypeOf$2 = _core.Object.setPrototypeOf;
  
  var setPrototypeOf = createCommonjsModule(function (module) {
  module.exports = { "default": setPrototypeOf$2, __esModule: true };
  });
  
  unwrapExports(setPrototypeOf);
  
  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
  _export(_export.S, 'Object', { create: _objectCreate });
  
  var $Object$1 = _core.Object;
  var create$85 = function create(P, D) {
    return $Object$1.create(P, D);
  };
  
  var create$83 = createCommonjsModule(function (module) {
  module.exports = { "default": create$85, __esModule: true };
  });
  
  unwrapExports(create$83);
  
  var inherits = createCommonjsModule(function (module, exports) {
  exports.__esModule = true;
  
  
  
  var _setPrototypeOf2 = _interopRequireDefault(setPrototypeOf);
  
  
  
  var _create2 = _interopRequireDefault(create$83);
  
  
  
  var _typeof3 = _interopRequireDefault(_typeof_1);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  
  exports.default = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    }
  
    subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
  };
  });
  
  var _inherits = unwrapExports(inherits);
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  function checkMask(value, bitmask) {
    return (value & bitmask) === bitmask;
  }
  
  var DOMPropertyInjection = {
    /**
     * Mapping from normalized, camelcased property names to a configuration that
     * specifies how the associated DOM property should be accessed or rendered.
     */
    MUST_USE_PROPERTY: 0x1,
    HAS_BOOLEAN_VALUE: 0x4,
    HAS_NUMERIC_VALUE: 0x8,
    HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
    HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,
  
    /**
     * Inject some specialized knowledge about the DOM. This takes a config object
     * with the following properties:
     *
     * isCustomAttribute: function that given an attribute name will return true
     * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
     * attributes where it's impossible to enumerate all of the possible
     * attribute names,
     *
     * Properties: object mapping DOM property name to one of the
     * DOMPropertyInjection constants or null. If your attribute isn't in here,
     * it won't get written to the DOM.
     *
     * DOMAttributeNames: object mapping React attribute name to the DOM
     * attribute name. Attribute names not specified use the **lowercase**
     * normalized name.
     *
     * DOMAttributeNamespaces: object mapping React attribute name to the DOM
     * attribute namespace URL. (Attribute names not specified use no namespace.)
     *
     * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
     * Property names not specified use the normalized name.
     *
     * DOMMutationMethods: Properties that require special mutation methods. If
     * `value` is undefined, the mutation method should unset the property.
     *
     * @param {object} domPropertyConfig the config as described above.
     */
    injectDOMPropertyConfig: function (domPropertyConfig) {
      var Injection = DOMPropertyInjection;
      var Properties = domPropertyConfig.Properties || {};
      var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
      var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
      var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
      var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
  
      if (domPropertyConfig.isCustomAttribute) {
        DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
      }
  
      for (var propName in Properties) {
        !!DOMProperty.properties.hasOwnProperty(propName) ? invariant_1(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : void 0;
  
        var lowerCased = propName.toLowerCase();
        var propConfig = Properties[propName];
  
        var propertyInfo = {
          attributeName: lowerCased,
          attributeNamespace: null,
          propertyName: propName,
          mutationMethod: null,
  
          mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
          hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
          hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
          hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
          hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
        };
        !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? invariant_1(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : void 0;
  
        {
          DOMProperty.getPossibleStandardName[lowerCased] = propName;
        }
  
        if (DOMAttributeNames.hasOwnProperty(propName)) {
          var attributeName = DOMAttributeNames[propName];
          propertyInfo.attributeName = attributeName;
          {
            DOMProperty.getPossibleStandardName[attributeName] = propName;
          }
        }
  
        if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
          propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
        }
  
        if (DOMPropertyNames.hasOwnProperty(propName)) {
          propertyInfo.propertyName = DOMPropertyNames[propName];
        }
  
        if (DOMMutationMethods.hasOwnProperty(propName)) {
          propertyInfo.mutationMethod = DOMMutationMethods[propName];
        }
  
        DOMProperty.properties[propName] = propertyInfo;
      }
    }
  };
  
  /* eslint-disable max-len */
  var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
  /* eslint-enable max-len */
  
  /**
   * DOMProperty exports lookup objects that can be used like functions:
   *
   *   > DOMProperty.isValid['id']
   *   true
   *   > DOMProperty.isValid['foobar']
   *   undefined
   *
   * Although this may be confusing, it performs better in general.
   *
   * @see http://jsperf.com/key-exists
   * @see http://jsperf.com/key-missing
   */
  var DOMProperty = {
    ID_ATTRIBUTE_NAME: 'data-reactid',
    ROOT_ATTRIBUTE_NAME: 'data-reactroot',
  
    ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
    ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',
  
    /**
     * Map from property "standard name" to an object with info about how to set
     * the property in the DOM. Each object contains:
     *
     * attributeName:
     *   Used when rendering markup or with `*Attribute()`.
     * attributeNamespace
     * propertyName:
     *   Used on DOM node instances. (This includes properties that mutate due to
     *   external factors.)
     * mutationMethod:
     *   If non-null, used instead of the property or `setAttribute()` after
     *   initial render.
     * mustUseProperty:
     *   Whether the property must be accessed and mutated as an object property.
     * hasBooleanValue:
     *   Whether the property should be removed when set to a falsey value.
     * hasNumericValue:
     *   Whether the property must be numeric or parse as a numeric and should be
     *   removed when set to a falsey value.
     * hasPositiveNumericValue:
     *   Whether the property must be positive numeric or parse as a positive
     *   numeric and should be removed when set to a falsey value.
     * hasOverloadedBooleanValue:
     *   Whether the property can be used as a flag as well as with a value.
     *   Removed when strictly equal to false; present without a value when
     *   strictly equal to true; present with a value otherwise.
     */
    properties: {},
  
    /**
     * Mapping from lowercase property names to the properly cased version, used
     * to warn in the case of missing properties. Available only in __DEV__.
     *
     * autofocus is predefined, because adding it to the property whitelist
     * causes unintended side effects.
     *
     * @type {Object}
     */
    getPossibleStandardName: { autofocus: 'autoFocus' },
  
    /**
     * All of the isCustomAttribute() functions that have been injected.
     */
    _isCustomAttributeFunctions: [],
  
    /**
     * Checks whether a property name is a custom attribute.
     * @method
     */
    isCustomAttribute: function (attributeName) {
      for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
        var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
        if (isCustomAttributeFn(attributeName)) {
          return true;
        }
      }
      return false;
    },
  
    injection: DOMPropertyInjection
  };
  
  var DOMProperty_1 = DOMProperty;
  
  /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  var ReactDOMComponentFlags = {
    hasCachedChildNodes: 1 << 0
  };
  
  var ReactDOMComponentFlags_1 = ReactDOMComponentFlags;
  
  var ATTR_NAME = DOMProperty_1.ID_ATTRIBUTE_NAME;
  var Flags = ReactDOMComponentFlags_1;
  
  var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);
  
  /**
   * Check if a given node should be cached.
   */
  function shouldPrecacheNode(node, nodeID) {
    return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
  }
  
  /**
   * Drill down (through composites and empty components) until we get a host or
   * host text component.
   *
   * This is pretty polymorphic but unavoidable with the current structure we have
   * for `_renderedChildren`.
   */
  function getRenderedHostOrTextFromComponent(component) {
    var rendered;
    while (rendered = component._renderedComponent) {
      component = rendered;
    }
    return component;
  }
  
  /**
   * Populate `_hostNode` on the rendered host/text component with the given
   * DOM node. The passed `inst` can be a composite.
   */
  function precacheNode(inst, node) {
    var hostInst = getRenderedHostOrTextFromComponent(inst);
    hostInst._hostNode = node;
    node[internalInstanceKey] = hostInst;
  }
  
  function uncacheNode(inst) {
    var node = inst._hostNode;
    if (node) {
      delete node[internalInstanceKey];
      inst._hostNode = null;
    }
  }
  
  /**
   * Populate `_hostNode` on each child of `inst`, assuming that the children
   * match up with the DOM (element) children of `node`.
   *
   * We cache entire levels at once to avoid an n^2 problem where we access the
   * children of a node sequentially and have to walk from the start to our target
   * node every time.
   *
   * Since we update `_renderedChildren` and the actual DOM at (slightly)
   * different times, we could race here and see a newer `_renderedChildren` than
   * the DOM nodes we see. To avoid this, ReactMultiChild calls
   * `prepareToManageChildren` before we change `_renderedChildren`, at which
   * time the container's child nodes are always cached (until it unmounts).
   */
  function precacheChildNodes(inst, node) {
    if (inst._flags & Flags.hasCachedChildNodes) {
      return;
    }
    var children = inst._renderedChildren;
    var childNode = node.firstChild;
    outer: for (var name in children) {
      if (!children.hasOwnProperty(name)) {
        continue;
      }
      var childInst = children[name];
      var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
      if (childID === 0) {
        // We're currently unmounting this child in ReactMultiChild; skip it.
        continue;
      }
      // We assume the child nodes are in the same order as the child instances.
      for (; childNode !== null; childNode = childNode.nextSibling) {
        if (shouldPrecacheNode(childNode, childID)) {
          precacheNode(childInst, childNode);
          continue outer;
        }
      }
      // We reached the end of the DOM children without finding an ID match.
      invariant_1(false, 'Unable to find element with ID %s.', childID);
    }
    inst._flags |= Flags.hasCachedChildNodes;
  }
  
  /**
   * Given a DOM node, return the closest ReactDOMComponent or
   * ReactDOMTextComponent instance ancestor.
   */
  function getClosestInstanceFromNode(node) {
    if (node[internalInstanceKey]) {
      return node[internalInstanceKey];
    }
  
    // Walk up the tree until we find an ancestor whose instance we have cached.
    var parents = [];
    while (!node[internalInstanceKey]) {
      parents.push(node);
      if (node.parentNode) {
        node = node.parentNode;
      } else {
        // Top of the tree. This node must not be part of a React tree (or is
        // unmounted, potentially).
        return null;
      }
    }
  
    var closest;
    var inst;
    for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
      closest = inst;
      if (parents.length) {
        precacheChildNodes(inst, node);
      }
    }
  
    return closest;
  }
  
  /**
   * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
   * instance, or null if the node was not rendered by this React.
   */
  function getInstanceFromNode(node) {
    var inst = getClosestInstanceFromNode(node);
    if (inst != null && inst._hostNode === node) {
      return inst;
    } else {
      return null;
    }
  }
  
  /**
   * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
   * DOM node.
   */
  function getNodeFromInstance(inst) {
    // Without this first invariant, passing a non-DOM-component triggers the next
    // invariant for a missing parent, which is super confusing.
    !(inst._hostNode !== undefined) ? invariant_1(false, 'getNodeFromInstance: Invalid argument.') : void 0;
  
    if (inst._hostNode) {
      return inst._hostNode;
    }
  
    // Walk up the tree until we find an ancestor whose DOM node we have cached.
    var parents = [];
    while (!inst._hostNode) {
      parents.push(inst);
      !inst._hostParent ? invariant_1(false, 'React DOM tree root should always have a node reference.') : void 0;
      inst = inst._hostParent;
    }
  
    // Now parents contains each ancestor that does *not* have a cached native
    // node, and `inst` is the deepest ancestor that does.
    for (; parents.length; inst = parents.pop()) {
      precacheChildNodes(inst, inst._hostNode);
    }
  
    return inst._hostNode;
  }
  
  var ReactDOMComponentTree = {
    getClosestInstanceFromNode: getClosestInstanceFromNode,
    getInstanceFromNode: getInstanceFromNode,
    getNodeFromInstance: getNodeFromInstance,
    precacheChildNodes: precacheChildNodes,
    precacheNode: precacheNode,
    uncacheNode: uncacheNode
  };
  
  var ReactDOMComponentTree_1 = ReactDOMComponentTree;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  var ARIADOMPropertyConfig = {
    Properties: {
      // Global States and Properties
      'aria-current': 0, // state
      'aria-details': 0,
      'aria-disabled': 0, // state
      'aria-hidden': 0, // state
      'aria-invalid': 0, // state
      'aria-keyshortcuts': 0,
      'aria-label': 0,
      'aria-roledescription': 0,
      // Widget Attributes
      'aria-autocomplete': 0,
      'aria-checked': 0,
      'aria-expanded': 0,
      'aria-haspopup': 0,
      'aria-level': 0,
      'aria-modal': 0,
      'aria-multiline': 0,
      'aria-multiselectable': 0,
      'aria-orientation': 0,
      'aria-placeholder': 0,
      'aria-pressed': 0,
      'aria-readonly': 0,
      'aria-required': 0,
      'aria-selected': 0,
      'aria-sort': 0,
      'aria-valuemax': 0,
      'aria-valuemin': 0,
      'aria-valuenow': 0,
      'aria-valuetext': 0,
      // Live Region Attributes
      'aria-atomic': 0,
      'aria-busy': 0,
      'aria-live': 0,
      'aria-relevant': 0,
      // Drag-and-Drop Attributes
      'aria-dropeffect': 0,
      'aria-grabbed': 0,
      // Relationship Attributes
      'aria-activedescendant': 0,
      'aria-colcount': 0,
      'aria-colindex': 0,
      'aria-colspan': 0,
      'aria-controls': 0,
      'aria-describedby': 0,
      'aria-errormessage': 0,
      'aria-flowto': 0,
      'aria-labelledby': 0,
      'aria-owns': 0,
      'aria-posinset': 0,
      'aria-rowcount': 0,
      'aria-rowindex': 0,
      'aria-rowspan': 0,
      'aria-setsize': 0
    },
    DOMAttributeNames: {},
    DOMPropertyNames: {}
  };
  
  var ARIADOMPropertyConfig_1 = ARIADOMPropertyConfig;
  
  /**
   * Injectable ordering of event plugins.
   */
  var eventPluginOrder = null;
  
  /**
   * Injectable mapping from names to event plugin modules.
   */
  var namesToPlugins = {};
  
  /**
   * Recomputes the plugin list using the injected plugins and plugin ordering.
   *
   * @private
   */
  function recomputePluginOrdering() {
    if (!eventPluginOrder) {
      // Wait until an `eventPluginOrder` is injected.
      return;
    }
    for (var pluginName in namesToPlugins) {
      var pluginModule = namesToPlugins[pluginName];
      var pluginIndex = eventPluginOrder.indexOf(pluginName);
      !(pluginIndex > -1) ? invariant_1(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
      if (EventPluginRegistry.plugins[pluginIndex]) {
        continue;
      }
      !pluginModule.extractEvents ? invariant_1(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
      EventPluginRegistry.plugins[pluginIndex] = pluginModule;
      var publishedEvents = pluginModule.eventTypes;
      for (var eventName in publishedEvents) {
        !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant_1(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
      }
    }
  }
  
  /**
   * Publishes an event so that it can be dispatched by the supplied plugin.
   *
   * @param {object} dispatchConfig Dispatch configuration for the event.
   * @param {object} PluginModule Plugin publishing the event.
   * @return {boolean} True if the event was successfully published.
   * @private
   */
  function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
    !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant_1(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
    EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
  
    var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
    if (phasedRegistrationNames) {
      for (var phaseName in phasedRegistrationNames) {
        if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
          var phasedRegistrationName = phasedRegistrationNames[phaseName];
          publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
        }
      }
      return true;
    } else if (dispatchConfig.registrationName) {
      publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
      return true;
    }
    return false;
  }
  
  /**
   * Publishes a registration name that is used to identify dispatched events and
   * can be used with `EventPluginHub.putListener` to register listeners.
   *
   * @param {string} registrationName Registration name to add.
   * @param {object} PluginModule Plugin publishing the event.
   * @private
   */
  function publishRegistrationName(registrationName, pluginModule, eventName) {
    !!EventPluginRegistry.registrationNameModules[registrationName] ? invariant_1(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
    EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
    EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
  
    {
      var lowerCasedName = registrationName.toLowerCase();
      EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;
  
      if (registrationName === 'onDoubleClick') {
        EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
      }
    }
  }
  
  /**
   * Registers plugins so that they can extract and dispatch events.
   *
   * @see {EventPluginHub}
   */
  var EventPluginRegistry = {
    /**
     * Ordered list of injected plugins.
     */
    plugins: [],
  
    /**
     * Mapping from event name to dispatch config
     */
    eventNameDispatchConfigs: {},
  
    /**
     * Mapping from registration name to plugin module
     */
    registrationNameModules: {},
  
    /**
     * Mapping from registration name to event name
     */
    registrationNameDependencies: {},
  
    /**
     * Mapping from lowercase registration names to the properly cased version,
     * used to warn in the case of missing event handlers. Available
     * only in __DEV__.
     * @type {Object}
     */
    possibleRegistrationNames: {},
    // Trust the developer to only use possibleRegistrationNames in __DEV__
  
    /**
     * Injects an ordering of plugins (by plugin name). This allows the ordering
     * to be decoupled from injection of the actual plugins so that ordering is
     * always deterministic regardless of packaging, on-the-fly injection, etc.
     *
     * @param {array} InjectedEventPluginOrder
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginOrder}
     */
    injectEventPluginOrder: function (injectedEventPluginOrder) {
      !!eventPluginOrder ? invariant_1(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0;
      // Clone the ordering so it cannot be dynamically mutated.
      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    },
  
    /**
     * Injects plugins to be used by `EventPluginHub`. The plugin names must be
     * in the ordering injected by `injectEventPluginOrder`.
     *
     * Plugins can be injected as part of page initialization or on-the-fly.
     *
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginsByName}
     */
    injectEventPluginsByName: function (injectedNamesToPlugins) {
      var isOrderingDirty = false;
      for (var pluginName in injectedNamesToPlugins) {
        if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          continue;
        }
        var pluginModule = injectedNamesToPlugins[pluginName];
        if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
          !!namesToPlugins[pluginName] ? invariant_1(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
          namesToPlugins[pluginName] = pluginModule;
          isOrderingDirty = true;
        }
      }
      if (isOrderingDirty) {
        recomputePluginOrdering();
      }
    },
  
    /**
     * Looks up the plugin for the supplied event.
     *
     * @param {object} event A synthetic event.
     * @return {?object} The plugin that created the supplied event.
     * @internal
     */
    getPluginModuleForEvent: function (event) {
      var dispatchConfig = event.dispatchConfig;
      if (dispatchConfig.registrationName) {
        return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
      }
      if (dispatchConfig.phasedRegistrationNames !== undefined) {
        // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
        // that it is not undefined.
        var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  
        for (var phase in phasedRegistrationNames) {
          if (!phasedRegistrationNames.hasOwnProperty(phase)) {
            continue;
          }
          var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
          if (pluginModule) {
            return pluginModule;
          }
        }
      }
      return null;
    },
  
    /**
     * Exposed for unit testing.
     * @private
     */
    _resetEventPlugins: function () {
      eventPluginOrder = null;
      for (var pluginName in namesToPlugins) {
        if (namesToPlugins.hasOwnProperty(pluginName)) {
          delete namesToPlugins[pluginName];
        }
      }
      EventPluginRegistry.plugins.length = 0;
  
      var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
      for (var eventName in eventNameDispatchConfigs) {
        if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
          delete eventNameDispatchConfigs[eventName];
        }
      }
  
      var registrationNameModules = EventPluginRegistry.registrationNameModules;
      for (var registrationName in registrationNameModules) {
        if (registrationNameModules.hasOwnProperty(registrationName)) {
          delete registrationNameModules[registrationName];
        }
      }
  
      {
        var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
        for (var lowerCasedName in possibleRegistrationNames) {
          if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
            delete possibleRegistrationNames[lowerCasedName];
          }
        }
      }
    }
  };
  
  var EventPluginRegistry_1 = EventPluginRegistry;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  var caughtError = null;
  
  /**
   * Call a function while guarding against errors that happens within it.
   *
   * @param {String} name of the guard to use for logging or debugging
   * @param {Function} func The function to invoke
   * @param {*} a First argument
   * @param {*} b Second argument
   */
  function invokeGuardedCallback(name, func, a) {
    try {
      func(a);
    } catch (x) {
      if (caughtError === null) {
        caughtError = x;
      }
    }
  }
  
  var ReactErrorUtils = {
    invokeGuardedCallback: invokeGuardedCallback,
  
    /**
     * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
     * handler are sure to be rethrown by rethrowCaughtError.
     */
    invokeGuardedCallbackWithCatch: invokeGuardedCallback,
  
    /**
     * During execution of guarded functions we will capture the first error which
     * we will rethrow to be handled by the top level error handler.
     */
    rethrowCaughtError: function () {
      if (caughtError) {
        var error = caughtError;
        caughtError = null;
        throw error;
      }
    }
  };
  
  {
    /**
     * To help development we can get better devtools integration by simulating a
     * real browser event.
     */
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
      var fakeNode = document.createElement('react');
      ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
        var boundFunc = function () {
          func(a);
        };
        var evtType = 'react-' + name;
        fakeNode.addEventListener(evtType, boundFunc, false);
        var evt = document.createEvent('Event');
        evt.initEvent(evtType, false, false);
        fakeNode.dispatchEvent(evt);
        fakeNode.removeEventListener(evtType, boundFunc, false);
      };
    }
  }
  
  var ReactErrorUtils_1 = ReactErrorUtils;
  
  /**
   * Injected dependencies:
   */
  
  /**
   * - `ComponentTree`: [required] Module that can convert between React instances
   *   and actual node references.
   */
  var ComponentTree;
  var TreeTraversal;
  var injection = {
    injectComponentTree: function (Injected) {
      ComponentTree = Injected;
      {
        warning_1(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');
      }
    },
    injectTreeTraversal: function (Injected) {
      TreeTraversal = Injected;
      {
        warning_1(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.');
      }
    }
  };
  
  function isEndish(topLevelType) {
    return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
  }
  
  function isMoveish(topLevelType) {
    return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
  }
  function isStartish(topLevelType) {
    return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
  }
  
  var validateEventDispatches;
  {
    validateEventDispatches = function (event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchInstances = event._dispatchInstances;
  
      var listenersIsArr = Array.isArray(dispatchListeners);
      var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
  
      var instancesIsArr = Array.isArray(dispatchInstances);
      var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
  
      warning_1(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.');
    };
  }
  
  /**
   * Dispatch the event to the listener.
   * @param {SyntheticEvent} event SyntheticEvent to handle
   * @param {boolean} simulated If the event is simulated (changes exn behavior)
   * @param {function} listener Application-level callback
   * @param {*} inst Internal component instance
   */
  function executeDispatch(event, simulated, listener, inst) {
    var type = event.type || 'unknown-event';
    event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
    if (simulated) {
      ReactErrorUtils_1.invokeGuardedCallbackWithCatch(type, listener, event);
    } else {
      ReactErrorUtils_1.invokeGuardedCallback(type, listener, event);
    }
    event.currentTarget = null;
  }
  
  /**
   * Standard/simple iteration through an event's collected dispatches.
   */
  function executeDispatchesInOrder(event, simulated) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;
    {
      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListeners)) {
      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        // Listeners and Instances are two parallel arrays that are always in sync.
        executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
      }
    } else if (dispatchListeners) {
      executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
    }
    event._dispatchListeners = null;
    event._dispatchInstances = null;
  }
  
  /**
   * Standard/simple iteration through an event's collected dispatches, but stops
   * at the first dispatch execution returning true, and returns that id.
   *
   * @return {?string} id of the first dispatch execution who's listener returns
   * true, or null if no listener returned true.
   */
  function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;
    {
      validateEventDispatches(event);
    }
    if (Array.isArray(dispatchListeners)) {
      for (var i = 0; i < dispatchListeners.length; i++) {
        if (event.isPropagationStopped()) {
          break;
        }
        // Listeners and Instances are two parallel arrays that are always in sync.
        if (dispatchListeners[i](event, dispatchInstances[i])) {
          return dispatchInstances[i];
        }
      }
    } else if (dispatchListeners) {
      if (dispatchListeners(event, dispatchInstances)) {
        return dispatchInstances;
      }
    }
    return null;
  }
  
  /**
   * @see executeDispatchesInOrderStopAtTrueImpl
   */
  function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    event._dispatchInstances = null;
    event._dispatchListeners = null;
    return ret;
  }
  
  /**
   * Execution of a "direct" dispatch - there must be at most one dispatch
   * accumulated on the event or it is considered an error. It doesn't really make
   * sense for an event with multiple dispatches (bubbled) to keep track of the
   * return values at each dispatch execution, but it does tend to make sense when
   * dealing with "direct" dispatches.
   *
   * @return {*} The return value of executing the single dispatch.
   */
  function executeDirectDispatch(event) {
    {
      validateEventDispatches(event);
    }
    var dispatchListener = event._dispatchListeners;
    var dispatchInstance = event._dispatchInstances;
    !!Array.isArray(dispatchListener) ? invariant_1(false, 'executeDirectDispatch(...): Invalid `event`.') : void 0;
    event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
    var res = dispatchListener ? dispatchListener(event) : null;
    event.currentTarget = null;
    event._dispatchListeners = null;
    event._dispatchInstances = null;
    return res;
  }
  
  /**
   * @param {SyntheticEvent} event
   * @return {boolean} True iff number of dispatches accumulated is greater than 0.
   */
  function hasDispatches(event) {
    return !!event._dispatchListeners;
  }
  
  /**
   * General utilities that are useful in creating custom Event Plugins.
   */
  var EventPluginUtils = {
    isEndish: isEndish,
    isMoveish: isMoveish,
    isStartish: isStartish,
  
    executeDirectDispatch: executeDirectDispatch,
    executeDispatchesInOrder: executeDispatchesInOrder,
    executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
    hasDispatches: hasDispatches,
  
    getInstanceFromNode: function (node) {
      return ComponentTree.getInstanceFromNode(node);
    },
    getNodeFromInstance: function (node) {
      return ComponentTree.getNodeFromInstance(node);
    },
    isAncestor: function (a, b) {
      return TreeTraversal.isAncestor(a, b);
    },
    getLowestCommonAncestor: function (a, b) {
      return TreeTraversal.getLowestCommonAncestor(a, b);
    },
    getParentInstance: function (inst) {
      return TreeTraversal.getParentInstance(inst);
    },
    traverseTwoPhase: function (target, fn, arg) {
      return TreeTraversal.traverseTwoPhase(target, fn, arg);
    },
    traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
      return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
    },
  
    injection: injection
  };
  
  var EventPluginUtils_1 = EventPluginUtils;
  
  /**
   * Accumulates items that must not be null or undefined into the first one. This
   * is used to conserve memory by avoiding array allocations, and thus sacrifices
   * API cleanness. Since `current` can be null before being passed in and not
   * null after this function, make sure to assign it back to `current`:
   *
   * `a = accumulateInto(a, b);`
   *
   * This API should be sparingly used. Try `accumulate` for something cleaner.
   *
   * @return {*|array<*>} An accumulation of items.
   */
  
  function accumulateInto(current, next) {
    !(next != null) ? invariant_1(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;
  
    if (current == null) {
      return next;
    }
  
    // Both are not empty. Warning: Never call x.concat(y) when you are not
    // certain that x is an Array (x could be a string with concat method).
    if (Array.isArray(current)) {
      if (Array.isArray(next)) {
        current.push.apply(current, next);
        return current;
      }
      current.push(next);
      return current;
    }
  
    if (Array.isArray(next)) {
      // A bit too dangerous to mutate `next`.
      return [current].concat(next);
    }
  
    return [current, next];
  }
  
  var accumulateInto_1 = accumulateInto;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  /**
   * @param {array} arr an "accumulation" of items which is either an Array or
   * a single item. Useful when paired with the `accumulate` module. This is a
   * simple utility that allows us to reason about a collection of items, but
   * handling the case when there is exactly one item (and we do not need to
   * allocate an array).
   */
  
  function forEachAccumulated(arr, cb, scope) {
    if (Array.isArray(arr)) {
      arr.forEach(cb, scope);
    } else if (arr) {
      cb.call(scope, arr);
    }
  }
  
  var forEachAccumulated_1 = forEachAccumulated;
  
  /**
   * Internal store for event listeners
   */
  var listenerBank = {};
  
  /**
   * Internal queue of events that have accumulated their dispatches and are
   * waiting to have their dispatches executed.
   */
  var eventQueue = null;
  
  /**
   * Dispatches an event and releases it back into the pool, unless persistent.
   *
   * @param {?object} event Synthetic event to be dispatched.
   * @param {boolean} simulated If the event is simulated (changes exn behavior)
   * @private
   */
  var executeDispatchesAndRelease = function (event, simulated) {
    if (event) {
      EventPluginUtils_1.executeDispatchesInOrder(event, simulated);
  
      if (!event.isPersistent()) {
        event.constructor.release(event);
      }
    }
  };
  var executeDispatchesAndReleaseSimulated = function (e) {
    return executeDispatchesAndRelease(e, true);
  };
  var executeDispatchesAndReleaseTopLevel = function (e) {
    return executeDispatchesAndRelease(e, false);
  };
  
  var getDictionaryKey = function (inst) {
    // Prevents V8 performance issue:
    // https://github.com/facebook/react/pull/7232
    return '.' + inst._rootNodeID;
  };
  
  function isInteractive(tag) {
    return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
  }
  
  function shouldPreventMouseEvent(name, type, props) {
    switch (name) {
      case 'onClick':
      case 'onClickCapture':
      case 'onDoubleClick':
      case 'onDoubleClickCapture':
      case 'onMouseDown':
      case 'onMouseDownCapture':
      case 'onMouseMove':
      case 'onMouseMoveCapture':
      case 'onMouseUp':
      case 'onMouseUpCapture':
        return !!(props.disabled && isInteractive(type));
      default:
        return false;
    }
  }
  
  /**
   * This is a unified interface for event plugins to be installed and configured.
   *
   * Event plugins can implement the following properties:
   *
   *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
   *     Required. When a top-level event is fired, this method is expected to
   *     extract synthetic events that will in turn be queued and dispatched.
   *
   *   `eventTypes` {object}
   *     Optional, plugins that fire events must publish a mapping of registration
   *     names that are used to register listeners. Values of this mapping must
   *     be objects that contain `registrationName` or `phasedRegistrationNames`.
   *
   *   `executeDispatch` {function(object, function, string)}
   *     Optional, allows plugins to override how an event gets dispatched. By
   *     default, the listener is simply invoked.
   *
   * Each plugin that is injected into `EventsPluginHub` is immediately operable.
   *
   * @public
   */
  var EventPluginHub = {
    /**
     * Methods for injecting dependencies.
     */
    injection: {
      /**
       * @param {array} InjectedEventPluginOrder
       * @public
       */
      injectEventPluginOrder: EventPluginRegistry_1.injectEventPluginOrder,
  
      /**
       * @param {object} injectedNamesToPlugins Map from names to plugin modules.
       */
      injectEventPluginsByName: EventPluginRegistry_1.injectEventPluginsByName
    },
  
    /**
     * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
     *
     * @param {object} inst The instance, which is the source of events.
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @param {function} listener The callback to store.
     */
    putListener: function (inst, registrationName, listener) {
      !(typeof listener === 'function') ? invariant_1(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : void 0;
  
      var key = getDictionaryKey(inst);
      var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
      bankForRegistrationName[key] = listener;
  
      var PluginModule = EventPluginRegistry_1.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.didPutListener) {
        PluginModule.didPutListener(inst, registrationName, listener);
      }
    },
  
    /**
     * @param {object} inst The instance, which is the source of events.
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @return {?function} The stored callback.
     */
    getListener: function (inst, registrationName) {
      // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
      // live here; needs to be moved to a better place soon
      var bankForRegistrationName = listenerBank[registrationName];
      if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
        return null;
      }
      var key = getDictionaryKey(inst);
      return bankForRegistrationName && bankForRegistrationName[key];
    },
  
    /**
     * Deletes a listener from the registration bank.
     *
     * @param {object} inst The instance, which is the source of events.
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     */
    deleteListener: function (inst, registrationName) {
      var PluginModule = EventPluginRegistry_1.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);
      }
  
      var bankForRegistrationName = listenerBank[registrationName];
      // TODO: This should never be null -- when is it?
      if (bankForRegistrationName) {
        var key = getDictionaryKey(inst);
        delete bankForRegistrationName[key];
      }
    },
  
    /**
     * Deletes all listeners for the DOM element with the supplied ID.
     *
     * @param {object} inst The instance, which is the source of events.
     */
    deleteAllListeners: function (inst) {
      var key = getDictionaryKey(inst);
      for (var registrationName in listenerBank) {
        if (!listenerBank.hasOwnProperty(registrationName)) {
          continue;
        }
  
        if (!listenerBank[registrationName][key]) {
          continue;
        }
  
        var PluginModule = EventPluginRegistry_1.registrationNameModules[registrationName];
        if (PluginModule && PluginModule.willDeleteListener) {
          PluginModule.willDeleteListener(inst, registrationName);
        }
  
        delete listenerBank[registrationName][key];
      }
    },
  
    /**
     * Allows registered plugins an opportunity to extract events from top-level
     * native browser events.
     *
     * @return {*} An accumulation of synthetic events.
     * @internal
     */
    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var events;
      var plugins = EventPluginRegistry_1.plugins;
      for (var i = 0; i < plugins.length; i++) {
        // Not every plugin in the ordering may be loaded at runtime.
        var possiblePlugin = plugins[i];
        if (possiblePlugin) {
          var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
          if (extractedEvents) {
            events = accumulateInto_1(events, extractedEvents);
          }
        }
      }
      return events;
    },
  
    /**
     * Enqueues a synthetic event that should be dispatched when
     * `processEventQueue` is invoked.
     *
     * @param {*} events An accumulation of synthetic events.
     * @internal
     */
    enqueueEvents: function (events) {
      if (events) {
        eventQueue = accumulateInto_1(eventQueue, events);
      }
    },
  
    /**
     * Dispatches all synthetic events on the event queue.
     *
     * @internal
     */
    processEventQueue: function (simulated) {
      // Set `eventQueue` to null before processing it so that we can tell if more
      // events get enqueued while processing.
      var processingEventQueue = eventQueue;
      eventQueue = null;
      if (simulated) {
        forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseSimulated);
      } else {
        forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseTopLevel);
      }
      !!eventQueue ? invariant_1(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0;
      // This would be a good time to rethrow if any of the event handlers threw.
      ReactErrorUtils_1.rethrowCaughtError();
    },
  
    /**
     * These are needed for tests only. Do not use!
     */
    __purge: function () {
      listenerBank = {};
    },
  
    __getListenerBank: function () {
      return listenerBank;
    }
  };
  
  var EventPluginHub_1 = EventPluginHub;
  
  var getListener = EventPluginHub_1.getListener;
  
  /**
   * Some event types have a notion of different registration names for different
   * "phases" of propagation. This finds listeners by a given phase.
   */
  function listenerAtPhase(inst, event, propagationPhase) {
    var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
    return getListener(inst, registrationName);
  }
  
  /**
   * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
   * here, allows us to not have to bind or create functions for each event.
   * Mutating the event's members allows us to not have to create a wrapping
   * "dispatch" object that pairs the event with the listener.
   */
  function accumulateDirectionalDispatches(inst, phase, event) {
    {
      warning_1(inst, 'Dispatching inst must not be null');
    }
    var listener = listenerAtPhase(inst, event, phase);
    if (listener) {
      event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst);
    }
  }
  
  /**
   * Collect dispatches (must be entirely collected before dispatching - see unit
   * tests). Lazily allocate the array to conserve memory.  We must loop through
   * each event and perform the traversal for each one. We cannot perform a
   * single traversal for the entire collection of events because each event may
   * have a different target.
   */
  function accumulateTwoPhaseDispatchesSingle(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      EventPluginUtils_1.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
    }
  }
  
  /**
   * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
   */
  function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
      var targetInst = event._targetInst;
      var parentInst = targetInst ? EventPluginUtils_1.getParentInstance(targetInst) : null;
      EventPluginUtils_1.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
    }
  }
  
  /**
   * Accumulates without regard to direction, does not look for phased
   * registration names. Same as `accumulateDirectDispatchesSingle` but without
   * requiring that the `dispatchMarker` be the same as the dispatched ID.
   */
  function accumulateDispatches(inst, ignoredDirection, event) {
    if (event && event.dispatchConfig.registrationName) {
      var registrationName = event.dispatchConfig.registrationName;
      var listener = getListener(inst, registrationName);
      if (listener) {
        event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener);
        event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst);
      }
    }
  }
  
  /**
   * Accumulates dispatches on an `SyntheticEvent`, but only for the
   * `dispatchMarker`.
   * @param {SyntheticEvent} event
   */
  function accumulateDirectDispatchesSingle(event) {
    if (event && event.dispatchConfig.registrationName) {
      accumulateDispatches(event._targetInst, null, event);
    }
  }
  
  function accumulateTwoPhaseDispatches(events) {
    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingle);
  }
  
  function accumulateTwoPhaseDispatchesSkipTarget(events) {
    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
  }
  
  function accumulateEnterLeaveDispatches(leave, enter, from, to) {
    EventPluginUtils_1.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
  }
  
  function accumulateDirectDispatches(events) {
    forEachAccumulated_1(events, accumulateDirectDispatchesSingle);
  }
  
  /**
   * A small set of propagation patterns, each of which will accept a small amount
   * of information, and generate a set of "dispatch ready event objects" - which
   * are sets of events that have already been annotated with a set of dispatched
   * listener functions/ids. The API is designed this way to discourage these
   * propagation strategies from actually executing the dispatches, since we
   * always want to collect the entire set of dispatches before executing event a
   * single one.
   *
   * @constructor EventPropagators
   */
  var EventPropagators = {
    accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
    accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
    accumulateDirectDispatches: accumulateDirectDispatches,
    accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
  };
  
  var EventPropagators_1 = EventPropagators;
  
  /**
   * Static poolers. Several custom versions for each potential number of
   * arguments. A completely generic pooler is easy to implement, but would
   * require accessing the `arguments` object. In each of these, `this` refers to
   * the Class itself, not an instance. If any others are needed, simply add them
   * here, or in their own files.
   */
  var oneArgumentPooler$1 = function (copyFieldsFrom) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, copyFieldsFrom);
      return instance;
    } else {
      return new Klass(copyFieldsFrom);
    }
  };
  
  var twoArgumentPooler$2 = function (a1, a2) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2);
      return instance;
    } else {
      return new Klass(a1, a2);
    }
  };
  
  var threeArgumentPooler$1 = function (a1, a2, a3) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3);
      return instance;
    } else {
      return new Klass(a1, a2, a3);
    }
  };
  
  var fourArgumentPooler$2 = function (a1, a2, a3, a4) {
    var Klass = this;
    if (Klass.instancePool.length) {
      var instance = Klass.instancePool.pop();
      Klass.call(instance, a1, a2, a3, a4);
      return instance;
    } else {
      return new Klass(a1, a2, a3, a4);
    }
  };
  
  var standardReleaser$1 = function (instance) {
    var Klass = this;
    !(instance instanceof Klass) ? invariant_1(false, 'Trying to release an instance into a pool of a different type.') : void 0;
    instance.destructor();
    if (Klass.instancePool.length < Klass.poolSize) {
      Klass.instancePool.push(instance);
    }
  };
  
  var DEFAULT_POOL_SIZE$1 = 10;
  var DEFAULT_POOLER$1 = oneArgumentPooler$1;
  
  /**
   * Augments `CopyConstructor` to be a poolable class, augmenting only the class
   * itself (statically) not adding any prototypical fields. Any CopyConstructor
   * you give this may have a `poolSize` property, and will look for a
   * prototypical `destructor` on instances.
   *
   * @param {Function} CopyConstructor Constructor that can be used to reset.
   * @param {Function} pooler Customizable pooler.
   */
  var addPoolingTo$1 = function (CopyConstructor, pooler) {
    // Casting as any so that flow ignores the actual implementation and trusts
    // it to match the type we declared
    var NewKlass = CopyConstructor;
    NewKlass.instancePool = [];
    NewKlass.getPooled = pooler || DEFAULT_POOLER$1;
    if (!NewKlass.poolSize) {
      NewKlass.poolSize = DEFAULT_POOL_SIZE$1;
    }
    NewKlass.release = standardReleaser$1;
    return NewKlass;
  };
  
  var PooledClass$2 = {
    addPoolingTo: addPoolingTo$1,
    oneArgumentPooler: oneArgumentPooler$1,
    twoArgumentPooler: twoArgumentPooler$2,
    threeArgumentPooler: threeArgumentPooler$1,
    fourArgumentPooler: fourArgumentPooler$2
  };
  
  var PooledClass_1$2 = PooledClass$2;
  
  var contentKey = null;
  
  /**
   * Gets the key used to access text content on a DOM node.
   *
   * @return {?string} Key used to access text content.
   * @internal
   */
  function getTextContentAccessor() {
    if (!contentKey && ExecutionEnvironment_1.canUseDOM) {
      // Prefer textContent to innerText because many browsers support both but
      // SVG <text> elements don't support innerText even when <div> does.
      contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
    }
    return contentKey;
  }
  
  var getTextContentAccessor_1 = getTextContentAccessor;
  
  /**
   * This helper class stores information about text content of a target node,
   * allowing comparison of content before and after a given event.
   *
   * Identify the node where selection currently begins, then observe
   * both its text content and its current position in the DOM. Since the
   * browser may natively replace the target node during composition, we can
   * use its position to find its replacement.
   *
   * @param {DOMEventTarget} root
   */
  function FallbackCompositionState(root) {
    this._root = root;
    this._startText = this.getText();
    this._fallbackText = null;
  }
  
  objectAssign(FallbackCompositionState.prototype, {
    destructor: function () {
      this._root = null;
      this._startText = null;
      this._fallbackText = null;
    },
  
    /**
     * Get current text of input.
     *
     * @return {string}
     */
    getText: function () {
      if ('value' in this._root) {
        return this._root.value;
      }
      return this._root[getTextContentAccessor_1()];
    },
  
    /**
     * Determine the differing substring between the initially stored
     * text content and the current content.
     *
     * @return {string}
     */
    getData: function () {
      if (this._fallbackText) {
        return this._fallbackText;
      }
  
      var start;
      var startValue = this._startText;
      var startLength = startValue.length;
      var end;
      var endValue = this.getText();
      var endLength = endValue.length;
  
      for (start = 0; start < startLength; start++) {
        if (startValue[start] !== endValue[start]) {
          break;
        }
      }
  
      var minEnd = startLength - start;
      for (end = 1; end <= minEnd; end++) {
        if (startValue[startLength - end] !== endValue[endLength - end]) {
          break;
        }
      }
  
      var sliceTail = end > 1 ? 1 - end : undefined;
      this._fallbackText = endValue.slice(start, sliceTail);
      return this._fallbackText;
    }
  });
  
  PooledClass_1$2.addPoolingTo(FallbackCompositionState);
  
  var FallbackCompositionState_1 = FallbackCompositionState;
  
  var didWarnForAddedNewProperty = false;
  var isProxySupported = typeof Proxy === 'function';
  
  var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];
  
  /**
   * @interface Event
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var EventInterface = {
    type: null,
    target: null,
    // currentTarget is set when dispatching; no use in copying it here
    currentTarget: emptyFunction_1.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function (event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
  };
  
  /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   *
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {*} targetInst Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @param {DOMEventTarget} nativeEventTarget Target node.
   */
  function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    {
      // these have a getter/setter for warnings
      delete this.nativeEvent;
      delete this.preventDefault;
      delete this.stopPropagation;
    }
  
    this.dispatchConfig = dispatchConfig;
    this._targetInst = targetInst;
    this.nativeEvent = nativeEvent;
  
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (!Interface.hasOwnProperty(propName)) {
        continue;
      }
      {
        delete this[propName]; // this has a getter/setter for warnings
      }
      var normalize = Interface[propName];
      if (normalize) {
        this[propName] = normalize(nativeEvent);
      } else {
        if (propName === 'target') {
          this.target = nativeEventTarget;
        } else {
          this[propName] = nativeEvent[propName];
        }
      }
    }
  
    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
    if (defaultPrevented) {
      this.isDefaultPrevented = emptyFunction_1.thatReturnsTrue;
    } else {
      this.isDefaultPrevented = emptyFunction_1.thatReturnsFalse;
    }
    this.isPropagationStopped = emptyFunction_1.thatReturnsFalse;
    return this;
  }
  
  objectAssign(SyntheticEvent.prototype, {
    preventDefault: function () {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      if (!event) {
        return;
      }
  
      if (event.preventDefault) {
        event.preventDefault();
        // eslint-disable-next-line valid-typeof
      } else if (typeof event.returnValue !== 'unknown') {
        event.returnValue = false;
      }
      this.isDefaultPrevented = emptyFunction_1.thatReturnsTrue;
    },
  
    stopPropagation: function () {
      var event = this.nativeEvent;
      if (!event) {
        return;
      }
  
      if (event.stopPropagation) {
        event.stopPropagation();
        // eslint-disable-next-line valid-typeof
      } else if (typeof event.cancelBubble !== 'unknown') {
        // The ChangeEventPlugin registers a "propertychange" event for
        // IE. This event does not support bubbling or cancelling, and
        // any references to cancelBubble throw "Member not found".  A
        // typeof check of "unknown" circumvents this issue (and is also
        // IE specific).
        event.cancelBubble = true;
      }
  
      this.isPropagationStopped = emptyFunction_1.thatReturnsTrue;
    },
  
    /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */
    persist: function () {
      this.isPersistent = emptyFunction_1.thatReturnsTrue;
    },
  
    /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */
    isPersistent: emptyFunction_1.thatReturnsFalse,
  
    /**
     * `PooledClass` looks for `destructor` on each instance it releases.
     */
    destructor: function () {
      var Interface = this.constructor.Interface;
      for (var propName in Interface) {
        {
          Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
        }
      }
      for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
        this[shouldBeReleasedProperties[i]] = null;
      }
      {
        Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
        Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction_1));
        Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction_1));
      }
    }
  });
  
  SyntheticEvent.Interface = EventInterface;
  
  /**
   * Helper to reduce boilerplate when creating subclasses.
   *
   * @param {function} Class
   * @param {?object} Interface
   */
  SyntheticEvent.augmentClass = function (Class, Interface) {
    var Super = this;
  
    var E = function () {};
    E.prototype = Super.prototype;
    var prototype = new E();
  
    objectAssign(prototype, Class.prototype);
    Class.prototype = prototype;
    Class.prototype.constructor = Class;
  
    Class.Interface = objectAssign({}, Super.Interface, Interface);
    Class.augmentClass = Super.augmentClass;
  
    PooledClass_1$2.addPoolingTo(Class, PooledClass_1$2.fourArgumentPooler);
  };
  
  /** Proxying after everything set on SyntheticEvent
    * to resolve Proxy issue on some WebKit browsers
    * in which some Event properties are set to undefined (GH#10010)
    */
  {
    if (isProxySupported) {
      /*eslint-disable no-func-assign */
      SyntheticEvent = new Proxy(SyntheticEvent, {
        construct: function (target, args) {
          return this.apply(target, Object.create(target.prototype), args);
        },
        apply: function (constructor, that, args) {
          return new Proxy(constructor.apply(that, args), {
            set: function (target, prop, value) {
              if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
                warning_1(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.');
                didWarnForAddedNewProperty = true;
              }
              target[prop] = value;
              return true;
            }
          });
        }
      });
      /*eslint-enable no-func-assign */
    }
  }
  
  PooledClass_1$2.addPoolingTo(SyntheticEvent, PooledClass_1$2.fourArgumentPooler);
  
  var SyntheticEvent_1 = SyntheticEvent;
  
  /**
    * Helper to nullify syntheticEvent instance properties when destructing
    *
    * @param {object} SyntheticEvent
    * @param {String} propName
    * @return {object} defineProperty object
    */
  function getPooledWarningPropertyDefinition(propName, getVal) {
    var isFunction = typeof getVal === 'function';
    return {
      configurable: true,
      set: set,
      get: get
    };
  
    function set(val) {
      var action = isFunction ? 'setting the method' : 'setting the property';
      warn(action, 'This is effectively a no-op');
      return val;
    }
  
    function get() {
      var action = isFunction ? 'accessing the method' : 'accessing the property';
      var result = isFunction ? 'This is a no-op function' : 'This is set to null';
      warn(action, result);
      return getVal;
    }
  
    function warn(action, result) {
      var warningCondition = false;
      warning_1(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
    }
  }
  
  /**
   * @interface Event
   * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
   */
  var CompositionEventInterface = {
    data: null
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticEvent_1.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
  
  var SyntheticCompositionEvent_1 = SyntheticCompositionEvent;
  
  /**
   * @interface Event
   * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
   *      /#events-inputevents
   */
  var InputEventInterface = {
    data: null
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticEvent_1.augmentClass(SyntheticInputEvent, InputEventInterface);
  
  var SyntheticInputEvent_1 = SyntheticInputEvent;
  
  var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
  var START_KEYCODE = 229;
  
  var canUseCompositionEvent = ExecutionEnvironment_1.canUseDOM && 'CompositionEvent' in window;
  
  var documentMode = null;
  if (ExecutionEnvironment_1.canUseDOM && 'documentMode' in document) {
    documentMode = document.documentMode;
  }
  
  // Webkit offers a very useful `textInput` event that can be used to
  // directly represent `beforeInput`. The IE `textinput` event is not as
  // useful, so we don't use it.
  var canUseTextInputEvent = ExecutionEnvironment_1.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
  
  // In IE9+, we have access to composition events, but the data supplied
  // by the native compositionend event may be incorrect. Japanese ideographic
  // spaces, for instance (\u3000) are not recorded correctly.
  var useFallbackCompositionData = ExecutionEnvironment_1.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
  
  /**
   * Opera <= 12 includes TextEvent in window, but does not fire
   * text input events. Rely on keypress instead.
   */
  function isPresto() {
    var opera = window.opera;
    return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
  }
  
  var SPACEBAR_CODE = 32;
  var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
  
  // Events and their corresponding property names.
  var eventTypes = {
    beforeInput: {
      phasedRegistrationNames: {
        bubbled: 'onBeforeInput',
        captured: 'onBeforeInputCapture'
      },
      dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
    },
    compositionEnd: {
      phasedRegistrationNames: {
        bubbled: 'onCompositionEnd',
        captured: 'onCompositionEndCapture'
      },
      dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
    },
    compositionStart: {
      phasedRegistrationNames: {
        bubbled: 'onCompositionStart',
        captured: 'onCompositionStartCapture'
      },
      dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
    },
    compositionUpdate: {
      phasedRegistrationNames: {
        bubbled: 'onCompositionUpdate',
        captured: 'onCompositionUpdateCapture'
      },
      dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
    }
  };
  
  // Track whether we've ever handled a keypress on the space key.
  var hasSpaceKeypress = false;
  
  /**
   * Return whether a native keypress event is assumed to be a command.
   * This is required because Firefox fires `keypress` events for key commands
   * (cut, copy, select-all, etc.) even though no character is inserted.
   */
  function isKeypressCommand(nativeEvent) {
    return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey);
  }
  
  /**
   * Translate native top level events into event types.
   *
   * @param {string} topLevelType
   * @return {object}
   */
  function getCompositionEventType(topLevelType) {
    switch (topLevelType) {
      case 'topCompositionStart':
        return eventTypes.compositionStart;
      case 'topCompositionEnd':
        return eventTypes.compositionEnd;
      case 'topCompositionUpdate':
        return eventTypes.compositionUpdate;
    }
  }
  
  /**
   * Does our fallback best-guess model think this event signifies that
   * composition has begun?
   *
   * @param {string} topLevelType
   * @param {object} nativeEvent
   * @return {boolean}
   */
  function isFallbackCompositionStart(topLevelType, nativeEvent) {
    return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
  }
  
  /**
   * Does our fallback mode think that this event is the end of composition?
   *
   * @param {string} topLevelType
   * @param {object} nativeEvent
   * @return {boolean}
   */
  function isFallbackCompositionEnd(topLevelType, nativeEvent) {
    switch (topLevelType) {
      case 'topKeyUp':
        // Command keys insert or clear IME input.
        return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
      case 'topKeyDown':
        // Expect IME keyCode on each keydown. If we get any other
        // code we must have exited earlier.
        return nativeEvent.keyCode !== START_KEYCODE;
      case 'topKeyPress':
      case 'topMouseDown':
      case 'topBlur':
        // Events are not possible without cancelling IME.
        return true;
      default:
        return false;
    }
  }
  
  /**
   * Google Input Tools provides composition data via a CustomEvent,
   * with the `data` property populated in the `detail` object. If this
   * is available on the event object, use it. If not, this is a plain
   * composition event and we have nothing special to extract.
   *
   * @param {object} nativeEvent
   * @return {?string}
   */
  function getDataFromCustomEvent(nativeEvent) {
    var detail = nativeEvent.detail;
    if (typeof detail === 'object' && 'data' in detail) {
      return detail.data;
    }
    return null;
  }
  
  // Track the current IME composition fallback object, if any.
  var currentComposition = null;
  
  /**
   * @return {?object} A SyntheticCompositionEvent.
   */
  function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var eventType;
    var fallbackData;
  
    if (canUseCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }
  
    if (!eventType) {
      return null;
    }
  
    if (useFallbackCompositionData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = FallbackCompositionState_1.getPooled(nativeEventTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          fallbackData = currentComposition.getData();
        }
      }
    }
  
    var event = SyntheticCompositionEvent_1.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
  
    if (fallbackData) {
      // Inject data generated from fallback path into the synthetic event.
      // This matches the property of native CompositionEventInterface.
      event.data = fallbackData;
    } else {
      var customData = getDataFromCustomEvent(nativeEvent);
      if (customData !== null) {
        event.data = customData;
      }
    }
  
    EventPropagators_1.accumulateTwoPhaseDispatches(event);
    return event;
  }
  
  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} nativeEvent Native browser event.
   * @return {?string} The string corresponding to this `beforeInput` event.
   */
  function getNativeBeforeInputChars(topLevelType, nativeEvent) {
    switch (topLevelType) {
      case 'topCompositionEnd':
        return getDataFromCustomEvent(nativeEvent);
      case 'topKeyPress':
        /**
         * If native `textInput` events are available, our goal is to make
         * use of them. However, there is a special case: the spacebar key.
         * In Webkit, preventing default on a spacebar `textInput` event
         * cancels character insertion, but it *also* causes the browser
         * to fall back to its default spacebar behavior of scrolling the
         * page.
         *
         * Tracking at:
         * https://code.google.com/p/chromium/issues/detail?id=355103
         *
         * To avoid this issue, use the keypress event as if no `textInput`
         * event is available.
         */
        var which = nativeEvent.which;
        if (which !== SPACEBAR_CODE) {
          return null;
        }
  
        hasSpaceKeypress = true;
        return SPACEBAR_CHAR;
  
      case 'topTextInput':
        // Record the characters to be added to the DOM.
        var chars = nativeEvent.data;
  
        // If it's a spacebar character, assume that we have already handled
        // it at the keypress level and bail immediately. Android Chrome
        // doesn't give us keycodes, so we need to blacklist it.
        if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
          return null;
        }
  
        return chars;
  
      default:
        // For other native event types, do nothing.
        return null;
    }
  }
  
  /**
   * For browsers that do not provide the `textInput` event, extract the
   * appropriate string to use for SyntheticInputEvent.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} nativeEvent Native browser event.
   * @return {?string} The fallback string for this `beforeInput` event.
   */
  function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
    // If we are currently composing (IME) and using a fallback to do so,
    // try to extract the composed characters from the fallback object.
    // If composition event is available, we extract a string only at
    // compositionevent, otherwise extract it at fallback events.
    if (currentComposition) {
      if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
        var chars = currentComposition.getData();
        FallbackCompositionState_1.release(currentComposition);
        currentComposition = null;
        return chars;
      }
      return null;
    }
  
    switch (topLevelType) {
      case 'topPaste':
        // If a paste event occurs after a keypress, throw out the input
        // chars. Paste events should not lead to BeforeInput events.
        return null;
      case 'topKeyPress':
        /**
         * As of v27, Firefox may fire keypress events even when no character
         * will be inserted. A few possibilities:
         *
         * - `which` is `0`. Arrow keys, Esc key, etc.
         *
         * - `which` is the pressed key code, but no char is available.
         *   Ex: 'AltGr + d` in Polish. There is no modified character for
         *   this key combination and no character is inserted into the
         *   document, but FF fires the keypress for char code `100` anyway.
         *   No `input` event will occur.
         *
         * - `which` is the pressed key code, but a command combination is
         *   being used. Ex: `Cmd+C`. No character is inserted, and no
         *   `input` event will occur.
         */
        if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
          return String.fromCharCode(nativeEvent.which);
        }
        return null;
      case 'topCompositionEnd':
        return useFallbackCompositionData ? null : nativeEvent.data;
      default:
        return null;
    }
  }
  
  /**
   * Extract a SyntheticInputEvent for `beforeInput`, based on either native
   * `textInput` or fallback behavior.
   *
   * @return {?object} A SyntheticInputEvent.
   */
  function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var chars;
  
    if (canUseTextInputEvent) {
      chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
    } else {
      chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
    }
  
    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return null;
    }
  
    var event = SyntheticInputEvent_1.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
  
    event.data = chars;
    EventPropagators_1.accumulateTwoPhaseDispatches(event);
    return event;
  }
  
  /**
   * Create an `onBeforeInput` event to match
   * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
   *
   * This event plugin is based on the native `textInput` event
   * available in Chrome, Safari, Opera, and IE. This event fires after
   * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
   *
   * `beforeInput` is spec'd but not implemented in any browsers, and
   * the `input` event does not provide any useful information about what has
   * actually been added, contrary to the spec. Thus, `textInput` is the best
   * available event to identify the characters that have actually been inserted
   * into the target node.
   *
   * This plugin is also responsible for emitting `composition` events, thus
   * allowing us to share composition fallback code for both `beforeInput` and
   * `composition` event types.
   */
  var BeforeInputEventPlugin = {
    eventTypes: eventTypes,
  
    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
    }
  };
  
  var BeforeInputEventPlugin_1 = BeforeInputEventPlugin;
  
  function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  
  
  
  
  /**
   * A specialized pseudo-event module to help keep track of components waiting to
   * be notified when their DOM representations are available for use.
   *
   * This implements `PooledClass`, so you should never need to instantiate this.
   * Instead, use `CallbackQueue.getPooled()`.
   *
   * @class ReactMountReady
   * @implements PooledClass
   * @internal
   */
  
  var CallbackQueue = function () {
    function CallbackQueue(arg) {
      _classCallCheck$1(this, CallbackQueue);
  
      this._callbacks = null;
      this._contexts = null;
      this._arg = arg;
    }
  
    /**
     * Enqueues a callback to be invoked when `notifyAll` is invoked.
     *
     * @param {function} callback Invoked when `notifyAll` is invoked.
     * @param {?object} context Context to call `callback` with.
     * @internal
     */
  
  
    CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
      this._callbacks = this._callbacks || [];
      this._callbacks.push(callback);
      this._contexts = this._contexts || [];
      this._contexts.push(context);
    };
  
    /**
     * Invokes all enqueued callbacks and clears the queue. This is invoked after
     * the DOM representation of a component has been created or updated.
     *
     * @internal
     */
  
  
    CallbackQueue.prototype.notifyAll = function notifyAll() {
      var callbacks = this._callbacks;
      var contexts = this._contexts;
      var arg = this._arg;
      if (callbacks && contexts) {
        !(callbacks.length === contexts.length) ? invariant_1(false, 'Mismatched list of contexts in callback queue') : void 0;
        this._callbacks = null;
        this._contexts = null;
        for (var i = 0; i < callbacks.length; i++) {
          callbacks[i].call(contexts[i], arg);
        }
        callbacks.length = 0;
        contexts.length = 0;
      }
    };
  
    CallbackQueue.prototype.checkpoint = function checkpoint() {
      return this._callbacks ? this._callbacks.length : 0;
    };
  
    CallbackQueue.prototype.rollback = function rollback(len) {
      if (this._callbacks && this._contexts) {
        this._callbacks.length = len;
        this._contexts.length = len;
      }
    };
  
    /**
     * Resets the internal queue.
     *
     * @internal
     */
  
  
    CallbackQueue.prototype.reset = function reset() {
      this._callbacks = null;
      this._contexts = null;
    };
  
    /**
     * `PooledClass` looks for this.
     */
  
  
    CallbackQueue.prototype.destructor = function destructor() {
      this.reset();
    };
  
    return CallbackQueue;
  }();
  
  var CallbackQueue_1 = PooledClass_1$2.addPoolingTo(CallbackQueue);
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  var ReactFeatureFlags = {
    // When true, call console.time() before and .timeEnd() after each top-level
    // render (both initial renders and updates). Useful when looking at prod-mode
    // timeline profiles in Chrome, for example.
    logTopLevelRenders: false
  };
  
  var ReactFeatureFlags_1 = ReactFeatureFlags;
  
  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  function isValidOwner(object) {
    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
  }
  
  /**
   * ReactOwners are capable of storing references to owned components.
   *
   * All components are capable of //being// referenced by owner components, but
   * only ReactOwner components are capable of //referencing// owned components.
   * The named reference is known as a "ref".
   *
   * Refs are available when mounted and updated during reconciliation.
   *
   *   var MyComponent = React.createClass({
   *     render: function() {
   *       return (
   *         <div onClick={this.handleClick}>
   *           <CustomComponent ref="custom" />
   *         </div>
   *       );
   *     },
   *     handleClick: function() {
   *       this.refs.custom.handleClick();
   *     },
   *     componentDidMount: function() {
   *       this.refs.custom.initialize();
   *     }
   *   });
   *
   * Refs should rarely be used. When refs are used, they should only be done to
   * control data that is not handled by React's data flow.
   *
   * @class ReactOwner
   */
  var ReactOwner = {
    /**
     * Adds a component by ref to an owner component.
     *
     * @param {ReactComponent} component Component to reference.
     * @param {string} ref Name by which to refer to the component.
     * @param {ReactOwner} owner Component on which to record the ref.
     * @final
     * @internal
     */
    addComponentAsRefTo: function (component, ref, owner) {
      !isValidOwner(owner) ? invariant_1(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : void 0;
      owner.attachRef(ref, component);
    },
  
    /**
     * Removes a component by ref from an owner component.
     *
     * @param {ReactComponent} component Component to dereference.
     * @param {string} ref Name of the ref to remove.
     * @param {ReactOwner} owner Component on which the ref is recorded.
     * @final
     * @internal
     */
    removeComponentAsRefFrom: function (component, ref, owner) {
      !isValidOwner(owner) ? invariant_1(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : void 0;
      var ownerPublicInstance = owner.getPublicInstance();
      // Check that `component`'s owner is still alive and that `component` is still the current ref
      // because we do not want to detach the ref if another component stole it.
      if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
        owner.detachRef(ref);
      }
    }
  };
  
  var ReactOwner_1 = ReactOwner;
  
  var ReactRef = {};
  
  function attachRef(ref, component, owner) {
    if (typeof ref === 'function') {
      ref(component.getPublicInstance());
    } else {
      // Legacy ref
      ReactOwner_1.addComponentAsRefTo(component, ref, owner);
    }
  }
  
  function detachRef(ref, component, owner) {
    if (typeof ref === 'function') {
      ref(null);
    } else {
      // Legacy ref
      ReactOwner_1.removeComponentAsRefFrom(component, ref, owner);
    }
  }
  
  ReactRef.attachRefs = function (instance, element) {
    if (element === null || typeof element !== 'object') {
      return;
    }
    var ref = element.ref;
    if (ref != null) {
      attachRef(ref, instance, element._owner);
    }
  };
  
  ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
    // If either the owner or a `ref` has changed, make sure the newest owner
    // has stored a reference to `this`, and the previous owner (if different)
    // has forgotten the reference to `this`. We use the element instead
    // of the public this.props because the post processing cannot determine
    // a ref. The ref conceptually lives on the element.
  
    // TODO: Should this even be possible? The owner cannot change because
    // it's forbidden by shouldUpdateReactComponent. The ref can change
    // if you swap the keys of but not the refs. Reconsider where this check
    // is made. It probably belongs where the key checking and
    // instantiateReactComponent is done.
  
    var prevRef = null;
    var prevOwner = null;
    if (prevElement !== null && typeof prevElement === 'object') {
      prevRef = prevElement.ref;
      prevOwner = prevElement._owner;
    }
  
    var nextRef = null;
    var nextOwner = null;
    if (nextElement !== null && typeof nextElement === 'object') {
      nextRef = nextElement.ref;
      nextOwner = nextElement._owner;
    }
  
    return prevRef !== nextRef ||
    // If owner changes but we have an unchanged function ref, don't update refs
    typeof nextRef === 'string' && nextOwner !== prevOwner;
  };
  
  ReactRef.detachRefs = function (instance, element) {
    if (element === null || typeof element !== 'object') {
      return;
    }
    var ref = element.ref;
    if (ref != null) {
      detachRef(ref, instance, element._owner);
    }
  };
  
  var ReactRef_1 = ReactRef;
  
  {
    var processingChildContext = false;
  
    var warnInvalidSetState = function () {
      warning_1(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()');
    };
  }
  
  var ReactInvalidSetStateWarningHook = {
    onBeginProcessingChildContext: function () {
      processingChildContext = true;
    },
    onEndProcessingChildContext: function () {
      processingChildContext = false;
    },
    onSetState: function () {
      warnInvalidSetState();
    }
  };
  
  var ReactInvalidSetStateWarningHook_1 = ReactInvalidSetStateWarningHook;
  
  /**
   * Copyright (c) 2016-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  var history$1 = [];
  
  var ReactHostOperationHistoryHook = {
    onHostOperation: function (operation) {
      history$1.push(operation);
    },
    clearHistory: function () {
      if (ReactHostOperationHistoryHook._preventClearing) {
        // Should only be used for tests.
        return;
      }
  
      history$1 = [];
    },
    getHistory: function () {
      return history$1;
    }
  };
  
  var ReactHostOperationHistoryHook_1 = ReactHostOperationHistoryHook;
  
  var performance$1;
  
  if (ExecutionEnvironment_1.canUseDOM) {
    performance$1 = window.performance || window.msPerformance || window.webkitPerformance;
  }
  
  var performance_1 = performance$1 || {};
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @typechecks
   */
  
  
  
  var performanceNow;
  
  /**
   * Detect if we can use `window.performance.now()` and gracefully fallback to
   * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
   * because of Facebook's testing infrastructure.
   */
  if (performance_1.now) {
    performanceNow = function performanceNow() {
      return performance_1.now();
    };
  } else {
    performanceNow = function performanceNow() {
      return Date.now();
    };
  }
  
  var performanceNow_1 = performanceNow;
  
  var hooks = [];
  var didHookThrowForEvent = {};
  
  function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
    try {
      fn.call(context, arg1, arg2, arg3, arg4, arg5);
    } catch (e) {
      warning_1(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack);
      didHookThrowForEvent[event] = true;
    }
  }
  
  function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
    for (var i = 0; i < hooks.length; i++) {
      var hook = hooks[i];
      var fn = hook[event];
      if (fn) {
        callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
      }
    }
  }
  
  var isProfiling = false;
  var flushHistory = [];
  var lifeCycleTimerStack = [];
  var currentFlushNesting = 0;
  var currentFlushMeasurements = [];
  var currentFlushStartTime = 0;
  var currentTimerDebugID = null;
  var currentTimerStartTime = 0;
  var currentTimerNestedFlushDuration = 0;
  var currentTimerType = null;
  
  var lifeCycleTimerHasWarned = false;
  
  function clearHistory() {
    ReactComponentTreeHook_1.purgeUnmountedComponents();
    ReactHostOperationHistoryHook_1.clearHistory();
  }
  
  function getTreeSnapshot(registeredIDs) {
    return registeredIDs.reduce(function (tree, id) {
      var ownerID = ReactComponentTreeHook_1.getOwnerID(id);
      var parentID = ReactComponentTreeHook_1.getParentID(id);
      tree[id] = {
        displayName: ReactComponentTreeHook_1.getDisplayName(id),
        text: ReactComponentTreeHook_1.getText(id),
        updateCount: ReactComponentTreeHook_1.getUpdateCount(id),
        childIDs: ReactComponentTreeHook_1.getChildIDs(id),
        // Text nodes don't have owners but this is close enough.
        ownerID: ownerID || parentID && ReactComponentTreeHook_1.getOwnerID(parentID) || 0,
        parentID: parentID
      };
      return tree;
    }, {});
  }
  
  function resetMeasurements() {
    var previousStartTime = currentFlushStartTime;
    var previousMeasurements = currentFlushMeasurements;
    var previousOperations = ReactHostOperationHistoryHook_1.getHistory();
  
    if (currentFlushNesting === 0) {
      currentFlushStartTime = 0;
      currentFlushMeasurements = [];
      clearHistory();
      return;
    }
  
    if (previousMeasurements.length || previousOperations.length) {
      var registeredIDs = ReactComponentTreeHook_1.getRegisteredIDs();
      flushHistory.push({
        duration: performanceNow_1() - previousStartTime,
        measurements: previousMeasurements || [],
        operations: previousOperations || [],
        treeSnapshot: getTreeSnapshot(registeredIDs)
      });
    }
  
    clearHistory();
    currentFlushStartTime = performanceNow_1();
    currentFlushMeasurements = [];
  }
  
  function checkDebugID(debugID) {
    var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  
    if (allowRoot && debugID === 0) {
      return;
    }
    if (!debugID) {
      warning_1(false, 'ReactDebugTool: debugID may not be empty.');
    }
  }
  
  function beginLifeCycleTimer(debugID, timerType) {
    if (currentFlushNesting === 0) {
      return;
    }
    if (currentTimerType && !lifeCycleTimerHasWarned) {
      warning_1(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another');
      lifeCycleTimerHasWarned = true;
    }
    currentTimerStartTime = performanceNow_1();
    currentTimerNestedFlushDuration = 0;
    currentTimerDebugID = debugID;
    currentTimerType = timerType;
  }
  
  function endLifeCycleTimer(debugID, timerType) {
    if (currentFlushNesting === 0) {
      return;
    }
    if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
      warning_1(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another');
      lifeCycleTimerHasWarned = true;
    }
    if (isProfiling) {
      currentFlushMeasurements.push({
        timerType: timerType,
        instanceID: debugID,
        duration: performanceNow_1() - currentTimerStartTime - currentTimerNestedFlushDuration
      });
    }
    currentTimerStartTime = 0;
    currentTimerNestedFlushDuration = 0;
    currentTimerDebugID = null;
    currentTimerType = null;
  }
  
  function pauseCurrentLifeCycleTimer() {
    var currentTimer = {
      startTime: currentTimerStartTime,
      nestedFlushStartTime: performanceNow_1(),
      debugID: currentTimerDebugID,
      timerType: currentTimerType
    };
    lifeCycleTimerStack.push(currentTimer);
    currentTimerStartTime = 0;
    currentTimerNestedFlushDuration = 0;
    currentTimerDebugID = null;
    currentTimerType = null;
  }
  
  function resumeCurrentLifeCycleTimer() {
    var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
        startTime = _lifeCycleTimerStack$.startTime,
        nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
        debugID = _lifeCycleTimerStack$.debugID,
        timerType = _lifeCycleTimerStack$.timerType;
  
    var nestedFlushDuration = performanceNow_1() - nestedFlushStartTime;
    currentTimerStartTime = startTime;
    currentTimerNestedFlushDuration += nestedFlushDuration;
    currentTimerDebugID = debugID;
    currentTimerType = timerType;
  }
  
  var lastMarkTimeStamp = 0;
  var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';
  
  function shouldMark(debugID) {
    if (!isProfiling || !canUsePerformanceMeasure) {
      return false;
    }
    var element = ReactComponentTreeHook_1.getElement(debugID);
    if (element == null || typeof element !== 'object') {
      return false;
    }
    var isHostElement = typeof element.type === 'string';
    if (isHostElement) {
      return false;
    }
    return true;
  }
  
  function markBegin(debugID, markType) {
    if (!shouldMark(debugID)) {
      return;
    }
  
    var markName = debugID + '::' + markType;
    lastMarkTimeStamp = performanceNow_1();
    performance.mark(markName);
  }
  
  function markEnd(debugID, markType) {
    if (!shouldMark(debugID)) {
      return;
    }
  
    var markName = debugID + '::' + markType;
    var displayName = ReactComponentTreeHook_1.getDisplayName(debugID) || 'Unknown';
  
    // Chrome has an issue of dropping markers recorded too fast:
    // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
    // To work around this, we will not report very small measurements.
    // I determined the magic number by tweaking it back and forth.
    // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
    // When the bug is fixed, we can `measure()` unconditionally if we want to.
    var timeStamp = performanceNow_1();
    if (timeStamp - lastMarkTimeStamp > 0.1) {
      var measurementName = displayName + ' [' + markType + ']';
      performance.measure(measurementName, markName);
    }
  
    performance.clearMarks(markName);
    if (measurementName) {
      performance.clearMeasures(measurementName);
    }
  }
  
  var ReactDebugTool$1 = {
    addHook: function (hook) {
      hooks.push(hook);
    },
    removeHook: function (hook) {
      for (var i = 0; i < hooks.length; i++) {
        if (hooks[i] === hook) {
          hooks.splice(i, 1);
          i--;
        }
      }
    },
    isProfiling: function () {
      return isProfiling;
    },
    beginProfiling: function () {
      if (isProfiling) {
        return;
      }
  
      isProfiling = true;
      flushHistory.length = 0;
      resetMeasurements();
      ReactDebugTool$1.addHook(ReactHostOperationHistoryHook_1);
    },
    endProfiling: function () {
      if (!isProfiling) {
        return;
      }
  
      isProfiling = false;
      resetMeasurements();
      ReactDebugTool$1.removeHook(ReactHostOperationHistoryHook_1);
    },
    getFlushHistory: function () {
      return flushHistory;
    },
    onBeginFlush: function () {
      currentFlushNesting++;
      resetMeasurements();
      pauseCurrentLifeCycleTimer();
      emitEvent('onBeginFlush');
    },
    onEndFlush: function () {
      resetMeasurements();
      currentFlushNesting--;
      resumeCurrentLifeCycleTimer();
      emitEvent('onEndFlush');
    },
    onBeginLifeCycleTimer: function (debugID, timerType) {
      checkDebugID(debugID);
      emitEvent('onBeginLifeCycleTimer', debugID, timerType);
      markBegin(debugID, timerType);
      beginLifeCycleTimer(debugID, timerType);
    },
    onEndLifeCycleTimer: function (debugID, timerType) {
      checkDebugID(debugID);
      endLifeCycleTimer(debugID, timerType);
      markEnd(debugID, timerType);
      emitEvent('onEndLifeCycleTimer', debugID, timerType);
    },
    onBeginProcessingChildContext: function () {
      emitEvent('onBeginProcessingChildContext');
    },
    onEndProcessingChildContext: function () {
      emitEvent('onEndProcessingChildContext');
    },
    onHostOperation: function (operation) {
      checkDebugID(operation.instanceID);
      emitEvent('onHostOperation', operation);
    },
    onSetState: function () {
      emitEvent('onSetState');
    },
    onSetChildren: function (debugID, childDebugIDs) {
      checkDebugID(debugID);
      childDebugIDs.forEach(checkDebugID);
      emitEvent('onSetChildren', debugID, childDebugIDs);
    },
    onBeforeMountComponent: function (debugID, element, parentDebugID) {
      checkDebugID(debugID);
      checkDebugID(parentDebugID, true);
      emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
      markBegin(debugID, 'mount');
    },
    onMountComponent: function (debugID) {
      checkDebugID(debugID);
      markEnd(debugID, 'mount');
      emitEvent('onMountComponent', debugID);
    },
    onBeforeUpdateComponent: function (debugID, element) {
      checkDebugID(debugID);
      emitEvent('onBeforeUpdateComponent', debugID, element);
      markBegin(debugID, 'update');
    },
    onUpdateComponent: function (debugID) {
      checkDebugID(debugID);
      markEnd(debugID, 'update');
      emitEvent('onUpdateComponent', debugID);
    },
    onBeforeUnmountComponent: function (debugID) {
      checkDebugID(debugID);
      emitEvent('onBeforeUnmountComponent', debugID);
      markBegin(debugID, 'unmount');
    },
    onUnmountComponent: function (debugID) {
      checkDebugID(debugID);
      markEnd(debugID, 'unmount');
      emitEvent('onUnmountComponent', debugID);
    },
    onTestEvent: function () {
      emitEvent('onTestEvent');
    }
  };
  
  // TODO remove these when RN/www gets updated
  ReactDebugTool$1.addDevtool = ReactDebugTool$1.addHook;
  ReactDebugTool$1.removeDevtool = ReactDebugTool$1.removeHook;
  
  ReactDebugTool$1.addHook(ReactInvalidSetStateWarningHook_1);
  ReactDebugTool$1.addHook(ReactComponentTreeHook_1);
  var url$1 = ExecutionEnvironment_1.canUseDOM && window.location.href || '';
  if (/[?&]react_perf\b/.test(url$1)) {
    ReactDebugTool$1.beginProfiling();
  }
  
  var ReactDebugTool_1 = ReactDebugTool$1;
  
  // Trust the developer to only use ReactInstrumentation with a __DEV__ check
  
  var debugTool = null;
  
  {
    var ReactDebugTool = ReactDebugTool_1;
    debugTool = ReactDebugTool;
  }
  
  var ReactInstrumentation$1 = { debugTool: debugTool };
  
  /**
   * Helper to call ReactRef.attachRefs with this composite component, split out
   * to avoid allocations in the transaction mount-ready queue.
   */
  function attachRefs() {
    ReactRef_1.attachRefs(this, this._currentElement);
  }
  
  var ReactReconciler = {
    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * @param {ReactComponent} internalInstance
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {?object} the containing host component instance
     * @param {?object} info about the host container
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @final
     * @internal
     */
    mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) // 0 in production and for roots
    {
      {
        if (internalInstance._debugID !== 0) {
          ReactInstrumentation$1.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
        }
      }
      var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
      if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
        transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
      }
      {
        if (internalInstance._debugID !== 0) {
          ReactInstrumentation$1.debugTool.onMountComponent(internalInstance._debugID);
        }
      }
      return markup;
    },
  
    /**
     * Returns a value that can be passed to
     * ReactComponentEnvironment.replaceNodeWithMarkup.
     */
    getHostNode: function (internalInstance) {
      return internalInstance.getHostNode();
    },
  
    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * @final
     * @internal
     */
    unmountComponent: function (internalInstance, safely) {
      {
        if (internalInstance._debugID !== 0) {
          ReactInstrumentation$1.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
        }
      }
      ReactRef_1.detachRefs(internalInstance, internalInstance._currentElement);
      internalInstance.unmountComponent(safely);
      {
        if (internalInstance._debugID !== 0) {
          ReactInstrumentation$1.debugTool.onUnmountComponent(internalInstance._debugID);
        }
      }
    },
  
    /**
     * Update a component using a new element.
     *
     * @param {ReactComponent} internalInstance
     * @param {ReactElement} nextElement
     * @param {ReactReconcileTransaction} transaction
     * @param {object} context
     * @internal
     */
    receiveComponent: function (internalInstance, nextElement, transaction, context) {
      var prevElement = internalInstance._currentElement;
  
      if (nextElement === prevElement && context === internalInstance._context) {
        // Since elements are immutable after the owner is rendered,
        // we can do a cheap identity compare here to determine if this is a
        // superfluous reconcile. It's possible for state to be mutable but such
        // change should trigger an update of the owner which would recreate
        // the element. We explicitly check for the existence of an owner since
        // it's possible for an element created outside a composite to be
        // deeply mutated and reused.
  
        // TODO: Bailing out early is just a perf optimization right?
        // TODO: Removing the return statement should affect correctness?
        return;
      }
  
      {
        if (internalInstance._debugID !== 0) {
          ReactInstrumentation$1.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
        }
      }
  
      var refsChanged = ReactRef_1.shouldUpdateRefs(prevElement, nextElement);
  
      if (refsChanged) {
        ReactRef_1.detachRefs(internalInstance, prevElement);
      }
  
      internalInstance.receiveComponent(nextElement, transaction, context);
  
      if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
        transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
      }
  
      {
        if (internalInstance._debugID !== 0) {
          ReactInstrumentation$1.debugTool.onUpdateComponent(internalInstance._debugID);
        }
      }
    },
  
    /**
     * Flush any dirty changes in a component.
     *
     * @param {ReactComponent} internalInstance
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
      if (internalInstance._updateBatchNumber !== updateBatchNumber) {
        // The component's enqueued batch number should always be the current
        // batch or the following one.
        warning_1(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber);
        return;
      }
      {
        if (internalInstance._debugID !== 0) {
          ReactInstrumentation$1.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
        }
      }
      internalInstance.performUpdateIfNecessary(transaction);
      {
        if (internalInstance._debugID !== 0) {
          ReactInstrumentation$1.debugTool.onUpdateComponent(internalInstance._debugID);
        }
      }
    }
  };
  
  var ReactReconciler_1 = ReactReconciler;
  
  var OBSERVED_ERROR = {};
  
  /**
   * `Transaction` creates a black box that is able to wrap any method such that
   * certain invariants are maintained before and after the method is invoked
   * (Even if an exception is thrown while invoking the wrapped method). Whoever
   * instantiates a transaction can provide enforcers of the invariants at
   * creation time. The `Transaction` class itself will supply one additional
   * automatic invariant for you - the invariant that any transaction instance
   * should not be run while it is already being run. You would typically create a
   * single instance of a `Transaction` for reuse multiple times, that potentially
   * is used to wrap several different methods. Wrappers are extremely simple -
   * they only require implementing two methods.
   *
   * <pre>
   *                       wrappers (injected at creation time)
   *                                      +        +
   *                                      |        |
   *                    +-----------------|--------|--------------+
   *                    |                 v        |              |
   *                    |      +---------------+   |              |
   *                    |   +--|    wrapper1   |---|----+         |
   *                    |   |  +---------------+   v    |         |
   *                    |   |          +-------------+  |         |
   *                    |   |     +----|   wrapper2  |--------+   |
   *                    |   |     |    +-------------+  |     |   |
   *                    |   |     |                     |     |   |
   *                    |   v     v                     v     v   | wrapper
   *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
   * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
   * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
   *                    | |   | |   |   |         |   |   | |   | |
   *                    | |   | |   |   |         |   |   | |   | |
   *                    | |   | |   |   |         |   |   | |   | |
   *                    | +---+ +---+   +---------+   +---+ +---+ |
   *                    |  initialize                    close    |
   *                    +-----------------------------------------+
   * </pre>
   *
   * Use cases:
   * - Preserving the input selection ranges before/after reconciliation.
   *   Restoring selection even in the event of an unexpected error.
   * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
   *   while guaranteeing that afterwards, the event system is reactivated.
   * - Flushing a queue of collected DOM mutations to the main UI thread after a
   *   reconciliation takes place in a worker thread.
   * - Invoking any collected `componentDidUpdate` callbacks after rendering new
   *   content.
   * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
   *   to preserve the `scrollTop` (an automatic scroll aware DOM).
   * - (Future use case): Layout calculations before and after DOM updates.
   *
   * Transactional plugin API:
   * - A module that has an `initialize` method that returns any precomputation.
   * - and a `close` method that accepts the precomputation. `close` is invoked
   *   when the wrapped process is completed, or has failed.
   *
   * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
   * that implement `initialize` and `close`.
   * @return {Transaction} Single transaction for reuse in thread.
   *
   * @class Transaction
   */
  var TransactionImpl = {
    /**
     * Sets up this instance so that it is prepared for collecting metrics. Does
     * so such that this setup method may be used on an instance that is already
     * initialized, in a way that does not consume additional memory upon reuse.
     * That can be useful if you decide to make your subclass of this mixin a
     * "PooledClass".
     */
    reinitializeTransaction: function () {
      this.transactionWrappers = this.getTransactionWrappers();
      if (this.wrapperInitData) {
        this.wrapperInitData.length = 0;
      } else {
        this.wrapperInitData = [];
      }
      this._isInTransaction = false;
    },
  
    _isInTransaction: false,
  
    /**
     * @abstract
     * @return {Array<TransactionWrapper>} Array of transaction wrappers.
     */
    getTransactionWrappers: null,
  
    isInTransaction: function () {
      return !!this._isInTransaction;
    },
  
    /* eslint-disable space-before-function-paren */
  
    /**
     * Executes the function within a safety window. Use this for the top level
     * methods that result in large amounts of computation/mutations that would
     * need to be safety checked. The optional arguments helps prevent the need
     * to bind in many cases.
     *
     * @param {function} method Member of scope to call.
     * @param {Object} scope Scope to invoke from.
     * @param {Object?=} a Argument to pass to the method.
     * @param {Object?=} b Argument to pass to the method.
     * @param {Object?=} c Argument to pass to the method.
     * @param {Object?=} d Argument to pass to the method.
     * @param {Object?=} e Argument to pass to the method.
     * @param {Object?=} f Argument to pass to the method.
     *
     * @return {*} Return value from `method`.
     */
    perform: function (method, scope, a, b, c, d, e, f) {
      /* eslint-enable space-before-function-paren */
      !!this.isInTransaction() ? invariant_1(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : void 0;
      var errorThrown;
      var ret;
      try {
        this._isInTransaction = true;
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // one of these calls threw.
        errorThrown = true;
        this.initializeAll(0);
        ret = method.call(scope, a, b, c, d, e, f);
        errorThrown = false;
      } finally {
        try {
          if (errorThrown) {
            // If `method` throws, prefer to show that stack trace over any thrown
            // by invoking `closeAll`.
            try {
              this.closeAll(0);
            } catch (err) {}
          } else {
            // Since `method` didn't throw, we don't want to silence the exception
            // here.
            this.closeAll(0);
          }
        } finally {
          this._isInTransaction = false;
        }
      }
      return ret;
    },
  
    initializeAll: function (startIndex) {
      var transactionWrappers = this.transactionWrappers;
      for (var i = startIndex; i < transactionWrappers.length; i++) {
        var wrapper = transactionWrappers[i];
        try {
          // Catching errors makes debugging more difficult, so we start with the
          // OBSERVED_ERROR state before overwriting it with the real return value
          // of initialize -- if it's still set to OBSERVED_ERROR in the finally
          // block, it means wrapper.initialize threw.
          this.wrapperInitData[i] = OBSERVED_ERROR;
          this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
        } finally {
          if (this.wrapperInitData[i] === OBSERVED_ERROR) {
            // The initializer for wrapper i threw an error; initialize the
            // remaining wrappers but silence any exceptions from them to ensure
            // that the first error is the one to bubble up.
            try {
              this.initializeAll(i + 1);
            } catch (err) {}
          }
        }
      }
    },
  
    /**
     * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
     * them the respective return values of `this.transactionWrappers.init[i]`
     * (`close`rs that correspond to initializers that failed will not be
     * invoked).
     */
    closeAll: function (startIndex) {
      !this.isInTransaction() ? invariant_1(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : void 0;
      var transactionWrappers = this.transactionWrappers;
      for (var i = startIndex; i < transactionWrappers.length; i++) {
        var wrapper = transactionWrappers[i];
        var initData = this.wrapperInitData[i];
        var errorThrown;
        try {
          // Catching errors makes debugging more difficult, so we start with
          // errorThrown set to true before setting it to false after calling
          // close -- if it's still set to true in the finally block, it means
          // wrapper.close threw.
          errorThrown = true;
          if (initData !== OBSERVED_ERROR && wrapper.close) {
            wrapper.close.call(this, initData);
          }
          errorThrown = false;
        } finally {
          if (errorThrown) {
            // The closer for wrapper i threw an error; close the remaining
            // wrappers but silence any exceptions from them to ensure that the
            // first error is the one to bubble up.
            try {
              this.closeAll(i + 1);
            } catch (e) {}
          }
        }
      }
      this.wrapperInitData.length = 0;
    }
  };
  
  var Transaction = TransactionImpl;
  
  var dirtyComponents = [];
  var updateBatchNumber = 0;
  var asapCallbackQueue = CallbackQueue_1.getPooled();
  var asapEnqueued = false;
  
  var batchingStrategy = null;
  
  function ensureInjected() {
    !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? invariant_1(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : void 0;
  }
  
  var NESTED_UPDATES = {
    initialize: function () {
      this.dirtyComponentsLength = dirtyComponents.length;
    },
    close: function () {
      if (this.dirtyComponentsLength !== dirtyComponents.length) {
        // Additional updates were enqueued by componentDidUpdate handlers or
        // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
        // these new updates so that if A's componentDidUpdate calls setState on
        // B, B will update before the callback A's updater provided when calling
        // setState.
        dirtyComponents.splice(0, this.dirtyComponentsLength);
        flushBatchedUpdates();
      } else {
        dirtyComponents.length = 0;
      }
    }
  };
  
  var UPDATE_QUEUEING = {
    initialize: function () {
      this.callbackQueue.reset();
    },
    close: function () {
      this.callbackQueue.notifyAll();
    }
  };
  
  var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
  
  function ReactUpdatesFlushTransaction() {
    this.reinitializeTransaction();
    this.dirtyComponentsLength = null;
    this.callbackQueue = CallbackQueue_1.getPooled();
    this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
    /* useCreateElement */true);
  }
  
  objectAssign(ReactUpdatesFlushTransaction.prototype, Transaction, {
    getTransactionWrappers: function () {
      return TRANSACTION_WRAPPERS;
    },
  
    destructor: function () {
      this.dirtyComponentsLength = null;
      CallbackQueue_1.release(this.callbackQueue);
      this.callbackQueue = null;
      ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
      this.reconcileTransaction = null;
    },
  
    perform: function (method, scope, a) {
      // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
      // with this transaction's wrappers around it.
      return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
    }
  });
  
  PooledClass_1$2.addPoolingTo(ReactUpdatesFlushTransaction);
  
  function batchedUpdates(callback, a, b, c, d, e) {
    ensureInjected();
    return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
  }
  
  /**
   * Array comparator for ReactComponents by mount ordering.
   *
   * @param {ReactComponent} c1 first component you're comparing
   * @param {ReactComponent} c2 second component you're comparing
   * @return {number} Return value usable by Array.prototype.sort().
   */
  function mountOrderComparator(c1, c2) {
    return c1._mountOrder - c2._mountOrder;
  }
  
  function runBatchedUpdates(transaction) {
    var len = transaction.dirtyComponentsLength;
    !(len === dirtyComponents.length) ? invariant_1(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : void 0;
  
    // Since reconciling a component higher in the owner hierarchy usually (not
    // always -- see shouldComponentUpdate()) will reconcile children, reconcile
    // them before their children by sorting the array.
    dirtyComponents.sort(mountOrderComparator);
  
    // Any updates enqueued while reconciling must be performed after this entire
    // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
    // C, B could update twice in a single batch if C's render enqueues an update
    // to B (since B would have already updated, we should skip it, and the only
    // way we can know to do so is by checking the batch counter).
    updateBatchNumber++;
  
    for (var i = 0; i < len; i++) {
      // If a component is unmounted before pending changes apply, it will still
      // be here, but we assume that it has cleared its _pendingCallbacks and
      // that performUpdateIfNecessary is a noop.
      var component = dirtyComponents[i];
  
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
  
      var markerName;
      if (ReactFeatureFlags_1.logTopLevelRenders) {
        var namedComponent = component;
        // Duck type TopLevelWrapper. This is probably always true.
        if (component._currentElement.type.isReactTopLevelWrapper) {
          namedComponent = component._renderedComponent;
        }
        markerName = 'React update: ' + namedComponent.getName();
        console.time(markerName);
      }
  
      ReactReconciler_1.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);
  
      if (markerName) {
        console.timeEnd(markerName);
      }
  
      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
        }
      }
    }
  }
  
  var flushBatchedUpdates = function () {
    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks and asap calls.
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }
  
      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue_1.getPooled();
        queue.notifyAll();
        CallbackQueue_1.release(queue);
      }
    }
  };
  
  /**
   * Mark a component as needing a rerender, adding an optional callback to a
   * list of functions which will be executed once the rerender occurs.
   */
  function enqueueUpdate(component) {
    ensureInjected();
  
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (This is called by each top-level update
    // function, like setState, forceUpdate, etc.; creation and
    // destruction of top-level components is guarded in ReactMount.)
  
    if (!batchingStrategy.isBatchingUpdates) {
      batchingStrategy.batchedUpdates(enqueueUpdate, component);
      return;
    }
  
    dirtyComponents.push(component);
    if (component._updateBatchNumber == null) {
      component._updateBatchNumber = updateBatchNumber + 1;
    }
  }
  
  /**
   * Enqueue a callback to be run at the end of the current batching cycle. Throws
   * if no updates are currently being performed.
   */
  function asap(callback, context) {
    invariant_1(batchingStrategy.isBatchingUpdates, "ReactUpdates.asap: Can't enqueue an asap callback in a context where" + 'updates are not being batched.');
    asapCallbackQueue.enqueue(callback, context);
    asapEnqueued = true;
  }
  
  var ReactUpdatesInjection = {
    injectReconcileTransaction: function (ReconcileTransaction) {
      !ReconcileTransaction ? invariant_1(false, 'ReactUpdates: must provide a reconcile transaction class') : void 0;
      ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
    },
  
    injectBatchingStrategy: function (_batchingStrategy) {
      !_batchingStrategy ? invariant_1(false, 'ReactUpdates: must provide a batching strategy') : void 0;
      !(typeof _batchingStrategy.batchedUpdates === 'function') ? invariant_1(false, 'ReactUpdates: must provide a batchedUpdates() function') : void 0;
      !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? invariant_1(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : void 0;
      batchingStrategy = _batchingStrategy;
    }
  };
  
  var ReactUpdates = {
    /**
     * React references `ReactReconcileTransaction` using this property in order
     * to allow dependency injection.
     *
     * @internal
     */
    ReactReconcileTransaction: null,
  
    batchedUpdates: batchedUpdates,
    enqueueUpdate: enqueueUpdate,
    flushBatchedUpdates: flushBatchedUpdates,
    injection: ReactUpdatesInjection,
    asap: asap
  };
  
  var ReactUpdates_1 = ReactUpdates;
  
  function isCheckable(elem) {
    var type = elem.type;
    var nodeName = elem.nodeName;
    return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
  }
  
  function getTracker(inst) {
    return inst._wrapperState.valueTracker;
  }
  
  function attachTracker(inst, tracker) {
    inst._wrapperState.valueTracker = tracker;
  }
  
  function detachTracker(inst) {
    inst._wrapperState.valueTracker = null;
  }
  
  function getValueFromNode(node) {
    var value;
    if (node) {
      value = isCheckable(node) ? '' + node.checked : node.value;
    }
    return value;
  }
  
  var inputValueTracking = {
    // exposed for testing
    _getTrackerFromNode: function (node) {
      return getTracker(ReactDOMComponentTree_1.getInstanceFromNode(node));
    },
  
  
    track: function (inst) {
      if (getTracker(inst)) {
        return;
      }
  
      var node = ReactDOMComponentTree_1.getNodeFromInstance(inst);
      var valueField = isCheckable(node) ? 'checked' : 'value';
      var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
  
      var currentValue = '' + node[valueField];
  
      // if someone has already defined a value or Safari, then bail
      // and don't track value will cause over reporting of changes,
      // but it's better then a hard failure
      // (needed for certain tests that spyOn input values and Safari)
      if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
        return;
      }
  
      Object.defineProperty(node, valueField, {
        enumerable: descriptor.enumerable,
        configurable: true,
        get: function () {
          return descriptor.get.call(this);
        },
        set: function (value) {
          currentValue = '' + value;
          descriptor.set.call(this, value);
        }
      });
  
      attachTracker(inst, {
        getValue: function () {
          return currentValue;
        },
        setValue: function (value) {
          currentValue = '' + value;
        },
        stopTracking: function () {
          detachTracker(inst);
          delete node[valueField];
        }
      });
    },
  
    updateValueIfChanged: function (inst) {
      if (!inst) {
        return false;
      }
      var tracker = getTracker(inst);
  
      if (!tracker) {
        inputValueTracking.track(inst);
        return true;
      }
  
      var lastValue = tracker.getValue();
      var nextValue = getValueFromNode(ReactDOMComponentTree_1.getNodeFromInstance(inst));
  
      if (nextValue !== lastValue) {
        tracker.setValue(nextValue);
        return true;
      }
  
      return false;
    },
    stopTracking: function (inst) {
      var tracker = getTracker(inst);
      if (tracker) {
        tracker.stopTracking();
      }
    }
  };
  
  var inputValueTracking_1 = inputValueTracking;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  /**
   * Gets the target node from a native browser event by accounting for
   * inconsistencies in browser DOM APIs.
   *
   * @param {object} nativeEvent Native browser event.
   * @return {DOMEventTarget} Target node.
   */
  
  function getEventTarget(nativeEvent) {
    var target = nativeEvent.target || nativeEvent.srcElement || window;
  
    // Normalize SVG <use> element events #4963
    if (target.correspondingUseElement) {
      target = target.correspondingUseElement;
    }
  
    // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
    // @see http://www.quirksmode.org/js/events_properties.html
    return target.nodeType === 3 ? target.parentNode : target;
  }
  
  var getEventTarget_1 = getEventTarget;
  
  var useHasFeature;
  if (ExecutionEnvironment_1.canUseDOM) {
    useHasFeature = document.implementation && document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
  }
  
  /**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @param {?boolean} capture Check if the capture phase is supported.
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   */
  function isEventSupported(eventNameSuffix, capture) {
    if (!ExecutionEnvironment_1.canUseDOM || capture && !('addEventListener' in document)) {
      return false;
    }
  
    var eventName = 'on' + eventNameSuffix;
    var isSupported = eventName in document;
  
    if (!isSupported) {
      var element = document.createElement('div');
      element.setAttribute(eventName, 'return;');
      isSupported = typeof element[eventName] === 'function';
    }
  
    if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
      // This is the only way to test support for the `wheel` event in IE9+.
      isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
    }
  
    return isSupported;
  }
  
  var isEventSupported_1 = isEventSupported;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  /**
   * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
   */
  
  var supportedInputTypes = {
    color: true,
    date: true,
    datetime: true,
    'datetime-local': true,
    email: true,
    month: true,
    number: true,
    password: true,
    range: true,
    search: true,
    tel: true,
    text: true,
    time: true,
    url: true,
    week: true
  };
  
  function isTextInputElement(elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  
    if (nodeName === 'input') {
      return !!supportedInputTypes[elem.type];
    }
  
    if (nodeName === 'textarea') {
      return true;
    }
  
    return false;
  }
  
  var isTextInputElement_1 = isTextInputElement;
  
  var eventTypes$1 = {
    change: {
      phasedRegistrationNames: {
        bubbled: 'onChange',
        captured: 'onChangeCapture'
      },
      dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
    }
  };
  
  function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
    var event = SyntheticEvent_1.getPooled(eventTypes$1.change, inst, nativeEvent, target);
    event.type = 'change';
    EventPropagators_1.accumulateTwoPhaseDispatches(event);
    return event;
  }
  /**
   * For IE shims
   */
  var activeElement = null;
  var activeElementInst = null;
  
  /**
   * SECTION: handle `change` event
   */
  function shouldUseChangeEvent(elem) {
    var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
  }
  
  var doesChangeEventBubble = false;
  if (ExecutionEnvironment_1.canUseDOM) {
    // See `handleChange` comment below
    doesChangeEventBubble = isEventSupported_1('change') && (!document.documentMode || document.documentMode > 8);
  }
  
  function manualDispatchChangeEvent(nativeEvent) {
    var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget_1(nativeEvent));
  
    // If change and propertychange bubbled, we'd just bind to it like all the
    // other events and have it go through ReactBrowserEventEmitter. Since it
    // doesn't, we manually listen for the events and so we have to enqueue and
    // process the abstract event manually.
    //
    // Batching is necessary here in order to ensure that all event handlers run
    // before the next rerender (including event handlers attached to ancestor
    // elements instead of directly on the input). Without this, controlled
    // components don't work properly in conjunction with event bubbling because
    // the component is rerendered and the value reverted before all the event
    // handlers can run. See https://github.com/facebook/react/issues/708.
    ReactUpdates_1.batchedUpdates(runEventInBatch, event);
  }
  
  function runEventInBatch(event) {
    EventPluginHub_1.enqueueEvents(event);
    EventPluginHub_1.processEventQueue(false);
  }
  
  function startWatchingForChangeEventIE8(target, targetInst) {
    activeElement = target;
    activeElementInst = targetInst;
    activeElement.attachEvent('onchange', manualDispatchChangeEvent);
  }
  
  function stopWatchingForChangeEventIE8() {
    if (!activeElement) {
      return;
    }
    activeElement.detachEvent('onchange', manualDispatchChangeEvent);
    activeElement = null;
    activeElementInst = null;
  }
  
  function getInstIfValueChanged(targetInst, nativeEvent) {
    var updated = inputValueTracking_1.updateValueIfChanged(targetInst);
    var simulated = nativeEvent.simulated === true && ChangeEventPlugin._allowSimulatedPassThrough;
  
    if (updated || simulated) {
      return targetInst;
    }
  }
  
  function getTargetInstForChangeEvent(topLevelType, targetInst) {
    if (topLevelType === 'topChange') {
      return targetInst;
    }
  }
  
  function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
    if (topLevelType === 'topFocus') {
      // stopWatching() should be a noop here but we call it just in case we
      // missed a blur event somehow.
      stopWatchingForChangeEventIE8();
      startWatchingForChangeEventIE8(target, targetInst);
    } else if (topLevelType === 'topBlur') {
      stopWatchingForChangeEventIE8();
    }
  }
  
  /**
   * SECTION: handle `input` event
   */
  var isInputEventSupported = false;
  if (ExecutionEnvironment_1.canUseDOM) {
    // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
  
    isInputEventSupported = isEventSupported_1('input') && (!document.documentMode || document.documentMode > 9);
  }
  
  /**
   * (For IE <=9) Starts tracking propertychange events on the passed-in element
   * and override the value property so that we can distinguish user events from
   * value changes in JS.
   */
  function startWatchingForValueChange(target, targetInst) {
    activeElement = target;
    activeElementInst = targetInst;
    activeElement.attachEvent('onpropertychange', handlePropertyChange);
  }
  
  /**
   * (For IE <=9) Removes the event listeners from the currently-tracked element,
   * if any exists.
   */
  function stopWatchingForValueChange() {
    if (!activeElement) {
      return;
    }
    activeElement.detachEvent('onpropertychange', handlePropertyChange);
  
    activeElement = null;
    activeElementInst = null;
  }
  
  /**
   * (For IE <=9) Handles a propertychange event, sending a `change` event if
   * the value of the active element has changed.
   */
  function handlePropertyChange(nativeEvent) {
    if (nativeEvent.propertyName !== 'value') {
      return;
    }
    if (getInstIfValueChanged(activeElementInst, nativeEvent)) {
      manualDispatchChangeEvent(nativeEvent);
    }
  }
  
  function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
    if (topLevelType === 'topFocus') {
      // In IE8, we can capture almost all .value changes by adding a
      // propertychange handler and looking for events with propertyName
      // equal to 'value'
      // In IE9, propertychange fires for most input events but is buggy and
      // doesn't fire when text is deleted, but conveniently, selectionchange
      // appears to fire in all of the remaining cases so we catch those and
      // forward the event if the value has changed
      // In either case, we don't want to call the event handler if the value
      // is changed from JS so we redefine a setter for `.value` that updates
      // our activeElementValue variable, allowing us to ignore those changes
      //
      // stopWatching() should be a noop here but we call it just in case we
      // missed a blur event somehow.
      stopWatchingForValueChange();
      startWatchingForValueChange(target, targetInst);
    } else if (topLevelType === 'topBlur') {
      stopWatchingForValueChange();
    }
  }
  
  // For IE8 and IE9.
  function getTargetInstForInputEventPolyfill(topLevelType, targetInst, nativeEvent) {
    if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
      // On the selectionchange event, the target is just document which isn't
      // helpful for us so just check activeElement instead.
      //
      // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
      // propertychange on the first input event after setting `value` from a
      // script and fires only keydown, keypress, keyup. Catching keyup usually
      // gets it and catching keydown lets us fire an event for the first
      // keystroke if user does a key repeat (it'll be a little delayed: right
      // before the second keystroke). Other input methods (e.g., paste) seem to
      // fire selectionchange normally.
      return getInstIfValueChanged(activeElementInst, nativeEvent);
    }
  }
  
  /**
   * SECTION: handle `click` event
   */
  function shouldUseClickEvent(elem) {
    // Use the `click` event to detect changes to checkbox and radio inputs.
    // This approach works across all browsers, whereas `change` does not fire
    // until `blur` in IE8.
    var nodeName = elem.nodeName;
    return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
  }
  
  function getTargetInstForClickEvent(topLevelType, targetInst, nativeEvent) {
    if (topLevelType === 'topClick') {
      return getInstIfValueChanged(targetInst, nativeEvent);
    }
  }
  
  function getTargetInstForInputOrChangeEvent(topLevelType, targetInst, nativeEvent) {
    if (topLevelType === 'topInput' || topLevelType === 'topChange') {
      return getInstIfValueChanged(targetInst, nativeEvent);
    }
  }
  
  function handleControlledInputBlur(inst, node) {
    // TODO: In IE, inst is occasionally null. Why?
    if (inst == null) {
      return;
    }
  
    // Fiber and ReactDOM keep wrapper state in separate places
    var state = inst._wrapperState || node._wrapperState;
  
    if (!state || !state.controlled || node.type !== 'number') {
      return;
    }
  
    // If controlled, assign the value attribute to the current value on blur
    var value = '' + node.value;
    if (node.getAttribute('value') !== value) {
      node.setAttribute('value', value);
    }
  }
  
  /**
   * This plugin creates an `onChange` event that normalizes change events
   * across form elements. This event fires at a time when it's possible to
   * change the element's value without seeing a flicker.
   *
   * Supported elements are:
   * - input (see `isTextInputElement`)
   * - textarea
   * - select
   */
  var ChangeEventPlugin = {
    eventTypes: eventTypes$1,
  
    _allowSimulatedPassThrough: true,
    _isInputEventSupported: isInputEventSupported,
  
    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var targetNode = targetInst ? ReactDOMComponentTree_1.getNodeFromInstance(targetInst) : window;
  
      var getTargetInstFunc, handleEventFunc;
      if (shouldUseChangeEvent(targetNode)) {
        if (doesChangeEventBubble) {
          getTargetInstFunc = getTargetInstForChangeEvent;
        } else {
          handleEventFunc = handleEventsForChangeEventIE8;
        }
      } else if (isTextInputElement_1(targetNode)) {
        if (isInputEventSupported) {
          getTargetInstFunc = getTargetInstForInputOrChangeEvent;
        } else {
          getTargetInstFunc = getTargetInstForInputEventPolyfill;
          handleEventFunc = handleEventsForInputEventPolyfill;
        }
      } else if (shouldUseClickEvent(targetNode)) {
        getTargetInstFunc = getTargetInstForClickEvent;
      }
  
      if (getTargetInstFunc) {
        var inst = getTargetInstFunc(topLevelType, targetInst, nativeEvent);
        if (inst) {
          var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
          return event;
        }
      }
  
      if (handleEventFunc) {
        handleEventFunc(topLevelType, targetNode, targetInst);
      }
  
      // When blurring, set the value attribute for number inputs
      if (topLevelType === 'topBlur') {
        handleControlledInputBlur(targetInst, targetNode);
      }
    }
  };
  
  var ChangeEventPlugin_1 = ChangeEventPlugin;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  /**
   * Module that is injectable into `EventPluginHub`, that specifies a
   * deterministic ordering of `EventPlugin`s. A convenient way to reason about
   * plugins, without having to package every one of them. This is better than
   * having plugins be ordered in the same order that they are injected because
   * that ordering would be influenced by the packaging order.
   * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
   * preventing default on events is convenient in `SimpleEventPlugin` handlers.
   */
  
  var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
  
  var DefaultEventPluginOrder_1 = DefaultEventPluginOrder;
  
  /**
   * @interface UIEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var UIEventInterface = {
    view: function (event) {
      if (event.view) {
        return event.view;
      }
  
      var target = getEventTarget_1(event);
      if (target.window === target) {
        // target is a window object
        return target;
      }
  
      var doc = target.ownerDocument;
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      if (doc) {
        return doc.defaultView || doc.parentWindow;
      } else {
        return window;
      }
    },
    detail: function (event) {
      return event.detail || 0;
    }
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticEvent}
   */
  function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticEvent_1.augmentClass(SyntheticUIEvent, UIEventInterface);
  
  var SyntheticUIEvent_1 = SyntheticUIEvent;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  var ViewportMetrics = {
    currentScrollLeft: 0,
  
    currentScrollTop: 0,
  
    refreshScrollValues: function (scrollPosition) {
      ViewportMetrics.currentScrollLeft = scrollPosition.x;
      ViewportMetrics.currentScrollTop = scrollPosition.y;
    }
  };
  
  var ViewportMetrics_1 = ViewportMetrics;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  /**
   * Translation from modifier key to the associated property in the event.
   * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
   */
  
  var modifierKeyToProp = {
    Alt: 'altKey',
    Control: 'ctrlKey',
    Meta: 'metaKey',
    Shift: 'shiftKey'
  };
  
  // IE8 does not implement getModifierState so we simply map it to the only
  // modifier keys exposed by the event itself, does not support Lock-keys.
  // Currently, all major browsers except Chrome seems to support Lock-keys.
  function modifierStateGetter(keyArg) {
    var syntheticEvent = this;
    var nativeEvent = syntheticEvent.nativeEvent;
    if (nativeEvent.getModifierState) {
      return nativeEvent.getModifierState(keyArg);
    }
    var keyProp = modifierKeyToProp[keyArg];
    return keyProp ? !!nativeEvent[keyProp] : false;
  }
  
  function getEventModifierState(nativeEvent) {
    return modifierStateGetter;
  }
  
  var getEventModifierState_1 = getEventModifierState;
  
  /**
   * @interface MouseEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var MouseEventInterface = {
    screenX: null,
    screenY: null,
    clientX: null,
    clientY: null,
    ctrlKey: null,
    shiftKey: null,
    altKey: null,
    metaKey: null,
    getModifierState: getEventModifierState_1,
    button: function (event) {
      // Webkit, Firefox, IE9+
      // which:  1 2 3
      // button: 0 1 2 (standard)
      var button = event.button;
      if ('which' in event) {
        return button;
      }
      // IE<9
      // which:  undefined
      // button: 0 0 0
      // button: 1 4 2 (onmouseup)
      return button === 2 ? 2 : button === 4 ? 1 : 0;
    },
    buttons: null,
    relatedTarget: function (event) {
      return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
    },
    // "Proprietary" Interface.
    pageX: function (event) {
      return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics_1.currentScrollLeft;
    },
    pageY: function (event) {
      return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics_1.currentScrollTop;
    }
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticUIEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticUIEvent_1.augmentClass(SyntheticMouseEvent, MouseEventInterface);
  
  var SyntheticMouseEvent_1 = SyntheticMouseEvent;
  
  var eventTypes$2 = {
    mouseEnter: {
      registrationName: 'onMouseEnter',
      dependencies: ['topMouseOut', 'topMouseOver']
    },
    mouseLeave: {
      registrationName: 'onMouseLeave',
      dependencies: ['topMouseOut', 'topMouseOver']
    }
  };
  
  var EnterLeaveEventPlugin = {
    eventTypes: eventTypes$2,
  
    /**
     * For almost every interaction we care about, there will be both a top-level
     * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
     * we do not extract duplicate events. However, moving the mouse into the
     * browser from outside will not fire a `mouseout` event. In this case, we use
     * the `mouseover` top-level event.
     */
    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
        return null;
      }
      if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
        // Must not be a mouse in or mouse out - ignoring.
        return null;
      }
  
      var win;
      if (nativeEventTarget.window === nativeEventTarget) {
        // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
      } else {
        // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
        var doc = nativeEventTarget.ownerDocument;
        if (doc) {
          win = doc.defaultView || doc.parentWindow;
        } else {
          win = window;
        }
      }
  
      var from;
      var to;
      if (topLevelType === 'topMouseOut') {
        from = targetInst;
        var related = nativeEvent.relatedTarget || nativeEvent.toElement;
        to = related ? ReactDOMComponentTree_1.getClosestInstanceFromNode(related) : null;
      } else {
        // Moving to a node from outside the window.
        from = null;
        to = targetInst;
      }
  
      if (from === to) {
        // Nothing pertains to our managed components.
        return null;
      }
  
      var fromNode = from == null ? win : ReactDOMComponentTree_1.getNodeFromInstance(from);
      var toNode = to == null ? win : ReactDOMComponentTree_1.getNodeFromInstance(to);
  
      var leave = SyntheticMouseEvent_1.getPooled(eventTypes$2.mouseLeave, from, nativeEvent, nativeEventTarget);
      leave.type = 'mouseleave';
      leave.target = fromNode;
      leave.relatedTarget = toNode;
  
      var enter = SyntheticMouseEvent_1.getPooled(eventTypes$2.mouseEnter, to, nativeEvent, nativeEventTarget);
      enter.type = 'mouseenter';
      enter.target = toNode;
      enter.relatedTarget = fromNode;
  
      EventPropagators_1.accumulateEnterLeaveDispatches(leave, enter, from, to);
  
      return [leave, enter];
    }
  };
  
  var EnterLeaveEventPlugin_1 = EnterLeaveEventPlugin;
  
  var MUST_USE_PROPERTY = DOMProperty_1.injection.MUST_USE_PROPERTY;
  var HAS_BOOLEAN_VALUE = DOMProperty_1.injection.HAS_BOOLEAN_VALUE;
  var HAS_NUMERIC_VALUE = DOMProperty_1.injection.HAS_NUMERIC_VALUE;
  var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty_1.injection.HAS_POSITIVE_NUMERIC_VALUE;
  var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty_1.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
  
  var HTMLDOMPropertyConfig = {
    isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty_1.ATTRIBUTE_NAME_CHAR + ']*$')),
    Properties: {
      /**
       * Standard Properties
       */
      accept: 0,
      acceptCharset: 0,
      accessKey: 0,
      action: 0,
      allowFullScreen: HAS_BOOLEAN_VALUE,
      allowTransparency: 0,
      alt: 0,
      // specifies target context for links with `preload` type
      as: 0,
      async: HAS_BOOLEAN_VALUE,
      autoComplete: 0,
      // autoFocus is polyfilled/normalized by AutoFocusUtils
      // autoFocus: HAS_BOOLEAN_VALUE,
      autoPlay: HAS_BOOLEAN_VALUE,
      capture: HAS_BOOLEAN_VALUE,
      cellPadding: 0,
      cellSpacing: 0,
      charSet: 0,
      challenge: 0,
      checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      cite: 0,
      classID: 0,
      className: 0,
      cols: HAS_POSITIVE_NUMERIC_VALUE,
      colSpan: 0,
      content: 0,
      contentEditable: 0,
      contextMenu: 0,
      controls: HAS_BOOLEAN_VALUE,
      controlsList: 0,
      coords: 0,
      crossOrigin: 0,
      data: 0, // For `<object />` acts as `src`.
      dateTime: 0,
      'default': HAS_BOOLEAN_VALUE,
      defer: HAS_BOOLEAN_VALUE,
      dir: 0,
      disabled: HAS_BOOLEAN_VALUE,
      download: HAS_OVERLOADED_BOOLEAN_VALUE,
      draggable: 0,
      encType: 0,
      form: 0,
      formAction: 0,
      formEncType: 0,
      formMethod: 0,
      formNoValidate: HAS_BOOLEAN_VALUE,
      formTarget: 0,
      frameBorder: 0,
      headers: 0,
      height: 0,
      hidden: HAS_BOOLEAN_VALUE,
      high: 0,
      href: 0,
      hrefLang: 0,
      htmlFor: 0,
      httpEquiv: 0,
      icon: 0,
      id: 0,
      inputMode: 0,
      integrity: 0,
      is: 0,
      keyParams: 0,
      keyType: 0,
      kind: 0,
      label: 0,
      lang: 0,
      list: 0,
      loop: HAS_BOOLEAN_VALUE,
      low: 0,
      manifest: 0,
      marginHeight: 0,
      marginWidth: 0,
      max: 0,
      maxLength: 0,
      media: 0,
      mediaGroup: 0,
      method: 0,
      min: 0,
      minLength: 0,
      // Caution; `option.selected` is not updated if `select.multiple` is
      // disabled with `removeAttribute`.
      multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      name: 0,
      nonce: 0,
      noValidate: HAS_BOOLEAN_VALUE,
      open: HAS_BOOLEAN_VALUE,
      optimum: 0,
      pattern: 0,
      placeholder: 0,
      playsInline: HAS_BOOLEAN_VALUE,
      poster: 0,
      preload: 0,
      profile: 0,
      radioGroup: 0,
      readOnly: HAS_BOOLEAN_VALUE,
      referrerPolicy: 0,
      rel: 0,
      required: HAS_BOOLEAN_VALUE,
      reversed: HAS_BOOLEAN_VALUE,
      role: 0,
      rows: HAS_POSITIVE_NUMERIC_VALUE,
      rowSpan: HAS_NUMERIC_VALUE,
      sandbox: 0,
      scope: 0,
      scoped: HAS_BOOLEAN_VALUE,
      scrolling: 0,
      seamless: HAS_BOOLEAN_VALUE,
      selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
      shape: 0,
      size: HAS_POSITIVE_NUMERIC_VALUE,
      sizes: 0,
      span: HAS_POSITIVE_NUMERIC_VALUE,
      spellCheck: 0,
      src: 0,
      srcDoc: 0,
      srcLang: 0,
      srcSet: 0,
      start: HAS_NUMERIC_VALUE,
      step: 0,
      style: 0,
      summary: 0,
      tabIndex: 0,
      target: 0,
      title: 0,
      // Setting .type throws on non-<input> tags
      type: 0,
      useMap: 0,
      value: 0,
      width: 0,
      wmode: 0,
      wrap: 0,
  
      /**
       * RDFa Properties
       */
      about: 0,
      datatype: 0,
      inlist: 0,
      prefix: 0,
      // property is also supported for OpenGraph in meta tags.
      property: 0,
      resource: 0,
      'typeof': 0,
      vocab: 0,
  
      /**
       * Non-standard Properties
       */
      // autoCapitalize and autoCorrect are supported in Mobile Safari for
      // keyboard hints.
      autoCapitalize: 0,
      autoCorrect: 0,
      // autoSave allows WebKit/Blink to persist values of input fields on page reloads
      autoSave: 0,
      // color is for Safari mask-icon link
      color: 0,
      // itemProp, itemScope, itemType are for
      // Microdata support. See http://schema.org/docs/gs.html
      itemProp: 0,
      itemScope: HAS_BOOLEAN_VALUE,
      itemType: 0,
      // itemID and itemRef are for Microdata support as well but
      // only specified in the WHATWG spec document. See
      // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
      itemID: 0,
      itemRef: 0,
      // results show looking glass icon and recent searches on input
      // search fields in WebKit/Blink
      results: 0,
      // IE-only attribute that specifies security restrictions on an iframe
      // as an alternative to the sandbox attribute on IE<10
      security: 0,
      // IE-only attribute that controls focus behavior
      unselectable: 0
    },
    DOMAttributeNames: {
      acceptCharset: 'accept-charset',
      className: 'class',
      htmlFor: 'for',
      httpEquiv: 'http-equiv'
    },
    DOMPropertyNames: {},
    DOMMutationMethods: {
      value: function (node, value) {
        if (value == null) {
          return node.removeAttribute('value');
        }
  
        // Number inputs get special treatment due to some edge cases in
        // Chrome. Let everything else assign the value attribute as normal.
        // https://github.com/facebook/react/issues/7253#issuecomment-236074326
        if (node.type !== 'number' || node.hasAttribute('value') === false) {
          node.setAttribute('value', '' + value);
        } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
          // Don't assign an attribute if validation reports bad
          // input. Chrome will clear the value. Additionally, don't
          // operate on inputs that have focus, otherwise Chrome might
          // strip off trailing decimal places and cause the user's
          // cursor position to jump to the beginning of the input.
          //
          // In ReactDOMInput, we have an onBlur event that will trigger
          // this function again when focus is lost.
          node.setAttribute('value', '' + value);
        }
      }
    }
  };
  
  var HTMLDOMPropertyConfig_1 = HTMLDOMPropertyConfig;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  var DOMNamespaces = {
    html: 'http://www.w3.org/1999/xhtml',
    mathml: 'http://www.w3.org/1998/Math/MathML',
    svg: 'http://www.w3.org/2000/svg'
  };
  
  var DOMNamespaces_1 = DOMNamespaces;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  /* globals MSApp */
  
  /**
   * Create a function which has 'unsafe' privileges (required by windows8 apps)
   */
  
  var createMicrosoftUnsafeLocalFunction = function (func) {
    if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
      return function (arg0, arg1, arg2, arg3) {
        MSApp.execUnsafeLocalFunction(function () {
          return func(arg0, arg1, arg2, arg3);
        });
      };
    } else {
      return func;
    }
  };
  
  var createMicrosoftUnsafeLocalFunction_1 = createMicrosoftUnsafeLocalFunction;
  
  var WHITESPACE_TEST = /^[ \r\n\t\f]/;
  var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
  
  
  
  // SVG temp container for IE lacking innerHTML
  var reusableSVGContainer;
  
  /**
   * Set the innerHTML property of a node, ensuring that whitespace is preserved
   * even in IE8.
   *
   * @param {DOMElement} node
   * @param {string} html
   * @internal
   */
  var setInnerHTML = createMicrosoftUnsafeLocalFunction_1(function (node, html) {
    // IE does not have innerHTML for SVG nodes, so instead we inject the
    // new markup in a temp node and then move the child nodes across into
    // the target node
    if (node.namespaceURI === DOMNamespaces_1.svg && !('innerHTML' in node)) {
      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
      reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
      var svgNode = reusableSVGContainer.firstChild;
      while (svgNode.firstChild) {
        node.appendChild(svgNode.firstChild);
      }
    } else {
      node.innerHTML = html;
    }
  });
  
  if (ExecutionEnvironment_1.canUseDOM) {
    // IE8: When updating a just created node with innerHTML only leading
    // whitespace is removed. When updating an existing node with innerHTML
    // whitespace in root TextNodes is also collapsed.
    // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
  
    // Feature detection; only IE8 is known to behave improperly like this.
    var testElement = document.createElement('div');
    testElement.innerHTML = ' ';
    if (testElement.innerHTML === '') {
      setInnerHTML = function (node, html) {
        // Magic theory: IE8 supposedly differentiates between added and updated
        // nodes when processing innerHTML, innerHTML on updated nodes suffers
        // from worse whitespace behavior. Re-adding a node like this triggers
        // the initial and more favorable whitespace behavior.
        // TODO: What to do on a detached node?
        if (node.parentNode) {
          node.parentNode.replaceChild(node, node);
        }
  
        // We also implement a workaround for non-visible tags disappearing into
        // thin air on IE8, this only happens if there is no visible text
        // in-front of the non-visible tags. Piggyback on the whitespace fix
        // and simply check if any non-visible tags appear in the source.
        if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
          // Recover leading whitespace by temporarily prepending any character.
          // \uFEFF has the potential advantage of being zero-width/invisible.
          // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
          // in hopes that this is preserved even if "\uFEFF" is transformed to
          // the actual Unicode character (by Babel, for example).
          // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
          node.innerHTML = String.fromCharCode(0xfeff) + html;
  
          // deleteData leaves an empty `TextNode` which offsets the index of all
          // children. Definitely want to avoid this.
          var textNode = node.firstChild;
          if (textNode.data.length === 1) {
            node.removeChild(textNode);
          } else {
            textNode.deleteData(0, 1);
          }
        } else {
          node.innerHTML = html;
        }
      };
    }
    testElement = null;
  }
  
  var setInnerHTML_1 = setInnerHTML;
  
  /**
   * Copyright (c) 2016-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * Based on the escape-html library, which is used under the MIT License below:
   *
   * Copyright (c) 2012-2013 TJ Holowaychuk
   * Copyright (c) 2015 Andreas Lubbe
   * Copyright (c) 2015 Tiancheng "Timothy" Gu
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * 'Software'), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
   * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
   * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
   * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
   * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
   * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   *
   */
  
  // code copied and modified from escape-html
  /**
   * Module variables.
   * @private
   */
  
  var matchHtmlRegExp = /["'&<>]/;
  
  /**
   * Escape special characters in the given string of html.
   *
   * @param  {string} string The string to escape for inserting into HTML
   * @return {string}
   * @public
   */
  
  function escapeHtml(string) {
    var str = '' + string;
    var match = matchHtmlRegExp.exec(str);
  
    if (!match) {
      return str;
    }
  
    var escape;
    var html = '';
    var index = 0;
    var lastIndex = 0;
  
    for (index = match.index; index < str.length; index++) {
      switch (str.charCodeAt(index)) {
        case 34:
          // "
          escape = '&quot;';
          break;
        case 38:
          // &
          escape = '&amp;';
          break;
        case 39:
          // '
          escape = '&#x27;'; // modified from escape-html; used to be '&#39'
          break;
        case 60:
          // <
          escape = '&lt;';
          break;
        case 62:
          // >
          escape = '&gt;';
          break;
        default:
          continue;
      }
  
      if (lastIndex !== index) {
        html += str.substring(lastIndex, index);
      }
  
      lastIndex = index + 1;
      html += escape;
    }
  
    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
  }
  // end code copied and modified from escape-html
  
  /**
   * Escapes text to prevent scripting attacks.
   *
   * @param {*} text Text value to escape.
   * @return {string} An escaped string.
   */
  function escapeTextContentForBrowser(text) {
    if (typeof text === 'boolean' || typeof text === 'number') {
      // this shortcircuit helps perf for types that we know will never have
      // special characters, especially given that this function is used often
      // for numeric dom ids.
      return '' + text;
    }
    return escapeHtml(text);
  }
  
  var escapeTextContentForBrowser_1 = escapeTextContentForBrowser;
  
  /**
   * Set the textContent property of a node, ensuring that whitespace is preserved
   * even in IE8. innerText is a poor substitute for textContent and, among many
   * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
   * as it should.
   *
   * @param {DOMElement} node
   * @param {string} text
   * @internal
   */
  var setTextContent = function (node, text) {
    if (text) {
      var firstChild = node.firstChild;
  
      if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
        firstChild.nodeValue = text;
        return;
      }
    }
    node.textContent = text;
  };
  
  if (ExecutionEnvironment_1.canUseDOM) {
    if (!('textContent' in document.documentElement)) {
      setTextContent = function (node, text) {
        if (node.nodeType === 3) {
          node.nodeValue = text;
          return;
        }
        setInnerHTML_1(node, escapeTextContentForBrowser_1(text));
      };
    }
  }
  
  var setTextContent_1 = setTextContent;
  
  var ELEMENT_NODE_TYPE = 1;
  var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
  
  /**
   * In IE (8-11) and Edge, appending nodes with no children is dramatically
   * faster than appending a full subtree, so we essentially queue up the
   * .appendChild calls here and apply them so each node is added to its parent
   * before any children are added.
   *
   * In other browsers, doing so is slower or neutral compared to the other order
   * (in Firefox, twice as slow) so we only do this inversion in IE.
   *
   * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
   */
  var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);
  
  function insertTreeChildren(tree) {
    if (!enableLazy) {
      return;
    }
    var node = tree.node;
    var children = tree.children;
    if (children.length) {
      for (var i = 0; i < children.length; i++) {
        insertTreeBefore(node, children[i], null);
      }
    } else if (tree.html != null) {
      setInnerHTML_1(node, tree.html);
    } else if (tree.text != null) {
      setTextContent_1(node, tree.text);
    }
  }
  
  var insertTreeBefore = createMicrosoftUnsafeLocalFunction_1(function (parentNode, tree, referenceNode) {
    // DocumentFragments aren't actually part of the DOM after insertion so
    // appending children won't update the DOM. We need to ensure the fragment
    // is properly populated first, breaking out of our lazy approach for just
    // this level. Also, some <object> plugins (like Flash Player) will read
    // <param> nodes immediately upon insertion into the DOM, so <object>
    // must also be populated prior to insertion into the DOM.
    if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces_1.html)) {
      insertTreeChildren(tree);
      parentNode.insertBefore(tree.node, referenceNode);
    } else {
      parentNode.insertBefore(tree.node, referenceNode);
      insertTreeChildren(tree);
    }
  });
  
  function replaceChildWithTree(oldNode, newTree) {
    oldNode.parentNode.replaceChild(newTree.node, oldNode);
    insertTreeChildren(newTree);
  }
  
  function queueChild(parentTree, childTree) {
    if (enableLazy) {
      parentTree.children.push(childTree);
    } else {
      parentTree.node.appendChild(childTree.node);
    }
  }
  
  function queueHTML(tree, html) {
    if (enableLazy) {
      tree.html = html;
    } else {
      setInnerHTML_1(tree.node, html);
    }
  }
  
  function queueText(tree, text) {
    if (enableLazy) {
      tree.text = text;
    } else {
      setTextContent_1(tree.node, text);
    }
  }
  
  function toString$4() {
    return this.node.nodeName;
  }
  
  function DOMLazyTree(node) {
    return {
      node: node,
      children: [],
      html: null,
      text: null,
      toString: toString$4
    };
  }
  
  DOMLazyTree.insertTreeBefore = insertTreeBefore;
  DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
  DOMLazyTree.queueChild = queueChild;
  DOMLazyTree.queueHTML = queueHTML;
  DOMLazyTree.queueText = queueText;
  
  var DOMLazyTree_1 = DOMLazyTree;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @typechecks
   */
  
  
  
  /**
   * Convert array-like objects to arrays.
   *
   * This API assumes the caller knows the contents of the data type. For less
   * well defined inputs use createArrayFromMixed.
   *
   * @param {object|function|filelist} obj
   * @return {array}
   */
  function toArray$1(obj) {
    var length = obj.length;
  
    // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
    // in old versions of Safari).
    !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? invariant_1(false, 'toArray: Array-like object expected') : void 0;
  
    !(typeof length === 'number') ? invariant_1(false, 'toArray: Object needs a length property') : void 0;
  
    !(length === 0 || length - 1 in obj) ? invariant_1(false, 'toArray: Object should have keys for indices') : void 0;
  
    !(typeof obj.callee !== 'function') ? invariant_1(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : void 0;
  
    // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
    // without method will throw during the slice call and skip straight to the
    // fallback.
    if (obj.hasOwnProperty) {
      try {
        return Array.prototype.slice.call(obj);
      } catch (e) {
        // IE < 9 does not support Array#slice on collections objects
      }
    }
  
    // Fall back to copying key by key. This assumes all keys have a value,
    // so will not preserve sparsely populated inputs.
    var ret = Array(length);
    for (var ii = 0; ii < length; ii++) {
      ret[ii] = obj[ii];
    }
    return ret;
  }
  
  /**
   * Perform a heuristic test to determine if an object is "array-like".
   *
   *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
   *   Joshu replied: "Mu."
   *
   * This function determines if its argument has "array nature": it returns
   * true if the argument is an actual array, an `arguments' object, or an
   * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
   *
   * It will return false for other array-like objects like Filelist.
   *
   * @param {*} obj
   * @return {boolean}
   */
  function hasArrayNature(obj) {
    return (
      // not null/false
      !!obj && (
      // arrays are objects, NodeLists are functions in Safari
      typeof obj == 'object' || typeof obj == 'function') &&
      // quacks like an array
      'length' in obj &&
      // not window
      !('setInterval' in obj) &&
      // no DOM node should be considered an array-like
      // a 'select' element has 'length' and 'item' properties on IE8
      typeof obj.nodeType != 'number' && (
      // a real array
      Array.isArray(obj) ||
      // arguments
      'callee' in obj ||
      // HTMLCollection/NodeList
      'item' in obj)
    );
  }
  
  /**
   * Ensure that the argument is an array by wrapping it in an array if it is not.
   * Creates a copy of the argument if it is already an array.
   *
   * This is mostly useful idiomatically:
   *
   *   var createArrayFromMixed = require('createArrayFromMixed');
   *
   *   function takesOneOrMoreThings(things) {
   *     things = createArrayFromMixed(things);
   *     ...
   *   }
   *
   * This allows you to treat `things' as an array, but accept scalars in the API.
   *
   * If you need to convert an array-like object, like `arguments`, into an array
   * use toArray instead.
   *
   * @param {*} obj
   * @return {array}
   */
  function createArrayFromMixed(obj) {
    if (!hasArrayNature(obj)) {
      return [obj];
    } else if (Array.isArray(obj)) {
      return obj.slice();
    } else {
      return toArray$1(obj);
    }
  }
  
  var createArrayFromMixed_1 = createArrayFromMixed;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  /*eslint-disable fb-www/unsafe-html */
  
  
  
  
  
  /**
   * Dummy container used to detect which wraps are necessary.
   */
  var dummyNode$1 = ExecutionEnvironment_1.canUseDOM ? document.createElement('div') : null;
  
  /**
   * Some browsers cannot use `innerHTML` to render certain elements standalone,
   * so we wrap them, render the wrapped nodes, then extract the desired node.
   *
   * In IE8, certain elements cannot render alone, so wrap all elements ('*').
   */
  
  var shouldWrap = {};
  
  var selectWrap = [1, '<select multiple="true">', '</select>'];
  var tableWrap = [1, '<table>', '</table>'];
  var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
  
  var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];
  
  var markupWrap = {
    '*': [1, '?<div>', '</div>'],
  
    'area': [1, '<map>', '</map>'],
    'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
    'legend': [1, '<fieldset>', '</fieldset>'],
    'param': [1, '<object>', '</object>'],
    'tr': [2, '<table><tbody>', '</tbody></table>'],
  
    'optgroup': selectWrap,
    'option': selectWrap,
  
    'caption': tableWrap,
    'colgroup': tableWrap,
    'tbody': tableWrap,
    'tfoot': tableWrap,
    'thead': tableWrap,
  
    'td': trWrap,
    'th': trWrap
  };
  
  // Initialize the SVG elements since we know they'll always need to be wrapped
  // consistently. If they are created inside a <div> they will be initialized in
  // the wrong namespace (and will not display).
  var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
  svgElements.forEach(function (nodeName) {
    markupWrap[nodeName] = svgWrap;
    shouldWrap[nodeName] = true;
  });
  
  /**
   * Gets the markup wrap configuration for the supplied `nodeName`.
   *
   * NOTE: This lazily detects which wraps are necessary for the current browser.
   *
   * @param {string} nodeName Lowercase `nodeName`.
   * @return {?array} Markup wrap configuration, if applicable.
   */
  function getMarkupWrap(nodeName) {
    !!!dummyNode$1 ? invariant_1(false, 'Markup wrapping node not initialized') : void 0;
    if (!markupWrap.hasOwnProperty(nodeName)) {
      nodeName = '*';
    }
    if (!shouldWrap.hasOwnProperty(nodeName)) {
      if (nodeName === '*') {
        dummyNode$1.innerHTML = '<link />';
      } else {
        dummyNode$1.innerHTML = '<' + nodeName + '></' + nodeName + '>';
      }
      shouldWrap[nodeName] = !dummyNode$1.firstChild;
    }
    return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
  }
  
  var getMarkupWrap_1 = getMarkupWrap;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @typechecks
   */
  
  /*eslint-disable fb-www/unsafe-html*/
  
  
  
  
  
  
  
  /**
   * Dummy container used to render all markup.
   */
  var dummyNode = ExecutionEnvironment_1.canUseDOM ? document.createElement('div') : null;
  
  /**
   * Pattern used by `getNodeName`.
   */
  var nodeNamePattern = /^\s*<(\w+)/;
  
  /**
   * Extracts the `nodeName` of the first element in a string of markup.
   *
   * @param {string} markup String of markup.
   * @return {?string} Node name of the supplied markup.
   */
  function getNodeName(markup) {
    var nodeNameMatch = markup.match(nodeNamePattern);
    return nodeNameMatch && nodeNameMatch[1].toLowerCase();
  }
  
  /**
   * Creates an array containing the nodes rendered from the supplied markup. The
   * optionally supplied `handleScript` function will be invoked once for each
   * <script> element that is rendered. If no `handleScript` function is supplied,
   * an exception is thrown if any <script> elements are rendered.
   *
   * @param {string} markup A string of valid HTML markup.
   * @param {?function} handleScript Invoked once for each rendered <script>.
   * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
   */
  function createNodesFromMarkup(markup, handleScript) {
    var node = dummyNode;
    !!!dummyNode ? invariant_1(false, 'createNodesFromMarkup dummy not initialized') : void 0;
    var nodeName = getNodeName(markup);
  
    var wrap = nodeName && getMarkupWrap_1(nodeName);
    if (wrap) {
      node.innerHTML = wrap[1] + markup + wrap[2];
  
      var wrapDepth = wrap[0];
      while (wrapDepth--) {
        node = node.lastChild;
      }
    } else {
      node.innerHTML = markup;
    }
  
    var scripts = node.getElementsByTagName('script');
    if (scripts.length) {
      !handleScript ? invariant_1(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : void 0;
      createArrayFromMixed_1(scripts).forEach(handleScript);
    }
  
    var nodes = Array.from(node.childNodes);
    while (node.lastChild) {
      node.removeChild(node.lastChild);
    }
    return nodes;
  }
  
  var createNodesFromMarkup_1 = createNodesFromMarkup;
  
  var Danger = {
    /**
     * Replaces a node with a string of markup at its current position within its
     * parent. The markup must render into a single root node.
     *
     * @param {DOMElement} oldChild Child node to replace.
     * @param {string} markup Markup to render in place of the child node.
     * @internal
     */
    dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
      !ExecutionEnvironment_1.canUseDOM ? invariant_1(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : void 0;
      !markup ? invariant_1(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : void 0;
      !(oldChild.nodeName !== 'HTML') ? invariant_1(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : void 0;
  
      if (typeof markup === 'string') {
        var newChild = createNodesFromMarkup_1(markup, emptyFunction_1)[0];
        oldChild.parentNode.replaceChild(newChild, oldChild);
      } else {
        DOMLazyTree_1.replaceChildWithTree(oldChild, markup);
      }
    }
  };
  
  var Danger_1 = Danger;
  
  function getNodeAfter(parentNode, node) {
    // Special case for text components, which return [open, close] comments
    // from getHostNode.
    if (Array.isArray(node)) {
      node = node[1];
    }
    return node ? node.nextSibling : parentNode.firstChild;
  }
  
  /**
   * Inserts `childNode` as a child of `parentNode` at the `index`.
   *
   * @param {DOMElement} parentNode Parent node in which to insert.
   * @param {DOMElement} childNode Child node to insert.
   * @param {number} index Index at which to insert the child.
   * @internal
   */
  var insertChildAt = createMicrosoftUnsafeLocalFunction_1(function (parentNode, childNode, referenceNode) {
    // We rely exclusively on `insertBefore(node, null)` instead of also using
    // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
    // we are careful to use `null`.)
    parentNode.insertBefore(childNode, referenceNode);
  });
  
  function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
    DOMLazyTree_1.insertTreeBefore(parentNode, childTree, referenceNode);
  }
  
  function moveChild(parentNode, childNode, referenceNode) {
    if (Array.isArray(childNode)) {
      moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
    } else {
      insertChildAt(parentNode, childNode, referenceNode);
    }
  }
  
  function removeChild(parentNode, childNode) {
    if (Array.isArray(childNode)) {
      var closingComment = childNode[1];
      childNode = childNode[0];
      removeDelimitedText(parentNode, childNode, closingComment);
      parentNode.removeChild(closingComment);
    }
    parentNode.removeChild(childNode);
  }
  
  function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
    var node = openingComment;
    while (true) {
      var nextNode = node.nextSibling;
      insertChildAt(parentNode, node, referenceNode);
      if (node === closingComment) {
        break;
      }
      node = nextNode;
    }
  }
  
  function removeDelimitedText(parentNode, startNode, closingComment) {
    while (true) {
      var node = startNode.nextSibling;
      if (node === closingComment) {
        // The closing comment is removed by ReactMultiChild.
        break;
      } else {
        parentNode.removeChild(node);
      }
    }
  }
  
  function replaceDelimitedText(openingComment, closingComment, stringText) {
    var parentNode = openingComment.parentNode;
    var nodeAfterComment = openingComment.nextSibling;
    if (nodeAfterComment === closingComment) {
      // There are no text nodes between the opening and closing comments; insert
      // a new one if stringText isn't empty.
      if (stringText) {
        insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
      }
    } else {
      if (stringText) {
        // Set the text content of the first node after the opening comment, and
        // remove all following nodes up until the closing comment.
        setTextContent_1(nodeAfterComment, stringText);
        removeDelimitedText(parentNode, nodeAfterComment, closingComment);
      } else {
        removeDelimitedText(parentNode, openingComment, closingComment);
      }
    }
  
    {
      ReactInstrumentation$1.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree_1.getInstanceFromNode(openingComment)._debugID,
        type: 'replace text',
        payload: stringText
      });
    }
  }
  
  var dangerouslyReplaceNodeWithMarkup = Danger_1.dangerouslyReplaceNodeWithMarkup;
  {
    dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
      Danger_1.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
      if (prevInstance._debugID !== 0) {
        ReactInstrumentation$1.debugTool.onHostOperation({
          instanceID: prevInstance._debugID,
          type: 'replace with',
          payload: markup.toString()
        });
      } else {
        var nextInstance = ReactDOMComponentTree_1.getInstanceFromNode(markup.node);
        if (nextInstance._debugID !== 0) {
          ReactInstrumentation$1.debugTool.onHostOperation({
            instanceID: nextInstance._debugID,
            type: 'mount',
            payload: markup.toString()
          });
        }
      }
    };
  }
  
  /**
   * Operations for updating with DOM children.
   */
  var DOMChildrenOperations = {
    dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,
  
    replaceDelimitedText: replaceDelimitedText,
  
    /**
     * Updates a component's children by processing a series of updates. The
     * update configurations are each expected to have a `parentNode` property.
     *
     * @param {array<object>} updates List of update configurations.
     * @internal
     */
    processUpdates: function (parentNode, updates) {
      {
        var parentNodeDebugID = ReactDOMComponentTree_1.getInstanceFromNode(parentNode)._debugID;
      }
  
      for (var k = 0; k < updates.length; k++) {
        var update = updates[k];
        switch (update.type) {
          case 'INSERT_MARKUP':
            insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
            {
              ReactInstrumentation$1.debugTool.onHostOperation({
                instanceID: parentNodeDebugID,
                type: 'insert child',
                payload: {
                  toIndex: update.toIndex,
                  content: update.content.toString()
                }
              });
            }
            break;
          case 'MOVE_EXISTING':
            moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
            {
              ReactInstrumentation$1.debugTool.onHostOperation({
                instanceID: parentNodeDebugID,
                type: 'move child',
                payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
              });
            }
            break;
          case 'SET_MARKUP':
            setInnerHTML_1(parentNode, update.content);
            {
              ReactInstrumentation$1.debugTool.onHostOperation({
                instanceID: parentNodeDebugID,
                type: 'replace children',
                payload: update.content.toString()
              });
            }
            break;
          case 'TEXT_CONTENT':
            setTextContent_1(parentNode, update.content);
            {
              ReactInstrumentation$1.debugTool.onHostOperation({
                instanceID: parentNodeDebugID,
                type: 'replace text',
                payload: update.content.toString()
              });
            }
            break;
          case 'REMOVE_NODE':
            removeChild(parentNode, update.fromNode);
            {
              ReactInstrumentation$1.debugTool.onHostOperation({
                instanceID: parentNodeDebugID,
                type: 'remove child',
                payload: { fromIndex: update.fromIndex }
              });
            }
            break;
        }
      }
    }
  };
  
  var DOMChildrenOperations_1 = DOMChildrenOperations;
  
  /**
   * Operations used to process updates to DOM nodes.
   */
  var ReactDOMIDOperations = {
    /**
     * Updates a component's children by processing a series of updates.
     *
     * @param {array<object>} updates List of update configurations.
     * @internal
     */
    dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
      var node = ReactDOMComponentTree_1.getNodeFromInstance(parentInst);
      DOMChildrenOperations_1.processUpdates(node, updates);
    }
  };
  
  var ReactDOMIDOperations_1 = ReactDOMIDOperations;
  
  /**
   * Abstracts away all functionality of the reconciler that requires knowledge of
   * the browser context. TODO: These callers should be refactored to avoid the
   * need for this injection.
   */
  var ReactComponentBrowserEnvironment = {
    processChildrenUpdates: ReactDOMIDOperations_1.dangerouslyProcessChildrenUpdates,
  
    replaceNodeWithMarkup: DOMChildrenOperations_1.dangerouslyReplaceNodeWithMarkup
  };
  
  var ReactComponentBrowserEnvironment_1 = ReactComponentBrowserEnvironment;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  /**
   * @param {DOMElement} node input/textarea to focus
   */
  
  function focusNode(node) {
    // IE8 can throw "Can't move focus to the control because it is invisible,
    // not enabled, or of a type that does not accept the focus." for all kinds of
    // reasons that are too expensive and fragile to test.
    try {
      node.focus();
    } catch (e) {}
  }
  
  var focusNode_1 = focusNode;
  
  var AutoFocusUtils = {
    focusDOMComponent: function () {
      focusNode_1(ReactDOMComponentTree_1.getNodeFromInstance(this));
    }
  };
  
  var AutoFocusUtils_1 = AutoFocusUtils;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  /**
   * CSS properties which accept numbers but are not in units of "px".
   */
  
  var isUnitlessNumber = {
    animationIterationCount: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    columns: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridRow: true,
    gridRowEnd: true,
    gridRowSpan: true,
    gridRowStart: true,
    gridColumn: true,
    gridColumnEnd: true,
    gridColumnSpan: true,
    gridColumnStart: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
  
    // SVG-related properties
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
  };
  
  /**
   * @param {string} prefix vendor-specific prefix, eg: Webkit
   * @param {string} key style name, eg: transitionDuration
   * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
   * WebkitTransitionDuration
   */
  function prefixKey(prefix, key) {
    return prefix + key.charAt(0).toUpperCase() + key.substring(1);
  }
  
  /**
   * Support style names that may come passed in prefixed by adding permutations
   * of vendor prefixes.
   */
  var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
  
  // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
  // infinite loop, because it iterates over the newly added props too.
  Object.keys(isUnitlessNumber).forEach(function (prop) {
    prefixes.forEach(function (prefix) {
      isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
    });
  });
  
  /**
   * Most style properties can be unset by doing .style[prop] = '' but IE8
   * doesn't like doing that with shorthand properties so for the properties that
   * IE8 breaks on, which are listed here, we instead unset each of the
   * individual properties. See http://bugs.jquery.com/ticket/12385.
   * The 4-value 'clock' properties like margin, padding, border-width seem to
   * behave without any problems. Curiously, list-style works too without any
   * special prodding.
   */
  var shorthandPropertyExpansions = {
    background: {
      backgroundAttachment: true,
      backgroundColor: true,
      backgroundImage: true,
      backgroundPositionX: true,
      backgroundPositionY: true,
      backgroundRepeat: true
    },
    backgroundPosition: {
      backgroundPositionX: true,
      backgroundPositionY: true
    },
    border: {
      borderWidth: true,
      borderStyle: true,
      borderColor: true
    },
    borderBottom: {
      borderBottomWidth: true,
      borderBottomStyle: true,
      borderBottomColor: true
    },
    borderLeft: {
      borderLeftWidth: true,
      borderLeftStyle: true,
      borderLeftColor: true
    },
    borderRight: {
      borderRightWidth: true,
      borderRightStyle: true,
      borderRightColor: true
    },
    borderTop: {
      borderTopWidth: true,
      borderTopStyle: true,
      borderTopColor: true
    },
    font: {
      fontStyle: true,
      fontVariant: true,
      fontWeight: true,
      fontSize: true,
      lineHeight: true,
      fontFamily: true
    },
    outline: {
      outlineWidth: true,
      outlineStyle: true,
      outlineColor: true
    }
  };
  
  var CSSProperty = {
    isUnitlessNumber: isUnitlessNumber,
    shorthandPropertyExpansions: shorthandPropertyExpansions
  };
  
  var CSSProperty_1 = CSSProperty;
  
  var isUnitlessNumber$1 = CSSProperty_1.isUnitlessNumber;
  var styleWarnings = {};
  
  /**
   * Convert a value into the proper css writable value. The style name `name`
   * should be logical (no hyphens), as specified
   * in `CSSProperty.isUnitlessNumber`.
   *
   * @param {string} name CSS property name such as `topMargin`.
   * @param {*} value CSS property value such as `10px`.
   * @param {ReactDOMComponent} component
   * @return {string} Normalized style value with dimensions applied.
   */
  function dangerousStyleValue(name, value, component, isCustomProperty) {
    // Note that we've removed escapeTextForBrowser() calls here since the
    // whole string will be escaped when the attribute is injected into
    // the markup. If you provide unsafe user data here they can inject
    // arbitrary CSS which may be problematic (I couldn't repro this):
    // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
    // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
    // This is not an XSS hole but instead a potential CSS injection issue
    // which has lead to a greater discussion about how we're going to
    // trust URLs moving forward. See #2115901
  
    var isEmpty = value == null || typeof value === 'boolean' || value === '';
    if (isEmpty) {
      return '';
    }
  
    var isNonNumeric = isNaN(value);
    if (isCustomProperty || isNonNumeric || value === 0 || isUnitlessNumber$1.hasOwnProperty(name) && isUnitlessNumber$1[name]) {
      return '' + value; // cast to string
    }
  
    if (typeof value === 'string') {
      {
        // Allow '0' to pass through without warning. 0 is already special and
        // doesn't require units, so we don't need to warn about it.
        if (component && value !== '0') {
          var owner = component._currentElement._owner;
          var ownerName = owner ? owner.getName() : null;
          if (ownerName && !styleWarnings[ownerName]) {
            styleWarnings[ownerName] = {};
          }
          var warned = false;
          if (ownerName) {
            var warnings = styleWarnings[ownerName];
            warned = warnings[name];
            if (!warned) {
              warnings[name] = true;
            }
          }
          if (!warned) {
            warning_1(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value);
          }
        }
      }
      value = value.trim();
    }
    return value + 'px';
  }
  
  var dangerousStyleValue_1 = dangerousStyleValue;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @typechecks static-only
   */
  
  /**
   * Memoizes the return value of a function that accepts one string argument.
   */
  
  function memoizeStringOnly(callback) {
    var cache = {};
    return function (string) {
      if (!cache.hasOwnProperty(string)) {
        cache[string] = callback.call(this, string);
      }
      return cache[string];
    };
  }
  
  var memoizeStringOnly_1 = memoizeStringOnly;
  
  var processStyleName = memoizeStringOnly_1(function (styleName) {
    return hyphenateStyleName_1(styleName);
  });
  
  var hasShorthandPropertyBug = false;
  var styleFloatAccessor = 'cssFloat';
  if (ExecutionEnvironment_1.canUseDOM) {
    var tempStyle = document.createElement('div').style;
    try {
      // IE8 throws "Invalid argument." if resetting shorthand style properties.
      tempStyle.font = '';
    } catch (e) {
      hasShorthandPropertyBug = true;
    }
    // IE8 only supports accessing cssFloat (standard) as styleFloat
    if (document.documentElement.style.cssFloat === undefined) {
      styleFloatAccessor = 'styleFloat';
    }
  }
  
  {
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
  
    // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
  
    var warnedStyleNames = {};
    var warnedStyleValues = {};
    var warnedForNaNValue = false;
  
    var warnHyphenatedStyleName = function (name, owner) {
      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
        return;
      }
  
      warnedStyleNames[name] = true;
      warning_1(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName_1(name), checkRenderMessage(owner));
    };
  
    var warnBadVendoredStyleName = function (name, owner) {
      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
        return;
      }
  
      warnedStyleNames[name] = true;
      warning_1(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner));
    };
  
    var warnStyleValueWithSemicolon = function (name, value, owner) {
      if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
        return;
      }
  
      warnedStyleValues[value] = true;
      warning_1(false, "Style property values shouldn't contain a semicolon.%s " + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, ''));
    };
  
    var warnStyleValueIsNaN = function (name, value, owner) {
      if (warnedForNaNValue) {
        return;
      }
  
      warnedForNaNValue = true;
      warning_1(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner));
    };
  
    var checkRenderMessage = function (owner) {
      if (owner) {
        var name = owner.getName();
        if (name) {
          return ' Check the render method of `' + name + '`.';
        }
      }
      return '';
    };
  
    /**
     * @param {string} name
     * @param {*} value
     * @param {ReactDOMComponent} component
     */
    var warnValidStyle = function (name, value, component) {
      var owner;
      if (component) {
        owner = component._currentElement._owner;
      }
      if (name.indexOf('-') > -1) {
        warnHyphenatedStyleName(name, owner);
      } else if (badVendoredStyleNamePattern.test(name)) {
        warnBadVendoredStyleName(name, owner);
      } else if (badStyleValueWithSemicolonPattern.test(value)) {
        warnStyleValueWithSemicolon(name, value, owner);
      }
  
      if (typeof value === 'number' && isNaN(value)) {
        warnStyleValueIsNaN(name, value, owner);
      }
    };
  }
  
  /**
   * Operations for dealing with CSS properties.
   */
  var CSSPropertyOperations = {
    /**
     * Serializes a mapping of style properties for use as inline styles:
     *
     *   > createMarkupForStyles({width: '200px', height: 0})
     *   "width:200px;height:0;"
     *
     * Undefined values are ignored so that declarative programming is easier.
     * The result should be HTML-escaped before insertion into the DOM.
     *
     * @param {object} styles
     * @param {ReactDOMComponent} component
     * @return {?string}
     */
    createMarkupForStyles: function (styles, component) {
      var serialized = '';
      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }
        var isCustomProperty = styleName.indexOf('--') === 0;
        var styleValue = styles[styleName];
        {
          if (!isCustomProperty) {
            warnValidStyle(styleName, styleValue, component);
          }
        }
        if (styleValue != null) {
          serialized += processStyleName(styleName) + ':';
          serialized += dangerousStyleValue_1(styleName, styleValue, component, isCustomProperty) + ';';
        }
      }
      return serialized || null;
    },
  
    /**
     * Sets the value for multiple styles on a node.  If a value is specified as
     * '' (empty string), the corresponding style property will be unset.
     *
     * @param {DOMElement} node
     * @param {object} styles
     * @param {ReactDOMComponent} component
     */
    setValueForStyles: function (node, styles, component) {
      {
        ReactInstrumentation$1.debugTool.onHostOperation({
          instanceID: component._debugID,
          type: 'update styles',
          payload: styles
        });
      }
  
      var style = node.style;
      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }
        var isCustomProperty = styleName.indexOf('--') === 0;
        {
          if (!isCustomProperty) {
            warnValidStyle(styleName, styles[styleName], component);
          }
        }
        var styleValue = dangerousStyleValue_1(styleName, styles[styleName], component, isCustomProperty);
        if (styleName === 'float' || styleName === 'cssFloat') {
          styleName = styleFloatAccessor;
        }
        if (isCustomProperty) {
          style.setProperty(styleName, styleValue);
        } else if (styleValue) {
          style[styleName] = styleValue;
        } else {
          var expansion = hasShorthandPropertyBug && CSSProperty_1.shorthandPropertyExpansions[styleName];
          if (expansion) {
            // Shorthand property that IE8 won't like unsetting, so unset each
            // component to placate it
            for (var individualStyleName in expansion) {
              style[individualStyleName] = '';
            }
          } else {
            style[styleName] = '';
          }
        }
      }
    }
  };
  
  var CSSPropertyOperations_1 = CSSPropertyOperations;
  
  /**
   * Escapes attribute value to prevent scripting attacks.
   *
   * @param {*} value Value to escape.
   * @return {string} An escaped string.
   */
  function quoteAttributeValueForBrowser(value) {
    return '"' + escapeTextContentForBrowser_1(value) + '"';
  }
  
  var quoteAttributeValueForBrowser_1 = quoteAttributeValueForBrowser;
  
  var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty_1.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty_1.ATTRIBUTE_NAME_CHAR + ']*$');
  var illegalAttributeNameCache = {};
  var validatedAttributeNameCache = {};
  
  function isAttributeNameSafe(attributeName) {
    if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
      return true;
    }
    if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
      return false;
    }
    if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
      validatedAttributeNameCache[attributeName] = true;
      return true;
    }
    illegalAttributeNameCache[attributeName] = true;
    warning_1(false, 'Invalid attribute name: `%s`', attributeName);
    return false;
  }
  
  function shouldIgnoreValue(propertyInfo, value) {
    return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
  }
  
  /**
   * Operations for dealing with DOM properties.
   */
  var DOMPropertyOperations = {
    /**
     * Creates markup for the ID property.
     *
     * @param {string} id Unescaped ID.
     * @return {string} Markup string.
     */
    createMarkupForID: function (id) {
      return DOMProperty_1.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser_1(id);
    },
  
    setAttributeForID: function (node, id) {
      node.setAttribute(DOMProperty_1.ID_ATTRIBUTE_NAME, id);
    },
  
    createMarkupForRoot: function () {
      return DOMProperty_1.ROOT_ATTRIBUTE_NAME + '=""';
    },
  
    setAttributeForRoot: function (node) {
      node.setAttribute(DOMProperty_1.ROOT_ATTRIBUTE_NAME, '');
    },
  
    /**
     * Creates markup for a property.
     *
     * @param {string} name
     * @param {*} value
     * @return {?string} Markup string, or null if the property was invalid.
     */
    createMarkupForProperty: function (name, value) {
      var propertyInfo = DOMProperty_1.properties.hasOwnProperty(name) ? DOMProperty_1.properties[name] : null;
      if (propertyInfo) {
        if (shouldIgnoreValue(propertyInfo, value)) {
          return '';
        }
        var attributeName = propertyInfo.attributeName;
        if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          return attributeName + '=""';
        }
        return attributeName + '=' + quoteAttributeValueForBrowser_1(value);
      } else if (DOMProperty_1.isCustomAttribute(name)) {
        if (value == null) {
          return '';
        }
        return name + '=' + quoteAttributeValueForBrowser_1(value);
      }
      return null;
    },
  
    /**
     * Creates markup for a custom property.
     *
     * @param {string} name
     * @param {*} value
     * @return {string} Markup string, or empty string if the property was invalid.
     */
    createMarkupForCustomAttribute: function (name, value) {
      if (!isAttributeNameSafe(name) || value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser_1(value);
    },
  
    /**
     * Sets the value for a property on a node.
     *
     * @param {DOMElement} node
     * @param {string} name
     * @param {*} value
     */
    setValueForProperty: function (node, name, value) {
      var propertyInfo = DOMProperty_1.properties.hasOwnProperty(name) ? DOMProperty_1.properties[name] : null;
      if (propertyInfo) {
        var mutationMethod = propertyInfo.mutationMethod;
        if (mutationMethod) {
          mutationMethod(node, value);
        } else if (shouldIgnoreValue(propertyInfo, value)) {
          this.deleteValueForProperty(node, name);
          return;
        } else if (propertyInfo.mustUseProperty) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propertyInfo.propertyName] = value;
        } else {
          var attributeName = propertyInfo.attributeName;
          var namespace = propertyInfo.attributeNamespace;
          // `setAttribute` with objects becomes only `[object]` in IE8/9,
          // ('' + value) makes it output the correct toString()-value.
          if (namespace) {
            node.setAttributeNS(namespace, attributeName, '' + value);
          } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
            node.setAttribute(attributeName, '');
          } else {
            node.setAttribute(attributeName, '' + value);
          }
        }
      } else if (DOMProperty_1.isCustomAttribute(name)) {
        DOMPropertyOperations.setValueForAttribute(node, name, value);
        return;
      }
  
      {
        var payload = {};
        payload[name] = value;
        ReactInstrumentation$1.debugTool.onHostOperation({
          instanceID: ReactDOMComponentTree_1.getInstanceFromNode(node)._debugID,
          type: 'update attribute',
          payload: payload
        });
      }
    },
  
    setValueForAttribute: function (node, name, value) {
      if (!isAttributeNameSafe(name)) {
        return;
      }
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
  
      {
        var payload = {};
        payload[name] = value;
        ReactInstrumentation$1.debugTool.onHostOperation({
          instanceID: ReactDOMComponentTree_1.getInstanceFromNode(node)._debugID,
          type: 'update attribute',
          payload: payload
        });
      }
    },
  
    /**
     * Deletes an attributes from a node.
     *
     * @param {DOMElement} node
     * @param {string} name
     */
    deleteValueForAttribute: function (node, name) {
      node.removeAttribute(name);
      {
        ReactInstrumentation$1.debugTool.onHostOperation({
          instanceID: ReactDOMComponentTree_1.getInstanceFromNode(node)._debugID,
          type: 'remove attribute',
          payload: name
        });
      }
    },
  
    /**
     * Deletes the value for a property on a node.
     *
     * @param {DOMElement} node
     * @param {string} name
     */
    deleteValueForProperty: function (node, name) {
      var propertyInfo = DOMProperty_1.properties.hasOwnProperty(name) ? DOMProperty_1.properties[name] : null;
      if (propertyInfo) {
        var mutationMethod = propertyInfo.mutationMethod;
        if (mutationMethod) {
          mutationMethod(node, undefined);
        } else if (propertyInfo.mustUseProperty) {
          var propName = propertyInfo.propertyName;
          if (propertyInfo.hasBooleanValue) {
            node[propName] = false;
          } else {
            node[propName] = '';
          }
        } else {
          node.removeAttribute(propertyInfo.attributeName);
        }
      } else if (DOMProperty_1.isCustomAttribute(name)) {
        node.removeAttribute(name);
      }
  
      {
        ReactInstrumentation$1.debugTool.onHostOperation({
          instanceID: ReactDOMComponentTree_1.getInstanceFromNode(node)._debugID,
          type: 'remove attribute',
          payload: name
        });
      }
    }
  };
  
  var DOMPropertyOperations_1 = DOMPropertyOperations;
  
  function runEventQueueInBatch(events) {
    EventPluginHub_1.enqueueEvents(events);
    EventPluginHub_1.processEventQueue(false);
  }
  
  var ReactEventEmitterMixin = {
    /**
     * Streams a fired top-level event to `EventPluginHub` where plugins have the
     * opportunity to create `ReactEvent`s to be dispatched.
     */
    handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var events = EventPluginHub_1.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
      runEventQueueInBatch(events);
    }
  };
  
  var ReactEventEmitterMixin_1 = ReactEventEmitterMixin;
  
  /**
   * Generate a mapping of standard vendor prefixes using the defined style property and event name.
   *
   * @param {string} styleProp
   * @param {string} eventName
   * @returns {object}
   */
  function makePrefixMap(styleProp, eventName) {
    var prefixes = {};
  
    prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
    prefixes['Webkit' + styleProp] = 'webkit' + eventName;
    prefixes['Moz' + styleProp] = 'moz' + eventName;
    prefixes['ms' + styleProp] = 'MS' + eventName;
    prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();
  
    return prefixes;
  }
  
  /**
   * A list of event names to a configurable list of vendor prefixes.
   */
  var vendorPrefixes = {
    animationend: makePrefixMap('Animation', 'AnimationEnd'),
    animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
    animationstart: makePrefixMap('Animation', 'AnimationStart'),
    transitionend: makePrefixMap('Transition', 'TransitionEnd')
  };
  
  /**
   * Event names that have already been detected and prefixed (if applicable).
   */
  var prefixedEventNames = {};
  
  /**
   * Element to check for prefixes on.
   */
  var style = {};
  
  /**
   * Bootstrap if a DOM exists.
   */
  if (ExecutionEnvironment_1.canUseDOM) {
    style = document.createElement('div').style;
  
    // On some platforms, in particular some releases of Android 4.x,
    // the un-prefixed "animation" and "transition" properties are defined on the
    // style object but the events that fire will still be prefixed, so we need
    // to check if the un-prefixed events are usable, and if not remove them from the map.
    if (!('AnimationEvent' in window)) {
      delete vendorPrefixes.animationend.animation;
      delete vendorPrefixes.animationiteration.animation;
      delete vendorPrefixes.animationstart.animation;
    }
  
    // Same as above
    if (!('TransitionEvent' in window)) {
      delete vendorPrefixes.transitionend.transition;
    }
  }
  
  /**
   * Attempts to determine the correct vendor prefixed event name.
   *
   * @param {string} eventName
   * @returns {string}
   */
  function getVendorPrefixedEventName(eventName) {
    if (prefixedEventNames[eventName]) {
      return prefixedEventNames[eventName];
    } else if (!vendorPrefixes[eventName]) {
      return eventName;
    }
  
    var prefixMap = vendorPrefixes[eventName];
  
    for (var styleProp in prefixMap) {
      if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
        return prefixedEventNames[eventName] = prefixMap[styleProp];
      }
    }
  
    return '';
  }
  
  var getVendorPrefixedEventName_1 = getVendorPrefixedEventName;
  
  /**
   * Summary of `ReactBrowserEventEmitter` event handling:
   *
   *  - Top-level delegation is used to trap most native browser events. This
   *    may only occur in the main thread and is the responsibility of
   *    ReactEventListener, which is injected and can therefore support pluggable
   *    event sources. This is the only work that occurs in the main thread.
   *
   *  - We normalize and de-duplicate events to account for browser quirks. This
   *    may be done in the worker thread.
   *
   *  - Forward these native events (with the associated top-level type used to
   *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
   *    to extract any synthetic events.
   *
   *  - The `EventPluginHub` will then process each event by annotating them with
   *    "dispatches", a sequence of listeners and IDs that care about that event.
   *
   *  - The `EventPluginHub` then dispatches the events.
   *
   * Overview of React and the event system:
   *
   * +------------+    .
   * |    DOM     |    .
   * +------------+    .
   *       |           .
   *       v           .
   * +------------+    .
   * | ReactEvent |    .
   * |  Listener  |    .
   * +------------+    .                         +-----------+
   *       |           .               +--------+|SimpleEvent|
   *       |           .               |         |Plugin     |
   * +-----|------+    .               v         +-----------+
   * |     |      |    .    +--------------+                    +------------+
   * |     +-----------.--->|EventPluginHub|                    |    Event   |
   * |            |    .    |              |     +-----------+  | Propagators|
   * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
   * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
   * |            |    .    |              |     +-----------+  |  utilities |
   * |     +-----------.--->|              |                    +------------+
   * |     |      |    .    +--------------+
   * +-----|------+    .                ^        +-----------+
   *       |           .                |        |Enter/Leave|
   *       +           .                +-------+|Plugin     |
   * +-------------+   .                         +-----------+
   * | application |   .
   * |-------------|   .
   * |             |   .
   * |             |   .
   * +-------------+   .
   *                   .
   *    React Core     .  General Purpose Event Plugin System
   */
  
  var hasEventPageXY;
  var alreadyListeningTo = {};
  var isMonitoringScrollValue = false;
  var reactTopListenersCounter = 0;
  
  // For events like 'submit' which don't consistently bubble (which we trap at a
  // lower node than `document`), binding at `document` would cause duplicate
  // events so we don't include them here
  var topEventMapping = {
    topAbort: 'abort',
    topAnimationEnd: getVendorPrefixedEventName_1('animationend') || 'animationend',
    topAnimationIteration: getVendorPrefixedEventName_1('animationiteration') || 'animationiteration',
    topAnimationStart: getVendorPrefixedEventName_1('animationstart') || 'animationstart',
    topBlur: 'blur',
    topCanPlay: 'canplay',
    topCanPlayThrough: 'canplaythrough',
    topChange: 'change',
    topClick: 'click',
    topCompositionEnd: 'compositionend',
    topCompositionStart: 'compositionstart',
    topCompositionUpdate: 'compositionupdate',
    topContextMenu: 'contextmenu',
    topCopy: 'copy',
    topCut: 'cut',
    topDoubleClick: 'dblclick',
    topDrag: 'drag',
    topDragEnd: 'dragend',
    topDragEnter: 'dragenter',
    topDragExit: 'dragexit',
    topDragLeave: 'dragleave',
    topDragOver: 'dragover',
    topDragStart: 'dragstart',
    topDrop: 'drop',
    topDurationChange: 'durationchange',
    topEmptied: 'emptied',
    topEncrypted: 'encrypted',
    topEnded: 'ended',
    topError: 'error',
    topFocus: 'focus',
    topInput: 'input',
    topKeyDown: 'keydown',
    topKeyPress: 'keypress',
    topKeyUp: 'keyup',
    topLoadedData: 'loadeddata',
    topLoadedMetadata: 'loadedmetadata',
    topLoadStart: 'loadstart',
    topMouseDown: 'mousedown',
    topMouseMove: 'mousemove',
    topMouseOut: 'mouseout',
    topMouseOver: 'mouseover',
    topMouseUp: 'mouseup',
    topPaste: 'paste',
    topPause: 'pause',
    topPlay: 'play',
    topPlaying: 'playing',
    topProgress: 'progress',
    topRateChange: 'ratechange',
    topScroll: 'scroll',
    topSeeked: 'seeked',
    topSeeking: 'seeking',
    topSelectionChange: 'selectionchange',
    topStalled: 'stalled',
    topSuspend: 'suspend',
    topTextInput: 'textInput',
    topTimeUpdate: 'timeupdate',
    topTouchCancel: 'touchcancel',
    topTouchEnd: 'touchend',
    topTouchMove: 'touchmove',
    topTouchStart: 'touchstart',
    topTransitionEnd: getVendorPrefixedEventName_1('transitionend') || 'transitionend',
    topVolumeChange: 'volumechange',
    topWaiting: 'waiting',
    topWheel: 'wheel'
  };
  
  /**
   * To ensure no conflicts with other potential React instances on the page
   */
  var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
  
  function getListeningForDocument(mountAt) {
    // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
    // directly.
    if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
      mountAt[topListenersIDKey] = reactTopListenersCounter++;
      alreadyListeningTo[mountAt[topListenersIDKey]] = {};
    }
    return alreadyListeningTo[mountAt[topListenersIDKey]];
  }
  
  /**
   * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
   * example:
   *
   *   EventPluginHub.putListener('myID', 'onClick', myFunction);
   *
   * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
   *
   * @internal
   */
  var ReactBrowserEventEmitter = objectAssign({}, ReactEventEmitterMixin_1, {
    /**
     * Injectable event backend
     */
    ReactEventListener: null,
  
    injection: {
      /**
       * @param {object} ReactEventListener
       */
      injectReactEventListener: function (ReactEventListener) {
        ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
        ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
      }
    },
  
    /**
     * Sets whether or not any created callbacks should be enabled.
     *
     * @param {boolean} enabled True if callbacks should be enabled.
     */
    setEnabled: function (enabled) {
      if (ReactBrowserEventEmitter.ReactEventListener) {
        ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
      }
    },
  
    /**
     * @return {boolean} True if callbacks are enabled.
     */
    isEnabled: function () {
      return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
    },
  
    /**
     * We listen for bubbled touch events on the document object.
     *
     * Firefox v8.01 (and possibly others) exhibited strange behavior when
     * mounting `onmousemove` events at some node that was not the document
     * element. The symptoms were that if your mouse is not moving over something
     * contained within that mount point (for example on the background) the
     * top-level listeners for `onmousemove` won't be called. However, if you
     * register the `mousemove` on the document object, then it will of course
     * catch all `mousemove`s. This along with iOS quirks, justifies restricting
     * top-level listeners to the document object only, at least for these
     * movement types of events and possibly all events.
     *
     * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
     *
     * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
     * they bubble to document.
     *
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @param {object} contentDocumentHandle Document which owns the container
     */
    listenTo: function (registrationName, contentDocumentHandle) {
      var mountAt = contentDocumentHandle;
      var isListening = getListeningForDocument(mountAt);
      var dependencies = EventPluginRegistry_1.registrationNameDependencies[registrationName];
  
      for (var i = 0; i < dependencies.length; i++) {
        var dependency = dependencies[i];
        if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
          if (dependency === 'topWheel') {
            if (isEventSupported_1('wheel')) {
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
            } else if (isEventSupported_1('mousewheel')) {
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
            } else {
              // Firefox needs to capture a different mouse scroll event.
              // @see http://www.quirksmode.org/dom/events/tests/scroll.html
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
            }
          } else if (dependency === 'topScroll') {
            if (isEventSupported_1('scroll', true)) {
              ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
            } else {
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
            }
          } else if (dependency === 'topFocus' || dependency === 'topBlur') {
            if (isEventSupported_1('focus', true)) {
              ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
              ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
            } else if (isEventSupported_1('focusin')) {
              // IE has `focusin` and `focusout` events which bubble.
              // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
              ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
            }
  
            // to make sure blur and focus event listeners are only attached once
            isListening.topBlur = true;
            isListening.topFocus = true;
          } else if (topEventMapping.hasOwnProperty(dependency)) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
          }
  
          isListening[dependency] = true;
        }
      }
    },
  
    trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
      return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
    },
  
    trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
      return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
    },
  
    /**
     * Protect against document.createEvent() returning null
     * Some popup blocker extensions appear to do this:
     * https://github.com/facebook/react/issues/6887
     */
    supportsEventPageXY: function () {
      if (!document.createEvent) {
        return false;
      }
      var ev = document.createEvent('MouseEvent');
      return ev != null && 'pageX' in ev;
    },
  
    /**
     * Listens to window scroll and resize events. We cache scroll values so that
     * application code can access them without triggering reflows.
     *
     * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
     * pageX/pageY isn't supported (legacy browsers).
     *
     * NOTE: Scroll events do not bubble.
     *
     * @see http://www.quirksmode.org/dom/events/scroll.html
     */
    ensureScrollValueMonitoring: function () {
      if (hasEventPageXY === undefined) {
        hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
      }
      if (!hasEventPageXY && !isMonitoringScrollValue) {
        var refresh = ViewportMetrics_1.refreshScrollValues;
        ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
        isMonitoringScrollValue = true;
      }
    }
  });
  
  var ReactBrowserEventEmitter_1 = ReactBrowserEventEmitter;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  var ReactPropTypesSecret$5 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
  
  var ReactPropTypesSecret_1$4 = ReactPropTypesSecret$5;
  
  var PropTypes$1 = factory_1(React_1.isValidElement);
  
  
  
  
  var hasReadOnlyValue = {
    button: true,
    checkbox: true,
    image: true,
    hidden: true,
    radio: true,
    reset: true,
    submit: true
  };
  
  function _assertSingleLink(inputProps) {
    !(inputProps.checkedLink == null || inputProps.valueLink == null) ? invariant_1(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : void 0;
  }
  function _assertValueLink(inputProps) {
    _assertSingleLink(inputProps);
    !(inputProps.value == null && inputProps.onChange == null) ? invariant_1(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : void 0;
  }
  
  function _assertCheckedLink(inputProps) {
    _assertSingleLink(inputProps);
    !(inputProps.checked == null && inputProps.onChange == null) ? invariant_1(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : void 0;
  }
  
  var propTypes$1 = {
    value: function (props, propName, componentName) {
      if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
        return null;
      }
      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    checked: function (props, propName, componentName) {
      if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
        return null;
      }
      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    onChange: PropTypes$1.func
  };
  
  var loggedTypeFailures$2 = {};
  function getDeclarationErrorAddendum$2(owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }
  
  /**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */
  var LinkedValueUtils = {
    checkPropTypes: function (tagName, props, owner) {
      for (var propName in propTypes$1) {
        if (propTypes$1.hasOwnProperty(propName)) {
          var error = propTypes$1[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret_1$4);
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures$2)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures$2[error.message] = true;
  
          var addendum = getDeclarationErrorAddendum$2(owner);
          warning_1(false, 'Failed form propType: %s%s', error.message, addendum);
        }
      }
    },
  
    /**
     * @param {object} inputProps Props for form component
     * @return {*} current value of the input either from value prop or link.
     */
    getValue: function (inputProps) {
      if (inputProps.valueLink) {
        _assertValueLink(inputProps);
        return inputProps.valueLink.value;
      }
      return inputProps.value;
    },
  
    /**
     * @param {object} inputProps Props for form component
     * @return {*} current checked status of the input either from checked prop
     *             or link.
     */
    getChecked: function (inputProps) {
      if (inputProps.checkedLink) {
        _assertCheckedLink(inputProps);
        return inputProps.checkedLink.value;
      }
      return inputProps.checked;
    },
  
    /**
     * @param {object} inputProps Props for form component
     * @param {SyntheticEvent} event change event to handle
     */
    executeOnChange: function (inputProps, event) {
      if (inputProps.valueLink) {
        _assertValueLink(inputProps);
        return inputProps.valueLink.requestChange(event.target.value);
      } else if (inputProps.checkedLink) {
        _assertCheckedLink(inputProps);
        return inputProps.checkedLink.requestChange(event.target.checked);
      } else if (inputProps.onChange) {
        return inputProps.onChange.call(undefined, event);
      }
    }
  };
  
  var LinkedValueUtils_1 = LinkedValueUtils;
  
  var didWarnValueLink = false;
  var didWarnCheckedLink = false;
  var didWarnValueDefaultValue = false;
  var didWarnCheckedDefaultChecked = false;
  var didWarnControlledToUncontrolled = false;
  var didWarnUncontrolledToControlled = false;
  
  function forceUpdateIfMounted() {
    if (this._rootNodeID) {
      // DOM component is still mounted; update
      ReactDOMInput.updateWrapper(this);
    }
  }
  
  function isControlled(props) {
    var usesChecked = props.type === 'checkbox' || props.type === 'radio';
    return usesChecked ? props.checked != null : props.value != null;
  }
  
  /**
   * Implements an <input> host component that allows setting these optional
   * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
   *
   * If `checked` or `value` are not supplied (or null/undefined), user actions
   * that affect the checked state or value will trigger updates to the element.
   *
   * If they are supplied (and not null/undefined), the rendered element will not
   * trigger updates to the element. Instead, the props must change in order for
   * the rendered element to be updated.
   *
   * The rendered element will be initialized as unchecked (or `defaultChecked`)
   * with an empty value (or `defaultValue`).
   *
   * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
   */
  var ReactDOMInput = {
    getHostProps: function (inst, props) {
      var value = LinkedValueUtils_1.getValue(props);
      var checked = LinkedValueUtils_1.getChecked(props);
  
      var hostProps = objectAssign({
        // Make sure we set .type before any other properties (setting .value
        // before .type means .value is lost in IE11 and below)
        type: undefined,
        // Make sure we set .step before .value (setting .value before .step
        // means .value is rounded on mount, based upon step precision)
        step: undefined,
        // Make sure we set .min & .max before .value (to ensure proper order
        // in corner cases such as min or max deriving from value, e.g. Issue #7170)
        min: undefined,
        max: undefined
      }, props, {
        defaultChecked: undefined,
        defaultValue: undefined,
        value: value != null ? value : inst._wrapperState.initialValue,
        checked: checked != null ? checked : inst._wrapperState.initialChecked,
        onChange: inst._wrapperState.onChange
      });
  
      return hostProps;
    },
  
    mountWrapper: function (inst, props) {
      {
        LinkedValueUtils_1.checkPropTypes('input', props, inst._currentElement._owner);
  
        var owner = inst._currentElement._owner;
  
        if (props.valueLink !== undefined && !didWarnValueLink) {
          warning_1(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.');
          didWarnValueLink = true;
        }
        if (props.checkedLink !== undefined && !didWarnCheckedLink) {
          warning_1(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.');
          didWarnCheckedLink = true;
        }
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
          warning_1(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type);
          didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
          warning_1(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type);
          didWarnValueDefaultValue = true;
        }
      }
  
      var defaultValue = props.defaultValue;
      inst._wrapperState = {
        initialChecked: props.checked != null ? props.checked : props.defaultChecked,
        initialValue: props.value != null ? props.value : defaultValue,
        listeners: null,
        onChange: _handleChange.bind(inst),
        controlled: isControlled(props)
      };
    },
  
    updateWrapper: function (inst) {
      var props = inst._currentElement.props;
  
      {
        var controlled = isControlled(props);
        var owner = inst._currentElement._owner;
  
        if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
          warning_1(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type);
          didWarnUncontrolledToControlled = true;
        }
        if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
          warning_1(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type);
          didWarnControlledToUncontrolled = true;
        }
      }
  
      // TODO: Shouldn't this be getChecked(props)?
      var checked = props.checked;
      if (checked != null) {
        DOMPropertyOperations_1.setValueForProperty(ReactDOMComponentTree_1.getNodeFromInstance(inst), 'checked', checked || false);
      }
  
      var node = ReactDOMComponentTree_1.getNodeFromInstance(inst);
      var value = LinkedValueUtils_1.getValue(props);
      if (value != null) {
        if (value === 0 && node.value === '') {
          node.value = '0';
          // Note: IE9 reports a number inputs as 'text', so check props instead.
        } else if (props.type === 'number') {
          // Simulate `input.valueAsNumber`. IE9 does not support it
          var valueAsNumber = parseFloat(node.value, 10) || 0;
  
          if (
          // eslint-disable-next-line
          value != valueAsNumber ||
          // eslint-disable-next-line
          value == valueAsNumber && node.value != value) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            node.value = '' + value;
          }
        } else if (node.value !== '' + value) {
          // Cast `value` to a string to ensure the value is set correctly. While
          // browsers typically do this as necessary, jsdom doesn't.
          node.value = '' + value;
        }
      } else {
        if (props.value == null && props.defaultValue != null) {
          // In Chrome, assigning defaultValue to certain input types triggers input validation.
          // For number inputs, the display value loses trailing decimal points. For email inputs,
          // Chrome raises "The specified value <x> is not a valid email address".
          //
          // Here we check to see if the defaultValue has actually changed, avoiding these problems
          // when the user is inputting text
          //
          // https://github.com/facebook/react/issues/7253
          if (node.defaultValue !== '' + props.defaultValue) {
            node.defaultValue = '' + props.defaultValue;
          }
        }
        if (props.checked == null && props.defaultChecked != null) {
          node.defaultChecked = !!props.defaultChecked;
        }
      }
    },
  
    postMountWrapper: function (inst) {
      var props = inst._currentElement.props;
  
      // This is in postMount because we need access to the DOM node, which is not
      // available until after the component has mounted.
      var node = ReactDOMComponentTree_1.getNodeFromInstance(inst);
  
      // Detach value from defaultValue. We won't do anything if we're working on
      // submit or reset inputs as those values & defaultValues are linked. They
      // are not resetable nodes so this operation doesn't matter and actually
      // removes browser-default values (eg "Submit Query") when no value is
      // provided.
  
      switch (props.type) {
        case 'submit':
        case 'reset':
          break;
        case 'color':
        case 'date':
        case 'datetime':
        case 'datetime-local':
        case 'month':
        case 'time':
        case 'week':
          // This fixes the no-show issue on iOS Safari and Android Chrome:
          // https://github.com/facebook/react/issues/7233
          node.value = '';
          node.value = node.defaultValue;
          break;
        default:
          node.value = node.value;
          break;
      }
  
      // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
      // this is needed to work around a chrome bug where setting defaultChecked
      // will sometimes influence the value of checked (even after detachment).
      // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
      // We need to temporarily unset name to avoid disrupting radio button groups.
      var name = node.name;
      if (name !== '') {
        node.name = '';
      }
      node.defaultChecked = !node.defaultChecked;
      node.defaultChecked = !node.defaultChecked;
      if (name !== '') {
        node.name = name;
      }
    }
  };
  
  function _handleChange(event) {
    var props = this._currentElement.props;
  
    var returnValue = LinkedValueUtils_1.executeOnChange(props, event);
  
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates_1.asap(forceUpdateIfMounted, this);
  
    var name = props.name;
    if (props.type === 'radio' && name != null) {
      var rootNode = ReactDOMComponentTree_1.getNodeFromInstance(this);
      var queryRoot = rootNode;
  
      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }
  
      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
  
      for (var i = 0; i < group.length; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode || otherNode.form !== rootNode.form) {
          continue;
        }
        // This will throw if radio buttons rendered by different copies of React
        // and the same name are rendered into the same form (same as #1939).
        // That's probably okay; we don't support it just as we don't support
        // mixing React radio buttons with non-React ones.
        var otherInstance = ReactDOMComponentTree_1.getInstanceFromNode(otherNode);
        !otherInstance ? invariant_1(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0;
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates_1.asap(forceUpdateIfMounted, otherInstance);
      }
    }
  
    return returnValue;
  }
  
  var ReactDOMInput_1 = ReactDOMInput;
  
  var didWarnValueLink$1 = false;
  var didWarnValueDefaultValue$1 = false;
  
  function updateOptionsIfPendingUpdateAndMounted() {
    if (this._rootNodeID && this._wrapperState.pendingUpdate) {
      this._wrapperState.pendingUpdate = false;
  
      var props = this._currentElement.props;
      var value = LinkedValueUtils_1.getValue(props);
  
      if (value != null) {
        updateOptions(this, Boolean(props.multiple), value);
      }
    }
  }
  
  function getDeclarationErrorAddendum$3(owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }
  
  var valuePropNames = ['value', 'defaultValue'];
  
  /**
   * Validation function for `value` and `defaultValue`.
   * @private
   */
  function checkSelectPropTypes(inst, props) {
    var owner = inst._currentElement._owner;
    LinkedValueUtils_1.checkPropTypes('select', props, owner);
  
    if (props.valueLink !== undefined && !didWarnValueLink$1) {
      warning_1(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.');
      didWarnValueLink$1 = true;
    }
  
    for (var i = 0; i < valuePropNames.length; i++) {
      var propName = valuePropNames[i];
      if (props[propName] == null) {
        continue;
      }
      var isArray = Array.isArray(props[propName]);
      if (props.multiple && !isArray) {
        warning_1(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum$3(owner));
      } else if (!props.multiple && isArray) {
        warning_1(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum$3(owner));
      }
    }
  }
  
  /**
   * @param {ReactDOMComponent} inst
   * @param {boolean} multiple
   * @param {*} propValue A stringable (with `multiple`, a list of stringables).
   * @private
   */
  function updateOptions(inst, multiple, propValue) {
    var selectedValue, i;
    var options = ReactDOMComponentTree_1.getNodeFromInstance(inst).options;
  
    if (multiple) {
      selectedValue = {};
      for (i = 0; i < propValue.length; i++) {
        selectedValue['' + propValue[i]] = true;
      }
      for (i = 0; i < options.length; i++) {
        var selected = selectedValue.hasOwnProperty(options[i].value);
        if (options[i].selected !== selected) {
          options[i].selected = selected;
        }
      }
    } else {
      // Do not set `select.value` as exact behavior isn't consistent across all
      // browsers for all cases.
      selectedValue = '' + propValue;
      for (i = 0; i < options.length; i++) {
        if (options[i].value === selectedValue) {
          options[i].selected = true;
          return;
        }
      }
      if (options.length) {
        options[0].selected = true;
      }
    }
  }
  
  /**
   * Implements a <select> host component that allows optionally setting the
   * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
   * stringable. If `multiple` is true, the prop must be an array of stringables.
   *
   * If `value` is not supplied (or null/undefined), user actions that change the
   * selected option will trigger updates to the rendered options.
   *
   * If it is supplied (and not null/undefined), the rendered options will not
   * update in response to user actions. Instead, the `value` prop must change in
   * order for the rendered options to update.
   *
   * If `defaultValue` is provided, any options with the supplied values will be
   * selected.
   */
  var ReactDOMSelect = {
    getHostProps: function (inst, props) {
      return objectAssign({}, props, {
        onChange: inst._wrapperState.onChange,
        value: undefined
      });
    },
  
    mountWrapper: function (inst, props) {
      {
        checkSelectPropTypes(inst, props);
      }
  
      var value = LinkedValueUtils_1.getValue(props);
      inst._wrapperState = {
        pendingUpdate: false,
        initialValue: value != null ? value : props.defaultValue,
        listeners: null,
        onChange: _handleChange$1.bind(inst),
        wasMultiple: Boolean(props.multiple)
      };
  
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
        warning_1(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
        didWarnValueDefaultValue$1 = true;
      }
    },
  
    getSelectValueContext: function (inst) {
      // ReactDOMOption looks at this initial value so the initial generated
      // markup has correct `selected` attributes
      return inst._wrapperState.initialValue;
    },
  
    postUpdateWrapper: function (inst) {
      var props = inst._currentElement.props;
  
      // After the initial mount, we control selected-ness manually so don't pass
      // this value down
      inst._wrapperState.initialValue = undefined;
  
      var wasMultiple = inst._wrapperState.wasMultiple;
      inst._wrapperState.wasMultiple = Boolean(props.multiple);
  
      var value = LinkedValueUtils_1.getValue(props);
      if (value != null) {
        inst._wrapperState.pendingUpdate = false;
        updateOptions(inst, Boolean(props.multiple), value);
      } else if (wasMultiple !== Boolean(props.multiple)) {
        // For simplicity, reapply `defaultValue` if `multiple` is toggled.
        if (props.defaultValue != null) {
          updateOptions(inst, Boolean(props.multiple), props.defaultValue);
        } else {
          // Revert the select back to its default unselected state.
          updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
        }
      }
    }
  };
  
  function _handleChange$1(event) {
    var props = this._currentElement.props;
    var returnValue = LinkedValueUtils_1.executeOnChange(props, event);
  
    if (this._rootNodeID) {
      this._wrapperState.pendingUpdate = true;
    }
    ReactUpdates_1.asap(updateOptionsIfPendingUpdateAndMounted, this);
    return returnValue;
  }
  
  var ReactDOMSelect_1 = ReactDOMSelect;
  
  var didWarnInvalidOptionChildren = false;
  
  function flattenChildren(children) {
    var content = '';
  
    // Flatten children and warn if they aren't strings or numbers;
    // invalid types are ignored.
    React_1.Children.forEach(children, function (child) {
      if (child == null) {
        return;
      }
      if (typeof child === 'string' || typeof child === 'number') {
        content += child;
      } else if (!didWarnInvalidOptionChildren) {
        didWarnInvalidOptionChildren = true;
        warning_1(false, 'Only strings and numbers are supported as <option> children.');
      }
    });
  
    return content;
  }
  
  /**
   * Implements an <option> host component that warns when `selected` is set.
   */
  var ReactDOMOption = {
    mountWrapper: function (inst, props, hostParent) {
      // TODO (yungsters): Remove support for `selected` in <option>.
      {
        warning_1(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
      }
  
      // Look up whether this option is 'selected'
      var selectValue = null;
      if (hostParent != null) {
        var selectParent = hostParent;
  
        if (selectParent._tag === 'optgroup') {
          selectParent = selectParent._hostParent;
        }
  
        if (selectParent != null && selectParent._tag === 'select') {
          selectValue = ReactDOMSelect_1.getSelectValueContext(selectParent);
        }
      }
  
      // If the value is null (e.g., no specified value or after initial mount)
      // or missing (e.g., for <datalist>), we don't change props.selected
      var selected = null;
      if (selectValue != null) {
        var value;
        if (props.value != null) {
          value = props.value + '';
        } else {
          value = flattenChildren(props.children);
        }
        selected = false;
        if (Array.isArray(selectValue)) {
          // multiple
          for (var i = 0; i < selectValue.length; i++) {
            if ('' + selectValue[i] === value) {
              selected = true;
              break;
            }
          }
        } else {
          selected = '' + selectValue === value;
        }
      }
  
      inst._wrapperState = { selected: selected };
    },
  
    postMountWrapper: function (inst) {
      // value="" should make a value attribute (#6219)
      var props = inst._currentElement.props;
      if (props.value != null) {
        var node = ReactDOMComponentTree_1.getNodeFromInstance(inst);
        node.setAttribute('value', props.value);
      }
    },
  
    getHostProps: function (inst, props) {
      var hostProps = objectAssign({ selected: undefined, children: undefined }, props);
  
      // Read state only from initial mount because <select> updates value
      // manually; we need the initial state only for server rendering
      if (inst._wrapperState.selected != null) {
        hostProps.selected = inst._wrapperState.selected;
      }
  
      var content = flattenChildren(props.children);
  
      if (content) {
        hostProps.children = content;
      }
  
      return hostProps;
    }
  };
  
  var ReactDOMOption_1 = ReactDOMOption;
  
  var didWarnValueLink$2 = false;
  var didWarnValDefaultVal = false;
  
  function forceUpdateIfMounted$1() {
    if (this._rootNodeID) {
      // DOM component is still mounted; update
      ReactDOMTextarea.updateWrapper(this);
    }
  }
  
  /**
   * Implements a <textarea> host component that allows setting `value`, and
   * `defaultValue`. This differs from the traditional DOM API because value is
   * usually set as PCDATA children.
   *
   * If `value` is not supplied (or null/undefined), user actions that affect the
   * value will trigger updates to the element.
   *
   * If `value` is supplied (and not null/undefined), the rendered element will
   * not trigger updates to the element. Instead, the `value` prop must change in
   * order for the rendered element to be updated.
   *
   * The rendered element will be initialized with an empty value, the prop
   * `defaultValue` if specified, or the children content (deprecated).
   */
  var ReactDOMTextarea = {
    getHostProps: function (inst, props) {
      !(props.dangerouslySetInnerHTML == null) ? invariant_1(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0;
  
      // Always set children to the same thing. In IE9, the selection range will
      // get reset if `textContent` is mutated.  We could add a check in setTextContent
      // to only set the value if/when the value differs from the node value (which would
      // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
      // The value can be a boolean or object so that's why it's forced to be a string.
      var hostProps = objectAssign({}, props, {
        value: undefined,
        defaultValue: undefined,
        children: '' + inst._wrapperState.initialValue,
        onChange: inst._wrapperState.onChange
      });
  
      return hostProps;
    },
  
    mountWrapper: function (inst, props) {
      {
        LinkedValueUtils_1.checkPropTypes('textarea', props, inst._currentElement._owner);
        if (props.valueLink !== undefined && !didWarnValueLink$2) {
          warning_1(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.');
          didWarnValueLink$2 = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
          warning_1(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
          didWarnValDefaultVal = true;
        }
      }
  
      var value = LinkedValueUtils_1.getValue(props);
      var initialValue = value;
  
      // Only bother fetching default value if we're going to use it
      if (value == null) {
        var defaultValue = props.defaultValue;
        // TODO (yungsters): Remove support for children content in <textarea>.
        var children = props.children;
        if (children != null) {
          {
            warning_1(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
          }
          !(defaultValue == null) ? invariant_1(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;
          if (Array.isArray(children)) {
            !(children.length <= 1) ? invariant_1(false, '<textarea> can only have at most one child.') : void 0;
            children = children[0];
          }
  
          defaultValue = '' + children;
        }
        if (defaultValue == null) {
          defaultValue = '';
        }
        initialValue = defaultValue;
      }
  
      inst._wrapperState = {
        initialValue: '' + initialValue,
        listeners: null,
        onChange: _handleChange$2.bind(inst)
      };
    },
  
    updateWrapper: function (inst) {
      var props = inst._currentElement.props;
  
      var node = ReactDOMComponentTree_1.getNodeFromInstance(inst);
      var value = LinkedValueUtils_1.getValue(props);
      if (value != null) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        var newValue = '' + value;
  
        // To avoid side effects (such as losing text selection), only set value if changed
        if (newValue !== node.value) {
          node.value = newValue;
        }
        if (props.defaultValue == null) {
          node.defaultValue = newValue;
        }
      }
      if (props.defaultValue != null) {
        node.defaultValue = props.defaultValue;
      }
    },
  
    postMountWrapper: function (inst) {
      // This is in postMount because we need access to the DOM node, which is not
      // available until after the component has mounted.
      var node = ReactDOMComponentTree_1.getNodeFromInstance(inst);
      var textContent = node.textContent;
  
      // Only set node.value if textContent is equal to the expected
      // initial value. In IE10/IE11 there is a bug where the placeholder attribute
      // will populate textContent as well.
      // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
      if (textContent === inst._wrapperState.initialValue) {
        node.value = textContent;
      }
    }
  };
  
  function _handleChange$2(event) {
    var props = this._currentElement.props;
    var returnValue = LinkedValueUtils_1.executeOnChange(props, event);
    ReactUpdates_1.asap(forceUpdateIfMounted$1, this);
    return returnValue;
  }
  
  var ReactDOMTextarea_1 = ReactDOMTextarea;
  
  var injected = false;
  
  var ReactComponentEnvironment = {
    /**
     * Optionally injectable hook for swapping out mount images in the middle of
     * the tree.
     */
    replaceNodeWithMarkup: null,
  
    /**
     * Optionally injectable hook for processing a queue of child updates. Will
     * later move into MultiChildComponents.
     */
    processChildrenUpdates: null,
  
    injection: {
      injectEnvironment: function (environment) {
        !!injected ? invariant_1(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : void 0;
        ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
        ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
        injected = true;
      }
    }
  };
  
  var ReactComponentEnvironment_1 = ReactComponentEnvironment;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  /**
   * `ReactInstanceMap` maintains a mapping from a public facing stateful
   * instance (key) and the internal representation (value). This allows public
   * methods to accept the user facing instance as an argument and map them back
   * to internal methods.
   */
  
  // TODO: Replace this with ES6: var ReactInstanceMap = new Map();
  
  var ReactInstanceMap = {
    /**
     * This API should be called `delete` but we'd have to make sure to always
     * transform these to strings for IE support. When this transform is fully
     * supported we can rename it.
     */
    remove: function (key) {
      key._reactInternalInstance = undefined;
    },
  
    get: function (key) {
      return key._reactInternalInstance;
    },
  
    has: function (key) {
      return key._reactInternalInstance !== undefined;
    },
  
    set: function (key, value) {
      key._reactInternalInstance = value;
    }
  };
  
  var ReactInstanceMap_1 = ReactInstanceMap;
  
  var ReactNodeTypes = {
    HOST: 0,
    COMPOSITE: 1,
    EMPTY: 2,
  
    getType: function (node) {
      if (node === null || node === false) {
        return ReactNodeTypes.EMPTY;
      } else if (React_1.isValidElement(node)) {
        if (typeof node.type === 'function') {
          return ReactNodeTypes.COMPOSITE;
        } else {
          return ReactNodeTypes.HOST;
        }
      }
      invariant_1(false, 'Unexpected node: %s', node);
    }
  };
  
  var ReactNodeTypes_1 = ReactNodeTypes;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  var ReactPropTypeLocationNames$4 = {};
  
  {
    ReactPropTypeLocationNames$4 = {
      prop: 'prop',
      context: 'context',
      childContext: 'child context'
    };
  }
  
  var ReactPropTypeLocationNames_1$2 = ReactPropTypeLocationNames$4;
  
  var ReactComponentTreeHook$4;
  
  if (typeof process !== 'undefined' && process.env && "development" === 'test') {
    // Temporary hack.
    // Inline requires don't work well with Jest:
    // https://github.com/facebook/react/issues/7240
    // Remove the inline requires when we don't need them anymore:
    // https://github.com/facebook/react/pull/7178
    ReactComponentTreeHook$4 = ReactComponentTreeHook_1;
  }
  
  var loggedTypeFailures$3 = {};
  
  /**
   * Assert that the values match with the type specs.
   * Error messages are memorized and will only be shown once.
   *
   * @param {object} typeSpecs Map of name to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @param {string} componentName Name of the component for error messages.
   * @param {?object} element The React element that is being type-checked
   * @param {?number} debugID The React component instance that is being type-checked
   * @private
   */
  function checkReactTypeSpec$3(typeSpecs, values, location, componentName, element, debugID) {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          !(typeof typeSpecs[typeSpecName] === 'function') ? invariant_1(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames_1$2[location], typeSpecName) : void 0;
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret_1$4);
        } catch (ex) {
          error = ex;
        }
        warning_1(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames_1$2[location], typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures$3)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures$3[error.message] = true;
  
          var componentStackInfo = '';
  
          {
            if (!ReactComponentTreeHook$4) {
              ReactComponentTreeHook$4 = ReactComponentTreeHook_1;
            }
            if (debugID !== null) {
              componentStackInfo = ReactComponentTreeHook$4.getStackAddendumByID(debugID);
            } else if (element !== null) {
              componentStackInfo = ReactComponentTreeHook$4.getCurrentStackAddendum(element);
            }
          }
  
          warning_1(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo);
        }
      }
    }
  }
  
  var checkReactTypeSpec_1$2 = checkReactTypeSpec$3;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  /**
   * Given a `prevElement` and `nextElement`, determines if the existing
   * instance should be updated as opposed to being destroyed or replaced by a new
   * instance. Both arguments are elements. This ensures that this logic can
   * operate on stateless trees without any backing instance.
   *
   * @param {?object} prevElement
   * @param {?object} nextElement
   * @return {boolean} True if the existing instance should be updated.
   * @protected
   */
  
  function shouldUpdateReactComponent(prevElement, nextElement) {
    var prevEmpty = prevElement === null || prevElement === false;
    var nextEmpty = nextElement === null || nextElement === false;
    if (prevEmpty || nextEmpty) {
      return prevEmpty === nextEmpty;
    }
  
    var prevType = typeof prevElement;
    var nextType = typeof nextElement;
    if (prevType === 'string' || prevType === 'number') {
      return nextType === 'string' || nextType === 'number';
    } else {
      return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
    }
  }
  
  var shouldUpdateReactComponent_1 = shouldUpdateReactComponent;
  
  {
    var checkReactTypeSpec$2 = checkReactTypeSpec_1$2;
  }
  
  
  
  
  
  
  
  var CompositeTypes = {
    ImpureClass: 0,
    PureClass: 1,
    StatelessFunctional: 2
  };
  
  function StatelessComponent(Component) {}
  StatelessComponent.prototype.render = function () {
    var Component = ReactInstanceMap_1.get(this)._currentElement.type;
    var element = Component(this.props, this.context, this.updater);
    warnIfInvalidElement(Component, element);
    return element;
  };
  
  function warnIfInvalidElement(Component, element) {
    {
      warning_1(element === null || element === false || React_1.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component');
      warning_1(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component');
    }
  }
  
  function shouldConstruct(Component) {
    return !!(Component.prototype && Component.prototype.isReactComponent);
  }
  
  function isPureComponent(Component) {
    return !!(Component.prototype && Component.prototype.isPureReactComponent);
  }
  
  // Separated into a function to contain deoptimizations caused by try/finally.
  function measureLifeCyclePerf(fn, debugID, timerType) {
    if (debugID === 0) {
      // Top-level wrappers (see ReactMount) and empty components (see
      // ReactDOMEmptyComponent) are invisible to hooks and devtools.
      // Both are implementation details that should go away in the future.
      return fn();
    }
  
    ReactInstrumentation$1.debugTool.onBeginLifeCycleTimer(debugID, timerType);
    try {
      return fn();
    } finally {
      ReactInstrumentation$1.debugTool.onEndLifeCycleTimer(debugID, timerType);
    }
  }
  
  /**
   * ------------------ The Life-Cycle of a Composite Component ------------------
   *
   * - constructor: Initialization of state. The instance is now retained.
   *   - componentWillMount
   *   - render
   *   - [children's constructors]
   *     - [children's componentWillMount and render]
   *     - [children's componentDidMount]
   *     - componentDidMount
   *
   *       Update Phases:
   *       - componentWillReceiveProps (only called if parent updated)
   *       - shouldComponentUpdate
   *         - componentWillUpdate
   *           - render
   *           - [children's constructors or receive props phases]
   *         - componentDidUpdate
   *
   *     - componentWillUnmount
   *     - [children's componentWillUnmount]
   *   - [children destroyed]
   * - (destroyed): The instance is now blank, released by React and ready for GC.
   *
   * -----------------------------------------------------------------------------
   */
  
  /**
   * An incrementing ID assigned to each component when it is mounted. This is
   * used to enforce the order in which `ReactUpdates` updates dirty components.
   *
   * @private
   */
  var nextMountID = 1;
  
  /**
   * @lends {ReactCompositeComponent.prototype}
   */
  var ReactCompositeComponent = {
    /**
     * Base constructor for all composite component.
     *
     * @param {ReactElement} element
     * @final
     * @internal
     */
    construct: function (element) {
      this._currentElement = element;
      this._rootNodeID = 0;
      this._compositeType = null;
      this._instance = null;
      this._hostParent = null;
      this._hostContainerInfo = null;
  
      // See ReactUpdateQueue
      this._updateBatchNumber = null;
      this._pendingElement = null;
      this._pendingStateQueue = null;
      this._pendingReplaceState = false;
      this._pendingForceUpdate = false;
  
      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._context = null;
      this._mountOrder = 0;
      this._topLevelWrapper = null;
  
      // See ReactUpdates and ReactUpdateQueue.
      this._pendingCallbacks = null;
  
      // ComponentWillUnmount shall only be called once
      this._calledComponentWillUnmount = false;
  
      {
        this._warnedAboutRefsInRender = false;
      }
    },
  
    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {?object} hostParent
     * @param {?object} hostContainerInfo
     * @param {?object} context
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @final
     * @internal
     */
    mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
      var _this = this;
  
      this._context = context;
      this._mountOrder = nextMountID++;
      this._hostParent = hostParent;
      this._hostContainerInfo = hostContainerInfo;
  
      var publicProps = this._currentElement.props;
      var publicContext = this._processContext(context);
  
      var Component = this._currentElement.type;
  
      var updateQueue = transaction.getUpdateQueue();
  
      // Initialize the public class
      var doConstruct = shouldConstruct(Component);
      var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
      var renderedElement;
  
      // Support functional components
      if (!doConstruct && (inst == null || inst.render == null)) {
        renderedElement = inst;
        warnIfInvalidElement(Component, renderedElement);
        !(inst === null || inst === false || React_1.isValidElement(inst)) ? invariant_1(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
        inst = new StatelessComponent(Component);
        this._compositeType = CompositeTypes.StatelessFunctional;
      } else {
        if (isPureComponent(Component)) {
          this._compositeType = CompositeTypes.PureClass;
        } else {
          this._compositeType = CompositeTypes.ImpureClass;
        }
      }
  
      {
        // This will throw later in _renderValidatedComponent, but add an early
        // warning now to help debugging
        if (inst.render == null) {
          warning_1(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component');
        }
  
        var propsMutated = inst.props !== publicProps;
        var componentName = Component.displayName || Component.name || 'Component';
  
        warning_1(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", componentName, componentName);
      }
  
      // These should be set up in the constructor, but as a convenience for
      // simpler class abstractions, we set them up after the fact.
      inst.props = publicProps;
      inst.context = publicContext;
      inst.refs = emptyObject_1;
      inst.updater = updateQueue;
  
      this._instance = inst;
  
      // Store a reference from the instance back to the internal representation
      ReactInstanceMap_1.set(inst, this);
  
      {
        // Since plain JS classes are defined without any special initialization
        // logic, we can not catch common errors early. Therefore, we have to
        // catch them here, at initialization time, instead.
        warning_1(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component');
        warning_1(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component');
        warning_1(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component');
        warning_1(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component');
        warning_1(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component');
        warning_1(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component');
        warning_1(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component');
      }
  
      var initialState = inst.state;
      if (initialState === undefined) {
        inst.state = initialState = null;
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? invariant_1(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : void 0;
  
      this._pendingStateQueue = null;
      this._pendingReplaceState = false;
      this._pendingForceUpdate = false;
  
      var markup;
      if (inst.unstable_handleError) {
        markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
      } else {
        markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
      }
  
      if (inst.componentDidMount) {
        {
          transaction.getReactMountReady().enqueue(function () {
            measureLifeCyclePerf(function () {
              return inst.componentDidMount();
            }, _this._debugID, 'componentDidMount');
          });
        }
      }
  
      return markup;
    },
  
    _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
      if ("development" !== 'production' && !doConstruct) {
        ReactCurrentOwner_1.current = this;
        try {
          return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
        } finally {
          ReactCurrentOwner_1.current = null;
        }
      } else {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
      }
    },
  
    _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
      var Component = this._currentElement.type;
  
      if (doConstruct) {
        {
          return measureLifeCyclePerf(function () {
            return new Component(publicProps, publicContext, updateQueue);
          }, this._debugID, 'ctor');
        }
      }
  
      // This can still be an instance in case of factory components
      // but we'll count this as time spent rendering as the more common case.
      {
        return measureLifeCyclePerf(function () {
          return Component(publicProps, publicContext, updateQueue);
        }, this._debugID, 'render');
      }
    },
  
    performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
      var markup;
      var checkpoint = transaction.checkpoint();
      try {
        markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
      } catch (e) {
        // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
        transaction.rollback(checkpoint);
        this._instance.unstable_handleError(e);
        if (this._pendingStateQueue) {
          this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
        }
        checkpoint = transaction.checkpoint();
  
        this._renderedComponent.unmountComponent(true);
        transaction.rollback(checkpoint);
  
        // Try again - we've informed the component about the error, so they can render an error message this time.
        // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
        markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
      }
      return markup;
    },
  
    performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
      var inst = this._instance;
  
      var debugID = 0;
      {
        debugID = this._debugID;
      }
  
      if (inst.componentWillMount) {
        {
          measureLifeCyclePerf(function () {
            return inst.componentWillMount();
          }, debugID, 'componentWillMount');
        }
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingStateQueue` without triggering a re-render.
        if (this._pendingStateQueue) {
          inst.state = this._processPendingState(inst.props, inst.context);
        }
      }
  
      // If not a stateless component, we now render
      if (renderedElement === undefined) {
        renderedElement = this._renderValidatedComponent();
      }
  
      var nodeType = ReactNodeTypes_1.getType(renderedElement);
      this._renderedNodeType = nodeType;
      var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes_1.EMPTY /* shouldHaveDebugID */
      );
      this._renderedComponent = child;
  
      var markup = ReactReconciler_1.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);
  
      {
        if (debugID !== 0) {
          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
          ReactInstrumentation$1.debugTool.onSetChildren(debugID, childDebugIDs);
        }
      }
  
      return markup;
    },
  
    getHostNode: function () {
      return ReactReconciler_1.getHostNode(this._renderedComponent);
    },
  
    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * @final
     * @internal
     */
    unmountComponent: function (safely) {
      if (!this._renderedComponent) {
        return;
      }
  
      var inst = this._instance;
  
      if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
        inst._calledComponentWillUnmount = true;
  
        if (safely) {
          var name = this.getName() + '.componentWillUnmount()';
          ReactErrorUtils_1.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
        } else {
          {
            measureLifeCyclePerf(function () {
              return inst.componentWillUnmount();
            }, this._debugID, 'componentWillUnmount');
          }
        }
      }
  
      if (this._renderedComponent) {
        ReactReconciler_1.unmountComponent(this._renderedComponent, safely);
        this._renderedNodeType = null;
        this._renderedComponent = null;
        this._instance = null;
      }
  
      // Reset pending fields
      // Even if this component is scheduled for another update in ReactUpdates,
      // it would still be ignored because these fields are reset.
      this._pendingStateQueue = null;
      this._pendingReplaceState = false;
      this._pendingForceUpdate = false;
      this._pendingCallbacks = null;
      this._pendingElement = null;
  
      // These fields do not really need to be reset since this object is no
      // longer accessible.
      this._context = null;
      this._rootNodeID = 0;
      this._topLevelWrapper = null;
  
      // Delete the reference from the instance to this internal representation
      // which allow the internals to be properly cleaned up even if the user
      // leaks a reference to the public instance.
      ReactInstanceMap_1.remove(inst);
  
      // Some existing components rely on inst.props even after they've been
      // destroyed (in event handlers).
      // TODO: inst.props = null;
      // TODO: inst.state = null;
      // TODO: inst.context = null;
    },
  
    /**
     * Filters the context object to only contain keys specified in
     * `contextTypes`
     *
     * @param {object} context
     * @return {?object}
     * @private
     */
    _maskContext: function (context) {
      var Component = this._currentElement.type;
      var contextTypes = Component.contextTypes;
      if (!contextTypes) {
        return emptyObject_1;
      }
      var maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      return maskedContext;
    },
  
    /**
     * Filters the context object to only contain keys specified in
     * `contextTypes`, and asserts that they are valid.
     *
     * @param {object} context
     * @return {?object}
     * @private
     */
    _processContext: function (context) {
      var maskedContext = this._maskContext(context);
      {
        var Component = this._currentElement.type;
        if (Component.contextTypes) {
          this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
        }
      }
      return maskedContext;
    },
  
    /**
     * @param {object} currentContext
     * @return {object}
     * @private
     */
    _processChildContext: function (currentContext) {
      var Component = this._currentElement.type;
      var inst = this._instance;
      var childContext;
  
      if (inst.getChildContext) {
        {
          ReactInstrumentation$1.debugTool.onBeginProcessingChildContext();
          try {
            childContext = inst.getChildContext();
          } finally {
            ReactInstrumentation$1.debugTool.onEndProcessingChildContext();
          }
        }
      }
  
      if (childContext) {
        !(typeof Component.childContextTypes === 'object') ? invariant_1(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : void 0;
        {
          this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
        }
        for (var name in childContext) {
          !(name in Component.childContextTypes) ? invariant_1(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : void 0;
        }
        return objectAssign({}, currentContext, childContext);
      }
      return currentContext;
    },
  
    /**
     * Assert that the context types are valid
     *
     * @param {object} typeSpecs Map of context field to a ReactPropType
     * @param {object} values Runtime values that need to be type-checked
     * @param {string} location e.g. "prop", "context", "child context"
     * @private
     */
    _checkContextTypes: function (typeSpecs, values, location) {
      {
        checkReactTypeSpec$2(typeSpecs, values, location, this.getName(), null, this._debugID);
      }
    },
  
    receiveComponent: function (nextElement, transaction, nextContext) {
      var prevElement = this._currentElement;
      var prevContext = this._context;
  
      this._pendingElement = null;
  
      this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
    },
  
    /**
     * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
     * is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function (transaction) {
      if (this._pendingElement != null) {
        ReactReconciler_1.receiveComponent(this, this._pendingElement, transaction, this._context);
      } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
        this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
      } else {
        this._updateBatchNumber = null;
      }
    },
  
    /**
     * Perform an update to a mounted component. The componentWillReceiveProps and
     * shouldComponentUpdate methods are called, then (assuming the update isn't
     * skipped) the remaining update lifecycle methods are called and the DOM
     * representation is updated.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {ReactElement} prevParentElement
     * @param {ReactElement} nextParentElement
     * @internal
     * @overridable
     */
    updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
      var inst = this._instance;
      !(inst != null) ? invariant_1(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : void 0;
  
      var willReceive = false;
      var nextContext;
  
      // Determine if the context has changed or not
      if (this._context === nextUnmaskedContext) {
        nextContext = inst.context;
      } else {
        nextContext = this._processContext(nextUnmaskedContext);
        willReceive = true;
      }
  
      var prevProps = prevParentElement.props;
      var nextProps = nextParentElement.props;
  
      // Not a simple state update but a props update
      if (prevParentElement !== nextParentElement) {
        willReceive = true;
      }
  
      // An update here will schedule an update but immediately set
      // _pendingStateQueue which will ensure that any state updates gets
      // immediately reconciled instead of waiting for the next batch.
      if (willReceive && inst.componentWillReceiveProps) {
        {
          measureLifeCyclePerf(function () {
            return inst.componentWillReceiveProps(nextProps, nextContext);
          }, this._debugID, 'componentWillReceiveProps');
        }
      }
  
      var nextState = this._processPendingState(nextProps, nextContext);
      var shouldUpdate = true;
  
      if (!this._pendingForceUpdate) {
        if (inst.shouldComponentUpdate) {
          {
            shouldUpdate = measureLifeCyclePerf(function () {
              return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
            }, this._debugID, 'shouldComponentUpdate');
          }
        } else {
          if (this._compositeType === CompositeTypes.PureClass) {
            shouldUpdate = !shallowEqual_1(prevProps, nextProps) || !shallowEqual_1(inst.state, nextState);
          }
        }
      }
  
      {
        warning_1(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent');
      }
  
      this._updateBatchNumber = null;
      if (shouldUpdate) {
        this._pendingForceUpdate = false;
        // Will set `this.props`, `this.state` and `this.context`.
        this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
      } else {
        // If it's determined that a component should not update, we still want
        // to set props and state but we shortcut the rest of the update.
        this._currentElement = nextParentElement;
        this._context = nextUnmaskedContext;
        inst.props = nextProps;
        inst.state = nextState;
        inst.context = nextContext;
      }
    },
  
    _processPendingState: function (props, context) {
      var inst = this._instance;
      var queue = this._pendingStateQueue;
      var replace = this._pendingReplaceState;
      this._pendingReplaceState = false;
      this._pendingStateQueue = null;
  
      if (!queue) {
        return inst.state;
      }
  
      if (replace && queue.length === 1) {
        return queue[0];
      }
  
      var nextState = objectAssign({}, replace ? queue[0] : inst.state);
      for (var i = replace ? 1 : 0; i < queue.length; i++) {
        var partial = queue[i];
        objectAssign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
      }
  
      return nextState;
    },
  
    /**
     * Merges new props and state, notifies delegate methods of update and
     * performs update.
     *
     * @param {ReactElement} nextElement Next element
     * @param {object} nextProps Next public object to set as properties.
     * @param {?object} nextState Next object to set as state.
     * @param {?object} nextContext Next public object to set as context.
     * @param {ReactReconcileTransaction} transaction
     * @param {?object} unmaskedContext
     * @private
     */
    _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
      var _this2 = this;
  
      var inst = this._instance;
  
      var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
      var prevProps;
      var prevState;
      var prevContext;
      if (hasComponentDidUpdate) {
        prevProps = inst.props;
        prevState = inst.state;
        prevContext = inst.context;
      }
  
      if (inst.componentWillUpdate) {
        {
          measureLifeCyclePerf(function () {
            return inst.componentWillUpdate(nextProps, nextState, nextContext);
          }, this._debugID, 'componentWillUpdate');
        }
      }
  
      this._currentElement = nextElement;
      this._context = unmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
  
      this._updateRenderedComponent(transaction, unmaskedContext);
  
      if (hasComponentDidUpdate) {
        {
          transaction.getReactMountReady().enqueue(function () {
            measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
          });
        }
      }
    },
  
    /**
     * Call the component's `render` method and update the DOM accordingly.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    _updateRenderedComponent: function (transaction, context) {
      var prevComponentInstance = this._renderedComponent;
      var prevRenderedElement = prevComponentInstance._currentElement;
      var nextRenderedElement = this._renderValidatedComponent();
  
      var debugID = 0;
      {
        debugID = this._debugID;
      }
  
      if (shouldUpdateReactComponent_1(prevRenderedElement, nextRenderedElement)) {
        ReactReconciler_1.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
      } else {
        var oldHostNode = ReactReconciler_1.getHostNode(prevComponentInstance);
        ReactReconciler_1.unmountComponent(prevComponentInstance, false);
  
        var nodeType = ReactNodeTypes_1.getType(nextRenderedElement);
        this._renderedNodeType = nodeType;
        var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes_1.EMPTY /* shouldHaveDebugID */
        );
        this._renderedComponent = child;
  
        var nextMarkup = ReactReconciler_1.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);
  
        {
          if (debugID !== 0) {
            var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
            ReactInstrumentation$1.debugTool.onSetChildren(debugID, childDebugIDs);
          }
        }
  
        this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
      }
    },
  
    /**
     * Overridden in shallow rendering.
     *
     * @protected
     */
    _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
      ReactComponentEnvironment_1.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
    },
  
    /**
     * @protected
     */
    _renderValidatedComponentWithoutOwnerOrContext: function () {
      var inst = this._instance;
      var renderedElement;
  
      {
        renderedElement = measureLifeCyclePerf(function () {
          return inst.render();
        }, this._debugID, 'render');
      }
  
      {
        // We allow auto-mocks to proceed as if they're returning null.
        if (renderedElement === undefined && inst.render._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          renderedElement = null;
        }
      }
  
      return renderedElement;
    },
  
    /**
     * @private
     */
    _renderValidatedComponent: function () {
      var renderedElement;
      {
        ReactCurrentOwner_1.current = this;
        try {
          renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
        } finally {
          ReactCurrentOwner_1.current = null;
        }
      }
      !(
      // TODO: An `isValidNode` function would probably be more appropriate
      renderedElement === null || renderedElement === false || React_1.isValidElement(renderedElement)) ? invariant_1(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : void 0;
  
      return renderedElement;
    },
  
    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function (ref, component) {
      var inst = this.getPublicInstance();
      !(inst != null) ? invariant_1(false, 'Stateless function components cannot have refs.') : void 0;
      var publicComponentInstance = component.getPublicInstance();
      {
        var componentName = component && component.getName ? component.getName() : 'a component';
        warning_1(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName());
      }
      var refs = inst.refs === emptyObject_1 ? inst.refs = {} : inst.refs;
      refs[ref] = publicComponentInstance;
    },
  
    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function (ref) {
      var refs = this.getPublicInstance().refs;
      delete refs[ref];
    },
  
    /**
     * Get a text description of the component that can be used to identify it
     * in error messages.
     * @return {string} The name or null.
     * @internal
     */
    getName: function () {
      var type = this._currentElement.type;
      var constructor = this._instance && this._instance.constructor;
      return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
    },
  
    /**
     * Get the publicly accessible representation of this component - i.e. what
     * is exposed by refs and returned by render. Can be null for stateless
     * components.
     *
     * @return {ReactComponent} the public component instance.
     * @internal
     */
    getPublicInstance: function () {
      var inst = this._instance;
      if (this._compositeType === CompositeTypes.StatelessFunctional) {
        return null;
      }
      return inst;
    },
  
    // Stub
    _instantiateReactComponent: null
  };
  
  var ReactCompositeComponent_1 = ReactCompositeComponent;
  
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  var emptyComponentFactory;
  
  var ReactEmptyComponentInjection = {
    injectEmptyComponentFactory: function (factory) {
      emptyComponentFactory = factory;
    }
  };
  
  var ReactEmptyComponent = {
    create: function (instantiate) {
      return emptyComponentFactory(instantiate);
    }
  };
  
  ReactEmptyComponent.injection = ReactEmptyComponentInjection;
  
  var ReactEmptyComponent_1 = ReactEmptyComponent;
  
  var genericComponentClass = null;
  var textComponentClass = null;
  
  var ReactHostComponentInjection = {
    // This accepts a class that receives the tag string. This is a catch all
    // that can render any kind of tag.
    injectGenericComponentClass: function (componentClass) {
      genericComponentClass = componentClass;
    },
    // This accepts a text component class that takes the text string to be
    // rendered as props.
    injectTextComponentClass: function (componentClass) {
      textComponentClass = componentClass;
    }
  };
  
  /**
   * Get a host internal component class for a specific tag.
   *
   * @param {ReactElement} element The element to create.
   * @return {function} The internal class constructor function.
   */
  function createInternalComponent(element) {
    !genericComponentClass ? invariant_1(false, 'There is no registered component for the tag %s', element.type) : void 0;
    return new genericComponentClass(element);
  }
  
  /**
   * @param {ReactText} text
   * @return {ReactComponent}
   */
  function createInstanceForText(text) {
    return new textComponentClass(text);
  }
  
  /**
   * @param {ReactComponent} component
   * @return {boolean}
   */
  function isTextComponent(component) {
    return component instanceof textComponentClass;
  }
  
  var ReactHostComponent = {
    createInternalComponent: createInternalComponent,
    createInstanceForText: createInstanceForText,
    isTextComponent: isTextComponent,
    injection: ReactHostComponentInjection
  };
  
  var ReactHostComponent_1 = ReactHostComponent;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  var nextDebugID = 1;
  
  function getNextDebugID() {
    return nextDebugID++;
  }
  
  var getNextDebugID_1 = getNextDebugID;
  
  // To avoid a cyclic dependency, we create the final class in this module
  var ReactCompositeComponentWrapper = function (element) {
    this.construct(element);
  };
  
  function getDeclarationErrorAddendum$4(owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  }
  
  /**
   * Check if the type reference is a known internal type. I.e. not a user
   * provided composite type.
   *
   * @param {function} type
   * @return {boolean} Returns true if this is a valid internal type.
   */
  function isInternalComponentType(type) {
    return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
  }
  
  /**
   * Given a ReactNode, create an instance that will actually be mounted.
   *
   * @param {ReactNode} node
   * @param {boolean} shouldHaveDebugID
   * @return {object} A new instance of the element's constructor.
   * @protected
   */
  function instantiateReactComponent(node, shouldHaveDebugID) {
    var instance;
  
    if (node === null || node === false) {
      instance = ReactEmptyComponent_1.create(instantiateReactComponent);
    } else if (typeof node === 'object') {
      var element = node;
      var type = element.type;
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        {
          if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
            info += ' You likely forgot to export your component from the file ' + "it's defined in.";
          }
        }
        info += getDeclarationErrorAddendum$4(element._owner);
        invariant_1(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
      }
  
      // Special case string values
      if (typeof element.type === 'string') {
        instance = ReactHostComponent_1.createInternalComponent(element);
      } else if (isInternalComponentType(element.type)) {
        // This is temporarily available for custom components that are not string
        // representations. I.e. ART. Once those are updated to use the string
        // representation, we can drop this code path.
        instance = new element.type(element);
  
        // We renamed this. Allow the old name for compat. :(
        if (!instance.getHostNode) {
          instance.getHostNode = instance.getNativeNode;
        }
      } else {
        instance = new ReactCompositeComponentWrapper(element);
      }
    } else if (typeof node === 'string' || typeof node === 'number') {
      instance = ReactHostComponent_1.createInstanceForText(node);
    } else {
      invariant_1(false, 'Encountered invalid React node of type %s', typeof node);
    }
  
    {
      warning_1(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.');
    }
  
    // These two fields are used by the DOM and ART diffing algorithms
    // respectively. Instead of using expandos on components, we should be
    // storing the state needed by the diffing algorithms elsewhere.
    instance._mountIndex = 0;
    instance._mountImage = null;
  
    {
      instance._debugID = shouldHaveDebugID ? getNextDebugID_1() : 0;
    }
  
    // Internal instances should fully constructed at this point, so they should
    // not get any new fields added to them at this point.
    {
      if (Object.preventExtensions) {
        Object.preventExtensions(instance);
      }
    }
  
    return instance;
  }
  
  objectAssign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent_1, {
    _instantiateReactComponent: instantiateReactComponent
  });
  
  var instantiateReactComponent_1 = instantiateReactComponent;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  /**
   * Escape and wrap key so it is safe to use as a reactid
   *
   * @param {string} key to be escaped.
   * @return {string} the escaped key.
   */
  
  function escape$1(key) {
    var escapeRegex = /[=:]/g;
    var escaperLookup = {
      '=': '=0',
      ':': '=2'
    };
    var escapedString = ('' + key).replace(escapeRegex, function (match) {
      return escaperLookup[match];
    });
  
    return '$' + escapedString;
  }
  
  /**
   * Unescape and unwrap key for human-readable display
   *
   * @param {string} key to unescape.
   * @return {string} the unescaped key.
   */
  function unescape$1(key) {
    var unescapeRegex = /(=0|=2)/g;
    var unescaperLookup = {
      '=0': '=',
      '=2': ':'
    };
    var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);
  
    return ('' + keySubstring).replace(unescapeRegex, function (match) {
      return unescaperLookup[match];
    });
  }
  
  var KeyEscapeUtils$2 = {
    escape: escape$1,
    unescape: unescape$1
  };
  
  var KeyEscapeUtils_1$2 = KeyEscapeUtils$2;
  
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  // The Symbol used to tag the ReactElement type. If there is no native Symbol
  // nor polyfill, then a plain number is used for performance.
  
  var REACT_ELEMENT_TYPE$2 = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
  
  var ReactElementSymbol$2 = REACT_ELEMENT_TYPE$2;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  /* global Symbol */
  
  var ITERATOR_SYMBOL$1 = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL$1 = '@@iterator'; // Before Symbol spec.
  
  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn$2(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL$1 && maybeIterable[ITERATOR_SYMBOL$1] || maybeIterable[FAUX_ITERATOR_SYMBOL$1]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }
  
  var getIteratorFn_1$2 = getIteratorFn$2;
  
  var SEPARATOR$1 = '.';
  var SUBSEPARATOR$1 = ':';
  
  /**
   * This is inlined from ReactElement since this file is shared between
   * isomorphic and renderers. We could extract this to a
   *
   */
  
  /**
   * TODO: Test that a single child and an array with one item have the same key
   * pattern.
   */
  
  var didWarnAboutMaps$1 = false;
  
  /**
   * Generate a key string that identifies a component within a set.
   *
   * @param {*} component A component that could contain a manual key.
   * @param {number} index Index that is used if a manual key is not provided.
   * @return {string}
   */
  function getComponentKey$1(component, index) {
    // Do some typechecking here since we call this blindly. We want to ensure
    // that we don't block potential future ES APIs.
    if (component && typeof component === 'object' && component.key != null) {
      // Explicit key
      return KeyEscapeUtils_1$2.escape(component.key);
    }
    // Implicit key determined by the index in the set
    return index.toString(36);
  }
  
  /**
   * @param {?*} children Children tree container.
   * @param {!string} nameSoFar Name of the key path so far.
   * @param {!function} callback Callback to invoke with each child found.
   * @param {?*} traverseContext Used to pass information throughout the traversal
   * process.
   * @return {!number} The number of children in this subtree.
   */
  function traverseAllChildrenImpl$1(children, nameSoFar, callback, traverseContext) {
    var type = typeof children;
  
    if (type === 'undefined' || type === 'boolean') {
      // All of the above are perceived as null.
      children = null;
    }
  
    if (children === null || type === 'string' || type === 'number' ||
    // The following is inlined from ReactElement. This means we can optimize
    // some checks. React Fiber also inlines this logic for similar purposes.
    type === 'object' && children.$$typeof === ReactElementSymbol$2) {
      callback(traverseContext, children,
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows.
      nameSoFar === '' ? SEPARATOR$1 + getComponentKey$1(children, 0) : nameSoFar);
      return 1;
    }
  
    var child;
    var nextName;
    var subtreeCount = 0; // Count of children found in the current subtree.
    var nextNamePrefix = nameSoFar === '' ? SEPARATOR$1 : nameSoFar + SUBSEPARATOR$1;
  
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        child = children[i];
        nextName = nextNamePrefix + getComponentKey$1(child, i);
        subtreeCount += traverseAllChildrenImpl$1(child, nextName, callback, traverseContext);
      }
    } else {
      var iteratorFn = getIteratorFn_1$2(children);
      if (iteratorFn) {
        var iterator = iteratorFn.call(children);
        var step;
        if (iteratorFn !== children.entries) {
          var ii = 0;
          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getComponentKey$1(child, ii++);
            subtreeCount += traverseAllChildrenImpl$1(child, nextName, callback, traverseContext);
          }
        } else {
          {
            var mapsAsChildrenAddendum = '';
            if (ReactCurrentOwner_1.current) {
              var mapsAsChildrenOwnerName = ReactCurrentOwner_1.current.getName();
              if (mapsAsChildrenOwnerName) {
                mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
              }
            }
            warning_1(didWarnAboutMaps$1, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum);
            didWarnAboutMaps$1 = true;
          }
          // Iterator will provide entry [k,v] tuples rather than values.
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              child = entry[1];
              nextName = nextNamePrefix + KeyEscapeUtils_1$2.escape(entry[0]) + SUBSEPARATOR$1 + getComponentKey$1(child, 0);
              subtreeCount += traverseAllChildrenImpl$1(child, nextName, callback, traverseContext);
            }
          }
        }
      } else if (type === 'object') {
        var addendum = '';
        {
          addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
          if (children._isReactElement) {
            addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
          }
          if (ReactCurrentOwner_1.current) {
            var name = ReactCurrentOwner_1.current.getName();
            if (name) {
              addendum += ' Check the render method of `' + name + '`.';
            }
          }
        }
        var childrenString = String(children);
        invariant_1(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
      }
    }
  
    return subtreeCount;
  }
  
  /**
   * Traverses children that are typically specified as `props.children`, but
   * might also be specified through attributes:
   *
   * - `traverseAllChildren(this.props.children, ...)`
   * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
   *
   * The `traverseContext` is an optional argument that is passed through the
   * entire traversal. It can be used to store accumulations or anything else that
   * the callback might find relevant.
   *
   * @param {?*} children Children tree object.
   * @param {!function} callback To invoke upon traversing each child.
   * @param {?*} traverseContext Context for traversal.
   * @return {!number} The number of children in this subtree.
   */
  function traverseAllChildren$2(children, callback, traverseContext) {
    if (children == null) {
      return 0;
    }
  
    return traverseAllChildrenImpl$1(children, '', callback, traverseContext);
  }
  
  var traverseAllChildren_1$2 = traverseAllChildren$2;
  
  var ReactComponentTreeHook$3;
  
  if (typeof process !== 'undefined' && process.env && "development" === 'test') {
    // Temporary hack.
    // Inline requires don't work well with Jest:
    // https://github.com/facebook/react/issues/7240
    // Remove the inline requires when we don't need them anymore:
    // https://github.com/facebook/react/pull/7178
    ReactComponentTreeHook$3 = ReactComponentTreeHook_1;
  }
  
  function instantiateChild(childInstances, child, name, selfDebugID) {
    // We found a component instance.
    var keyUnique = childInstances[name] === undefined;
    {
      if (!ReactComponentTreeHook$3) {
        ReactComponentTreeHook$3 = ReactComponentTreeHook_1;
      }
      if (!keyUnique) {
        warning_1(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils_1$2.unescape(name), ReactComponentTreeHook$3.getStackAddendumByID(selfDebugID));
      }
    }
    if (child != null && keyUnique) {
      childInstances[name] = instantiateReactComponent_1(child, true);
    }
  }
  
  /**
   * ReactChildReconciler provides helpers for initializing or updating a set of
   * children. Its output is suitable for passing it onto ReactMultiChild which
   * does diffed reordering and insertion.
   */
  var ReactChildReconciler = {
    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildNodes Nested child maps.
     * @return {?object} A set of child instances.
     * @internal
     */
    instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID) // 0 in production and for roots
    {
      if (nestedChildNodes == null) {
        return null;
      }
      var childInstances = {};
  
      {
        traverseAllChildren_1$2(nestedChildNodes, function (childInsts, child, name) {
          return instantiateChild(childInsts, child, name, selfDebugID);
        }, childInstances);
      }
      return childInstances;
    },
  
    /**
     * Updates the rendered children and returns a new set of children.
     *
     * @param {?object} prevChildren Previously initialized set of children.
     * @param {?object} nextChildren Flat child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @param {object} context
     * @return {?object} A new set of child instances.
     * @internal
     */
    updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) // 0 in production and for roots
    {
      // We currently don't have a way to track moves here but if we use iterators
      // instead of for..in we can zip the iterators and check if an item has
      // moved.
      // TODO: If nothing has changed, return the prevChildren object so that we
      // can quickly bailout if nothing has changed.
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      var prevChild;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (prevChild != null && shouldUpdateReactComponent_1(prevElement, nextElement)) {
          ReactReconciler_1.receiveComponent(prevChild, nextElement, transaction, context);
          nextChildren[name] = prevChild;
        } else {
          if (prevChild) {
            removedNodes[name] = ReactReconciler_1.getHostNode(prevChild);
            ReactReconciler_1.unmountComponent(prevChild, false);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent_1(nextElement, true);
          nextChildren[name] = nextChildInstance;
          // Creating mount image now ensures refs are resolved in right order
          // (see https://github.com/facebook/react/pull/7101 for explanation).
          var nextChildMountImage = ReactReconciler_1.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
          mountImages.push(nextChildMountImage);
        }
      }
      // Unmount children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
          prevChild = prevChildren[name];
          removedNodes[name] = ReactReconciler_1.getHostNode(prevChild);
          ReactReconciler_1.unmountComponent(prevChild, false);
        }
      }
    },
  
    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @param {?object} renderedChildren Previously initialized set of children.
     * @internal
     */
    unmountChildren: function (renderedChildren, safely) {
      for (var name in renderedChildren) {
        if (renderedChildren.hasOwnProperty(name)) {
          var renderedChild = renderedChildren[name];
          ReactReconciler_1.unmountComponent(renderedChild, safely);
        }
      }
    }
  };
  
  var ReactChildReconciler_1 = ReactChildReconciler;
  
  var ReactComponentTreeHook$5;
  
  if (typeof process !== 'undefined' && process.env && "development" === 'test') {
    // Temporary hack.
    // Inline requires don't work well with Jest:
    // https://github.com/facebook/react/issues/7240
    // Remove the inline requires when we don't need them anymore:
    // https://github.com/facebook/react/pull/7178
    ReactComponentTreeHook$5 = ReactComponentTreeHook_1;
  }
  
  /**
   * @param {function} traverseContext Context passed through traversal.
   * @param {?ReactComponent} child React child component.
   * @param {!string} name String name of key path to child.
   * @param {number=} selfDebugID Optional debugID of the current internal instance.
   */
  function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
    // We found a component instance.
    if (traverseContext && typeof traverseContext === 'object') {
      var result = traverseContext;
      var keyUnique = result[name] === undefined;
      {
        if (!ReactComponentTreeHook$5) {
          ReactComponentTreeHook$5 = ReactComponentTreeHook_1;
        }
        if (!keyUnique) {
          warning_1(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils_1$2.unescape(name), ReactComponentTreeHook$5.getStackAddendumByID(selfDebugID));
        }
      }
      if (keyUnique && child != null) {
        result[name] = child;
      }
    }
  }
  
  /**
   * Flattens children that are typically specified as `props.children`. Any null
   * children will not be included in the resulting object.
   * @return {!object} flattened children keyed by name.
   */
  function flattenChildren$1(children, selfDebugID) {
    if (children == null) {
      return children;
    }
    var result = {};
  
    {
      traverseAllChildren_1$2(children, function (traverseContext, child, name) {
        return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
      }, result);
    }
    return result;
  }
  
  var flattenChildren_1 = flattenChildren$1;
  
  /**
   * Make an update for markup to be rendered and inserted at a supplied index.
   *
   * @param {string} markup Markup that renders into an element.
   * @param {number} toIndex Destination index.
   * @private
   */
  function makeInsertMarkup(markup, afterNode, toIndex) {
    // NOTE: Null values reduce hidden classes.
    return {
      type: 'INSERT_MARKUP',
      content: markup,
      fromIndex: null,
      fromNode: null,
      toIndex: toIndex,
      afterNode: afterNode
    };
  }
  
  /**
   * Make an update for moving an existing element to another index.
   *
   * @param {number} fromIndex Source index of the existing element.
   * @param {number} toIndex Destination index of the element.
   * @private
   */
  function makeMove(child, afterNode, toIndex) {
    // NOTE: Null values reduce hidden classes.
    return {
      type: 'MOVE_EXISTING',
      content: null,
      fromIndex: child._mountIndex,
      fromNode: ReactReconciler_1.getHostNode(child),
      toIndex: toIndex,
      afterNode: afterNode
    };
  }
  
  /**
   * Make an update for removing an element at an index.
   *
   * @param {number} fromIndex Index of the element to remove.
   * @private
   */
  function makeRemove(child, node) {
    // NOTE: Null values reduce hidden classes.
    return {
      type: 'REMOVE_NODE',
      content: null,
      fromIndex: child._mountIndex,
      fromNode: node,
      toIndex: null,
      afterNode: null
    };
  }
  
  /**
   * Make an update for setting the markup of a node.
   *
   * @param {string} markup Markup that renders into an element.
   * @private
   */
  function makeSetMarkup(markup) {
    // NOTE: Null values reduce hidden classes.
    return {
      type: 'SET_MARKUP',
      content: markup,
      fromIndex: null,
      fromNode: null,
      toIndex: null,
      afterNode: null
    };
  }
  
  /**
   * Make an update for setting the text content.
   *
   * @param {string} textContent Text content to set.
   * @private
   */
  function makeTextContent(textContent) {
    // NOTE: Null values reduce hidden classes.
    return {
      type: 'TEXT_CONTENT',
      content: textContent,
      fromIndex: null,
      fromNode: null,
      toIndex: null,
      afterNode: null
    };
  }
  
  /**
   * Push an update, if any, onto the queue. Creates a new queue if none is
   * passed and always returns the queue. Mutative.
   */
  function enqueue(queue, update) {
    if (update) {
      queue = queue || [];
      queue.push(update);
    }
    return queue;
  }
  
  /**
   * Processes any enqueued updates.
   *
   * @private
   */
  function processQueue(inst, updateQueue) {
    ReactComponentEnvironment_1.processChildrenUpdates(inst, updateQueue);
  }
  
  var setChildrenForInstrumentation = emptyFunction_1;
  {
    var getDebugID = function (inst) {
      if (!inst._debugID) {
        // Check for ART-like instances. TODO: This is silly/gross.
        var internal;
        if (internal = ReactInstanceMap_1.get(inst)) {
          inst = internal;
        }
      }
      return inst._debugID;
    };
    setChildrenForInstrumentation = function (children) {
      var debugID = getDebugID(this);
      // TODO: React Native empty components are also multichild.
      // This means they still get into this method but don't have _debugID.
      if (debugID !== 0) {
        ReactInstrumentation$1.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
          return children[key]._debugID;
        }) : []);
      }
    };
  }
  
  /**
   * ReactMultiChild are capable of reconciling multiple children.
   *
   * @class ReactMultiChild
   * @internal
   */
  var ReactMultiChild = {
    /**
     * Provides common functionality for components that must reconcile multiple
     * children. This is used by `ReactDOMComponent` to mount, update, and
     * unmount child components.
     *
     * @lends {ReactMultiChild.prototype}
     */
    Mixin: {
      _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
        {
          var selfDebugID = getDebugID(this);
          if (this._currentElement) {
            try {
              ReactCurrentOwner_1.current = this._currentElement._owner;
              return ReactChildReconciler_1.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
            } finally {
              ReactCurrentOwner_1.current = null;
            }
          }
        }
        return ReactChildReconciler_1.instantiateChildren(nestedChildren, transaction, context);
      },
  
      _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
        var nextChildren;
        var selfDebugID = 0;
        {
          selfDebugID = getDebugID(this);
          if (this._currentElement) {
            try {
              ReactCurrentOwner_1.current = this._currentElement._owner;
              nextChildren = flattenChildren_1(nextNestedChildrenElements, selfDebugID);
            } finally {
              ReactCurrentOwner_1.current = null;
            }
            ReactChildReconciler_1.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
            return nextChildren;
          }
        }
        nextChildren = flattenChildren_1(nextNestedChildrenElements, selfDebugID);
        ReactChildReconciler_1.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
        return nextChildren;
      },
  
      /**
       * Generates a "mount image" for each of the supplied children. In the case
       * of `ReactDOMComponent`, a mount image is a string of markup.
       *
       * @param {?object} nestedChildren Nested child maps.
       * @return {array} An array of mounted representations.
       * @internal
       */
      mountChildren: function (nestedChildren, transaction, context) {
        var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
        this._renderedChildren = children;
  
        var mountImages = [];
        var index = 0;
        for (var name in children) {
          if (children.hasOwnProperty(name)) {
            var child = children[name];
            var selfDebugID = 0;
            {
              selfDebugID = getDebugID(this);
            }
            var mountImage = ReactReconciler_1.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
            child._mountIndex = index++;
            mountImages.push(mountImage);
          }
        }
  
        {
          setChildrenForInstrumentation.call(this, children);
        }
  
        return mountImages;
      },
  
      /**
       * Replaces any rendered children with a text content string.
       *
       * @param {string} nextContent String of content.
       * @internal
       */
      updateTextContent: function (nextContent) {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler_1.unmountChildren(prevChildren, false);
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            invariant_1(false, 'updateTextContent called on non-empty component.');
          }
        }
        // Set new text content.
        var updates = [makeTextContent(nextContent)];
        processQueue(this, updates);
      },
  
      /**
       * Replaces any rendered children with a markup string.
       *
       * @param {string} nextMarkup String of markup.
       * @internal
       */
      updateMarkup: function (nextMarkup) {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler_1.unmountChildren(prevChildren, false);
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            invariant_1(false, 'updateTextContent called on non-empty component.');
          }
        }
        var updates = [makeSetMarkup(nextMarkup)];
        processQueue(this, updates);
      },
  
      /**
       * Updates the rendered children with new children.
       *
       * @param {?object} nextNestedChildrenElements Nested child element maps.
       * @param {ReactReconcileTransaction} transaction
       * @internal
       */
      updateChildren: function (nextNestedChildrenElements, transaction, context) {
        // Hook used by React ART
        this._updateChildren(nextNestedChildrenElements, transaction, context);
      },
  
      /**
       * @param {?object} nextNestedChildrenElements Nested child element maps.
       * @param {ReactReconcileTransaction} transaction
       * @final
       * @protected
       */
      _updateChildren: function (nextNestedChildrenElements, transaction, context) {
        var prevChildren = this._renderedChildren;
        var removedNodes = {};
        var mountImages = [];
        var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
        if (!nextChildren && !prevChildren) {
          return;
        }
        var updates = null;
        var name;
        // `nextIndex` will increment for each child in `nextChildren`, but
        // `lastIndex` will be the last index visited in `prevChildren`.
        var nextIndex = 0;
        var lastIndex = 0;
        // `nextMountIndex` will increment for each newly mounted child.
        var nextMountIndex = 0;
        var lastPlacedNode = null;
        for (name in nextChildren) {
          if (!nextChildren.hasOwnProperty(name)) {
            continue;
          }
          var prevChild = prevChildren && prevChildren[name];
          var nextChild = nextChildren[name];
          if (prevChild === nextChild) {
            updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            prevChild._mountIndex = nextIndex;
          } else {
            if (prevChild) {
              // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
              lastIndex = Math.max(prevChild._mountIndex, lastIndex);
              // The `removedNodes` loop below will actually remove the child.
            }
            // The child must be instantiated before it's mounted.
            updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
            nextMountIndex++;
          }
          nextIndex++;
          lastPlacedNode = ReactReconciler_1.getHostNode(nextChild);
        }
        // Remove children that are no longer present.
        for (name in removedNodes) {
          if (removedNodes.hasOwnProperty(name)) {
            updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
          }
        }
        if (updates) {
          processQueue(this, updates);
        }
        this._renderedChildren = nextChildren;
  
        {
          setChildrenForInstrumentation.call(this, nextChildren);
        }
      },
  
      /**
       * Unmounts all rendered children. This should be used to clean up children
       * when this component is unmounted. It does not actually perform any
       * backend operations.
       *
       * @internal
       */
      unmountChildren: function (safely) {
        var renderedChildren = this._renderedChildren;
        ReactChildReconciler_1.unmountChildren(renderedChildren, safely);
        this._renderedChildren = null;
      },
  
      /**
       * Moves a child component to the supplied index.
       *
       * @param {ReactComponent} child Component to move.
       * @param {number} toIndex Destination index of the element.
       * @param {number} lastIndex Last index visited of the siblings of `child`.
       * @protected
       */
      moveChild: function (child, afterNode, toIndex, lastIndex) {
        // If the index of `child` is less than `lastIndex`, then it needs to
        // be moved. Otherwise, we do not need to move it because a child will be
        // inserted or moved before `child`.
        if (child._mountIndex < lastIndex) {
          return makeMove(child, afterNode, toIndex);
        }
      },
  
      /**
       * Creates a child component.
       *
       * @param {ReactComponent} child Component to create.
       * @param {string} mountImage Markup to insert.
       * @protected
       */
      createChild: function (child, afterNode, mountImage) {
        return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
      },
  
      /**
       * Removes a child component.
       *
       * @param {ReactComponent} child Child to remove.
       * @protected
       */
      removeChild: function (child, node) {
        return makeRemove(child, node);
      },
  
      /**
       * Mounts a child with the supplied name.
       *
       * NOTE: This is part of `updateChildren` and is here for readability.
       *
       * @param {ReactComponent} child Component to mount.
       * @param {string} name Name of the child.
       * @param {number} index Index at which to insert the child.
       * @param {ReactReconcileTransaction} transaction
       * @private
       */
      _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
        child._mountIndex = index;
        return this.createChild(child, afterNode, mountImage);
      },
  
      /**
       * Unmounts a rendered child.
       *
       * NOTE: This is part of `updateChildren` and is here for readability.
       *
       * @param {ReactComponent} child Component to unmount.
       * @private
       */
      _unmountChild: function (child, node) {
        var update = this.removeChild(child, node);
        child._mountIndex = null;
        return update;
      }
    }
  };
  
  var ReactMultiChild_1 = ReactMultiChild;
  
  function enqueueUpdate$1(internalInstance) {
    ReactUpdates_1.enqueueUpdate(internalInstance);
  }
  
  function formatUnexpectedArgument(arg) {
    var type = typeof arg;
    if (type !== 'object') {
      return type;
    }
    var displayName = arg.constructor && arg.constructor.name || type;
    var keys = Object.keys(arg);
    if (keys.length > 0 && keys.length < 20) {
      return displayName + ' (keys: ' + keys.join(', ') + ')';
    }
    return displayName;
  }
  
  function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
    var internalInstance = ReactInstanceMap_1.get(publicInstance);
    if (!internalInstance) {
      {
        var ctor = publicInstance.constructor;
        // Only warn when we have a callerName. Otherwise we should be silent.
        // We're probably calling from enqueueCallback. We don't want to warn
        // there because we already warned for the corresponding lifecycle method.
        warning_1(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass');
      }
      return null;
    }
  
    {
      warning_1(ReactCurrentOwner_1.current == null, '%s(...): Cannot update during an existing state transition (such as ' + "within `render` or another component's constructor). Render methods " + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName);
    }
  
    return internalInstance;
  }
  
  /**
   * ReactUpdateQueue allows for state updates to be scheduled into a later
   * reconciliation step.
   */
  var ReactUpdateQueue = {
    /**
     * Checks whether or not this composite component is mounted.
     * @param {ReactClass} publicInstance The instance we want to test.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function (publicInstance) {
      {
        var owner = ReactCurrentOwner_1.current;
        if (owner !== null) {
          warning_1(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component');
          owner._warnedAboutRefsInRender = true;
        }
      }
      var internalInstance = ReactInstanceMap_1.get(publicInstance);
      if (internalInstance) {
        // During componentWillMount and render this will still be null but after
        // that will always render to something. At least for now. So we can use
        // this hack.
        return !!internalInstance._renderedComponent;
      } else {
        return false;
      }
    },
  
    /**
     * Enqueue a callback that will be executed after all the pending updates
     * have processed.
     *
     * @param {ReactClass} publicInstance The instance to use as `this` context.
     * @param {?function} callback Called after state is updated.
     * @param {string} callerName Name of the calling function in the public API.
     * @internal
     */
    enqueueCallback: function (publicInstance, callback, callerName) {
      ReactUpdateQueue.validateCallback(callback, callerName);
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
  
      // Previously we would throw an error if we didn't have an internal
      // instance. Since we want to make it a no-op instead, we mirror the same
      // behavior we have in other enqueue* methods.
      // We also need to ignore callbacks in componentWillMount. See
      // enqueueUpdates.
      if (!internalInstance) {
        return null;
      }
  
      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState. Alternatively, we can disallow
      // componentWillMount during server-side rendering.
      enqueueUpdate$1(internalInstance);
    },
  
    enqueueCallbackInternal: function (internalInstance, callback) {
      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
      enqueueUpdate$1(internalInstance);
    },
  
    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @internal
     */
    enqueueForceUpdate: function (publicInstance) {
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');
  
      if (!internalInstance) {
        return;
      }
  
      internalInstance._pendingForceUpdate = true;
  
      enqueueUpdate$1(internalInstance);
    },
  
    /**
     * Replaces all of the state. Always use this or `setState` to mutate state.
     * You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} completeState Next state.
     * @internal
     */
    enqueueReplaceState: function (publicInstance, completeState, callback) {
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');
  
      if (!internalInstance) {
        return;
      }
  
      internalInstance._pendingStateQueue = [completeState];
      internalInstance._pendingReplaceState = true;
  
      // Future-proof 15.5
      if (callback !== undefined && callback !== null) {
        ReactUpdateQueue.validateCallback(callback, 'replaceState');
        if (internalInstance._pendingCallbacks) {
          internalInstance._pendingCallbacks.push(callback);
        } else {
          internalInstance._pendingCallbacks = [callback];
        }
      }
  
      enqueueUpdate$1(internalInstance);
    },
  
    /**
     * Sets a subset of the state. This only exists because _pendingState is
     * internal. This provides a merging strategy that is not available to deep
     * properties which is confusing. TODO: Expose pendingState or don't use it
     * during the merge.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object} partialState Next partial state to be merged with state.
     * @internal
     */
    enqueueSetState: function (publicInstance, partialState) {
      {
        ReactInstrumentation$1.debugTool.onSetState();
        warning_1(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().');
      }
  
      var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');
  
      if (!internalInstance) {
        return;
      }
  
      var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
      queue.push(partialState);
  
      enqueueUpdate$1(internalInstance);
    },
  
    enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
      internalInstance._pendingElement = nextElement;
      // TODO: introduce _pendingContext instead of setting it directly.
      internalInstance._context = nextContext;
      enqueueUpdate$1(internalInstance);
    },
  
    validateCallback: function (callback, callerName) {
      !(!callback || typeof callback === 'function') ? invariant_1(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : void 0;
    }
  };
  
  var ReactUpdateQueue_1 = ReactUpdateQueue;
  
  function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
  
  
  
  
  
  function warnNoop$1(publicInstance, callerName) {
    {
      var constructor = publicInstance.constructor;
      warning_1(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass');
    }
  }
  
  /**
   * This is the update queue used for server rendering.
   * It delegates to ReactUpdateQueue while server rendering is in progress and
   * switches to ReactNoopUpdateQueue after the transaction has completed.
   * @class ReactServerUpdateQueue
   * @param {Transaction} transaction
   */
  
  var ReactServerUpdateQueue = function () {
    function ReactServerUpdateQueue(transaction) {
      _classCallCheck$2(this, ReactServerUpdateQueue);
  
      this.transaction = transaction;
    }
  
    /**
     * Checks whether or not this composite component is mounted.
     * @param {ReactClass} publicInstance The instance we want to test.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
  
  
    ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
      return false;
    };
  
    /**
     * Enqueue a callback that will be executed after all the pending updates
     * have processed.
     *
     * @param {ReactClass} publicInstance The instance to use as `this` context.
     * @param {?function} callback Called after state is updated.
     * @internal
     */
  
  
    ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
      if (this.transaction.isInTransaction()) {
        ReactUpdateQueue_1.enqueueCallback(publicInstance, callback, callerName);
      }
    };
  
    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @internal
     */
  
  
    ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
      if (this.transaction.isInTransaction()) {
        ReactUpdateQueue_1.enqueueForceUpdate(publicInstance);
      } else {
        warnNoop$1(publicInstance, 'forceUpdate');
      }
    };
  
    /**
     * Replaces all of the state. Always use this or `setState` to mutate state.
     * You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object|function} completeState Next state.
     * @internal
     */
  
  
    ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
      if (this.transaction.isInTransaction()) {
        ReactUpdateQueue_1.enqueueReplaceState(publicInstance, completeState);
      } else {
        warnNoop$1(publicInstance, 'replaceState');
      }
    };
  
    /**
     * Sets a subset of the state. This only exists because _pendingState is
     * internal. This provides a merging strategy that is not available to deep
     * properties which is confusing. TODO: Expose pendingState or don't use it
     * during the merge.
     *
     * @param {ReactClass} publicInstance The instance that should rerender.
     * @param {object|function} partialState Next partial state to be merged with state.
     * @internal
     */
  
  
    ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
      if (this.transaction.isInTransaction()) {
        ReactUpdateQueue_1.enqueueSetState(publicInstance, partialState);
      } else {
        warnNoop$1(publicInstance, 'setState');
      }
    };
  
    return ReactServerUpdateQueue;
  }();
  
  var ReactServerUpdateQueue_1 = ReactServerUpdateQueue;
  
  /**
   * Executed within the scope of the `Transaction` instance. Consider these as
   * being member methods, but with an implied ordering while being isolated from
   * each other.
   */
  var TRANSACTION_WRAPPERS$1 = [];
  
  {
    TRANSACTION_WRAPPERS$1.push({
      initialize: ReactInstrumentation$1.debugTool.onBeginFlush,
      close: ReactInstrumentation$1.debugTool.onEndFlush
    });
  }
  
  var noopCallbackQueue = {
    enqueue: function () {}
  };
  
  /**
   * @class ReactServerRenderingTransaction
   * @param {boolean} renderToStaticMarkup
   */
  function ReactServerRenderingTransaction(renderToStaticMarkup) {
    this.reinitializeTransaction();
    this.renderToStaticMarkup = renderToStaticMarkup;
    this.useCreateElement = false;
    this.updateQueue = new ReactServerUpdateQueue_1(this);
  }
  
  var Mixin = {
    /**
     * @see Transaction
     * @abstract
     * @final
     * @return {array} Empty list of operation wrap procedures.
     */
    getTransactionWrappers: function () {
      return TRANSACTION_WRAPPERS$1;
    },
  
    /**
     * @return {object} The queue to collect `onDOMReady` callbacks with.
     */
    getReactMountReady: function () {
      return noopCallbackQueue;
    },
  
    /**
     * @return {object} The queue to collect React async events.
     */
    getUpdateQueue: function () {
      return this.updateQueue;
    },
  
    /**
     * `PooledClass` looks for this, and will invoke this before allowing this
     * instance to be reused.
     */
    destructor: function () {},
  
    checkpoint: function () {},
  
    rollback: function () {}
  };
  
  objectAssign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);
  
  PooledClass_1$2.addPoolingTo(ReactServerRenderingTransaction);
  
  var ReactServerRenderingTransaction_1 = ReactServerRenderingTransaction;
  
  var validateDOMNesting = emptyFunction_1;
  
  {
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
  
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
  
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
  
    // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
    // TODO: Distinguish by namespace here -- for <title>, including it here
    // errs on the side of fewer warnings
    'foreignObject', 'desc', 'title'];
  
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat(['button']);
  
    // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
  
    var emptyAncestorInfo = {
      current: null,
  
      formTag: null,
      aTagInScope: null,
      buttonTagInScope: null,
      nobrTagInScope: null,
      pTagInButtonScope: null,
  
      listItemTagAutoclosing: null,
      dlItemTagAutoclosing: null
    };
  
    var updatedAncestorInfo = function (oldInfo, tag, instance) {
      var ancestorInfo = objectAssign({}, oldInfo || emptyAncestorInfo);
      var info = { tag: tag, instance: instance };
  
      if (inScopeTags.indexOf(tag) !== -1) {
        ancestorInfo.aTagInScope = null;
        ancestorInfo.buttonTagInScope = null;
        ancestorInfo.nobrTagInScope = null;
      }
      if (buttonScopeTags.indexOf(tag) !== -1) {
        ancestorInfo.pTagInButtonScope = null;
      }
  
      // See rules for 'li', 'dd', 'dt' start tags in
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
      if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
        ancestorInfo.listItemTagAutoclosing = null;
        ancestorInfo.dlItemTagAutoclosing = null;
      }
  
      ancestorInfo.current = info;
  
      if (tag === 'form') {
        ancestorInfo.formTag = info;
      }
      if (tag === 'a') {
        ancestorInfo.aTagInScope = info;
      }
      if (tag === 'button') {
        ancestorInfo.buttonTagInScope = info;
      }
      if (tag === 'nobr') {
        ancestorInfo.nobrTagInScope = info;
      }
      if (tag === 'p') {
        ancestorInfo.pTagInButtonScope = info;
      }
      if (tag === 'li') {
        ancestorInfo.listItemTagAutoclosing = info;
      }
      if (tag === 'dd' || tag === 'dt') {
        ancestorInfo.dlItemTagAutoclosing = info;
      }
  
      return ancestorInfo;
    };
  
    /**
     * Returns whether
     */
    var isTagValidWithParent = function (tag, parentTag) {
      // First, let's check if we're in an unusual parsing mode...
      switch (parentTag) {
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
        case 'select':
          return tag === 'option' || tag === 'optgroup' || tag === '#text';
        case 'optgroup':
          return tag === 'option' || tag === '#text';
        // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
        // but
        case 'option':
          return tag === '#text';
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
        // No special behavior since these rules fall back to "in body" mode for
        // all except special table nodes which cause bad parsing behavior anyway.
  
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
        case 'tr':
          return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
        case 'tbody':
        case 'thead':
        case 'tfoot':
          return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
        case 'colgroup':
          return tag === 'col' || tag === 'template';
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
        case 'table':
          return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
        case 'head':
          return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
        // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
        case 'html':
          return tag === 'head' || tag === 'body';
        case '#document':
          return tag === 'html';
      }
  
      // Probably in the "in body" parsing mode, so we outlaw only tag combos
      // where the parsing rules cause implicit opens or closes to be added.
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
      switch (tag) {
        case 'h1':
        case 'h2':
        case 'h3':
        case 'h4':
        case 'h5':
        case 'h6':
          return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
  
        case 'rp':
        case 'rt':
          return impliedEndTags.indexOf(parentTag) === -1;
  
        case 'body':
        case 'caption':
        case 'col':
        case 'colgroup':
        case 'frame':
        case 'head':
        case 'html':
        case 'tbody':
        case 'td':
        case 'tfoot':
        case 'th':
        case 'thead':
        case 'tr':
          // These tags are only valid with a few parents that have special child
          // parsing rules -- if we're down here, then none of those matched and
          // so we allow it only if we don't know what the parent is, as all other
          // cases are invalid.
          return parentTag == null;
      }
  
      return true;
    };
  
    /**
     * Returns whether
     */
    var findInvalidAncestorForTag = function (tag, ancestorInfo) {
      switch (tag) {
        case 'address':
        case 'article':
        case 'aside':
        case 'blockquote':
        case 'center':
        case 'details':
        case 'dialog':
        case 'dir':
        case 'div':
        case 'dl':
        case 'fieldset':
        case 'figcaption':
        case 'figure':
        case 'footer':
        case 'header':
        case 'hgroup':
        case 'main':
        case 'menu':
        case 'nav':
        case 'ol':
        case 'p':
        case 'section':
        case 'summary':
        case 'ul':
        case 'pre':
        case 'listing':
        case 'table':
        case 'hr':
        case 'xmp':
        case 'h1':
        case 'h2':
        case 'h3':
        case 'h4':
        case 'h5':
        case 'h6':
          return ancestorInfo.pTagInButtonScope;
  
        case 'form':
          return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
  
        case 'li':
          return ancestorInfo.listItemTagAutoclosing;
  
        case 'dd':
        case 'dt':
          return ancestorInfo.dlItemTagAutoclosing;
  
        case 'button':
          return ancestorInfo.buttonTagInScope;
  
        case 'a':
          // Spec says something about storing a list of markers, but it sounds
          // equivalent to this check.
          return ancestorInfo.aTagInScope;
  
        case 'nobr':
          return ancestorInfo.nobrTagInScope;
      }
  
      return null;
    };
  
    /**
     * Given a ReactCompositeComponent instance, return a list of its recursive
     * owners, starting at the root and ending with the instance itself.
     */
    var findOwnerStack = function (instance) {
      if (!instance) {
        return [];
      }
  
      var stack = [];
      do {
        stack.push(instance);
      } while (instance = instance._currentElement._owner);
      stack.reverse();
      return stack;
    };
  
    var didWarn = {};
  
    validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
      ancestorInfo = ancestorInfo || emptyAncestorInfo;
      var parentInfo = ancestorInfo.current;
      var parentTag = parentInfo && parentInfo.tag;
  
      if (childText != null) {
        warning_1(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null');
        childTag = '#text';
      }
  
      var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
      var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
      var problematic = invalidParent || invalidAncestor;
  
      if (problematic) {
        var ancestorTag = problematic.tag;
        var ancestorInstance = problematic.instance;
  
        var childOwner = childInstance && childInstance._currentElement._owner;
        var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
  
        var childOwners = findOwnerStack(childOwner);
        var ancestorOwners = findOwnerStack(ancestorOwner);
  
        var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
        var i;
  
        var deepestCommon = -1;
        for (i = 0; i < minStackLen; i++) {
          if (childOwners[i] === ancestorOwners[i]) {
            deepestCommon = i;
          } else {
            break;
          }
        }
  
        var UNKNOWN = '(unknown)';
        var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
          return inst.getName() || UNKNOWN;
        });
        var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
          return inst.getName() || UNKNOWN;
        });
        var ownerInfo = [].concat(
        // If the parent and child instances have a common owner ancestor, start
        // with that -- otherwise we just start with the parent's owners.
        deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
        // If we're warning about an invalid (non-parent) ancestry, add '...'
        invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');
  
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
        if (didWarn[warnKey]) {
          return;
        }
        didWarn[warnKey] = true;
  
        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
          if (/\S/.test(childText)) {
            tagDisplayName = 'Text nodes';
          } else {
            tagDisplayName = 'Whitespace text nodes';
            whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
          }
        } else {
          tagDisplayName = '<' + childTag + '>';
        }
  
        if (invalidParent) {
          var info = '';
          if (ancestorTag === 'table' && childTag === 'tr') {
            info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
          }
          warning_1(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info);
        } else {
          warning_1(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo);
        }
      }
    };
  
    validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;
  
    // For testing
    validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
      ancestorInfo = ancestorInfo || emptyAncestorInfo;
      var parentInfo = ancestorInfo.current;
      var parentTag = parentInfo && parentInfo.tag;
      return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
    };
  }
  
  var validateDOMNesting_1 = validateDOMNesting;
  
  var Flags$1 = ReactDOMComponentFlags_1;
  var deleteListener = EventPluginHub_1.deleteListener;
  var getNode = ReactDOMComponentTree_1.getNodeFromInstance;
  var listenTo = ReactBrowserEventEmitter_1.listenTo;
  var registrationNameModules = EventPluginRegistry_1.registrationNameModules;
  
  // For quickly matching children type, to test if can be treated as content.
  var CONTENT_TYPES = { string: true, number: true };
  
  var STYLE = 'style';
  var HTML = '__html';
  var RESERVED_PROPS$1 = {
    children: null,
    dangerouslySetInnerHTML: null,
    suppressContentEditableWarning: null
  };
  
  // Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
  var DOC_FRAGMENT_TYPE = 11;
  
  function getDeclarationErrorAddendum$1(internalInstance) {
    if (internalInstance) {
      var owner = internalInstance._currentElement._owner || null;
      if (owner) {
        var name = owner.getName();
        if (name) {
          return ' This DOM node was rendered by `' + name + '`.';
        }
      }
    }
    return '';
  }
  
  function friendlyStringify(obj) {
    if (typeof obj === 'object') {
      if (Array.isArray(obj)) {
        return '[' + obj.map(friendlyStringify).join(', ') + ']';
      } else {
        var pairs = [];
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
            pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
          }
        }
        return '{' + pairs.join(', ') + '}';
      }
    } else if (typeof obj === 'string') {
      return JSON.stringify(obj);
    } else if (typeof obj === 'function') {
      return '[function object]';
    }
    // Differs from JSON.stringify in that undefined because undefined and that
    // inf and nan don't become null
    return String(obj);
  }
  
  var styleMutationWarning = {};
  
  function checkAndWarnForMutatedStyle(style1, style2, component) {
    if (style1 == null || style2 == null) {
      return;
    }
    if (shallowEqual_1(style1, style2)) {
      return;
    }
  
    var componentName = component._tag;
    var owner = component._currentElement._owner;
    var ownerName;
    if (owner) {
      ownerName = owner.getName();
    }
  
    var hash = ownerName + '|' + componentName;
  
    if (styleMutationWarning.hasOwnProperty(hash)) {
      return;
    }
  
    styleMutationWarning[hash] = true;
  
    warning_1(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2));
  }
  
  /**
   * @param {object} component
   * @param {?object} props
   */
  function assertValidProps(component, props) {
    if (!props) {
      return;
    }
    // Note the use of `==` which checks for null or undefined.
    if (voidElementTags[component._tag]) {
      !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant_1(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
    }
    if (props.dangerouslySetInnerHTML != null) {
      !(props.children == null) ? invariant_1(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
      !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? invariant_1(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
    }
    {
      warning_1(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
      warning_1(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
      warning_1(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
    }
    !(props.style == null || typeof props.style === 'object') ? invariant_1(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum$1(component)) : void 0;
  }
  
  function enqueuePutListener(inst, registrationName, listener, transaction) {
    if (transaction instanceof ReactServerRenderingTransaction_1) {
      return;
    }
    {
      // IE8 has no API for event capturing and the `onScroll` event doesn't
      // bubble.
      warning_1(registrationName !== 'onScroll' || isEventSupported_1('scroll', true), "This browser doesn't support the `onScroll` event");
    }
    var containerInfo = inst._hostContainerInfo;
    var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
    var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
    listenTo(registrationName, doc);
    transaction.getReactMountReady().enqueue(putListener, {
      inst: inst,
      registrationName: registrationName,
      listener: listener
    });
  }
  
  function putListener() {
    var listenerToPut = this;
    EventPluginHub_1.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
  }
  
  function inputPostMount() {
    var inst = this;
    ReactDOMInput_1.postMountWrapper(inst);
  }
  
  function textareaPostMount() {
    var inst = this;
    ReactDOMTextarea_1.postMountWrapper(inst);
  }
  
  function optionPostMount() {
    var inst = this;
    ReactDOMOption_1.postMountWrapper(inst);
  }
  
  var setAndValidateContentChildDev = emptyFunction_1;
  {
    setAndValidateContentChildDev = function (content) {
      var hasExistingContent = this._contentDebugID != null;
      var debugID = this._debugID;
      // This ID represents the inlined child that has no backing instance:
      var contentDebugID = -debugID;
  
      if (content == null) {
        if (hasExistingContent) {
          ReactInstrumentation$1.debugTool.onUnmountComponent(this._contentDebugID);
        }
        this._contentDebugID = null;
        return;
      }
  
      validateDOMNesting_1(null, String(content), this, this._ancestorInfo);
      this._contentDebugID = contentDebugID;
      if (hasExistingContent) {
        ReactInstrumentation$1.debugTool.onBeforeUpdateComponent(contentDebugID, content);
        ReactInstrumentation$1.debugTool.onUpdateComponent(contentDebugID);
      } else {
        ReactInstrumentation$1.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
        ReactInstrumentation$1.debugTool.onMountComponent(contentDebugID);
        ReactInstrumentation$1.debugTool.onSetChildren(debugID, [contentDebugID]);
      }
    };
  }
  
  // There are so many media events, it makes sense to just
  // maintain a list rather than create a `trapBubbledEvent` for each
  var mediaEvents = {
    topAbort: 'abort',
    topCanPlay: 'canplay',
    topCanPlayThrough: 'canplaythrough',
    topDurationChange: 'durationchange',
    topEmptied: 'emptied',
    topEncrypted: 'encrypted',
    topEnded: 'ended',
    topError: 'error',
    topLoadedData: 'loadeddata',
    topLoadedMetadata: 'loadedmetadata',
    topLoadStart: 'loadstart',
    topPause: 'pause',
    topPlay: 'play',
    topPlaying: 'playing',
    topProgress: 'progress',
    topRateChange: 'ratechange',
    topSeeked: 'seeked',
    topSeeking: 'seeking',
    topStalled: 'stalled',
    topSuspend: 'suspend',
    topTimeUpdate: 'timeupdate',
    topVolumeChange: 'volumechange',
    topWaiting: 'waiting'
  };
  
  function trackInputValue() {
    inputValueTracking_1.track(this);
  }
  
  function trapBubbledEventsLocal() {
    var inst = this;
    // If a component renders to null or if another component fatals and causes
    // the state of the tree to be corrupted, `node` here can be null.
    !inst._rootNodeID ? invariant_1(false, 'Must be mounted to trap events') : void 0;
    var node = getNode(inst);
    !node ? invariant_1(false, 'trapBubbledEvent(...): Requires node to be rendered.') : void 0;
  
    switch (inst._tag) {
      case 'iframe':
      case 'object':
        inst._wrapperState.listeners = [ReactBrowserEventEmitter_1.trapBubbledEvent('topLoad', 'load', node)];
        break;
      case 'video':
      case 'audio':
        inst._wrapperState.listeners = [];
        // Create listener for each media event
        for (var event in mediaEvents) {
          if (mediaEvents.hasOwnProperty(event)) {
            inst._wrapperState.listeners.push(ReactBrowserEventEmitter_1.trapBubbledEvent(event, mediaEvents[event], node));
          }
        }
        break;
      case 'source':
        inst._wrapperState.listeners = [ReactBrowserEventEmitter_1.trapBubbledEvent('topError', 'error', node)];
        break;
      case 'img':
        inst._wrapperState.listeners = [ReactBrowserEventEmitter_1.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter_1.trapBubbledEvent('topLoad', 'load', node)];
        break;
      case 'form':
        inst._wrapperState.listeners = [ReactBrowserEventEmitter_1.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter_1.trapBubbledEvent('topSubmit', 'submit', node)];
        break;
      case 'input':
      case 'select':
      case 'textarea':
        inst._wrapperState.listeners = [ReactBrowserEventEmitter_1.trapBubbledEvent('topInvalid', 'invalid', node)];
        break;
    }
  }
  
  function postUpdateSelectWrapper() {
    ReactDOMSelect_1.postUpdateWrapper(this);
  }
  
  // For HTML, certain tags should omit their close tag. We keep a whitelist for
  // those special-case tags.
  
  var omittedCloseTags = {
    area: true,
    base: true,
    br: true,
    col: true,
    embed: true,
    hr: true,
    img: true,
    input: true,
    keygen: true,
    link: true,
    meta: true,
    param: true,
    source: true,
    track: true,
    wbr: true
    // NOTE: menuitem's close tag should be omitted, but that causes problems.
  };
  
  var newlineEatingTags = {
    listing: true,
    pre: true,
    textarea: true
  };
  
  // For HTML, certain tags cannot have children. This has the same purpose as
  // `omittedCloseTags` except that `menuitem` should still have its closing tag.
  
  var voidElementTags = objectAssign({
    menuitem: true
  }, omittedCloseTags);
  
  // We accept any tag to be rendered but since this gets injected into arbitrary
  // HTML, we want to make sure that it's a safe tag.
  // http://www.w3.org/TR/REC-xml/#NT-Name
  
  var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
  var validatedTagCache = {};
  var hasOwnProperty$17 = {}.hasOwnProperty;
  
  function validateDangerousTag(tag) {
    if (!hasOwnProperty$17.call(validatedTagCache, tag)) {
      !VALID_TAG_REGEX.test(tag) ? invariant_1(false, 'Invalid tag: %s', tag) : void 0;
      validatedTagCache[tag] = true;
    }
  }
  
  function isCustomComponent(tagName, props) {
    return tagName.indexOf('-') >= 0 || props.is != null;
  }
  
  var globalIdCounter = 1;
  
  /**
   * Creates a new React class that is idempotent and capable of containing other
   * React components. It accepts event listeners and DOM properties that are
   * valid according to `DOMProperty`.
   *
   *  - Event listeners: `onClick`, `onMouseDown`, etc.
   *  - DOM properties: `className`, `name`, `title`, etc.
   *
   * The `style` property functions differently from the DOM API. It accepts an
   * object mapping of style properties to values.
   *
   * @constructor ReactDOMComponent
   * @extends ReactMultiChild
   */
  function ReactDOMComponent(element) {
    var tag = element.type;
    validateDangerousTag(tag);
    this._currentElement = element;
    this._tag = tag.toLowerCase();
    this._namespaceURI = null;
    this._renderedChildren = null;
    this._previousStyle = null;
    this._previousStyleCopy = null;
    this._hostNode = null;
    this._hostParent = null;
    this._rootNodeID = 0;
    this._domID = 0;
    this._hostContainerInfo = null;
    this._wrapperState = null;
    this._topLevelWrapper = null;
    this._flags = 0;
    {
      this._ancestorInfo = null;
      setAndValidateContentChildDev.call(this, null);
    }
  }
  
  ReactDOMComponent.displayName = 'ReactDOMComponent';
  
  ReactDOMComponent.Mixin = {
    /**
     * Generates root tag markup then recurses. This method has side effects and
     * is not idempotent.
     *
     * @internal
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {?ReactDOMComponent} the parent component instance
     * @param {?object} info about the host container
     * @param {object} context
     * @return {string} The computed markup.
     */
    mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
      this._rootNodeID = globalIdCounter++;
      this._domID = hostContainerInfo._idCounter++;
      this._hostParent = hostParent;
      this._hostContainerInfo = hostContainerInfo;
  
      var props = this._currentElement.props;
  
      switch (this._tag) {
        case 'audio':
        case 'form':
        case 'iframe':
        case 'img':
        case 'link':
        case 'object':
        case 'source':
        case 'video':
          this._wrapperState = {
            listeners: null
          };
          transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
          break;
        case 'input':
          ReactDOMInput_1.mountWrapper(this, props, hostParent);
          props = ReactDOMInput_1.getHostProps(this, props);
          transaction.getReactMountReady().enqueue(trackInputValue, this);
          transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
          break;
        case 'option':
          ReactDOMOption_1.mountWrapper(this, props, hostParent);
          props = ReactDOMOption_1.getHostProps(this, props);
          break;
        case 'select':
          ReactDOMSelect_1.mountWrapper(this, props, hostParent);
          props = ReactDOMSelect_1.getHostProps(this, props);
          transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
          break;
        case 'textarea':
          ReactDOMTextarea_1.mountWrapper(this, props, hostParent);
          props = ReactDOMTextarea_1.getHostProps(this, props);
          transaction.getReactMountReady().enqueue(trackInputValue, this);
          transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
          break;
      }
  
      assertValidProps(this, props);
  
      // We create tags in the namespace of their parent container, except HTML
      // tags get no namespace.
      var namespaceURI;
      var parentTag;
      if (hostParent != null) {
        namespaceURI = hostParent._namespaceURI;
        parentTag = hostParent._tag;
      } else if (hostContainerInfo._tag) {
        namespaceURI = hostContainerInfo._namespaceURI;
        parentTag = hostContainerInfo._tag;
      }
      if (namespaceURI == null || namespaceURI === DOMNamespaces_1.svg && parentTag === 'foreignobject') {
        namespaceURI = DOMNamespaces_1.html;
      }
      if (namespaceURI === DOMNamespaces_1.html) {
        if (this._tag === 'svg') {
          namespaceURI = DOMNamespaces_1.svg;
        } else if (this._tag === 'math') {
          namespaceURI = DOMNamespaces_1.mathml;
        }
      }
      this._namespaceURI = namespaceURI;
  
      {
        var parentInfo;
        if (hostParent != null) {
          parentInfo = hostParent._ancestorInfo;
        } else if (hostContainerInfo._tag) {
          parentInfo = hostContainerInfo._ancestorInfo;
        }
        if (parentInfo) {
          // parentInfo should always be present except for the top-level
          // component when server rendering
          validateDOMNesting_1(this._tag, null, this, parentInfo);
        }
        this._ancestorInfo = validateDOMNesting_1.updatedAncestorInfo(parentInfo, this._tag, this);
      }
  
      var mountImage;
      if (transaction.useCreateElement) {
        var ownerDocument = hostContainerInfo._ownerDocument;
        var el;
        if (namespaceURI === DOMNamespaces_1.html) {
          if (this._tag === 'script') {
            // Create the script via .innerHTML so its "parser-inserted" flag is
            // set to true and it does not execute
            var div = ownerDocument.createElement('div');
            var type = this._currentElement.type;
            div.innerHTML = '<' + type + '></' + type + '>';
            el = div.removeChild(div.firstChild);
          } else if (props.is) {
            el = ownerDocument.createElement(this._currentElement.type, props.is);
          } else {
            // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
            // See discussion in https://github.com/facebook/react/pull/6896
            // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
            el = ownerDocument.createElement(this._currentElement.type);
          }
        } else {
          el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
        }
        ReactDOMComponentTree_1.precacheNode(this, el);
        this._flags |= Flags$1.hasCachedChildNodes;
        if (!this._hostParent) {
          DOMPropertyOperations_1.setAttributeForRoot(el);
        }
        this._updateDOMProperties(null, props, transaction);
        var lazyTree = DOMLazyTree_1(el);
        this._createInitialChildren(transaction, props, context, lazyTree);
        mountImage = lazyTree;
      } else {
        var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
        var tagContent = this._createContentMarkup(transaction, props, context);
        if (!tagContent && omittedCloseTags[this._tag]) {
          mountImage = tagOpen + '/>';
        } else {
          mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
        }
      }
  
      switch (this._tag) {
        case 'input':
          transaction.getReactMountReady().enqueue(inputPostMount, this);
          if (props.autoFocus) {
            transaction.getReactMountReady().enqueue(AutoFocusUtils_1.focusDOMComponent, this);
          }
          break;
        case 'textarea':
          transaction.getReactMountReady().enqueue(textareaPostMount, this);
          if (props.autoFocus) {
            transaction.getReactMountReady().enqueue(AutoFocusUtils_1.focusDOMComponent, this);
          }
          break;
        case 'select':
          if (props.autoFocus) {
            transaction.getReactMountReady().enqueue(AutoFocusUtils_1.focusDOMComponent, this);
          }
          break;
        case 'button':
          if (props.autoFocus) {
            transaction.getReactMountReady().enqueue(AutoFocusUtils_1.focusDOMComponent, this);
          }
          break;
        case 'option':
          transaction.getReactMountReady().enqueue(optionPostMount, this);
          break;
      }
  
      return mountImage;
    },
  
    /**
     * Creates markup for the open tag and all attributes.
     *
     * This method has side effects because events get registered.
     *
     * Iterating over object properties is faster than iterating over arrays.
     * @see http://jsperf.com/obj-vs-arr-iteration
     *
     * @private
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {object} props
     * @return {string} Markup of opening tag.
     */
    _createOpenTagMarkupAndPutListeners: function (transaction, props) {
      var ret = '<' + this._currentElement.type;
  
      for (var propKey in props) {
        if (!props.hasOwnProperty(propKey)) {
          continue;
        }
        var propValue = props[propKey];
        if (propValue == null) {
          continue;
        }
        if (registrationNameModules.hasOwnProperty(propKey)) {
          if (propValue) {
            enqueuePutListener(this, propKey, propValue, transaction);
          }
        } else {
          if (propKey === STYLE) {
            if (propValue) {
              {
                // See `_updateDOMProperties`. style block
                this._previousStyle = propValue;
              }
              propValue = this._previousStyleCopy = objectAssign({}, props.style);
            }
            propValue = CSSPropertyOperations_1.createMarkupForStyles(propValue, this);
          }
          var markup = null;
          if (this._tag != null && isCustomComponent(this._tag, props)) {
            if (!RESERVED_PROPS$1.hasOwnProperty(propKey)) {
              markup = DOMPropertyOperations_1.createMarkupForCustomAttribute(propKey, propValue);
            }
          } else {
            markup = DOMPropertyOperations_1.createMarkupForProperty(propKey, propValue);
          }
          if (markup) {
            ret += ' ' + markup;
          }
        }
      }
  
      // For static pages, no need to put React ID and checksum. Saves lots of
      // bytes.
      if (transaction.renderToStaticMarkup) {
        return ret;
      }
  
      if (!this._hostParent) {
        ret += ' ' + DOMPropertyOperations_1.createMarkupForRoot();
      }
      ret += ' ' + DOMPropertyOperations_1.createMarkupForID(this._domID);
      return ret;
    },
  
    /**
     * Creates markup for the content between the tags.
     *
     * @private
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {object} props
     * @param {object} context
     * @return {string} Content markup.
     */
    _createContentMarkup: function (transaction, props, context) {
      var ret = '';
  
      // Intentional use of != to avoid catching zero/false.
      var innerHTML = props.dangerouslySetInnerHTML;
      if (innerHTML != null) {
        if (innerHTML.__html != null) {
          ret = innerHTML.__html;
        }
      } else {
        var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
        var childrenToUse = contentToUse != null ? null : props.children;
        if (contentToUse != null) {
          // TODO: Validate that text is allowed as a child of this node
          ret = escapeTextContentForBrowser_1(contentToUse);
          {
            setAndValidateContentChildDev.call(this, contentToUse);
          }
        } else if (childrenToUse != null) {
          var mountImages = this.mountChildren(childrenToUse, transaction, context);
          ret = mountImages.join('');
        }
      }
      if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
        // text/html ignores the first character in these tags if it's a newline
        // Prefer to break application/xml over text/html (for now) by adding
        // a newline specifically to get eaten by the parser. (Alternately for
        // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
        // \r is normalized out by HTMLTextAreaElement#value.)
        // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
        // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
        // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
        // See: Parsing of "textarea" "listing" and "pre" elements
        //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
        return '\n' + ret;
      } else {
        return ret;
      }
    },
  
    _createInitialChildren: function (transaction, props, context, lazyTree) {
      // Intentional use of != to avoid catching zero/false.
      var innerHTML = props.dangerouslySetInnerHTML;
      if (innerHTML != null) {
        if (innerHTML.__html != null) {
          DOMLazyTree_1.queueHTML(lazyTree, innerHTML.__html);
        }
      } else {
        var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
        var childrenToUse = contentToUse != null ? null : props.children;
        // TODO: Validate that text is allowed as a child of this node
        if (contentToUse != null) {
          // Avoid setting textContent when the text is empty. In IE11 setting
          // textContent on a text area will cause the placeholder to not
          // show within the textarea until it has been focused and blurred again.
          // https://github.com/facebook/react/issues/6731#issuecomment-254874553
          if (contentToUse !== '') {
            {
              setAndValidateContentChildDev.call(this, contentToUse);
            }
            DOMLazyTree_1.queueText(lazyTree, contentToUse);
          }
        } else if (childrenToUse != null) {
          var mountImages = this.mountChildren(childrenToUse, transaction, context);
          for (var i = 0; i < mountImages.length; i++) {
            DOMLazyTree_1.queueChild(lazyTree, mountImages[i]);
          }
        }
      }
    },
  
    /**
     * Receives a next element and updates the component.
     *
     * @internal
     * @param {ReactElement} nextElement
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {object} context
     */
    receiveComponent: function (nextElement, transaction, context) {
      var prevElement = this._currentElement;
      this._currentElement = nextElement;
      this.updateComponent(transaction, prevElement, nextElement, context);
    },
  
    /**
     * Updates a DOM component after it has already been allocated and
     * attached to the DOM. Reconciles the root DOM node, then recurses.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {ReactElement} prevElement
     * @param {ReactElement} nextElement
     * @internal
     * @overridable
     */
    updateComponent: function (transaction, prevElement, nextElement, context) {
      var lastProps = prevElement.props;
      var nextProps = this._currentElement.props;
  
      switch (this._tag) {
        case 'input':
          lastProps = ReactDOMInput_1.getHostProps(this, lastProps);
          nextProps = ReactDOMInput_1.getHostProps(this, nextProps);
          break;
        case 'option':
          lastProps = ReactDOMOption_1.getHostProps(this, lastProps);
          nextProps = ReactDOMOption_1.getHostProps(this, nextProps);
          break;
        case 'select':
          lastProps = ReactDOMSelect_1.getHostProps(this, lastProps);
          nextProps = ReactDOMSelect_1.getHostProps(this, nextProps);
          break;
        case 'textarea':
          lastProps = ReactDOMTextarea_1.getHostProps(this, lastProps);
          nextProps = ReactDOMTextarea_1.getHostProps(this, nextProps);
          break;
      }
  
      assertValidProps(this, nextProps);
      this._updateDOMProperties(lastProps, nextProps, transaction);
      this._updateDOMChildren(lastProps, nextProps, transaction, context);
  
      switch (this._tag) {
        case 'input':
          // Update the wrapper around inputs *after* updating props. This has to
          // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
          // raise warnings and prevent the new value from being assigned.
          ReactDOMInput_1.updateWrapper(this);
  
          // We also check that we haven't missed a value update, such as a
          // Radio group shifting the checked value to another named radio input.
          inputValueTracking_1.updateValueIfChanged(this);
          break;
        case 'textarea':
          ReactDOMTextarea_1.updateWrapper(this);
          break;
        case 'select':
          // <select> value update needs to occur after <option> children
          // reconciliation
          transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
          break;
      }
    },
  
    /**
     * Reconciles the properties by detecting differences in property values and
     * updating the DOM as necessary. This function is probably the single most
     * critical path for performance optimization.
     *
     * TODO: Benchmark whether checking for changed values in memory actually
     *       improves performance (especially statically positioned elements).
     * TODO: Benchmark the effects of putting this at the top since 99% of props
     *       do not change for a given reconciliation.
     * TODO: Benchmark areas that can be improved with caching.
     *
     * @private
     * @param {object} lastProps
     * @param {object} nextProps
     * @param {?DOMElement} node
     */
    _updateDOMProperties: function (lastProps, nextProps, transaction) {
      var propKey;
      var styleName;
      var styleUpdates;
      for (propKey in lastProps) {
        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
          continue;
        }
        if (propKey === STYLE) {
          var lastStyle = this._previousStyleCopy;
          for (styleName in lastStyle) {
            if (lastStyle.hasOwnProperty(styleName)) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          this._previousStyleCopy = null;
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (lastProps[propKey]) {
            // Only call deleteListener if there was a listener previously or
            // else willDeleteListener gets called when there wasn't actually a
            // listener (e.g., onClick={null})
            deleteListener(this, propKey);
          }
        } else if (isCustomComponent(this._tag, lastProps)) {
          if (!RESERVED_PROPS$1.hasOwnProperty(propKey)) {
            DOMPropertyOperations_1.deleteValueForAttribute(getNode(this), propKey);
          }
        } else if (DOMProperty_1.properties[propKey] || DOMProperty_1.isCustomAttribute(propKey)) {
          DOMPropertyOperations_1.deleteValueForProperty(getNode(this), propKey);
        }
      }
      for (propKey in nextProps) {
        var nextProp = nextProps[propKey];
        var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
          continue;
        }
        if (propKey === STYLE) {
          if (nextProp) {
            {
              checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
              this._previousStyle = nextProp;
            }
            nextProp = this._previousStyleCopy = objectAssign({}, nextProp);
          } else {
            this._previousStyleCopy = null;
          }
          if (lastProp) {
            // Unset styles on `lastProp` but not on `nextProp`.
            for (styleName in lastProp) {
              if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                styleUpdates = styleUpdates || {};
                styleUpdates[styleName] = '';
              }
            }
            // Update styles that changed since `lastProp`.
            for (styleName in nextProp) {
              if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                styleUpdates = styleUpdates || {};
                styleUpdates[styleName] = nextProp[styleName];
              }
            }
          } else {
            // Relies on `updateStylesByID` not mutating `styleUpdates`.
            styleUpdates = nextProp;
          }
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp) {
            enqueuePutListener(this, propKey, nextProp, transaction);
          } else if (lastProp) {
            deleteListener(this, propKey);
          }
        } else if (isCustomComponent(this._tag, nextProps)) {
          if (!RESERVED_PROPS$1.hasOwnProperty(propKey)) {
            DOMPropertyOperations_1.setValueForAttribute(getNode(this), propKey, nextProp);
          }
        } else if (DOMProperty_1.properties[propKey] || DOMProperty_1.isCustomAttribute(propKey)) {
          var node = getNode(this);
          // If we're updating to null or undefined, we should remove the property
          // from the DOM node instead of inadvertently setting to a string. This
          // brings us in line with the same behavior we have on initial render.
          if (nextProp != null) {
            DOMPropertyOperations_1.setValueForProperty(node, propKey, nextProp);
          } else {
            DOMPropertyOperations_1.deleteValueForProperty(node, propKey);
          }
        }
      }
      if (styleUpdates) {
        CSSPropertyOperations_1.setValueForStyles(getNode(this), styleUpdates, this);
      }
    },
  
    /**
     * Reconciles the children with the various properties that affect the
     * children content.
     *
     * @param {object} lastProps
     * @param {object} nextProps
     * @param {ReactReconcileTransaction} transaction
     * @param {object} context
     */
    _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
      var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
      var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
  
      var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
      var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
  
      // Note the use of `!=` which checks for null or undefined.
      var lastChildren = lastContent != null ? null : lastProps.children;
      var nextChildren = nextContent != null ? null : nextProps.children;
  
      // If we're switching from children to content/html or vice versa, remove
      // the old content
      var lastHasContentOrHtml = lastContent != null || lastHtml != null;
      var nextHasContentOrHtml = nextContent != null || nextHtml != null;
      if (lastChildren != null && nextChildren == null) {
        this.updateChildren(null, transaction, context);
      } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
        this.updateTextContent('');
        {
          ReactInstrumentation$1.debugTool.onSetChildren(this._debugID, []);
        }
      }
  
      if (nextContent != null) {
        if (lastContent !== nextContent) {
          this.updateTextContent('' + nextContent);
          {
            setAndValidateContentChildDev.call(this, nextContent);
          }
        }
      } else if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          this.updateMarkup('' + nextHtml);
        }
        {
          ReactInstrumentation$1.debugTool.onSetChildren(this._debugID, []);
        }
      } else if (nextChildren != null) {
        {
          setAndValidateContentChildDev.call(this, null);
        }
  
        this.updateChildren(nextChildren, transaction, context);
      }
    },
  
    getHostNode: function () {
      return getNode(this);
    },
  
    /**
     * Destroys all event registrations for this instance. Does not remove from
     * the DOM. That must be done by the parent.
     *
     * @internal
     */
    unmountComponent: function (safely) {
      switch (this._tag) {
        case 'audio':
        case 'form':
        case 'iframe':
        case 'img':
        case 'link':
        case 'object':
        case 'source':
        case 'video':
          var listeners = this._wrapperState.listeners;
          if (listeners) {
            for (var i = 0; i < listeners.length; i++) {
              listeners[i].remove();
            }
          }
          break;
        case 'input':
        case 'textarea':
          inputValueTracking_1.stopTracking(this);
          break;
        case 'html':
        case 'head':
        case 'body':
          /**
           * Components like <html> <head> and <body> can't be removed or added
           * easily in a cross-browser way, however it's valuable to be able to
           * take advantage of React's reconciliation for styling and <title>
           * management. So we just document it and throw in dangerous cases.
           */
          invariant_1(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag);
          break;
      }
  
      this.unmountChildren(safely);
      ReactDOMComponentTree_1.uncacheNode(this);
      EventPluginHub_1.deleteAllListeners(this);
      this._rootNodeID = 0;
      this._domID = 0;
      this._wrapperState = null;
  
      {
        setAndValidateContentChildDev.call(this, null);
      }
    },
  
    getPublicInstance: function () {
      return getNode(this);
    }
  };
  
  objectAssign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild_1.Mixin);
  
  var ReactDOMComponent_1 = ReactDOMComponent;
  
  var ReactDOMEmptyComponent = function (instantiate) {
    // ReactCompositeComponent uses this:
    this._currentElement = null;
    // ReactDOMComponentTree uses these:
    this._hostNode = null;
    this._hostParent = null;
    this._hostContainerInfo = null;
    this._domID = 0;
  };
  objectAssign(ReactDOMEmptyComponent.prototype, {
    mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
      var domID = hostContainerInfo._idCounter++;
      this._domID = domID;
      this._hostParent = hostParent;
      this._hostContainerInfo = hostContainerInfo;
  
      var nodeValue = ' react-empty: ' + this._domID + ' ';
      if (transaction.useCreateElement) {
        var ownerDocument = hostContainerInfo._ownerDocument;
        var node = ownerDocument.createComment(nodeValue);
        ReactDOMComponentTree_1.precacheNode(this, node);
        return DOMLazyTree_1(node);
      } else {
        if (transaction.renderToStaticMarkup) {
          // Normally we'd insert a comment node, but since this is a situation
          // where React won't take over (static pages), we can simply return
          // nothing.
          return '';
        }
        return '<!--' + nodeValue + '-->';
      }
    },
    receiveComponent: function () {},
    getHostNode: function () {
      return ReactDOMComponentTree_1.getNodeFromInstance(this);
    },
    unmountComponent: function () {
      ReactDOMComponentTree_1.uncacheNode(this);
    }
  });
  
  var ReactDOMEmptyComponent_1 = ReactDOMEmptyComponent;
  
  /**
   * Return the lowest common ancestor of A and B, or null if they are in
   * different trees.
   */
  function getLowestCommonAncestor(instA, instB) {
    !('_hostNode' in instA) ? invariant_1(false, 'getNodeFromInstance: Invalid argument.') : void 0;
    !('_hostNode' in instB) ? invariant_1(false, 'getNodeFromInstance: Invalid argument.') : void 0;
  
    var depthA = 0;
    for (var tempA = instA; tempA; tempA = tempA._hostParent) {
      depthA++;
    }
    var depthB = 0;
    for (var tempB = instB; tempB; tempB = tempB._hostParent) {
      depthB++;
    }
  
    // If A is deeper, crawl up.
    while (depthA - depthB > 0) {
      instA = instA._hostParent;
      depthA--;
    }
  
    // If B is deeper, crawl up.
    while (depthB - depthA > 0) {
      instB = instB._hostParent;
      depthB--;
    }
  
    // Walk in lockstep until we find a match.
    var depth = depthA;
    while (depth--) {
      if (instA === instB) {
        return instA;
      }
      instA = instA._hostParent;
      instB = instB._hostParent;
    }
    return null;
  }
  
  /**
   * Return if A is an ancestor of B.
   */
  function isAncestor(instA, instB) {
    !('_hostNode' in instA) ? invariant_1(false, 'isAncestor: Invalid argument.') : void 0;
    !('_hostNode' in instB) ? invariant_1(false, 'isAncestor: Invalid argument.') : void 0;
  
    while (instB) {
      if (instB === instA) {
        return true;
      }
      instB = instB._hostParent;
    }
    return false;
  }
  
  /**
   * Return the parent instance of the passed-in instance.
   */
  function getParentInstance(inst) {
    !('_hostNode' in inst) ? invariant_1(false, 'getParentInstance: Invalid argument.') : void 0;
  
    return inst._hostParent;
  }
  
  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   */
  function traverseTwoPhase(inst, fn, arg) {
    var path = [];
    while (inst) {
      path.push(inst);
      inst = inst._hostParent;
    }
    var i;
    for (i = path.length; i-- > 0;) {
      fn(path[i], 'captured', arg);
    }
    for (i = 0; i < path.length; i++) {
      fn(path[i], 'bubbled', arg);
    }
  }
  
  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * Does not invoke the callback on the nearest common ancestor because nothing
   * "entered" or "left" that element.
   */
  function traverseEnterLeave(from, to, fn, argFrom, argTo) {
    var common = from && to ? getLowestCommonAncestor(from, to) : null;
    var pathFrom = [];
    while (from && from !== common) {
      pathFrom.push(from);
      from = from._hostParent;
    }
    var pathTo = [];
    while (to && to !== common) {
      pathTo.push(to);
      to = to._hostParent;
    }
    var i;
    for (i = 0; i < pathFrom.length; i++) {
      fn(pathFrom[i], 'bubbled', argFrom);
    }
    for (i = pathTo.length; i-- > 0;) {
      fn(pathTo[i], 'captured', argTo);
    }
  }
  
  var ReactDOMTreeTraversal = {
    isAncestor: isAncestor,
    getLowestCommonAncestor: getLowestCommonAncestor,
    getParentInstance: getParentInstance,
    traverseTwoPhase: traverseTwoPhase,
    traverseEnterLeave: traverseEnterLeave
  };
  
  /**
   * Text nodes violate a couple assumptions that React makes about components:
   *
   *  - When mounting text into the DOM, adjacent text nodes are merged.
   *  - Text nodes cannot be assigned a React root ID.
   *
   * This component is used to wrap strings between comment nodes so that they
   * can undergo the same reconciliation that is applied to elements.
   *
   * TODO: Investigate representing React components in the DOM with text nodes.
   *
   * @class ReactDOMTextComponent
   * @extends ReactComponent
   * @internal
   */
  var ReactDOMTextComponent = function (text) {
    // TODO: This is really a ReactText (ReactNode), not a ReactElement
    this._currentElement = text;
    this._stringText = '' + text;
    // ReactDOMComponentTree uses these:
    this._hostNode = null;
    this._hostParent = null;
  
    // Properties
    this._domID = 0;
    this._mountIndex = 0;
    this._closingComment = null;
    this._commentNodes = null;
  };
  
  objectAssign(ReactDOMTextComponent.prototype, {
    /**
     * Creates the markup for this text node. This node is not intended to have
     * any features besides containing text content.
     *
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @return {string} Markup for this text node.
     * @internal
     */
    mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
      {
        var parentInfo;
        if (hostParent != null) {
          parentInfo = hostParent._ancestorInfo;
        } else if (hostContainerInfo != null) {
          parentInfo = hostContainerInfo._ancestorInfo;
        }
        if (parentInfo) {
          // parentInfo should always be present except for the top-level
          // component when server rendering
          validateDOMNesting_1(null, this._stringText, this, parentInfo);
        }
      }
  
      var domID = hostContainerInfo._idCounter++;
      var openingValue = ' react-text: ' + domID + ' ';
      var closingValue = ' /react-text ';
      this._domID = domID;
      this._hostParent = hostParent;
      if (transaction.useCreateElement) {
        var ownerDocument = hostContainerInfo._ownerDocument;
        var openingComment = ownerDocument.createComment(openingValue);
        var closingComment = ownerDocument.createComment(closingValue);
        var lazyTree = DOMLazyTree_1(ownerDocument.createDocumentFragment());
        DOMLazyTree_1.queueChild(lazyTree, DOMLazyTree_1(openingComment));
        if (this._stringText) {
          DOMLazyTree_1.queueChild(lazyTree, DOMLazyTree_1(ownerDocument.createTextNode(this._stringText)));
        }
        DOMLazyTree_1.queueChild(lazyTree, DOMLazyTree_1(closingComment));
        ReactDOMComponentTree_1.precacheNode(this, openingComment);
        this._closingComment = closingComment;
        return lazyTree;
      } else {
        var escapedText = escapeTextContentForBrowser_1(this._stringText);
  
        if (transaction.renderToStaticMarkup) {
          // Normally we'd wrap this between comment nodes for the reasons stated
          // above, but since this is a situation where React won't take over
          // (static pages), we can simply return the text as it is.
          return escapedText;
        }
  
        return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
      }
    },
  
    /**
     * Updates this component by updating the text content.
     *
     * @param {ReactText} nextText The next text content
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function (nextText, transaction) {
      if (nextText !== this._currentElement) {
        this._currentElement = nextText;
        var nextStringText = '' + nextText;
        if (nextStringText !== this._stringText) {
          // TODO: Save this as pending props and use performUpdateIfNecessary
          // and/or updateComponent to do the actual update for consistency with
          // other component types?
          this._stringText = nextStringText;
          var commentNodes = this.getHostNode();
          DOMChildrenOperations_1.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
        }
      }
    },
  
    getHostNode: function () {
      var hostNode = this._commentNodes;
      if (hostNode) {
        return hostNode;
      }
      if (!this._closingComment) {
        var openingComment = ReactDOMComponentTree_1.getNodeFromInstance(this);
        var node = openingComment.nextSibling;
        while (true) {
          !(node != null) ? invariant_1(false, 'Missing closing comment for text component %s', this._domID) : void 0;
          if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
            this._closingComment = node;
            break;
          }
          node = node.nextSibling;
        }
      }
      hostNode = [this._hostNode, this._closingComment];
      this._commentNodes = hostNode;
      return hostNode;
    },
  
    unmountComponent: function () {
      this._closingComment = null;
      this._commentNodes = null;
      ReactDOMComponentTree_1.uncacheNode(this);
    }
  });
  
  var ReactDOMTextComponent_1 = ReactDOMTextComponent;
  
  var RESET_BATCHED_UPDATES = {
    initialize: emptyFunction_1,
    close: function () {
      ReactDefaultBatchingStrategy.isBatchingUpdates = false;
    }
  };
  
  var FLUSH_BATCHED_UPDATES = {
    initialize: emptyFunction_1,
    close: ReactUpdates_1.flushBatchedUpdates.bind(ReactUpdates_1)
  };
  
  var TRANSACTION_WRAPPERS$2 = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
  
  function ReactDefaultBatchingStrategyTransaction() {
    this.reinitializeTransaction();
  }
  
  objectAssign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
    getTransactionWrappers: function () {
      return TRANSACTION_WRAPPERS$2;
    }
  });
  
  var transaction = new ReactDefaultBatchingStrategyTransaction();
  
  var ReactDefaultBatchingStrategy = {
    isBatchingUpdates: false,
  
    /**
     * Call the provided function in a context within which calls to `setState`
     * and friends are batched such that components aren't updated unnecessarily.
     */
    batchedUpdates: function (callback, a, b, c, d, e) {
      var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
  
      ReactDefaultBatchingStrategy.isBatchingUpdates = true;
  
      // The code is written this way to avoid extra allocations
      if (alreadyBatchingUpdates) {
        return callback(a, b, c, d, e);
      } else {
        return transaction.perform(callback, null, a, b, c, d, e);
      }
    }
  };
  
  var ReactDefaultBatchingStrategy_1 = ReactDefaultBatchingStrategy;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @typechecks
   */
  
  
  
  /**
   * Upstream version of event listener. Does not take into account specific
   * nature of platform.
   */
  var EventListener = {
    /**
     * Listen to DOM events during the bubble phase.
     *
     * @param {DOMEventTarget} target DOM element to register listener on.
     * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
     * @param {function} callback Callback function.
     * @return {object} Object with a `remove` method.
     */
    listen: function listen(target, eventType, callback) {
      if (target.addEventListener) {
        target.addEventListener(eventType, callback, false);
        return {
          remove: function remove() {
            target.removeEventListener(eventType, callback, false);
          }
        };
      } else if (target.attachEvent) {
        target.attachEvent('on' + eventType, callback);
        return {
          remove: function remove() {
            target.detachEvent('on' + eventType, callback);
          }
        };
      }
    },
  
    /**
     * Listen to DOM events during the capture phase.
     *
     * @param {DOMEventTarget} target DOM element to register listener on.
     * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
     * @param {function} callback Callback function.
     * @return {object} Object with a `remove` method.
     */
    capture: function capture(target, eventType, callback) {
      if (target.addEventListener) {
        target.addEventListener(eventType, callback, true);
        return {
          remove: function remove() {
            target.removeEventListener(eventType, callback, true);
          }
        };
      } else {
        {
          console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
        }
        return {
          remove: emptyFunction_1
        };
      }
    },
  
    registerDefault: function registerDefault() {}
  };
  
  var EventListener_1 = EventListener;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @typechecks
   */
  
  /**
   * Gets the scroll position of the supplied element or window.
   *
   * The return values are unbounded, unlike `getScrollPosition`. This means they
   * may be negative or exceed the element boundaries (which is possible using
   * inertial scrolling).
   *
   * @param {DOMWindow|DOMElement} scrollable
   * @return {object} Map with `x` and `y` keys.
   */
  
  function getUnboundedScrollPosition(scrollable) {
    if (scrollable.Window && scrollable instanceof scrollable.Window) {
      return {
        x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
        y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
      };
    }
    return {
      x: scrollable.scrollLeft,
      y: scrollable.scrollTop
    };
  }
  
  var getUnboundedScrollPosition_1 = getUnboundedScrollPosition;
  
  /**
   * Find the deepest React component completely containing the root of the
   * passed-in instance (for use when entire React trees are nested within each
   * other). If React trees are not nested, returns null.
   */
  function findParent$1(inst) {
    // TODO: It may be a good idea to cache this to prevent unnecessary DOM
    // traversal, but caching is difficult to do correctly without using a
    // mutation observer to listen for all DOM changes.
    while (inst._hostParent) {
      inst = inst._hostParent;
    }
    var rootNode = ReactDOMComponentTree_1.getNodeFromInstance(inst);
    var container = rootNode.parentNode;
    return ReactDOMComponentTree_1.getClosestInstanceFromNode(container);
  }
  
  // Used to store ancestor hierarchy in top level callback
  function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
    this.topLevelType = topLevelType;
    this.nativeEvent = nativeEvent;
    this.ancestors = [];
  }
  objectAssign(TopLevelCallbackBookKeeping.prototype, {
    destructor: function () {
      this.topLevelType = null;
      this.nativeEvent = null;
      this.ancestors.length = 0;
    }
  });
  PooledClass_1$2.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass_1$2.twoArgumentPooler);
  
  function handleTopLevelImpl(bookKeeping) {
    var nativeEventTarget = getEventTarget_1(bookKeeping.nativeEvent);
    var targetInst = ReactDOMComponentTree_1.getClosestInstanceFromNode(nativeEventTarget);
  
    // Loop through the hierarchy, in case there's any nested components.
    // It's important that we build the array of ancestors before calling any
    // event handlers, because event handlers can modify the DOM, leading to
    // inconsistencies with ReactMount's node cache. See #1105.
    var ancestor = targetInst;
    do {
      bookKeeping.ancestors.push(ancestor);
      ancestor = ancestor && findParent$1(ancestor);
    } while (ancestor);
  
    for (var i = 0; i < bookKeeping.ancestors.length; i++) {
      targetInst = bookKeeping.ancestors[i];
      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget_1(bookKeeping.nativeEvent));
    }
  }
  
  function scrollValueMonitor(cb) {
    var scrollPosition = getUnboundedScrollPosition_1(window);
    cb(scrollPosition);
  }
  
  var ReactEventListener = {
    _enabled: true,
    _handleTopLevel: null,
  
    WINDOW_HANDLE: ExecutionEnvironment_1.canUseDOM ? window : null,
  
    setHandleTopLevel: function (handleTopLevel) {
      ReactEventListener._handleTopLevel = handleTopLevel;
    },
  
    setEnabled: function (enabled) {
      ReactEventListener._enabled = !!enabled;
    },
  
    isEnabled: function () {
      return ReactEventListener._enabled;
    },
  
    /**
     * Traps top-level events by using event bubbling.
     *
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {string} handlerBaseName Event name (e.g. "click").
     * @param {object} element Element on which to attach listener.
     * @return {?object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */
    trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
      if (!element) {
        return null;
      }
      return EventListener_1.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
    },
  
    /**
     * Traps a top-level event by using event capturing.
     *
     * @param {string} topLevelType Record from `EventConstants`.
     * @param {string} handlerBaseName Event name (e.g. "click").
     * @param {object} element Element on which to attach listener.
     * @return {?object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */
    trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
      if (!element) {
        return null;
      }
      return EventListener_1.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
    },
  
    monitorScrollValue: function (refresh) {
      var callback = scrollValueMonitor.bind(null, refresh);
      EventListener_1.listen(window, 'scroll', callback);
    },
  
    dispatchEvent: function (topLevelType, nativeEvent) {
      if (!ReactEventListener._enabled) {
        return;
      }
  
      var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
      try {
        // Event queue being processed in the same cycle allows
        // `preventDefault`.
        ReactUpdates_1.batchedUpdates(handleTopLevelImpl, bookKeeping);
      } finally {
        TopLevelCallbackBookKeeping.release(bookKeeping);
      }
    }
  };
  
  var ReactEventListener_1 = ReactEventListener;
  
  var ReactInjection = {
    Component: ReactComponentEnvironment_1.injection,
    DOMProperty: DOMProperty_1.injection,
    EmptyComponent: ReactEmptyComponent_1.injection,
    EventPluginHub: EventPluginHub_1.injection,
    EventPluginUtils: EventPluginUtils_1.injection,
    EventEmitter: ReactBrowserEventEmitter_1.injection,
    HostComponent: ReactHostComponent_1.injection,
    Updates: ReactUpdates_1.injection
  };
  
  var ReactInjection_1 = ReactInjection;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  /**
   * Given any node return the first leaf node without children.
   *
   * @param {DOMElement|DOMTextNode} node
   * @return {DOMElement|DOMTextNode}
   */
  
  function getLeafNode(node) {
    while (node && node.firstChild) {
      node = node.firstChild;
    }
    return node;
  }
  
  /**
   * Get the next sibling within a container. This will walk up the
   * DOM if a node's siblings have been exhausted.
   *
   * @param {DOMElement|DOMTextNode} node
   * @return {?DOMElement|DOMTextNode}
   */
  function getSiblingNode(node) {
    while (node) {
      if (node.nextSibling) {
        return node.nextSibling;
      }
      node = node.parentNode;
    }
  }
  
  /**
   * Get object describing the nodes which contain characters at offset.
   *
   * @param {DOMElement|DOMTextNode} root
   * @param {number} offset
   * @return {?object}
   */
  function getNodeForCharacterOffset(root, offset) {
    var node = getLeafNode(root);
    var nodeStart = 0;
    var nodeEnd = 0;
  
    while (node) {
      if (node.nodeType === 3) {
        nodeEnd = nodeStart + node.textContent.length;
  
        if (nodeStart <= offset && nodeEnd >= offset) {
          return {
            node: node,
            offset: offset - nodeStart
          };
        }
  
        nodeStart = nodeEnd;
      }
  
      node = getLeafNode(getSiblingNode(node));
    }
  }
  
  var getNodeForCharacterOffset_1 = getNodeForCharacterOffset;
  
  /**
   * While `isCollapsed` is available on the Selection object and `collapsed`
   * is available on the Range object, IE11 sometimes gets them wrong.
   * If the anchor/focus nodes and offsets are the same, the range is collapsed.
   */
  function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
    return anchorNode === focusNode && anchorOffset === focusOffset;
  }
  
  /**
   * Get the appropriate anchor and focus node/offset pairs for IE.
   *
   * The catch here is that IE's selection API doesn't provide information
   * about whether the selection is forward or backward, so we have to
   * behave as though it's always forward.
   *
   * IE text differs from modern selection in that it behaves as though
   * block elements end with a new line. This means character offsets will
   * differ between the two APIs.
   *
   * @param {DOMElement} node
   * @return {object}
   */
  function getIEOffsets(node) {
    var selection = document.selection;
    var selectedRange = selection.createRange();
    var selectedLength = selectedRange.text.length;
  
    // Duplicate selection so we can move range without breaking user selection.
    var fromStart = selectedRange.duplicate();
    fromStart.moveToElementText(node);
    fromStart.setEndPoint('EndToStart', selectedRange);
  
    var startOffset = fromStart.text.length;
    var endOffset = startOffset + selectedLength;
  
    return {
      start: startOffset,
      end: endOffset
    };
  }
  
  /**
   * @param {DOMElement} node
   * @return {?object}
   */
  function getModernOffsets(node) {
    var selection = window.getSelection && window.getSelection();
  
    if (!selection || selection.rangeCount === 0) {
      return null;
    }
  
    var anchorNode = selection.anchorNode;
    var anchorOffset = selection.anchorOffset;
    var focusNode = selection.focusNode;
    var focusOffset = selection.focusOffset;
  
    var currentRange = selection.getRangeAt(0);
  
    // In Firefox, range.startContainer and range.endContainer can be "anonymous
    // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
    // divs do not seem to expose properties, triggering a "Permission denied
    // error" if any of its properties are accessed. The only seemingly possible
    // way to avoid erroring is to access a property that typically works for
    // non-anonymous divs and catch any error that may otherwise arise. See
    // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
    try {
      /* eslint-disable no-unused-expressions */
      currentRange.startContainer.nodeType;
      currentRange.endContainer.nodeType;
      /* eslint-enable no-unused-expressions */
    } catch (e) {
      return null;
    }
  
    // If the node and offset values are the same, the selection is collapsed.
    // `Selection.isCollapsed` is available natively, but IE sometimes gets
    // this value wrong.
    var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
  
    var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
  
    var tempRange = currentRange.cloneRange();
    tempRange.selectNodeContents(node);
    tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
  
    var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
  
    var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
    var end = start + rangeLength;
  
    // Detect whether the selection is backward.
    var detectionRange = document.createRange();
    detectionRange.setStart(anchorNode, anchorOffset);
    detectionRange.setEnd(focusNode, focusOffset);
    var isBackward = detectionRange.collapsed;
  
    return {
      start: isBackward ? end : start,
      end: isBackward ? start : end
    };
  }
  
  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  function setIEOffsets(node, offsets) {
    var range = document.selection.createRange().duplicate();
    var start, end;
  
    if (offsets.end === undefined) {
      start = offsets.start;
      end = start;
    } else if (offsets.start > offsets.end) {
      start = offsets.end;
      end = offsets.start;
    } else {
      start = offsets.start;
      end = offsets.end;
    }
  
    range.moveToElementText(node);
    range.moveStart('character', start);
    range.setEndPoint('EndToStart', range);
    range.moveEnd('character', end - start);
    range.select();
  }
  
  /**
   * In modern non-IE browsers, we can support both forward and backward
   * selections.
   *
   * Note: IE10+ supports the Selection object, but it does not support
   * the `extend` method, which means that even in modern IE, it's not possible
   * to programmatically create a backward selection. Thus, for all IE
   * versions, we use the old IE API to create our selections.
   *
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  function setModernOffsets(node, offsets) {
    if (!window.getSelection) {
      return;
    }
  
    var selection = window.getSelection();
    var length = node[getTextContentAccessor_1()].length;
    var start = Math.min(offsets.start, length);
    var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
  
    // IE 11 uses modern selection, but doesn't support the extend method.
    // Flip backward selections, so we can set with a single range.
    if (!selection.extend && start > end) {
      var temp = end;
      end = start;
      start = temp;
    }
  
    var startMarker = getNodeForCharacterOffset_1(node, start);
    var endMarker = getNodeForCharacterOffset_1(node, end);
  
    if (startMarker && endMarker) {
      var range = document.createRange();
      range.setStart(startMarker.node, startMarker.offset);
      selection.removeAllRanges();
  
      if (start > end) {
        selection.addRange(range);
        selection.extend(endMarker.node, endMarker.offset);
      } else {
        range.setEnd(endMarker.node, endMarker.offset);
        selection.addRange(range);
      }
    }
  }
  
  var useIEOffsets = ExecutionEnvironment_1.canUseDOM && 'selection' in document && !('getSelection' in window);
  
  var ReactDOMSelection = {
    /**
     * @param {DOMElement} node
     */
    getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
  
    /**
     * @param {DOMElement|DOMTextNode} node
     * @param {object} offsets
     */
    setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
  };
  
  var ReactDOMSelection_1 = ReactDOMSelection;
  
  function isInDocument(node) {
    return containsNode_1(document.documentElement, node);
  }
  
  /**
   * @ReactInputSelection: React input selection module. Based on Selection.js,
   * but modified to be suitable for react and has a couple of bug fixes (doesn't
   * assume buttons have range selections allowed).
   * Input selection module for React.
   */
  var ReactInputSelection = {
    hasSelectionCapabilities: function (elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
    },
  
    getSelectionInformation: function () {
      var focusedElem = getActiveElement_1();
      return {
        focusedElem: focusedElem,
        selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
      };
    },
  
    /**
     * @restoreSelection: If any selection information was potentially lost,
     * restore it. This is useful when performing operations that could remove dom
     * nodes and place them back in, resulting in focus being lost.
     */
    restoreSelection: function (priorSelectionInformation) {
      var curFocusedElem = getActiveElement_1();
      var priorFocusedElem = priorSelectionInformation.focusedElem;
      var priorSelectionRange = priorSelectionInformation.selectionRange;
      if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
        if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
          ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
        }
        focusNode_1(priorFocusedElem);
      }
    },
  
    /**
     * @getSelection: Gets the selection bounds of a focused textarea, input or
     * contentEditable node.
     * -@input: Look up selection bounds of this input
     * -@return {start: selectionStart, end: selectionEnd}
     */
    getSelection: function (input) {
      var selection;
  
      if ('selectionStart' in input) {
        // Modern browser with input or textarea.
        selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        };
      } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
        // IE8 input.
        var range = document.selection.createRange();
        // There can only be one selection per document in IE, so it must
        // be in our element.
        if (range.parentElement() === input) {
          selection = {
            start: -range.moveStart('character', -input.value.length),
            end: -range.moveEnd('character', -input.value.length)
          };
        }
      } else {
        // Content editable or old IE textarea.
        selection = ReactDOMSelection_1.getOffsets(input);
      }
  
      return selection || { start: 0, end: 0 };
    },
  
    /**
     * @setSelection: Sets the selection bounds of a textarea or input and focuses
     * the input.
     * -@input     Set selection bounds of this input or textarea
     * -@offsets   Object of same form that is returned from get*
     */
    setSelection: function (input, offsets) {
      var start = offsets.start;
      var end = offsets.end;
      if (end === undefined) {
        end = start;
      }
  
      if ('selectionStart' in input) {
        input.selectionStart = start;
        input.selectionEnd = Math.min(end, input.value.length);
      } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
        var range = input.createTextRange();
        range.collapse(true);
        range.moveStart('character', start);
        range.moveEnd('character', end - start);
        range.select();
      } else {
        ReactDOMSelection_1.setOffsets(input, offsets);
      }
    }
  };
  
  var ReactInputSelection_1 = ReactInputSelection;
  
  /**
   * Ensures that, when possible, the selection range (currently selected text
   * input) is not disturbed by performing the transaction.
   */
  var SELECTION_RESTORATION = {
    /**
     * @return {Selection} Selection information.
     */
    initialize: ReactInputSelection_1.getSelectionInformation,
    /**
     * @param {Selection} sel Selection information returned from `initialize`.
     */
    close: ReactInputSelection_1.restoreSelection
  };
  
  /**
   * Suppresses events (blur/focus) that could be inadvertently dispatched due to
   * high level DOM manipulations (like temporarily removing a text input from the
   * DOM).
   */
  var EVENT_SUPPRESSION = {
    /**
     * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
     * the reconciliation.
     */
    initialize: function () {
      var currentlyEnabled = ReactBrowserEventEmitter_1.isEnabled();
      ReactBrowserEventEmitter_1.setEnabled(false);
      return currentlyEnabled;
    },
  
    /**
     * @param {boolean} previouslyEnabled Enabled status of
     *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
     *   restores the previous value.
     */
    close: function (previouslyEnabled) {
      ReactBrowserEventEmitter_1.setEnabled(previouslyEnabled);
    }
  };
  
  /**
   * Provides a queue for collecting `componentDidMount` and
   * `componentDidUpdate` callbacks during the transaction.
   */
  var ON_DOM_READY_QUEUEING = {
    /**
     * Initializes the internal `onDOMReady` queue.
     */
    initialize: function () {
      this.reactMountReady.reset();
    },
  
    /**
     * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
     */
    close: function () {
      this.reactMountReady.notifyAll();
    }
  };
  
  /**
   * Executed within the scope of the `Transaction` instance. Consider these as
   * being member methods, but with an implied ordering while being isolated from
   * each other.
   */
  var TRANSACTION_WRAPPERS$3 = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];
  
  {
    TRANSACTION_WRAPPERS$3.push({
      initialize: ReactInstrumentation$1.debugTool.onBeginFlush,
      close: ReactInstrumentation$1.debugTool.onEndFlush
    });
  }
  
  /**
   * Currently:
   * - The order that these are listed in the transaction is critical:
   * - Suppresses events.
   * - Restores selection range.
   *
   * Future:
   * - Restore document/overflow scroll positions that were unintentionally
   *   modified via DOM insertions above the top viewport boundary.
   * - Implement/integrate with customized constraint based layout system and keep
   *   track of which dimensions must be remeasured.
   *
   * @class ReactReconcileTransaction
   */
  function ReactReconcileTransaction(useCreateElement) {
    this.reinitializeTransaction();
    // Only server-side rendering really needs this option (see
    // `ReactServerRendering`), but server-side uses
    // `ReactServerRenderingTransaction` instead. This option is here so that it's
    // accessible and defaults to false when `ReactDOMComponent` and
    // `ReactDOMTextComponent` checks it in `mountComponent`.`
    this.renderToStaticMarkup = false;
    this.reactMountReady = CallbackQueue_1.getPooled(null);
    this.useCreateElement = useCreateElement;
  }
  
  var Mixin$1 = {
    /**
     * @see Transaction
     * @abstract
     * @final
     * @return {array<object>} List of operation wrap procedures.
     *   TODO: convert to array<TransactionWrapper>
     */
    getTransactionWrappers: function () {
      return TRANSACTION_WRAPPERS$3;
    },
  
    /**
     * @return {object} The queue to collect `onDOMReady` callbacks with.
     */
    getReactMountReady: function () {
      return this.reactMountReady;
    },
  
    /**
     * @return {object} The queue to collect React async events.
     */
    getUpdateQueue: function () {
      return ReactUpdateQueue_1;
    },
  
    /**
     * Save current transaction state -- if the return value from this method is
     * passed to `rollback`, the transaction will be reset to that state.
     */
    checkpoint: function () {
      // reactMountReady is the our only stateful wrapper
      return this.reactMountReady.checkpoint();
    },
  
    rollback: function (checkpoint) {
      this.reactMountReady.rollback(checkpoint);
    },
  
    /**
     * `PooledClass` looks for this, and will invoke this before allowing this
     * instance to be reused.
     */
    destructor: function () {
      CallbackQueue_1.release(this.reactMountReady);
      this.reactMountReady = null;
    }
  };
  
  objectAssign(ReactReconcileTransaction.prototype, Transaction, Mixin$1);
  
  PooledClass_1$2.addPoolingTo(ReactReconcileTransaction);
  
  var ReactReconcileTransaction_1 = ReactReconcileTransaction;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  var NS = {
    xlink: 'http://www.w3.org/1999/xlink',
    xml: 'http://www.w3.org/XML/1998/namespace'
  };
  
  // We use attributes for everything SVG so let's avoid some duplication and run
  // code instead.
  // The following are all specified in the HTML config already so we exclude here.
  // - class (as className)
  // - color
  // - height
  // - id
  // - lang
  // - max
  // - media
  // - method
  // - min
  // - name
  // - style
  // - target
  // - type
  // - width
  var ATTRS = {
    accentHeight: 'accent-height',
    accumulate: 0,
    additive: 0,
    alignmentBaseline: 'alignment-baseline',
    allowReorder: 'allowReorder',
    alphabetic: 0,
    amplitude: 0,
    arabicForm: 'arabic-form',
    ascent: 0,
    attributeName: 'attributeName',
    attributeType: 'attributeType',
    autoReverse: 'autoReverse',
    azimuth: 0,
    baseFrequency: 'baseFrequency',
    baseProfile: 'baseProfile',
    baselineShift: 'baseline-shift',
    bbox: 0,
    begin: 0,
    bias: 0,
    by: 0,
    calcMode: 'calcMode',
    capHeight: 'cap-height',
    clip: 0,
    clipPath: 'clip-path',
    clipRule: 'clip-rule',
    clipPathUnits: 'clipPathUnits',
    colorInterpolation: 'color-interpolation',
    colorInterpolationFilters: 'color-interpolation-filters',
    colorProfile: 'color-profile',
    colorRendering: 'color-rendering',
    contentScriptType: 'contentScriptType',
    contentStyleType: 'contentStyleType',
    cursor: 0,
    cx: 0,
    cy: 0,
    d: 0,
    decelerate: 0,
    descent: 0,
    diffuseConstant: 'diffuseConstant',
    direction: 0,
    display: 0,
    divisor: 0,
    dominantBaseline: 'dominant-baseline',
    dur: 0,
    dx: 0,
    dy: 0,
    edgeMode: 'edgeMode',
    elevation: 0,
    enableBackground: 'enable-background',
    end: 0,
    exponent: 0,
    externalResourcesRequired: 'externalResourcesRequired',
    fill: 0,
    fillOpacity: 'fill-opacity',
    fillRule: 'fill-rule',
    filter: 0,
    filterRes: 'filterRes',
    filterUnits: 'filterUnits',
    floodColor: 'flood-color',
    floodOpacity: 'flood-opacity',
    focusable: 0,
    fontFamily: 'font-family',
    fontSize: 'font-size',
    fontSizeAdjust: 'font-size-adjust',
    fontStretch: 'font-stretch',
    fontStyle: 'font-style',
    fontVariant: 'font-variant',
    fontWeight: 'font-weight',
    format: 0,
    from: 0,
    fx: 0,
    fy: 0,
    g1: 0,
    g2: 0,
    glyphName: 'glyph-name',
    glyphOrientationHorizontal: 'glyph-orientation-horizontal',
    glyphOrientationVertical: 'glyph-orientation-vertical',
    glyphRef: 'glyphRef',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    hanging: 0,
    horizAdvX: 'horiz-adv-x',
    horizOriginX: 'horiz-origin-x',
    ideographic: 0,
    imageRendering: 'image-rendering',
    'in': 0,
    in2: 0,
    intercept: 0,
    k: 0,
    k1: 0,
    k2: 0,
    k3: 0,
    k4: 0,
    kernelMatrix: 'kernelMatrix',
    kernelUnitLength: 'kernelUnitLength',
    kerning: 0,
    keyPoints: 'keyPoints',
    keySplines: 'keySplines',
    keyTimes: 'keyTimes',
    lengthAdjust: 'lengthAdjust',
    letterSpacing: 'letter-spacing',
    lightingColor: 'lighting-color',
    limitingConeAngle: 'limitingConeAngle',
    local: 0,
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    markerHeight: 'markerHeight',
    markerUnits: 'markerUnits',
    markerWidth: 'markerWidth',
    mask: 0,
    maskContentUnits: 'maskContentUnits',
    maskUnits: 'maskUnits',
    mathematical: 0,
    mode: 0,
    numOctaves: 'numOctaves',
    offset: 0,
    opacity: 0,
    operator: 0,
    order: 0,
    orient: 0,
    orientation: 0,
    origin: 0,
    overflow: 0,
    overlinePosition: 'overline-position',
    overlineThickness: 'overline-thickness',
    paintOrder: 'paint-order',
    panose1: 'panose-1',
    pathLength: 'pathLength',
    patternContentUnits: 'patternContentUnits',
    patternTransform: 'patternTransform',
    patternUnits: 'patternUnits',
    pointerEvents: 'pointer-events',
    points: 0,
    pointsAtX: 'pointsAtX',
    pointsAtY: 'pointsAtY',
    pointsAtZ: 'pointsAtZ',
    preserveAlpha: 'preserveAlpha',
    preserveAspectRatio: 'preserveAspectRatio',
    primitiveUnits: 'primitiveUnits',
    r: 0,
    radius: 0,
    refX: 'refX',
    refY: 'refY',
    renderingIntent: 'rendering-intent',
    repeatCount: 'repeatCount',
    repeatDur: 'repeatDur',
    requiredExtensions: 'requiredExtensions',
    requiredFeatures: 'requiredFeatures',
    restart: 0,
    result: 0,
    rotate: 0,
    rx: 0,
    ry: 0,
    scale: 0,
    seed: 0,
    shapeRendering: 'shape-rendering',
    slope: 0,
    spacing: 0,
    specularConstant: 'specularConstant',
    specularExponent: 'specularExponent',
    speed: 0,
    spreadMethod: 'spreadMethod',
    startOffset: 'startOffset',
    stdDeviation: 'stdDeviation',
    stemh: 0,
    stemv: 0,
    stitchTiles: 'stitchTiles',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strikethroughPosition: 'strikethrough-position',
    strikethroughThickness: 'strikethrough-thickness',
    string: 0,
    stroke: 0,
    strokeDasharray: 'stroke-dasharray',
    strokeDashoffset: 'stroke-dashoffset',
    strokeLinecap: 'stroke-linecap',
    strokeLinejoin: 'stroke-linejoin',
    strokeMiterlimit: 'stroke-miterlimit',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    surfaceScale: 'surfaceScale',
    systemLanguage: 'systemLanguage',
    tableValues: 'tableValues',
    targetX: 'targetX',
    targetY: 'targetY',
    textAnchor: 'text-anchor',
    textDecoration: 'text-decoration',
    textRendering: 'text-rendering',
    textLength: 'textLength',
    to: 0,
    transform: 0,
    u1: 0,
    u2: 0,
    underlinePosition: 'underline-position',
    underlineThickness: 'underline-thickness',
    unicode: 0,
    unicodeBidi: 'unicode-bidi',
    unicodeRange: 'unicode-range',
    unitsPerEm: 'units-per-em',
    vAlphabetic: 'v-alphabetic',
    vHanging: 'v-hanging',
    vIdeographic: 'v-ideographic',
    vMathematical: 'v-mathematical',
    values: 0,
    vectorEffect: 'vector-effect',
    version: 0,
    vertAdvY: 'vert-adv-y',
    vertOriginX: 'vert-origin-x',
    vertOriginY: 'vert-origin-y',
    viewBox: 'viewBox',
    viewTarget: 'viewTarget',
    visibility: 0,
    widths: 0,
    wordSpacing: 'word-spacing',
    writingMode: 'writing-mode',
    x: 0,
    xHeight: 'x-height',
    x1: 0,
    x2: 0,
    xChannelSelector: 'xChannelSelector',
    xlinkActuate: 'xlink:actuate',
    xlinkArcrole: 'xlink:arcrole',
    xlinkHref: 'xlink:href',
    xlinkRole: 'xlink:role',
    xlinkShow: 'xlink:show',
    xlinkTitle: 'xlink:title',
    xlinkType: 'xlink:type',
    xmlBase: 'xml:base',
    xmlns: 0,
    xmlnsXlink: 'xmlns:xlink',
    xmlLang: 'xml:lang',
    xmlSpace: 'xml:space',
    y: 0,
    y1: 0,
    y2: 0,
    yChannelSelector: 'yChannelSelector',
    z: 0,
    zoomAndPan: 'zoomAndPan'
  };
  
  var SVGDOMPropertyConfig = {
    Properties: {},
    DOMAttributeNamespaces: {
      xlinkActuate: NS.xlink,
      xlinkArcrole: NS.xlink,
      xlinkHref: NS.xlink,
      xlinkRole: NS.xlink,
      xlinkShow: NS.xlink,
      xlinkTitle: NS.xlink,
      xlinkType: NS.xlink,
      xmlBase: NS.xml,
      xmlLang: NS.xml,
      xmlSpace: NS.xml
    },
    DOMAttributeNames: {}
  };
  
  Object.keys(ATTRS).forEach(function (key) {
    SVGDOMPropertyConfig.Properties[key] = 0;
    if (ATTRS[key]) {
      SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
    }
  });
  
  var SVGDOMPropertyConfig_1 = SVGDOMPropertyConfig;
  
  var skipSelectionChangeEvent = ExecutionEnvironment_1.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
  
  var eventTypes$3 = {
    select: {
      phasedRegistrationNames: {
        bubbled: 'onSelect',
        captured: 'onSelectCapture'
      },
      dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
    }
  };
  
  var activeElement$1 = null;
  var activeElementInst$1 = null;
  var lastSelection = null;
  var mouseDown = false;
  
  // Track whether a listener exists for this plugin. If none exist, we do
  // not extract events. See #3639.
  var hasListener = false;
  
  /**
   * Get an object which is a unique representation of the current selection.
   *
   * The return value will not be consistent across nodes or browsers, but
   * two identical selections on the same node will return identical objects.
   *
   * @param {DOMElement} node
   * @return {object}
   */
  function getSelection(node) {
    if ('selectionStart' in node && ReactInputSelection_1.hasSelectionCapabilities(node)) {
      return {
        start: node.selectionStart,
        end: node.selectionEnd
      };
    } else if (window.getSelection) {
      var selection = window.getSelection();
      return {
        anchorNode: selection.anchorNode,
        anchorOffset: selection.anchorOffset,
        focusNode: selection.focusNode,
        focusOffset: selection.focusOffset
      };
    } else if (document.selection) {
      var range = document.selection.createRange();
      return {
        parentElement: range.parentElement(),
        text: range.text,
        top: range.boundingTop,
        left: range.boundingLeft
      };
    }
  }
  
  /**
   * Poll selection to see whether it's changed.
   *
   * @param {object} nativeEvent
   * @return {?SyntheticEvent}
   */
  function constructSelectEvent(nativeEvent, nativeEventTarget) {
    // Ensure we have the right element, and that the user is not dragging a
    // selection (this matches native `select` event behavior). In HTML5, select
    // fires only on input and textarea thus if there's no focused element we
    // won't dispatch.
    if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement_1()) {
      return null;
    }
  
    // Only fire when selection has actually changed.
    var currentSelection = getSelection(activeElement$1);
    if (!lastSelection || !shallowEqual_1(lastSelection, currentSelection)) {
      lastSelection = currentSelection;
  
      var syntheticEvent = SyntheticEvent_1.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
  
      syntheticEvent.type = 'select';
      syntheticEvent.target = activeElement$1;
  
      EventPropagators_1.accumulateTwoPhaseDispatches(syntheticEvent);
  
      return syntheticEvent;
    }
  
    return null;
  }
  
  /**
   * This plugin creates an `onSelect` event that normalizes select events
   * across form elements.
   *
   * Supported elements are:
   * - input (see `isTextInputElement`)
   * - textarea
   * - contentEditable
   *
   * This differs from native browser implementations in the following ways:
   * - Fires on contentEditable fields as well as inputs.
   * - Fires for collapsed selection.
   * - Fires after user input.
   */
  var SelectEventPlugin = {
    eventTypes: eventTypes$3,
  
    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      if (!hasListener) {
        return null;
      }
  
      var targetNode = targetInst ? ReactDOMComponentTree_1.getNodeFromInstance(targetInst) : window;
  
      switch (topLevelType) {
        // Track the input node that has focus.
        case 'topFocus':
          if (isTextInputElement_1(targetNode) || targetNode.contentEditable === 'true') {
            activeElement$1 = targetNode;
            activeElementInst$1 = targetInst;
            lastSelection = null;
          }
          break;
        case 'topBlur':
          activeElement$1 = null;
          activeElementInst$1 = null;
          lastSelection = null;
          break;
        // Don't fire the event while the user is dragging. This matches the
        // semantics of the native select event.
        case 'topMouseDown':
          mouseDown = true;
          break;
        case 'topContextMenu':
        case 'topMouseUp':
          mouseDown = false;
          return constructSelectEvent(nativeEvent, nativeEventTarget);
        // Chrome and IE fire non-standard event when selection is changed (and
        // sometimes when it hasn't). IE's event fires out of order with respect
        // to key and input events on deletion, so we discard it.
        //
        // Firefox doesn't support selectionchange, so check selection status
        // after each key entry. The selection changes after keydown and before
        // keyup, but we check on keydown as well in the case of holding down a
        // key, when multiple keydown events are fired but only one keyup is.
        // This is also our approach for IE handling, for the reason above.
        case 'topSelectionChange':
          if (skipSelectionChangeEvent) {
            break;
          }
        // falls through
        case 'topKeyDown':
        case 'topKeyUp':
          return constructSelectEvent(nativeEvent, nativeEventTarget);
      }
  
      return null;
    },
  
    didPutListener: function (inst, registrationName, listener) {
      if (registrationName === 'onSelect') {
        hasListener = true;
      }
    }
  };
  
  var SelectEventPlugin_1 = SelectEventPlugin;
  
  /**
   * @interface Event
   * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
   */
  var AnimationEventInterface = {
    animationName: null,
    elapsedTime: null,
    pseudoElement: null
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticEvent}
   */
  function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticEvent_1.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);
  
  var SyntheticAnimationEvent_1 = SyntheticAnimationEvent;
  
  /**
   * @interface Event
   * @see http://www.w3.org/TR/clipboard-apis/
   */
  var ClipboardEventInterface = {
    clipboardData: function (event) {
      return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
    }
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticEvent_1.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
  
  var SyntheticClipboardEvent_1 = SyntheticClipboardEvent;
  
  /**
   * @interface FocusEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var FocusEventInterface = {
    relatedTarget: null
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticUIEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticUIEvent_1.augmentClass(SyntheticFocusEvent, FocusEventInterface);
  
  var SyntheticFocusEvent_1 = SyntheticFocusEvent;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  /**
   * `charCode` represents the actual "character code" and is safe to use with
   * `String.fromCharCode`. As such, only keys that correspond to printable
   * characters produce a valid `charCode`, the only exception to this is Enter.
   * The Tab-key is considered non-printable and does not have a `charCode`,
   * presumably because it does not produce a tab-character in browsers.
   *
   * @param {object} nativeEvent Native browser event.
   * @return {number} Normalized `charCode` property.
   */
  
  function getEventCharCode(nativeEvent) {
    var charCode;
    var keyCode = nativeEvent.keyCode;
  
    if ('charCode' in nativeEvent) {
      charCode = nativeEvent.charCode;
  
      // FF does not set `charCode` for the Enter-key, check against `keyCode`.
      if (charCode === 0 && keyCode === 13) {
        charCode = 13;
      }
    } else {
      // IE8 does not implement `charCode`, but `keyCode` has the correct value.
      charCode = keyCode;
    }
  
    // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
    // Must not discard the (non-)printable Enter-key.
    if (charCode >= 32 || charCode === 13) {
      return charCode;
    }
  
    return 0;
  }
  
  var getEventCharCode_1 = getEventCharCode;
  
  /**
   * Normalization of deprecated HTML5 `key` values
   * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
   */
  var normalizeKey = {
    Esc: 'Escape',
    Spacebar: ' ',
    Left: 'ArrowLeft',
    Up: 'ArrowUp',
    Right: 'ArrowRight',
    Down: 'ArrowDown',
    Del: 'Delete',
    Win: 'OS',
    Menu: 'ContextMenu',
    Apps: 'ContextMenu',
    Scroll: 'ScrollLock',
    MozPrintableKey: 'Unidentified'
  };
  
  /**
   * Translation from legacy `keyCode` to HTML5 `key`
   * Only special keys supported, all others depend on keyboard layout or browser
   * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
   */
  var translateToKey = {
    8: 'Backspace',
    9: 'Tab',
    12: 'Clear',
    13: 'Enter',
    16: 'Shift',
    17: 'Control',
    18: 'Alt',
    19: 'Pause',
    20: 'CapsLock',
    27: 'Escape',
    32: ' ',
    33: 'PageUp',
    34: 'PageDown',
    35: 'End',
    36: 'Home',
    37: 'ArrowLeft',
    38: 'ArrowUp',
    39: 'ArrowRight',
    40: 'ArrowDown',
    45: 'Insert',
    46: 'Delete',
    112: 'F1',
    113: 'F2',
    114: 'F3',
    115: 'F4',
    116: 'F5',
    117: 'F6',
    118: 'F7',
    119: 'F8',
    120: 'F9',
    121: 'F10',
    122: 'F11',
    123: 'F12',
    144: 'NumLock',
    145: 'ScrollLock',
    224: 'Meta'
  };
  
  /**
   * @param {object} nativeEvent Native browser event.
   * @return {string} Normalized `key` property.
   */
  function getEventKey(nativeEvent) {
    if (nativeEvent.key) {
      // Normalize inconsistent values reported by browsers due to
      // implementations of a working draft specification.
  
      // FireFox implements `key` but returns `MozPrintableKey` for all
      // printable characters (normalized to `Unidentified`), ignore it.
      var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
      if (key !== 'Unidentified') {
        return key;
      }
    }
  
    // Browser does not implement `key`, polyfill as much of it as we can.
    if (nativeEvent.type === 'keypress') {
      var charCode = getEventCharCode_1(nativeEvent);
  
      // The enter-key is technically both printable and non-printable and can
      // thus be captured by `keypress`, no other non-printable key should.
      return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
    }
    if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
      // While user keyboard layout determines the actual meaning of each
      // `keyCode` value, almost all function keys have a universal value.
      return translateToKey[nativeEvent.keyCode] || 'Unidentified';
    }
    return '';
  }
  
  var getEventKey_1 = getEventKey;
  
  /**
   * @interface KeyboardEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var KeyboardEventInterface = {
    key: getEventKey_1,
    location: null,
    ctrlKey: null,
    shiftKey: null,
    altKey: null,
    metaKey: null,
    repeat: null,
    locale: null,
    getModifierState: getEventModifierState_1,
    // Legacy Interface
    charCode: function (event) {
      // `charCode` is the result of a KeyPress event and represents the value of
      // the actual printable character.
  
      // KeyPress is deprecated, but its replacement is not yet final and not
      // implemented in any major browser. Only KeyPress has charCode.
      if (event.type === 'keypress') {
        return getEventCharCode_1(event);
      }
      return 0;
    },
    keyCode: function (event) {
      // `keyCode` is the result of a KeyDown/Up event and represents the value of
      // physical keyboard key.
  
      // The actual meaning of the value depends on the users' keyboard layout
      // which cannot be detected. Assuming that it is a US keyboard layout
      // provides a surprisingly accurate mapping for US and European users.
      // Due to this, it is left to the user to implement at this time.
      if (event.type === 'keydown' || event.type === 'keyup') {
        return event.keyCode;
      }
      return 0;
    },
    which: function (event) {
      // `which` is an alias for either `keyCode` or `charCode` depending on the
      // type of the event.
      if (event.type === 'keypress') {
        return getEventCharCode_1(event);
      }
      if (event.type === 'keydown' || event.type === 'keyup') {
        return event.keyCode;
      }
      return 0;
    }
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticUIEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticUIEvent_1.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
  
  var SyntheticKeyboardEvent_1 = SyntheticKeyboardEvent;
  
  /**
   * @interface DragEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var DragEventInterface = {
    dataTransfer: null
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticMouseEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticMouseEvent_1.augmentClass(SyntheticDragEvent, DragEventInterface);
  
  var SyntheticDragEvent_1 = SyntheticDragEvent;
  
  /**
   * @interface TouchEvent
   * @see http://www.w3.org/TR/touch-events/
   */
  var TouchEventInterface = {
    touches: null,
    targetTouches: null,
    changedTouches: null,
    altKey: null,
    metaKey: null,
    ctrlKey: null,
    shiftKey: null,
    getModifierState: getEventModifierState_1
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticUIEvent}
   */
  function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticUIEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticUIEvent_1.augmentClass(SyntheticTouchEvent, TouchEventInterface);
  
  var SyntheticTouchEvent_1 = SyntheticTouchEvent;
  
  /**
   * @interface Event
   * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
   * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
   */
  var TransitionEventInterface = {
    propertyName: null,
    elapsedTime: null,
    pseudoElement: null
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticEvent}
   */
  function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticEvent_1.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);
  
  var SyntheticTransitionEvent_1 = SyntheticTransitionEvent;
  
  /**
   * @interface WheelEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */
  var WheelEventInterface = {
    deltaX: function (event) {
      return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
    },
    deltaY: function (event) {
      return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0;
    },
    deltaZ: null,
  
    // Browsers without "deltaMode" is reporting in raw wheel delta where one
    // notch on the scroll is always +/- 120, roughly equivalent to pixels.
    // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
    // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
    deltaMode: null
  };
  
  /**
   * @param {object} dispatchConfig Configuration used to dispatch this event.
   * @param {string} dispatchMarker Marker identifying the event target.
   * @param {object} nativeEvent Native browser event.
   * @extends {SyntheticMouseEvent}
   */
  function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticMouseEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
  }
  
  SyntheticMouseEvent_1.augmentClass(SyntheticWheelEvent, WheelEventInterface);
  
  var SyntheticWheelEvent_1 = SyntheticWheelEvent;
  
  /**
   * Turns
   * ['abort', ...]
   * into
   * eventTypes = {
   *   'abort': {
   *     phasedRegistrationNames: {
   *       bubbled: 'onAbort',
   *       captured: 'onAbortCapture',
   *     },
   *     dependencies: ['topAbort'],
   *   },
   *   ...
   * };
   * topLevelEventsToDispatchConfig = {
   *   'topAbort': { sameConfig }
   * };
   */
  var eventTypes$4 = {};
  var topLevelEventsToDispatchConfig = {};
  ['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
    var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
    var onEvent = 'on' + capitalizedEvent;
    var topEvent = 'top' + capitalizedEvent;
  
    var type = {
      phasedRegistrationNames: {
        bubbled: onEvent,
        captured: onEvent + 'Capture'
      },
      dependencies: [topEvent]
    };
    eventTypes$4[event] = type;
    topLevelEventsToDispatchConfig[topEvent] = type;
  });
  
  var onClickListeners = {};
  
  function getDictionaryKey$1(inst) {
    // Prevents V8 performance issue:
    // https://github.com/facebook/react/pull/7232
    return '.' + inst._rootNodeID;
  }
  
  function isInteractive$1(tag) {
    return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
  }
  
  var SimpleEventPlugin = {
    eventTypes: eventTypes$4,
  
    extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
      if (!dispatchConfig) {
        return null;
      }
      var EventConstructor;
      switch (topLevelType) {
        case 'topAbort':
        case 'topCanPlay':
        case 'topCanPlayThrough':
        case 'topDurationChange':
        case 'topEmptied':
        case 'topEncrypted':
        case 'topEnded':
        case 'topError':
        case 'topInput':
        case 'topInvalid':
        case 'topLoad':
        case 'topLoadedData':
        case 'topLoadedMetadata':
        case 'topLoadStart':
        case 'topPause':
        case 'topPlay':
        case 'topPlaying':
        case 'topProgress':
        case 'topRateChange':
        case 'topReset':
        case 'topSeeked':
        case 'topSeeking':
        case 'topStalled':
        case 'topSubmit':
        case 'topSuspend':
        case 'topTimeUpdate':
        case 'topVolumeChange':
        case 'topWaiting':
          // HTML Events
          // @see http://www.w3.org/TR/html5/index.html#events-0
          EventConstructor = SyntheticEvent_1;
          break;
        case 'topKeyPress':
          // Firefox creates a keypress event for function keys too. This removes
          // the unwanted keypress events. Enter is however both printable and
          // non-printable. One would expect Tab to be as well (but it isn't).
          if (getEventCharCode_1(nativeEvent) === 0) {
            return null;
          }
        /* falls through */
        case 'topKeyDown':
        case 'topKeyUp':
          EventConstructor = SyntheticKeyboardEvent_1;
          break;
        case 'topBlur':
        case 'topFocus':
          EventConstructor = SyntheticFocusEvent_1;
          break;
        case 'topClick':
          // Firefox creates a click event on right mouse clicks. This removes the
          // unwanted click events.
          if (nativeEvent.button === 2) {
            return null;
          }
        /* falls through */
        case 'topDoubleClick':
        case 'topMouseDown':
        case 'topMouseMove':
        case 'topMouseUp':
        // TODO: Disabled elements should not respond to mouse events
        /* falls through */
        case 'topMouseOut':
        case 'topMouseOver':
        case 'topContextMenu':
          EventConstructor = SyntheticMouseEvent_1;
          break;
        case 'topDrag':
        case 'topDragEnd':
        case 'topDragEnter':
        case 'topDragExit':
        case 'topDragLeave':
        case 'topDragOver':
        case 'topDragStart':
        case 'topDrop':
          EventConstructor = SyntheticDragEvent_1;
          break;
        case 'topTouchCancel':
        case 'topTouchEnd':
        case 'topTouchMove':
        case 'topTouchStart':
          EventConstructor = SyntheticTouchEvent_1;
          break;
        case 'topAnimationEnd':
        case 'topAnimationIteration':
        case 'topAnimationStart':
          EventConstructor = SyntheticAnimationEvent_1;
          break;
        case 'topTransitionEnd':
          EventConstructor = SyntheticTransitionEvent_1;
          break;
        case 'topScroll':
          EventConstructor = SyntheticUIEvent_1;
          break;
        case 'topWheel':
          EventConstructor = SyntheticWheelEvent_1;
          break;
        case 'topCopy':
        case 'topCut':
        case 'topPaste':
          EventConstructor = SyntheticClipboardEvent_1;
          break;
      }
      !EventConstructor ? invariant_1(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : void 0;
      var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
      EventPropagators_1.accumulateTwoPhaseDispatches(event);
      return event;
    },
  
    didPutListener: function (inst, registrationName, listener) {
      // Mobile Safari does not fire properly bubble click events on
      // non-interactive elements, which means delegated click listeners do not
      // fire. The workaround for this bug involves attaching an empty click
      // listener on the target node.
      // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
      if (registrationName === 'onClick' && !isInteractive$1(inst._tag)) {
        var key = getDictionaryKey$1(inst);
        var node = ReactDOMComponentTree_1.getNodeFromInstance(inst);
        if (!onClickListeners[key]) {
          onClickListeners[key] = EventListener_1.listen(node, 'click', emptyFunction_1);
        }
      }
    },
  
    willDeleteListener: function (inst, registrationName) {
      if (registrationName === 'onClick' && !isInteractive$1(inst._tag)) {
        var key = getDictionaryKey$1(inst);
        onClickListeners[key].remove();
        delete onClickListeners[key];
      }
    }
  };
  
  var SimpleEventPlugin_1 = SimpleEventPlugin;
  
  var alreadyInjected = false;
  
  function inject() {
    if (alreadyInjected) {
      // TODO: This is currently true because these injections are shared between
      // the client and the server package. They should be built independently
      // and not share any injection state. Then this problem will be solved.
      return;
    }
    alreadyInjected = true;
  
    ReactInjection_1.EventEmitter.injectReactEventListener(ReactEventListener_1);
  
    /**
     * Inject modules for resolving DOM hierarchy and plugin ordering.
     */
    ReactInjection_1.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder_1);
    ReactInjection_1.EventPluginUtils.injectComponentTree(ReactDOMComponentTree_1);
    ReactInjection_1.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);
  
    /**
     * Some important event plugins included by default (without having to require
     * them).
     */
    ReactInjection_1.EventPluginHub.injectEventPluginsByName({
      SimpleEventPlugin: SimpleEventPlugin_1,
      EnterLeaveEventPlugin: EnterLeaveEventPlugin_1,
      ChangeEventPlugin: ChangeEventPlugin_1,
      SelectEventPlugin: SelectEventPlugin_1,
      BeforeInputEventPlugin: BeforeInputEventPlugin_1
    });
  
    ReactInjection_1.HostComponent.injectGenericComponentClass(ReactDOMComponent_1);
  
    ReactInjection_1.HostComponent.injectTextComponentClass(ReactDOMTextComponent_1);
  
    ReactInjection_1.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig_1);
    ReactInjection_1.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig_1);
    ReactInjection_1.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig_1);
  
    ReactInjection_1.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
      return new ReactDOMEmptyComponent_1(instantiate);
    });
  
    ReactInjection_1.Updates.injectReconcileTransaction(ReactReconcileTransaction_1);
    ReactInjection_1.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy_1);
  
    ReactInjection_1.Component.injectEnvironment(ReactComponentBrowserEnvironment_1);
  }
  
  var ReactDefaultInjection = {
    inject: inject
  };
  
  var DOC_NODE_TYPE$1 = 9;
  
  function ReactDOMContainerInfo(topLevelWrapper, node) {
    var info = {
      _topLevelWrapper: topLevelWrapper,
      _idCounter: 1,
      _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE$1 ? node : node.ownerDocument : null,
      _node: node,
      _tag: node ? node.nodeName.toLowerCase() : null,
      _namespaceURI: node ? node.namespaceURI : null
    };
    {
      info._ancestorInfo = node ? validateDOMNesting_1.updatedAncestorInfo(null, info._tag, null) : null;
    }
    return info;
  }
  
  var ReactDOMContainerInfo_1 = ReactDOMContainerInfo;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  var ReactDOMFeatureFlags = {
    useCreateElement: true,
    useFiber: false
  };
  
  var ReactDOMFeatureFlags_1 = ReactDOMFeatureFlags;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */
  
  var MOD = 65521;
  
  // adler32 is not cryptographically strong, and is only used to sanity check that
  // markup generated on the server matches the markup generated on the client.
  // This implementation (a modified version of the SheetJS version) has been optimized
  // for our use case, at the expense of conforming to the adler32 specification
  // for non-ascii inputs.
  function adler32(data) {
    var a = 1;
    var b = 0;
    var i = 0;
    var l = data.length;
    var m = l & ~0x3;
    while (i < m) {
      var n = Math.min(i + 4096, m);
      for (; i < n; i += 4) {
        b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
      }
      a %= MOD;
      b %= MOD;
    }
    for (; i < l; i++) {
      b += a += data.charCodeAt(i);
    }
    a %= MOD;
    b %= MOD;
    return a | b << 16;
  }
  
  var adler32_1 = adler32;
  
  var TAG_END = /\/?>/;
  var COMMENT_START = /^<\!\-\-/;
  
  var ReactMarkupChecksum = {
    CHECKSUM_ATTR_NAME: 'data-react-checksum',
  
    /**
     * @param {string} markup Markup string
     * @return {string} Markup string with checksum attribute attached
     */
    addChecksumToMarkup: function (markup) {
      var checksum = adler32_1(markup);
  
      // Add checksum (handle both parent tags, comments and self-closing tags)
      if (COMMENT_START.test(markup)) {
        return markup;
      } else {
        return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
      }
    },
  
    /**
     * @param {string} markup to use
     * @param {DOMElement} element root React element
     * @returns {boolean} whether or not the markup is the same
     */
    canReuseMarkup: function (markup, element) {
      var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
      existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
      var markupChecksum = adler32_1(markup);
      return markupChecksum === existingChecksum;
    }
  };
  
  var ReactMarkupChecksum_1 = ReactMarkupChecksum;
  
  var ATTR_NAME$1 = DOMProperty_1.ID_ATTRIBUTE_NAME;
  var ROOT_ATTR_NAME = DOMProperty_1.ROOT_ATTRIBUTE_NAME;
  
  var ELEMENT_NODE_TYPE$1 = 1;
  var DOC_NODE_TYPE = 9;
  var DOCUMENT_FRAGMENT_NODE_TYPE$1 = 11;
  
  var instancesByReactRootID = {};
  
  /**
   * Finds the index of the first character
   * that's not common between the two given strings.
   *
   * @return {number} the index of the character where the strings diverge
   */
  function firstDifferenceIndex(string1, string2) {
    var minLen = Math.min(string1.length, string2.length);
    for (var i = 0; i < minLen; i++) {
      if (string1.charAt(i) !== string2.charAt(i)) {
        return i;
      }
    }
    return string1.length === string2.length ? -1 : minLen;
  }
  
  /**
   * @param {DOMElement|DOMDocument} container DOM element that may contain
   * a React component
   * @return {?*} DOM element that may have the reactRoot ID, or null.
   */
  function getReactRootElementInContainer(container) {
    if (!container) {
      return null;
    }
  
    if (container.nodeType === DOC_NODE_TYPE) {
      return container.documentElement;
    } else {
      return container.firstChild;
    }
  }
  
  function internalGetID(node) {
    // If node is something like a window, document, or text node, none of
    // which support attributes or a .getAttribute method, gracefully return
    // the empty string, as if the attribute were missing.
    return node.getAttribute && node.getAttribute(ATTR_NAME$1) || '';
  }
  
  /**
   * Mounts this component and inserts it into the DOM.
   *
   * @param {ReactComponent} componentInstance The instance to mount.
   * @param {DOMElement} container DOM element to mount into.
   * @param {ReactReconcileTransaction} transaction
   * @param {boolean} shouldReuseMarkup If true, do not insert markup
   */
  function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
    var markerName;
    if (ReactFeatureFlags_1.logTopLevelRenders) {
      var wrappedElement = wrapperInstance._currentElement.props.child;
      var type = wrappedElement.type;
      markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
      console.time(markerName);
    }
  
    var markup = ReactReconciler_1.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo_1(wrapperInstance, container), context, 0 /* parentDebugID */
    );
  
    if (markerName) {
      console.timeEnd(markerName);
    }
  
    wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
    ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
  }
  
  /**
   * Batched mount.
   *
   * @param {ReactComponent} componentInstance The instance to mount.
   * @param {DOMElement} container DOM element to mount into.
   * @param {boolean} shouldReuseMarkup If true, do not insert markup
   */
  function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
    var transaction = ReactUpdates_1.ReactReconcileTransaction.getPooled(
    /* useCreateElement */
    !shouldReuseMarkup && ReactDOMFeatureFlags_1.useCreateElement);
    transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
    ReactUpdates_1.ReactReconcileTransaction.release(transaction);
  }
  
  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  function unmountComponentFromNode(instance, container, safely) {
    {
      ReactInstrumentation$1.debugTool.onBeginFlush();
    }
    ReactReconciler_1.unmountComponent(instance, safely);
    {
      ReactInstrumentation$1.debugTool.onEndFlush();
    }
  
    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }
  
    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  }
  
  /**
   * True if the supplied DOM node has a direct React-rendered child that is
   * not a React root element. Useful for warning in `render`,
   * `unmountComponentAtNode`, etc.
   *
   * @param {?DOMElement} node The candidate DOM node.
   * @return {boolean} True if the DOM element contains a direct child that was
   * rendered by React but is not a root element.
   * @internal
   */
  function hasNonRootReactChild(container) {
    var rootEl = getReactRootElementInContainer(container);
    if (rootEl) {
      var inst = ReactDOMComponentTree_1.getInstanceFromNode(rootEl);
      return !!(inst && inst._hostParent);
    }
  }
  
  /**
   * True if the supplied DOM node is a React DOM element and
   * it has been rendered by another copy of React.
   *
   * @param {?DOMElement} node The candidate DOM node.
   * @return {boolean} True if the DOM has been rendered by another copy of React
   * @internal
   */
  function nodeIsRenderedByOtherInstance(container) {
    var rootEl = getReactRootElementInContainer(container);
    return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree_1.getInstanceFromNode(rootEl));
  }
  
  /**
   * True if the supplied DOM node is a valid node element.
   *
   * @param {?DOMElement} node The candidate DOM node.
   * @return {boolean} True if the DOM is a valid DOM node.
   * @internal
   */
  function isValidContainer(node) {
    return !!(node && (node.nodeType === ELEMENT_NODE_TYPE$1 || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE$1));
  }
  
  /**
   * True if the supplied DOM node is a valid React node element.
   *
   * @param {?DOMElement} node The candidate DOM node.
   * @return {boolean} True if the DOM is a valid React DOM node.
   * @internal
   */
  function isReactNode(node) {
    return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME$1));
  }
  
  function getHostRootInstanceInContainer(container) {
    var rootEl = getReactRootElementInContainer(container);
    var prevHostInstance = rootEl && ReactDOMComponentTree_1.getInstanceFromNode(rootEl);
    return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
  }
  
  function getTopLevelWrapperInContainer(container) {
    var root = getHostRootInstanceInContainer(container);
    return root ? root._hostContainerInfo._topLevelWrapper : null;
  }
  
  /**
   * Temporary (?) hack so that we can store all top-level pending updates on
   * composites instead of having to worry about different types of components
   * here.
   */
  var topLevelRootCounter = 1;
  var TopLevelWrapper = function () {
    this.rootID = topLevelRootCounter++;
  };
  TopLevelWrapper.prototype.isReactComponent = {};
  {
    TopLevelWrapper.displayName = 'TopLevelWrapper';
  }
  TopLevelWrapper.prototype.render = function () {
    return this.props.child;
  };
  TopLevelWrapper.isReactTopLevelWrapper = true;
  
  /**
   * Mounting is the process of initializing a React component by creating its
   * representative DOM elements and inserting them into a supplied `container`.
   * Any prior content inside `container` is destroyed in the process.
   *
   *   ReactMount.render(
   *     component,
   *     document.getElementById('container')
   *   );
   *
   *   <div id="container">                   <-- Supplied `container`.
   *     <div data-reactid=".3">              <-- Rendered reactRoot of React
   *       // ...                                 component.
   *     </div>
   *   </div>
   *
   * Inside of `container`, the first element rendered is the "reactRoot".
   */
  var ReactMount = {
    TopLevelWrapper: TopLevelWrapper,
  
    /**
     * Used by devtools. The keys are not important.
     */
    _instancesByReactRootID: instancesByReactRootID,
  
    /**
     * This is a hook provided to support rendering React components while
     * ensuring that the apparent scroll position of its `container` does not
     * change.
     *
     * @param {DOMElement} container The `container` being rendered into.
     * @param {function} renderCallback This must be called once to do the render.
     */
    scrollMonitor: function (container, renderCallback) {
      renderCallback();
    },
  
    /**
     * Take a component that's already mounted into the DOM and replace its props
     * @param {ReactComponent} prevComponent component instance already in the DOM
     * @param {ReactElement} nextElement component instance to render
     * @param {DOMElement} container container to render into
     * @param {?function} callback function triggered on completion
     */
    _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
      ReactMount.scrollMonitor(container, function () {
        ReactUpdateQueue_1.enqueueElementInternal(prevComponent, nextElement, nextContext);
        if (callback) {
          ReactUpdateQueue_1.enqueueCallbackInternal(prevComponent, callback);
        }
      });
  
      return prevComponent;
    },
  
    /**
     * Render a new component into the DOM. Hooked by hooks!
     *
     * @param {ReactElement} nextElement element to render
     * @param {DOMElement} container container to render into
     * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
     * @return {ReactComponent} nextComponent
     */
    _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
      warning_1(ReactCurrentOwner_1.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner_1.current && ReactCurrentOwner_1.current.getName() || 'ReactCompositeComponent');
  
      !isValidContainer(container) ? invariant_1(false, '_registerComponent(...): Target container is not a DOM element.') : void 0;
  
      ReactBrowserEventEmitter_1.ensureScrollValueMonitoring();
      var componentInstance = instantiateReactComponent_1(nextElement, false);
  
      // The initial render is synchronous but any updates that happen during
      // rendering, in componentWillMount or componentDidMount, will be batched
      // according to the current batching strategy.
  
      ReactUpdates_1.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);
  
      var wrapperID = componentInstance._instance.rootID;
      instancesByReactRootID[wrapperID] = componentInstance;
  
      return componentInstance;
    },
  
    /**
     * Renders a React component into the DOM in the supplied `container`.
     *
     * If the React component was previously rendered into `container`, this will
     * perform an update on it and only mutate the DOM as necessary to reflect the
     * latest React component.
     *
     * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
     * @param {ReactElement} nextElement Component element to render.
     * @param {DOMElement} container DOM element to render into.
     * @param {?function} callback function triggered on completion
     * @return {ReactComponent} Component instance rendered in `container`.
     */
    renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
      !(parentComponent != null && ReactInstanceMap_1.has(parentComponent)) ? invariant_1(false, 'parentComponent must be a valid React Component') : void 0;
      return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
    },
  
    _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
      ReactUpdateQueue_1.validateCallback(callback, 'ReactDOM.render');
      !React_1.isValidElement(nextElement) ? invariant_1(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : // Check if it quacks like an element
      nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;
  
      warning_1(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
  
      var nextWrappedElement = React_1.createElement(TopLevelWrapper, {
        child: nextElement
      });
  
      var nextContext;
      if (parentComponent) {
        var parentInst = ReactInstanceMap_1.get(parentComponent);
        nextContext = parentInst._processChildContext(parentInst._context);
      } else {
        nextContext = emptyObject_1;
      }
  
      var prevComponent = getTopLevelWrapperInContainer(container);
  
      if (prevComponent) {
        var prevWrappedElement = prevComponent._currentElement;
        var prevElement = prevWrappedElement.props.child;
        if (shouldUpdateReactComponent_1(prevElement, nextElement)) {
          var publicInst = prevComponent._renderedComponent.getPublicInstance();
          var updatedCallback = callback && function () {
            callback.call(publicInst);
          };
          ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
          return publicInst;
        } else {
          ReactMount.unmountComponentAtNode(container);
        }
      }
  
      var reactRootElement = getReactRootElementInContainer(container);
      var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
      var containerHasNonRootReactChild = hasNonRootReactChild(container);
  
      {
        warning_1(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
  
        if (!containerHasReactMarkup || reactRootElement.nextSibling) {
          var rootElementSibling = reactRootElement;
          while (rootElementSibling) {
            if (internalGetID(rootElementSibling)) {
              warning_1(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
              break;
            }
            rootElementSibling = rootElementSibling.nextSibling;
          }
        }
      }
  
      var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
      var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
      if (callback) {
        callback.call(component);
      }
      return component;
    },
  
    /**
     * Renders a React component into the DOM in the supplied `container`.
     * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
     *
     * If the React component was previously rendered into `container`, this will
     * perform an update on it and only mutate the DOM as necessary to reflect the
     * latest React component.
     *
     * @param {ReactElement} nextElement Component element to render.
     * @param {DOMElement} container DOM element to render into.
     * @param {?function} callback function triggered on completion
     * @return {ReactComponent} Component instance rendered in `container`.
     */
    render: function (nextElement, container, callback) {
      return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
    },
  
    /**
     * Unmounts and destroys the React component rendered in the `container`.
     * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
     *
     * @param {DOMElement} container DOM element containing a React component.
     * @return {boolean} True if a component was found in and unmounted from
     *                   `container`
     */
    unmountComponentAtNode: function (container) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case. (Strictly speaking, unmounting won't cause a
      // render but we still don't expect to be in a render call here.)
      warning_1(ReactCurrentOwner_1.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner_1.current && ReactCurrentOwner_1.current.getName() || 'ReactCompositeComponent');
  
      !isValidContainer(container) ? invariant_1(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;
  
      {
        warning_1(!nodeIsRenderedByOtherInstance(container), "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
      }
  
      var prevComponent = getTopLevelWrapperInContainer(container);
      if (!prevComponent) {
        // Check if the node being unmounted was rendered by React, but isn't a
        // root node.
        var containerHasNonRootReactChild = hasNonRootReactChild(container);
  
        // Check if the container itself is a React root node.
        var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);
  
        {
          warning_1(!containerHasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
        }
  
        return false;
      }
      delete instancesByReactRootID[prevComponent._instance.rootID];
      ReactUpdates_1.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
      return true;
    },
  
    _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
      !isValidContainer(container) ? invariant_1(false, 'mountComponentIntoNode(...): Target container is not valid.') : void 0;
  
      if (shouldReuseMarkup) {
        var rootElement = getReactRootElementInContainer(container);
        if (ReactMarkupChecksum_1.canReuseMarkup(markup, rootElement)) {
          ReactDOMComponentTree_1.precacheNode(instance, rootElement);
          return;
        } else {
          var checksum = rootElement.getAttribute(ReactMarkupChecksum_1.CHECKSUM_ATTR_NAME);
          rootElement.removeAttribute(ReactMarkupChecksum_1.CHECKSUM_ATTR_NAME);
  
          var rootMarkup = rootElement.outerHTML;
          rootElement.setAttribute(ReactMarkupChecksum_1.CHECKSUM_ATTR_NAME, checksum);
  
          var normalizedMarkup = markup;
          {
            // because rootMarkup is retrieved from the DOM, various normalizations
            // will have occurred which will not be present in `markup`. Here,
            // insert markup into a <div> or <iframe> depending on the container
            // type to perform the same normalizations before comparing.
            var normalizer;
            if (container.nodeType === ELEMENT_NODE_TYPE$1) {
              normalizer = document.createElement('div');
              normalizer.innerHTML = markup;
              normalizedMarkup = normalizer.innerHTML;
            } else {
              normalizer = document.createElement('iframe');
              document.body.appendChild(normalizer);
              normalizer.contentDocument.write(markup);
              normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
              document.body.removeChild(normalizer);
            }
          }
  
          var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
          var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
  
          !(container.nodeType !== DOC_NODE_TYPE) ? invariant_1(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : void 0;
  
          {
            warning_1(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference);
          }
        }
      }
  
      !(container.nodeType !== DOC_NODE_TYPE) ? invariant_1(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : void 0;
  
      if (transaction.useCreateElement) {
        while (container.lastChild) {
          container.removeChild(container.lastChild);
        }
        DOMLazyTree_1.insertTreeBefore(container, markup, null);
      } else {
        setInnerHTML_1(container, markup);
        ReactDOMComponentTree_1.precacheNode(instance, container.firstChild);
      }
  
      {
        var hostNode = ReactDOMComponentTree_1.getInstanceFromNode(container.firstChild);
        if (hostNode._debugID !== 0) {
          ReactInstrumentation$1.debugTool.onHostOperation({
            instanceID: hostNode._debugID,
            type: 'mount',
            payload: markup.toString()
          });
        }
      }
    }
  };
  
  var ReactMount_1 = ReactMount;
  
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   */
  
  var ReactVersion$3 = '15.6.2';
  
  function getHostComponentFromComposite(inst) {
    var type;
  
    while ((type = inst._renderedNodeType) === ReactNodeTypes_1.COMPOSITE) {
      inst = inst._renderedComponent;
    }
  
    if (type === ReactNodeTypes_1.HOST) {
      return inst._renderedComponent;
    } else if (type === ReactNodeTypes_1.EMPTY) {
      return null;
    }
  }
  
  var getHostComponentFromComposite_1 = getHostComponentFromComposite;
  
  /**
   * Returns the DOM node rendered by this element.
   *
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
   *
   * @param {ReactComponent|DOMElement} componentOrElement
   * @return {?DOMElement} The root node of this element.
   */
  function findDOMNode(componentOrElement) {
    {
      var owner = ReactCurrentOwner_1.current;
      if (owner !== null) {
        warning_1(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component');
        owner._warnedAboutRefsInRender = true;
      }
    }
    if (componentOrElement == null) {
      return null;
    }
    if (componentOrElement.nodeType === 1) {
      return componentOrElement;
    }
  
    var inst = ReactInstanceMap_1.get(componentOrElement);
    if (inst) {
      inst = getHostComponentFromComposite_1(inst);
      return inst ? ReactDOMComponentTree_1.getNodeFromInstance(inst) : null;
    }
  
    if (typeof componentOrElement.render === 'function') {
      invariant_1(false, 'findDOMNode was called on an unmounted component.');
    } else {
      invariant_1(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement));
    }
  }
  
  var findDOMNode_1 = findDOMNode;
  
  var renderSubtreeIntoContainer = ReactMount_1.renderSubtreeIntoContainer;
  
  {
    var reactProps = {
      children: true,
      dangerouslySetInnerHTML: true,
      key: true,
      ref: true,
  
      autoFocus: true,
      defaultValue: true,
      valueLink: true,
      defaultChecked: true,
      checkedLink: true,
      innerHTML: true,
      suppressContentEditableWarning: true,
      onFocusIn: true,
      onFocusOut: true
    };
    var warnedProperties = {};
  
    var validateProperty = function (tagName, name, debugID) {
      if (DOMProperty_1.properties.hasOwnProperty(name) || DOMProperty_1.isCustomAttribute(name)) {
        return true;
      }
      if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
        return true;
      }
      if (EventPluginRegistry_1.registrationNameModules.hasOwnProperty(name)) {
        return true;
      }
      warnedProperties[name] = true;
      var lowerCasedName = name.toLowerCase();
  
      // data-* attributes should be lowercase; suggest the lowercase version
      var standardName = DOMProperty_1.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty_1.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty_1.getPossibleStandardName[lowerCasedName] : null;
  
      var registrationName = EventPluginRegistry_1.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry_1.possibleRegistrationNames[lowerCasedName] : null;
  
      if (standardName != null) {
        warning_1(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook_1.getStackAddendumByID(debugID));
        return true;
      } else if (registrationName != null) {
        warning_1(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook_1.getStackAddendumByID(debugID));
        return true;
      } else {
        // We were unable to guess which prop the user intended.
        // It is likely that the user was just blindly spreading/forwarding props
        // Components should be careful to only render valid props/attributes.
        // Warning will be invoked in warnUnknownProperties to allow grouping.
        return false;
      }
    };
  }
  
  var warnUnknownProperties = function (debugID, element) {
    var unknownProps = [];
    for (var key in element.props) {
      var isValid = validateProperty(element.type, key, debugID);
      if (!isValid) {
        unknownProps.push(key);
      }
    }
  
    var unknownPropString = unknownProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');
  
    if (unknownProps.length === 1) {
      warning_1(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook_1.getStackAddendumByID(debugID));
    } else if (unknownProps.length > 1) {
      warning_1(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook_1.getStackAddendumByID(debugID));
    }
  };
  
  function handleElement(debugID, element) {
    if (element == null || typeof element.type !== 'string') {
      return;
    }
    if (element.type.indexOf('-') >= 0 || element.props.is) {
      return;
    }
    warnUnknownProperties(debugID, element);
  }
  
  var ReactDOMUnknownPropertyHook$1 = {
    onBeforeMountComponent: function (debugID, element) {
      handleElement(debugID, element);
    },
    onBeforeUpdateComponent: function (debugID, element) {
      handleElement(debugID, element);
    }
  };
  
  var ReactDOMUnknownPropertyHook_1 = ReactDOMUnknownPropertyHook$1;
  
  var didWarnValueNull = false;
  
  function handleElement$1(debugID, element) {
    if (element == null) {
      return;
    }
    if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
      return;
    }
    if (element.props != null && element.props.value === null && !didWarnValueNull) {
      warning_1(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook_1.getStackAddendumByID(debugID));
  
      didWarnValueNull = true;
    }
  }
  
  var ReactDOMNullInputValuePropHook$1 = {
    onBeforeMountComponent: function (debugID, element) {
      handleElement$1(debugID, element);
    },
    onBeforeUpdateComponent: function (debugID, element) {
      handleElement$1(debugID, element);
    }
  };
  
  var ReactDOMNullInputValuePropHook_1 = ReactDOMNullInputValuePropHook$1;
  
  var warnedProperties$1 = {};
  var rARIA = new RegExp('^(aria)-[' + DOMProperty_1.ATTRIBUTE_NAME_CHAR + ']*$');
  
  function validateProperty$1(tagName, name, debugID) {
    if (warnedProperties$1.hasOwnProperty(name) && warnedProperties$1[name]) {
      return true;
    }
  
    if (rARIA.test(name)) {
      var lowerCasedName = name.toLowerCase();
      var standardName = DOMProperty_1.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty_1.getPossibleStandardName[lowerCasedName] : null;
  
      // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.
      if (standardName == null) {
        warnedProperties$1[name] = true;
        return false;
      }
      // aria-* attributes should be lowercase; suggest the lowercase version.
      if (name !== standardName) {
        warning_1(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook_1.getStackAddendumByID(debugID));
        warnedProperties$1[name] = true;
        return true;
      }
    }
  
    return true;
  }
  
  function warnInvalidARIAProps(debugID, element) {
    var invalidProps = [];
  
    for (var key in element.props) {
      var isValid = validateProperty$1(element.type, key, debugID);
      if (!isValid) {
        invalidProps.push(key);
      }
    }
  
    var unknownPropString = invalidProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');
  
    if (invalidProps.length === 1) {
      warning_1(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook_1.getStackAddendumByID(debugID));
    } else if (invalidProps.length > 1) {
      warning_1(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook_1.getStackAddendumByID(debugID));
    }
  }
  
  function handleElement$2(debugID, element) {
    if (element == null || typeof element.type !== 'string') {
      return;
    }
    if (element.type.indexOf('-') >= 0 || element.props.is) {
      return;
    }
  
    warnInvalidARIAProps(debugID, element);
  }
  
  var ReactDOMInvalidARIAHook$1 = {
    onBeforeMountComponent: function (debugID, element) {
      {
        handleElement$2(debugID, element);
      }
    },
    onBeforeUpdateComponent: function (debugID, element) {
      {
        handleElement$2(debugID, element);
      }
    }
  };
  
  var ReactDOMInvalidARIAHook_1 = ReactDOMInvalidARIAHook$1;
  
  ReactDefaultInjection.inject();
  
  var ReactDOM$1 = {
    findDOMNode: findDOMNode_1,
    render: ReactMount_1.render,
    unmountComponentAtNode: ReactMount_1.unmountComponentAtNode,
    version: ReactVersion$3,
  
    /* eslint-disable camelcase */
    unstable_batchedUpdates: ReactUpdates_1.batchedUpdates,
    unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
    /* eslint-enable camelcase */
  };
  
  // Inject the runtime into a devtools global hook regardless of browser.
  // Allows for debugging when the hook is injected on the page.
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
    __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
      ComponentTree: {
        getClosestInstanceFromNode: ReactDOMComponentTree_1.getClosestInstanceFromNode,
        getNodeFromInstance: function (inst) {
          // inst is an internal instance (but could be a composite)
          if (inst._renderedComponent) {
            inst = getHostComponentFromComposite_1(inst);
          }
          if (inst) {
            return ReactDOMComponentTree_1.getNodeFromInstance(inst);
          } else {
            return null;
          }
        }
      },
      Mount: ReactMount_1,
      Reconciler: ReactReconciler_1
    });
  }
  
  {
    var ExecutionEnvironment$2 = ExecutionEnvironment_1;
    if (ExecutionEnvironment$2.canUseDOM && window.top === window.self) {
      // First check if devtools is not installed
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        // If we're in Chrome or Firefox, provide a download link if not installed.
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
          // Firefox does not have the issue with devtools loaded over file://
          var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
          console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
        }
      }
  
      var testFunc = function testFn() {};
      warning_1((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, "It looks like you're using a minified copy of the development build " + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.');
  
      // If we're in IE8, check to see if we are in compatibility mode and provide
      // information on preventing compatibility mode
      var ieCompatibilityMode = document.documentMode && document.documentMode < 8;
  
      warning_1(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />');
  
      var expectedFeatures = [
      // shims
      Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];
  
      for (var i$2 = 0; i$2 < expectedFeatures.length; i$2++) {
        if (!expectedFeatures[i$2]) {
          warning_1(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
          break;
        }
      }
    }
  }
  
  {
    var ReactInstrumentation = ReactInstrumentation$1;
    var ReactDOMUnknownPropertyHook = ReactDOMUnknownPropertyHook_1;
    var ReactDOMNullInputValuePropHook = ReactDOMNullInputValuePropHook_1;
    var ReactDOMInvalidARIAHook = ReactDOMInvalidARIAHook_1;
  
    ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
    ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
    ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
  }
  
  var ReactDOM_1 = ReactDOM$1;
  
  var reactDom$2 = ReactDOM_1;
  
  function toArrayChildren(children) {
    var ret = [];
    react$2.Children.forEach(children, function (child) {
      ret.push(child);
    });
    return ret;
  }
  
  function findChildInChildrenByKey(children, key) {
    var ret = null;
    if (children) {
      children.forEach(function (child) {
        if (ret) {
          return;
        }
        if (child && child.key === key) {
          ret = child;
        }
      });
    }
    return ret;
  }
  
  function findShownChildInChildrenByKey(children, key, showProp) {
    var ret = null;
    if (children) {
      children.forEach(function (child) {
        if (child && child.key === key && child.props[showProp]) {
          if (ret) {
            throw new Error('two child with same key for <rc-animate> children');
          }
          ret = child;
        }
      });
    }
    return ret;
  }
  
  
  
  function isSameChildren(c1, c2, showProp) {
    var same = c1.length === c2.length;
    if (same) {
      c1.forEach(function (child, index) {
        var child2 = c2[index];
        if (child && child2) {
          if (child && !child2 || !child && child2) {
            same = false;
          } else if (child.key !== child2.key) {
            same = false;
          } else if (showProp && child.props[showProp] !== child2.props[showProp]) {
            same = false;
          }
        }
      });
    }
    return same;
  }
  
  function mergeChildren(prev, next) {
    var ret = [];
  
    // For each key of `next`, the list of keys to insert before that key in
    // the combined list
    var nextChildrenPending = {};
    var pendingChildren = [];
    prev.forEach(function (child) {
      if (child && findChildInChildrenByKey(next, child.key)) {
        if (pendingChildren.length) {
          nextChildrenPending[child.key] = pendingChildren;
          pendingChildren = [];
        }
      } else {
        pendingChildren.push(child);
      }
    });
  
    next.forEach(function (child) {
      if (child && nextChildrenPending.hasOwnProperty(child.key)) {
        ret = ret.concat(nextChildrenPending[child.key]);
      }
      ret.push(child);
    });
  
    ret = ret.concat(pendingChildren);
  
    return ret;
  }
  
  var EVENT_NAME_MAP = {
    transitionend: {
      transition: 'transitionend',
      WebkitTransition: 'webkitTransitionEnd',
      MozTransition: 'mozTransitionEnd',
      OTransition: 'oTransitionEnd',
      msTransition: 'MSTransitionEnd'
    },
  
    animationend: {
      animation: 'animationend',
      WebkitAnimation: 'webkitAnimationEnd',
      MozAnimation: 'mozAnimationEnd',
      OAnimation: 'oAnimationEnd',
      msAnimation: 'MSAnimationEnd'
    }
  };
  
  var endEvents = [];
  
  function detectEvents() {
    var testEl = document.createElement('div');
    var style = testEl.style;
  
    if (!('AnimationEvent' in window)) {
      delete EVENT_NAME_MAP.animationend.animation;
    }
  
    if (!('TransitionEvent' in window)) {
      delete EVENT_NAME_MAP.transitionend.transition;
    }
  
    for (var baseEventName in EVENT_NAME_MAP) {
      if (EVENT_NAME_MAP.hasOwnProperty(baseEventName)) {
        var baseEvents = EVENT_NAME_MAP[baseEventName];
        for (var styleName in baseEvents) {
          if (styleName in style) {
            endEvents.push(baseEvents[styleName]);
            break;
          }
        }
      }
    }
  }
  
  if (typeof window !== 'undefined' && typeof document !== 'undefined') {
    detectEvents();
  }
  
  function addEventListener(node, eventName, eventListener) {
    node.addEventListener(eventName, eventListener, false);
  }
  
  function removeEventListener(node, eventName, eventListener) {
    node.removeEventListener(eventName, eventListener, false);
  }
  
  var TransitionEvents = {
    addEndEventListener: function addEndEventListener(node, eventListener) {
      if (endEvents.length === 0) {
        window.setTimeout(eventListener, 0);
        return;
      }
      endEvents.forEach(function (endEvent) {
        addEventListener(node, endEvent, eventListener);
      });
    },
  
  
    endEvents: endEvents,
  
    removeEndEventListener: function removeEndEventListener(node, eventListener) {
      if (endEvents.length === 0) {
        return;
      }
      endEvents.forEach(function (endEvent) {
        removeEventListener(node, endEvent, eventListener);
      });
    }
  };
  
  var componentIndexof = function(arr, obj){
    if (arr.indexOf) return arr.indexOf(obj);
    for (var i = 0; i < arr.length; ++i) {
      if (arr[i] === obj) return i;
    }
    return -1;
  };
  
  /**
   * Module dependencies.
   */
  
  
  
  /**
   * Whitespace regexp.
   */
  
  var re = /\s+/;
  
  /**
   * toString reference.
   */
  
  var toString$5 = Object.prototype.toString;
  
  /**
   * Wrap `el` in a `ClassList`.
   *
   * @param {Element} el
   * @return {ClassList}
   * @api public
   */
  
  var componentClasses = function(el){
    return new ClassList(el);
  };
  
  /**
   * Initialize a new ClassList for `el`.
   *
   * @param {Element} el
   * @api private
   */
  
  function ClassList(el) {
    if (!el || !el.nodeType) {
      throw new Error('A DOM element reference is required');
    }
    this.el = el;
    this.list = el.classList;
  }
  
  /**
   * Add class `name` if not already present.
   *
   * @param {String} name
   * @return {ClassList}
   * @api public
   */
  
  ClassList.prototype.add = function(name){
    // classList
    if (this.list) {
      this.list.add(name);
      return this;
    }
  
    // fallback
    var arr = this.array();
    var i = componentIndexof(arr, name);
    if (!~i) arr.push(name);
    this.el.className = arr.join(' ');
    return this;
  };
  
  /**
   * Remove class `name` when present, or
   * pass a regular expression to remove
   * any which match.
   *
   * @param {String|RegExp} name
   * @return {ClassList}
   * @api public
   */
  
  ClassList.prototype.remove = function(name){
    if ('[object RegExp]' == toString$5.call(name)) {
      return this.removeMatching(name);
    }
  
    // classList
    if (this.list) {
      this.list.remove(name);
      return this;
    }
  
    // fallback
    var arr = this.array();
    var i = componentIndexof(arr, name);
    if (~i) arr.splice(i, 1);
    this.el.className = arr.join(' ');
    return this;
  };
  
  /**
   * Remove all classes matching `re`.
   *
   * @param {RegExp} re
   * @return {ClassList}
   * @api private
   */
  
  ClassList.prototype.removeMatching = function(re){
    var arr = this.array();
    for (var i = 0; i < arr.length; i++) {
      if (re.test(arr[i])) {
        this.remove(arr[i]);
      }
    }
    return this;
  };
  
  /**
   * Toggle class `name`, can force state via `force`.
   *
   * For browsers that support classList, but do not support `force` yet,
   * the mistake will be detected and corrected.
   *
   * @param {String} name
   * @param {Boolean} force
   * @return {ClassList}
   * @api public
   */
  
  ClassList.prototype.toggle = function(name, force){
    // classList
    if (this.list) {
      if ("undefined" !== typeof force) {
        if (force !== this.list.toggle(name, force)) {
          this.list.toggle(name); // toggle again to correct
        }
      } else {
        this.list.toggle(name);
      }
      return this;
    }
  
    // fallback
    if ("undefined" !== typeof force) {
      if (!force) {
        this.remove(name);
      } else {
        this.add(name);
      }
    } else {
      if (this.has(name)) {
        this.remove(name);
      } else {
        this.add(name);
      }
    }
  
    return this;
  };
  
  /**
   * Return an array of classes.
   *
   * @return {Array}
   * @api public
   */
  
  ClassList.prototype.array = function(){
    var className = this.el.getAttribute('class') || '';
    var str = className.replace(/^\s+|\s+$/g, '');
    var arr = str.split(re);
    if ('' === arr[0]) arr.shift();
    return arr;
  };
  
  /**
   * Check if class `name` is present.
   *
   * @param {String} name
   * @return {ClassList}
   * @api public
   */
  
  ClassList.prototype.has =
  ClassList.prototype.contains = function(name){
    return this.list
      ? this.list.contains(name)
      : !! ~componentIndexof(this.array(), name);
  };
  
  var isCssAnimationSupported = TransitionEvents.endEvents.length !== 0;
  var capitalPrefixes = ['Webkit', 'Moz', 'O',
  // ms is special .... !
  'ms'];
  var prefixes$1 = ['-webkit-', '-moz-', '-o-', 'ms-', ''];
  
  function getStyleProperty(node, name) {
    // old ff need null, https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle
    var style = window.getComputedStyle(node, null);
    var ret = '';
    for (var i = 0; i < prefixes$1.length; i++) {
      ret = style.getPropertyValue(prefixes$1[i] + name);
      if (ret) {
        break;
      }
    }
    return ret;
  }
  
  function fixBrowserByTimeout(node) {
    if (isCssAnimationSupported) {
      var transitionDelay = parseFloat(getStyleProperty(node, 'transition-delay')) || 0;
      var transitionDuration = parseFloat(getStyleProperty(node, 'transition-duration')) || 0;
      var animationDelay = parseFloat(getStyleProperty(node, 'animation-delay')) || 0;
      var animationDuration = parseFloat(getStyleProperty(node, 'animation-duration')) || 0;
      var time = Math.max(transitionDuration + transitionDelay, animationDuration + animationDelay);
      // sometimes, browser bug
      node.rcEndAnimTimeout = setTimeout(function () {
        node.rcEndAnimTimeout = null;
        if (node.rcEndListener) {
          node.rcEndListener();
        }
      }, time * 1000 + 200);
    }
  }
  
  function clearBrowserBugTimeout(node) {
    if (node.rcEndAnimTimeout) {
      clearTimeout(node.rcEndAnimTimeout);
      node.rcEndAnimTimeout = null;
    }
  }
  
  var cssAnimation = function cssAnimation(node, transitionName, endCallback) {
    var nameIsObj = (typeof transitionName === 'undefined' ? 'undefined' : _typeof(transitionName)) === 'object';
    var className = nameIsObj ? transitionName.name : transitionName;
    var activeClassName = nameIsObj ? transitionName.active : transitionName + '-active';
    var end = endCallback;
    var start = void 0;
    var active = void 0;
    var nodeClasses = componentClasses(node);
  
    if (endCallback && Object.prototype.toString.call(endCallback) === '[object Object]') {
      end = endCallback.end;
      start = endCallback.start;
      active = endCallback.active;
    }
  
    if (node.rcEndListener) {
      node.rcEndListener();
    }
  
    node.rcEndListener = function (e) {
      if (e && e.target !== node) {
        return;
      }
  
      if (node.rcAnimTimeout) {
        clearTimeout(node.rcAnimTimeout);
        node.rcAnimTimeout = null;
      }
  
      clearBrowserBugTimeout(node);
  
      nodeClasses.remove(className);
      nodeClasses.remove(activeClassName);
  
      TransitionEvents.removeEndEventListener(node, node.rcEndListener);
      node.rcEndListener = null;
  
      // Usually this optional end is used for informing an owner of
      // a leave animation and telling it to remove the child.
      if (end) {
        end();
      }
    };
  
    TransitionEvents.addEndEventListener(node, node.rcEndListener);
  
    if (start) {
      start();
    }
    nodeClasses.add(className);
  
    node.rcAnimTimeout = setTimeout(function () {
      node.rcAnimTimeout = null;
      nodeClasses.add(activeClassName);
      if (active) {
        setTimeout(active, 0);
      }
      fixBrowserByTimeout(node);
      // 30ms for firefox
    }, 30);
  
    return {
      stop: function stop() {
        if (node.rcEndListener) {
          node.rcEndListener();
        }
      }
    };
  };
  
  cssAnimation.style = function (node, style, callback) {
    if (node.rcEndListener) {
      node.rcEndListener();
    }
  
    node.rcEndListener = function (e) {
      if (e && e.target !== node) {
        return;
      }
  
      if (node.rcAnimTimeout) {
        clearTimeout(node.rcAnimTimeout);
        node.rcAnimTimeout = null;
      }
  
      clearBrowserBugTimeout(node);
  
      TransitionEvents.removeEndEventListener(node, node.rcEndListener);
      node.rcEndListener = null;
  
      // Usually this optional callback is used for informing an owner of
      // a leave animation and telling it to remove the child.
      if (callback) {
        callback();
      }
    };
  
    TransitionEvents.addEndEventListener(node, node.rcEndListener);
  
    node.rcAnimTimeout = setTimeout(function () {
      for (var s in style) {
        if (style.hasOwnProperty(s)) {
          node.style[s] = style[s];
        }
      }
      node.rcAnimTimeout = null;
      fixBrowserByTimeout(node);
    }, 0);
  };
  
  cssAnimation.setTransition = function (node, p, value) {
    var property = p;
    var v = value;
    if (value === undefined) {
      v = property;
      property = '';
    }
    property = property || '';
    capitalPrefixes.forEach(function (prefix) {
      node.style[prefix + 'Transition' + property] = v;
    });
  };
  
  cssAnimation.isCssAnimationSupported = isCssAnimationSupported;
  
  var util$1 = {
    isAppearSupported: function isAppearSupported(props) {
      return props.transitionName && props.transitionAppear || props.animation.appear;
    },
    isEnterSupported: function isEnterSupported(props) {
      return props.transitionName && props.transitionEnter || props.animation.enter;
    },
    isLeaveSupported: function isLeaveSupported(props) {
      return props.transitionName && props.transitionLeave || props.animation.leave;
    },
    allowAppearCallback: function allowAppearCallback(props) {
      return props.transitionAppear || props.animation.appear;
    },
    allowEnterCallback: function allowEnterCallback(props) {
      return props.transitionEnter || props.animation.enter;
    },
    allowLeaveCallback: function allowLeaveCallback(props) {
      return props.transitionLeave || props.animation.leave;
    }
  };
  
  var transitionMap = {
    enter: 'transitionEnter',
    appear: 'transitionAppear',
    leave: 'transitionLeave'
  };
  
  var AnimateChild = function (_React$Component) {
    _inherits(AnimateChild, _React$Component);
  
    function AnimateChild() {
      _classCallCheck(this, AnimateChild);
  
      return _possibleConstructorReturn(this, (AnimateChild.__proto__ || Object.getPrototypeOf(AnimateChild)).apply(this, arguments));
    }
  
    _createClass(AnimateChild, [{
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.stop();
      }
    }, {
      key: 'componentWillEnter',
      value: function componentWillEnter(done) {
        if (util$1.isEnterSupported(this.props)) {
          this.transition('enter', done);
        } else {
          done();
        }
      }
    }, {
      key: 'componentWillAppear',
      value: function componentWillAppear(done) {
        if (util$1.isAppearSupported(this.props)) {
          this.transition('appear', done);
        } else {
          done();
        }
      }
    }, {
      key: 'componentWillLeave',
      value: function componentWillLeave(done) {
        if (util$1.isLeaveSupported(this.props)) {
          this.transition('leave', done);
        } else {
          // always sync, do not interupt with react component life cycle
          // update hidden -> animate hidden ->
          // didUpdate -> animate leave -> unmount (if animate is none)
          done();
        }
      }
    }, {
      key: 'transition',
      value: function transition(animationType, finishCallback) {
        var _this2 = this;
  
        var node = reactDom$2.findDOMNode(this);
        var props = this.props;
        var transitionName = props.transitionName;
        var nameIsObj = (typeof transitionName === 'undefined' ? 'undefined' : _typeof(transitionName)) === 'object';
        this.stop();
        var end = function end() {
          _this2.stopper = null;
          finishCallback();
        };
        if ((isCssAnimationSupported || !props.animation[animationType]) && transitionName && props[transitionMap[animationType]]) {
          var name = nameIsObj ? transitionName[animationType] : transitionName + '-' + animationType;
          var activeName = name + '-active';
          if (nameIsObj && transitionName[animationType + 'Active']) {
            activeName = transitionName[animationType + 'Active'];
          }
          this.stopper = cssAnimation(node, {
            name: name,
            active: activeName
          }, end);
        } else {
          this.stopper = props.animation[animationType](node, end);
        }
      }
    }, {
      key: 'stop',
      value: function stop() {
        var stopper = this.stopper;
        if (stopper) {
          this.stopper = null;
          stopper.stop();
        }
      }
    }, {
      key: 'render',
      value: function render() {
        return this.props.children;
      }
    }]);
  
    return AnimateChild;
  }(react$2.Component);
  
  AnimateChild.propTypes = {
    children: propTypes.any
  };
  
  var defaultKey = 'rc_animate_' + Date.now();
  function getChildrenFromProps(props) {
    var children = props.children;
    if (react$2.isValidElement(children)) {
      if (!children.key) {
        return react$2.cloneElement(children, {
          key: defaultKey
        });
      }
    }
    return children;
  }
  
  function noop$1() {}
  
  var Animate = function (_React$Component) {
    _inherits(Animate, _React$Component);
  
    // eslint-disable-line
  
    function Animate(props) {
      _classCallCheck(this, Animate);
  
      var _this = _possibleConstructorReturn(this, (Animate.__proto__ || Object.getPrototypeOf(Animate)).call(this, props));
  
      _initialiseProps.call(_this);
  
      _this.currentlyAnimatingKeys = {};
      _this.keysToEnter = [];
      _this.keysToLeave = [];
  
      _this.state = {
        children: toArrayChildren(getChildrenFromProps(props))
      };
  
      _this.childrenRefs = {};
      return _this;
    }
  
    _createClass(Animate, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        var _this2 = this;
  
        var showProp = this.props.showProp;
        var children = this.state.children;
        if (showProp) {
          children = children.filter(function (child) {
            return !!child.props[showProp];
          });
        }
        children.forEach(function (child) {
          if (child) {
            _this2.performAppear(child.key);
          }
        });
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        var _this3 = this;
  
        this.nextProps = nextProps;
        var nextChildren = toArrayChildren(getChildrenFromProps(nextProps));
        var props = this.props;
        // exclusive needs immediate response
        if (props.exclusive) {
          Object.keys(this.currentlyAnimatingKeys).forEach(function (key) {
            _this3.stop(key);
          });
        }
        var showProp = props.showProp;
        var currentlyAnimatingKeys = this.currentlyAnimatingKeys;
        // last props children if exclusive
        var currentChildren = props.exclusive ? toArrayChildren(getChildrenFromProps(props)) : this.state.children;
        // in case destroy in showProp mode
        var newChildren = [];
        if (showProp) {
          currentChildren.forEach(function (currentChild) {
            var nextChild = currentChild && findChildInChildrenByKey(nextChildren, currentChild.key);
            var newChild = void 0;
            if ((!nextChild || !nextChild.props[showProp]) && currentChild.props[showProp]) {
              newChild = react$2.cloneElement(nextChild || currentChild, _defineProperty$2({}, showProp, true));
            } else {
              newChild = nextChild;
            }
            if (newChild) {
              newChildren.push(newChild);
            }
          });
          nextChildren.forEach(function (nextChild) {
            if (!nextChild || !findChildInChildrenByKey(currentChildren, nextChild.key)) {
              newChildren.push(nextChild);
            }
          });
        } else {
          newChildren = mergeChildren(currentChildren, nextChildren);
        }
  
        // need render to avoid update
        this.setState({
          children: newChildren
        });
  
        nextChildren.forEach(function (child) {
          var key = child && child.key;
          if (child && currentlyAnimatingKeys[key]) {
            return;
          }
          var hasPrev = child && findChildInChildrenByKey(currentChildren, key);
          if (showProp) {
            var showInNext = child.props[showProp];
            if (hasPrev) {
              var showInNow = findShownChildInChildrenByKey(currentChildren, key, showProp);
              if (!showInNow && showInNext) {
                _this3.keysToEnter.push(key);
              }
            } else if (showInNext) {
              _this3.keysToEnter.push(key);
            }
          } else if (!hasPrev) {
            _this3.keysToEnter.push(key);
          }
        });
  
        currentChildren.forEach(function (child) {
          var key = child && child.key;
          if (child && currentlyAnimatingKeys[key]) {
            return;
          }
          var hasNext = child && findChildInChildrenByKey(nextChildren, key);
          if (showProp) {
            var showInNow = child.props[showProp];
            if (hasNext) {
              var showInNext = findShownChildInChildrenByKey(nextChildren, key, showProp);
              if (!showInNext && showInNow) {
                _this3.keysToLeave.push(key);
              }
            } else if (showInNow) {
              _this3.keysToLeave.push(key);
            }
          } else if (!hasNext) {
            _this3.keysToLeave.push(key);
          }
        });
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate() {
        var keysToEnter = this.keysToEnter;
        this.keysToEnter = [];
        keysToEnter.forEach(this.performEnter);
        var keysToLeave = this.keysToLeave;
        this.keysToLeave = [];
        keysToLeave.forEach(this.performLeave);
      }
    }, {
      key: 'isValidChildByKey',
      value: function isValidChildByKey(currentChildren, key) {
        var showProp = this.props.showProp;
        if (showProp) {
          return findShownChildInChildrenByKey(currentChildren, key, showProp);
        }
        return findChildInChildrenByKey(currentChildren, key);
      }
    }, {
      key: 'stop',
      value: function stop(key) {
        delete this.currentlyAnimatingKeys[key];
        var component = this.childrenRefs[key];
        if (component) {
          component.stop();
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _this4 = this;
  
        var props = this.props;
        this.nextProps = props;
        var stateChildren = this.state.children;
        var children = null;
        if (stateChildren) {
          children = stateChildren.map(function (child) {
            if (child === null || child === undefined) {
              return child;
            }
            if (!child.key) {
              throw new Error('must set key for <rc-animate> children');
            }
            return react$2.createElement(
              AnimateChild,
              {
                key: child.key,
                ref: function ref(node) {
                  return _this4.childrenRefs[child.key] = node;
                },
                animation: props.animation,
                transitionName: props.transitionName,
                transitionEnter: props.transitionEnter,
                transitionAppear: props.transitionAppear,
                transitionLeave: props.transitionLeave
              },
              child
            );
          });
        }
        var Component = props.component;
        if (Component) {
          var passedProps = props;
          if (typeof Component === 'string') {
            passedProps = _extends$1({
              className: props.className,
              style: props.style
            }, props.componentProps);
          }
          return react$2.createElement(
            Component,
            passedProps,
            children
          );
        }
        return children[0] || null;
      }
    }]);
  
    return Animate;
  }(react$2.Component);
  
  Animate.isAnimate = true;
  Animate.propTypes = {
    component: propTypes.any,
    componentProps: propTypes.object,
    animation: propTypes.object,
    transitionName: propTypes.oneOfType([propTypes.string, propTypes.object]),
    transitionEnter: propTypes.bool,
    transitionAppear: propTypes.bool,
    exclusive: propTypes.bool,
    transitionLeave: propTypes.bool,
    onEnd: propTypes.func,
    onEnter: propTypes.func,
    onLeave: propTypes.func,
    onAppear: propTypes.func,
    showProp: propTypes.string
  };
  Animate.defaultProps = {
    animation: {},
    component: 'span',
    componentProps: {},
    transitionEnter: true,
    transitionLeave: true,
    transitionAppear: false,
    onEnd: noop$1,
    onEnter: noop$1,
    onLeave: noop$1,
    onAppear: noop$1
  };
  
  var _initialiseProps = function _initialiseProps() {
    var _this5 = this;
  
    this.performEnter = function (key) {
      // may already remove by exclusive
      if (_this5.childrenRefs[key]) {
        _this5.currentlyAnimatingKeys[key] = true;
        _this5.childrenRefs[key].componentWillEnter(_this5.handleDoneAdding.bind(_this5, key, 'enter'));
      }
    };
  
    this.performAppear = function (key) {
      if (_this5.childrenRefs[key]) {
        _this5.currentlyAnimatingKeys[key] = true;
        _this5.childrenRefs[key].componentWillAppear(_this5.handleDoneAdding.bind(_this5, key, 'appear'));
      }
    };
  
    this.handleDoneAdding = function (key, type) {
      var props = _this5.props;
      delete _this5.currentlyAnimatingKeys[key];
      // if update on exclusive mode, skip check
      if (props.exclusive && props !== _this5.nextProps) {
        return;
      }
      var currentChildren = toArrayChildren(getChildrenFromProps(props));
      if (!_this5.isValidChildByKey(currentChildren, key)) {
        // exclusive will not need this
        _this5.performLeave(key);
      } else {
        if (type === 'appear') {
          if (util$1.allowAppearCallback(props)) {
            props.onAppear(key);
            props.onEnd(key, true);
          }
        } else {
          if (util$1.allowEnterCallback(props)) {
            props.onEnter(key);
            props.onEnd(key, true);
          }
        }
      }
    };
  
    this.performLeave = function (key) {
      // may already remove by exclusive
      if (_this5.childrenRefs[key]) {
        _this5.currentlyAnimatingKeys[key] = true;
        _this5.childrenRefs[key].componentWillLeave(_this5.handleDoneLeaving.bind(_this5, key));
      }
    };
  
    this.handleDoneLeaving = function (key) {
      var props = _this5.props;
      delete _this5.currentlyAnimatingKeys[key];
      // if update on exclusive mode, skip check
      if (props.exclusive && props !== _this5.nextProps) {
        return;
      }
      var currentChildren = toArrayChildren(getChildrenFromProps(props));
      // in case state change is too fast
      if (_this5.isValidChildByKey(currentChildren, key)) {
        _this5.performEnter(key);
      } else {
        var end = function end() {
          if (util$1.allowLeaveCallback(props)) {
            props.onLeave(key);
            props.onEnd(key, false);
          }
        };
        if (!isSameChildren(_this5.state.children, currentChildren, props.showProp)) {
          _this5.setState({
            children: currentChildren
          }, end);
        } else {
          end();
        }
      }
    };
  };
  
  /**
   * Safe chained function
   *
   * Will only create a new function if needed,
   * otherwise will pass back existing functions or null.
   *
   * @returns {function|null}
   */
  function createChainedFunction() {
    var args = [].slice.call(arguments, 0);
    if (args.length === 1) {
      return args[0];
    }
  
    return function chainedFunction() {
      for (var i = 0; i < args.length; i++) {
        if (args[i] && args[i].apply) {
          args[i].apply(this, arguments);
        }
      }
    };
  }
  
  var classnames = createCommonjsModule(function (module) {
  /*!
    Copyright (c) 2017 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  */
  /* global define */
  
  (function () {
    var hasOwn = {}.hasOwnProperty;
  
    function classNames () {
      var classes = [];
  
      for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        if (!arg) continue;
  
        var argType = typeof arg;
  
        if (argType === 'string' || argType === 'number') {
          classes.push(arg);
        } else if (Array.isArray(arg) && arg.length) {
          var inner = classNames.apply(null, arg);
          if (inner) {
            classes.push(inner);
          }
        } else if (argType === 'object') {
          for (var key in arg) {
            if (hasOwn.call(arg, key) && arg[key]) {
              classes.push(key);
            }
          }
        }
      }
  
      return classes.join(' ');
    }
  
    if ('object' !== 'undefined' && module.exports) {
      classNames.default = classNames;
      module.exports = classNames;
    } else if (typeof undefined === 'function' && typeof undefined.amd === 'object' && undefined.amd) {
      // register as 'classnames', consistent with npm package name
      undefined('classnames', [], function () {
        return classNames;
      });
    } else {
      window.classNames = classNames;
    }
  }());
  });
  
  var Notice = function (_Component) {
    _inherits(Notice, _Component);
  
    function Notice() {
      var _ref;
  
      var _temp, _this, _ret;
  
      _classCallCheck(this, Notice);
  
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
  
      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Notice.__proto__ || Object.getPrototypeOf(Notice)).call.apply(_ref, [this].concat(args))), _this), _this.close = function () {
        _this.clearCloseTimer();
        _this.props.onClose();
      }, _this.startCloseTimer = function () {
        if (_this.props.duration) {
          _this.closeTimer = setTimeout(function () {
            _this.close();
          }, _this.props.duration * 1000);
        }
      }, _this.clearCloseTimer = function () {
        if (_this.closeTimer) {
          clearTimeout(_this.closeTimer);
          _this.closeTimer = null;
        }
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }
  
    _createClass(Notice, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        this.startCloseTimer();
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.clearCloseTimer();
      }
    }, {
      key: 'render',
      value: function render() {
        var _className;
  
        var props = this.props;
        var componentClass = props.prefixCls + '-notice';
        var className = (_className = {}, _defineProperty$2(_className, '' + componentClass, 1), _defineProperty$2(_className, componentClass + '-closable', props.closable), _defineProperty$2(_className, props.className, !!props.className), _className);
        return react$2.createElement(
          'div',
          { className: classnames(className), style: props.style, onMouseEnter: this.clearCloseTimer,
            onMouseLeave: this.startCloseTimer
          },
          react$2.createElement(
            'div',
            { className: componentClass + '-content' },
            props.children
          ),
          props.closable ? react$2.createElement(
            'a',
            { tabIndex: '0', onClick: this.close, className: componentClass + '-close' },
            react$2.createElement('span', { className: componentClass + '-close-x' })
          ) : null
        );
      }
    }]);
  
    return Notice;
  }(react_1$1);
  
  Notice.propTypes = {
    duration: propTypes.number,
    onClose: propTypes.func,
    children: propTypes.any
  };
  Notice.defaultProps = {
    onEnd: function onEnd() {},
    onClose: function onClose() {},
  
    duration: 1.5,
    style: {
      right: '50%'
    }
  };
  
  var seed = 0;
  var now$2 = Date.now();
  
  function getUuid() {
    return 'rcNotification_' + now$2 + '_' + seed++;
  }
  
  var Notification$1 = function (_Component) {
    _inherits(Notification, _Component);
  
    function Notification() {
      var _ref;
  
      var _temp, _this, _ret;
  
      _classCallCheck(this, Notification);
  
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
  
      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Notification.__proto__ || Object.getPrototypeOf(Notification)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        notices: []
      }, _this.add = function (notice) {
        var key = notice.key = notice.key || getUuid();
        _this.setState(function (previousState) {
          var notices = previousState.notices;
          if (!notices.filter(function (v) {
            return v.key === key;
          }).length) {
            return {
              notices: notices.concat(notice)
            };
          }
        });
      }, _this.remove = function (key) {
        _this.setState(function (previousState) {
          return {
            notices: previousState.notices.filter(function (notice) {
              return notice.key !== key;
            })
          };
        });
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }
  
    _createClass(Notification, [{
      key: 'getTransitionName',
      value: function getTransitionName() {
        var props = this.props;
        var transitionName = props.transitionName;
        if (!transitionName && props.animation) {
          transitionName = props.prefixCls + '-' + props.animation;
        }
        return transitionName;
      }
    }, {
      key: 'render',
      value: function render() {
        var _this2 = this,
            _className;
  
        var props = this.props;
        var noticeNodes = this.state.notices.map(function (notice) {
          var onClose = createChainedFunction(_this2.remove.bind(_this2, notice.key), notice.onClose);
          return react$2.createElement(
            Notice,
            _extends$1({
              prefixCls: props.prefixCls
            }, notice, {
              onClose: onClose
            }),
            notice.content
          );
        });
        var className = (_className = {}, _defineProperty$2(_className, props.prefixCls, 1), _defineProperty$2(_className, props.className, !!props.className), _className);
        return react$2.createElement(
          'div',
          { className: classnames(className), style: props.style },
          react$2.createElement(
            Animate,
            { transitionName: this.getTransitionName() },
            noticeNodes
          )
        );
      }
    }]);
  
    return Notification;
  }(react_1$1);
  
  Notification$1.propTypes = {
    prefixCls: propTypes.string,
    transitionName: propTypes.string,
    animation: propTypes.oneOfType([propTypes.string, propTypes.object]),
    style: propTypes.object
  };
  Notification$1.defaultProps = {
    prefixCls: 'rc-notification',
    animation: 'fade',
    style: {
      top: 65,
      left: '50%'
    }
  };
  
  
  Notification$1.newInstance = function newNotificationInstance(properties) {
    var _ref2 = properties || {},
        getContainer = _ref2.getContainer,
        props = _objectWithoutProperties(_ref2, ['getContainer']);
  
    var div = void 0;
    if (getContainer) {
      div = getContainer();
    } else {
      div = document.createElement('div');
      document.body.appendChild(div);
    }
    var notification = reactDom$2.render(react$2.createElement(Notification$1, props), div);
    return {
      notice: function notice(noticeProps) {
        notification.add(noticeProps);
      },
      removeNotice: function removeNotice(key) {
        notification.remove(key);
      },
  
      component: notification,
      destroy: function destroy() {
        reactDom$2.unmountComponentAtNode(div);
        if (!getContainer) {
          document.body.removeChild(div);
        }
      }
    };
  };
  
  
  
  var es = Object.freeze({
    default: Notification$1
  });
  
  function omit(obj, fields) {
    var shallowCopy = _extends$1({}, obj);
    for (var i = 0; i < fields.length; i++) {
      var key = fields[i];
      delete shallowCopy[key];
    }
    return shallowCopy;
  }
  
  
  
  var es$1 = Object.freeze({
    default: omit
  });
  
  var _omit = ( es$1 && omit ) || es$1;
  
  var icon = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  
  
  
  var _extends3 = _interopRequireDefault(_extends);
  
  
  
  var _defineProperty3 = _interopRequireDefault(defineProperty$2);
  
  
  
  var _react2 = _interopRequireDefault(react$2);
  
  
  
  var _classnames2 = _interopRequireDefault(classnames);
  
  
  
  var _omit2 = _interopRequireDefault(_omit);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
  
  var Icon = function Icon(props) {
      var type = props.type,
          _props$className = props.className,
          className = _props$className === undefined ? '' : _props$className,
          spin = props.spin;
  
      var classString = (0, _classnames2['default'])((0, _defineProperty3['default'])({
          anticon: true,
          'anticon-spin': !!spin || type === 'loading'
      }, 'anticon-' + type, true), className);
      return _react2['default'].createElement('i', (0, _extends3['default'])({}, (0, _omit2['default'])(props, ['type', 'spin']), { className: classString }));
  };
  exports['default'] = Icon;
  module.exports = exports['default'];
  });
  
  unwrapExports(icon);
  
  var _rcNotification = ( es && Notification$1 ) || es;
  
  var message = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  
  
  
  var _react2 = _interopRequireDefault(react$2);
  
  
  
  var _rcNotification2 = _interopRequireDefault(_rcNotification);
  
  
  
  var _icon2 = _interopRequireDefault(icon);
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
  
  var defaultDuration = 3;
  var defaultTop = void 0;
  var messageInstance = void 0;
  var key = 1;
  var prefixCls = 'ant-message';
  var getContainer = void 0;
  function getMessageInstance() {
      messageInstance = messageInstance || _rcNotification2['default'].newInstance({
          prefixCls: prefixCls,
          transitionName: 'move-up',
          style: { top: defaultTop },
          getContainer: getContainer
      });
      return messageInstance;
  }
  function notice(content) {
      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDuration;
      var type = arguments[2];
      var onClose = arguments[3];
  
      var iconType = {
          info: 'info-circle',
          success: 'check-circle',
          error: 'cross-circle',
          warning: 'exclamation-circle',
          loading: 'loading'
      }[type];
      var instance = getMessageInstance();
      instance.notice({
          key: key,
          duration: duration,
          style: {},
          content: _react2['default'].createElement(
              'div',
              { className: prefixCls + '-custom-content ' + prefixCls + '-' + type },
              _react2['default'].createElement(_icon2['default'], { type: iconType }),
              _react2['default'].createElement(
                  'span',
                  null,
                  content
              )
          ),
          onClose: onClose
      });
      return function () {
          var target = key++;
          return function () {
              instance.removeNotice(target);
          };
      }();
  }
  exports['default'] = {
      info: function info(content, duration, onClose) {
          return notice(content, duration, 'info', onClose);
      },
      success: function success(content, duration, onClose) {
          return notice(content, duration, 'success', onClose);
      },
      error: function error(content, duration, onClose) {
          return notice(content, duration, 'error', onClose);
      },
  
      // Departed usage, please use warning()
      warn: function warn(content, duration, onClose) {
          return notice(content, duration, 'warning', onClose);
      },
      warning: function warning(content, duration, onClose) {
          return notice(content, duration, 'warning', onClose);
      },
      loading: function loading(content, duration, onClose) {
          return notice(content, duration, 'loading', onClose);
      },
      config: function config(options) {
          if (options.top !== undefined) {
              defaultTop = options.top;
              messageInstance = null; // delete messageInstance for new defaultTop
          }
          if (options.duration !== undefined) {
              defaultDuration = options.duration;
          }
          if (options.prefixCls !== undefined) {
              prefixCls = options.prefixCls;
          }
          if (options.getContainer !== undefined) {
              getContainer = options.getContainer;
          }
      },
      destroy: function destroy() {
          if (messageInstance) {
              messageInstance.destroy();
              messageInstance = null;
          }
      }
  };
  module.exports = exports['default'];
  });
  
  var index$5 = unwrapExports(message);
  
  var component$20 = reducerComponent("AddableComponentBox");
  
  function reducer$9(_, state) {
    return /* Update */__(0, [/* record */[/* isShowComponentList */!state[/* isShowComponentList */0]]]);
  }
  
  function render$35(categoryType, componentArr, addSpecificComponent, param) {
    var send = param[/* send */3];
    var match = param[/* state */1][/* isShowComponentList */0];
    return react_3$1("article", {
                className: "wonder-addable-componentBox"
              }, react_3$1("div", {
                    className: "category-header",
                    onClick: (function () {
                        return _1(send, /* ToggleShowList */0);
                      })
                  }, textEl(categoryType)), match ? react_3$1("div", {
                      className: "category-content"
                    }, componentArr.map((function (param) {
                            var type_ = param[/* type_ */0];
                            return react_3$1("div", {
                                        key: getRandomKey(/* () */0),
                                        className: "content-type",
                                        onClick: (function () {
                                            return _1(addSpecificComponent, type_);
                                          })
                                      }, textEl(type_));
                          }))) : null);
  }
  
  function make$26(categoryType, componentArr, addSpecificComponent, _) {
    return /* record */[
            /* debugName */component$20[/* debugName */0],
            /* reactClassInternal */component$20[/* reactClassInternal */1],
            /* handedOffState */component$20[/* handedOffState */2],
            /* willReceiveProps */component$20[/* willReceiveProps */3],
            /* didMount */component$20[/* didMount */4],
            /* didUpdate */component$20[/* didUpdate */5],
            /* willUnmount */component$20[/* willUnmount */6],
            /* willUpdate */component$20[/* willUpdate */7],
            /* shouldUpdate */component$20[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$35(categoryType, componentArr, addSpecificComponent, self);
              }),
            /* initialState */(function () {
                return /* record */[/* isShowComponentList */false];
              }),
            /* retainedProps */component$20[/* retainedProps */11],
            /* reducer */reducer$9,
            /* subscriptions */component$20[/* subscriptions */13],
            /* jsElementWrapped */component$20[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function getInspectorComponentType(type_) {
    switch (type_) {
      case "ArcballCameraController" : 
          return /* ArcballCameraController */3;
      case "Camera" : 
          return /* Camera */4;
      case "Light" : 
          return /* Light */6;
      case "Material" : 
          return /* Material */5;
      case "MeshRenderer" : 
          return /* MeshRenderer */1;
      default:
        return fatal(buildFatalMessage("getInspectorComponentType", "the type:" + (String(type_) + " in InspectorComponentType is can\'t add"), "", "", ""));
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function hasLightComponent(gameObject, engineState) {
    if (hasDirectionLightComponent$1(gameObject, engineState)) {
      return true;
    } else {
      return hasPointLightComponent$1(gameObject, engineState);
    }
  }
  
  function getLightComponent(_, _$1) {
    return -100;
  }
  
  
  /* GameObjectComponentEngineService-WonderEditor Not a pure module */
  
  function replaceMaterial$2(param, gameObject, param$1, state) {
    var state$1 = _3(param$1[0], gameObject, param[0], state);
    var state$2 = _3(param$1[1], gameObject, param[1], state$1);
    var match = getMeshRendererComponent(gameObject, state$2[/* gameObjectRecord */11]);
    var state$3;
    if (match !== undefined) {
      var state$4 = deferDisposeMeshRendererComponent(gameObject, match, state$2);
      var match$1 = create$17(state$4);
      state$3 = addMeshRendererComponent(gameObject, match$1[1], match$1[0]);
    } else {
      state$3 = state$2;
    }
    return initGameObject$1(gameObject, state$3);
  }
  
  
  /* GameObjectAPI-Wonderjs Not a pure module */
  
  function replaceMaterial$1(param, gameObject, param$1, state) {
    return replaceMaterial$2(/* tuple */[
                param[0],
                param[1]
              ], gameObject, /* tuple */[
                param$1[0],
                param$1[1]
              ], state);
  }
  
  
  /* ReplaceMaterialMainService-Wonderjs Not a pure module */
  
  function hasMaterialComponent(gameObject, engineState) {
    if (hasBasicMaterialComponent$1(gameObject, engineState)) {
      return true;
    } else {
      return hasLightMaterialComponent$1(gameObject, engineState);
    }
  }
  
  function getMaterialComponent(_, _$1) {
    return -100;
  }
  
  function replaceMaterial(param, sourceMaterial, targetMaterial, gameObject, state) {
    return replaceMaterial$1(/* tuple */[
                sourceMaterial,
                targetMaterial
              ], gameObject, /* tuple */[
                param[0],
                param[1]
              ], state);
  }
  
  
  /* MaterialAPI-Wonderjs Not a pure module */
  
  function isHasSpecificComponentByType(type_, gameObject, engineState) {
    var exit = 0;
    switch (type_) {
      case 1 : 
          return hasMeshRendererComponent$1(gameObject, engineState);
      case 3 : 
          return hasArcballCameraControllerComponent$1(gameObject, engineState);
      case 4 : 
          return hasCameraComponent(gameObject, engineState);
      case 5 : 
          return hasMaterialComponent(gameObject, engineState);
      case 6 : 
          return hasLightComponent(gameObject, engineState);
      case 0 : 
      case 2 : 
      case 7 : 
          exit = 1;
          break;
      
    }
    if (exit === 1) {
      return fatal(buildFatalMessage("isHasSpecificComponentByType", "the type:" + (String(type_) + " in inspectorComponentType is can\'t add "), "", "", ""));
    }
    
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function addComponentByType(type_, currentSceneTreeNode, param) {
    var engineState = param[1];
    var editorState = param[0];
    var exit = 0;
    switch (type_) {
      case 1 : 
          var match = create$67(engineState);
          return addMeshRendererComponent$2(currentSceneTreeNode, match[1], /* tuple */[
                      editorState,
                      match[0]
                    ]);
      case 3 : 
          var match$1 = create$75(engineState);
          return addArcballCameraControllerComponent$2(currentSceneTreeNode, match$1[1], /* tuple */[
                      editorState,
                      match$1[0]
                    ]);
      case 4 : 
          var match$2 = createCameraComponent(engineState);
          return addCameraComponent(currentSceneTreeNode, match$2[1], /* tuple */[
                      editorState,
                      match$2[0]
                    ]);
      case 5 : 
          var match$3 = create$68(engineState);
          return addLightMaterialComponent$2(currentSceneTreeNode, match$3[1], /* tuple */[
                      editorState,
                      match$3[0]
                    ]);
      case 6 : 
          var match$4 = isExceedMaxCount(engineState);
          if (match$4) {
            var messageObj = index$5;
            messageObj.info("the direction light count is exceed max count !", 4);
            return /* tuple */[
                    editorState,
                    engineState
                  ];
          } else {
            var match$5 = create$69(engineState);
            return addDirectionLightComponent$2(currentSceneTreeNode, match$5[1], /* tuple */[
                        editorState,
                        match$5[0]
                      ]);
          }
      case 0 : 
      case 2 : 
      case 7 : 
          exit = 1;
          break;
      
    }
    if (exit === 1) {
      return fatal(buildFatalMessage("addComponentByType", "the type:" + (String(type_) + " in inspectorComponentType is can\'t add "), "", "", ""));
    }
    
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  var setUndoValueToCopiedEngineState$9 = EmptyEventHandler[1];
  
  function handleSelfLogic$8(param, currentSceneTreeNode, type_) {
    var editorState = getState(/* () */0);
    var match = addComponentByType(type_, getEditEngineComponent(/* GameObject */0, currentSceneTreeNode), /* tuple */[
          undefined,
          getEditEngineState(/* () */0)
        ]);
    setEditEngineState(match[1]);
    var match$1 = addComponentByType(type_, currentSceneTreeNode, /* tuple */[
          editorState,
          getRunEngineState(/* () */0)
        ]);
    var editorStateForComponent = match$1[0];
    setRunEngineState(match$1[1]);
    if (editorStateForComponent !== undefined) {
      setState(editorStateForComponent);
    } else {
      setState(editorState);
    }
    var match$2 = type_ === /* Light */6;
    if (match$2) {
      reInitAllMaterials(/* () */0);
    }
    refreshEditAndRunEngineState(/* () */0);
    _1(param[1], [
          UpdateAction,
          /* Update */[/* array */[/* Inspector */1]]
        ]);
    return /* () */0;
  }
  
  var MakeEventHandler$9 = MakeEventHandler$1([
        handleSelfLogic$8,
        setUndoValueToCopiedEngineState$9
      ]);
  
  
  /* MakeEventHandler Not a pure module */
  
  function addSpecificComponent(param, currentSceneTreeNode, type_) {
    var type_$1 = getInspectorComponentType(type_);
    var match = getEngineStateToGetData((function (param) {
            return isHasSpecificComponentByType(type_$1, currentSceneTreeNode, param);
          }));
    if (match) {
      var messageObj = index$5;
      return messageObj.warn("the game object already have this component !", 4);
    } else {
      return _3(MakeEventHandler$9[/* pushUndoStackWithNoCopyEngineState */0], /* tuple */[
                  param[0],
                  param[1]
                ], currentSceneTreeNode, type_$1);
    }
  }
  
  function buildGameObjectAddableComponent(param, currentSceneTreeNode, componentArr) {
    var dispatchFunc = param[1];
    var store = param[0];
    return componentArr.map((function (param) {
                  var partial_arg = /* tuple */[
                    store,
                    dispatchFunc
                  ];
                  return element(getRandomKey(/* () */0), undefined, make$26(param[/* type_ */0], param[/* components */1], (function (param) {
                                    return addSpecificComponent(partial_arg, currentSceneTreeNode, param);
                                  }), /* array */[]));
                }));
  }
  
  var component$19 = reducerComponent("AddableComponent");
  
  function reducer$8(_, state) {
    return /* Update */__(0, [/* record */[/* isShowAddableComponent */!state[/* isShowAddableComponent */0]]]);
  }
  
  function render$34(param, currentSceneTreeNode, addableComponentList, param$1) {
    var send = param$1[/* send */3];
    var match = param$1[/* state */1][/* isShowAddableComponent */0];
    return react_3$1("article", {
                className: "wonder-addable-component"
              }, react_3$1("div", {
                    className: "addable-component-content"
                  }, react_3$1("button", {
                        className: "addable-btn",
                        onClick: (function () {
                            return _1(send, /* ToggleAddableComponent */0);
                          })
                      }, textEl("Add Component")), match ? react_3$1("div", {
                          className: "component-list"
                        }, buildGameObjectAddableComponent(/* tuple */[
                              param[0],
                              param[1]
                            ], currentSceneTreeNode, addableComponentList)) : null));
  }
  
  function make$25(reduxTuple, currentSceneTreeNode, addableComponentList, _) {
    return /* record */[
            /* debugName */component$19[/* debugName */0],
            /* reactClassInternal */component$19[/* reactClassInternal */1],
            /* handedOffState */component$19[/* handedOffState */2],
            /* willReceiveProps */component$19[/* willReceiveProps */3],
            /* didMount */component$19[/* didMount */4],
            /* didUpdate */component$19[/* didUpdate */5],
            /* willUnmount */component$19[/* willUnmount */6],
            /* willUpdate */component$19[/* willUpdate */7],
            /* shouldUpdate */component$19[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$34(reduxTuple, currentSceneTreeNode, addableComponentList, self);
              }),
            /* initialState */(function () {
                return /* record */[/* isShowAddableComponent */false];
              }),
            /* retainedProps */component$19[/* retainedProps */11],
            /* reducer */reducer$8,
            /* subscriptions */component$19[/* subscriptions */13],
            /* jsElementWrapped */component$19[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function createPointLight(state) {
    var match = create$14(state[/* pointLightRecord */22]);
    state[/* pointLightRecord */22] = match[0];
    return /* tuple */[
            state,
            match[1]
          ];
  }
  
  function getPointLightColor$1(light, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(light, isAlive$4, state[/* pointLightRecord */22]);
          }), getIsDebug(stateData));
    return getColor$9(getMappedIndex(light, getMappedIndexMap$1(state[/* pointLightRecord */22])), state[/* pointLightRecord */22]);
  }
  
  function setPointLightColor$1(light, color, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(light, isAlive$4, state[/* pointLightRecord */22]);
          }), getIsDebug(stateData));
    var newrecord = caml_array_dup(state);
    newrecord[/* pointLightRecord */22] = setColor$4(getMappedIndex(light, getMappedIndexMap$1(state[/* pointLightRecord */22])), color, state[/* pointLightRecord */22]);
    return newrecord;
  }
  
  function getPointLightIntensity$1(light, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(light, isAlive$4, state[/* pointLightRecord */22]);
          }), getIsDebug(stateData));
    return getIntensity$4(getMappedIndex(light, getMappedIndexMap$1(state[/* pointLightRecord */22])), state[/* pointLightRecord */22]);
  }
  
  function setPointLightIntensity$1(light, color, state) {
    requireCheck((function () {
            return checkComponentShouldAlive(light, isAlive$4, state[/* pointLightRecord */22]);
          }), getIsDebug(stateData));
    var newrecord = caml_array_dup(state);
    newrecord[/* pointLightRecord */22] = setIntensity$2(getMappedIndex(light, getMappedIndexMap$1(state[/* pointLightRecord */22])), color, state[/* pointLightRecord */22]);
    return newrecord;
  }
  
  function isExceedMaxCount$4(param) {
    var pointLightRecord = param[/* pointLightRecord */22];
    return isExceedMaxCount$2(pointLightRecord[/* index */0], getBufferMaxCount$1(/* () */0));
  }
  
  
  /* Contract-WonderLog Not a pure module */
  
  function setPointLightColor(value, component, state) {
    return setPointLightColor$1(component, value, state);
  }
  
  function setPointLightIntensity(value, component, state) {
    return setPointLightIntensity$1(component, value, state);
  }
  
  var create$87 = createPointLight;
  
  var getPointLightColor = getPointLightColor$1;
  
  var getPointLightIntensity = getPointLightIntensity$1;
  
  var isExceedMaxCount$3 = isExceedMaxCount$4;
  
  
  /* PointLightAPI-Wonderjs Not a pure module */
  
  function checkEditAndRunLightWithDiff(param, type_, editEngineState, runEngineState) {
    var runLight = param[1];
    var editLight = param[0];
    requireCheck((function () {
            return test(buildAssertMessage("editLight and runLight diff should == lightType diff value", "not"), (function () {
                          var diffValue = getEditEngineComponent$1(type_, unsafeGetDiffMap(getState(/* () */0)));
                          return Operators[/* = */0](editLight - runLight | 0, diffValue);
                        }));
          }), getStateIsDebug(/* () */0));
    return /* tuple */[
            runLight,
            editEngineState,
            runEngineState
          ];
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function createPointLight$1(editEngineState, runEngineState) {
    var match = create$87(editEngineState);
    var match$1 = create$87(runEngineState);
    return checkEditAndRunLightWithDiff(/* tuple */[
                match[1],
                match$1[1]
              ], /* PointLight */6, match[0], match$1[0]);
  }
  
  function disposePointLight(gameObject, lightComponent, param) {
    return handleFuncWithDiff(/* array */[
                /* record */[
                  /* arguments : array */[gameObject],
                  /* type_ : GameObject */0
                ],
                /* record */[
                  /* arguments : array */[lightComponent],
                  /* type_ : PointLight */6
                ]
              ], disposePointLightComponent, /* tuple */[
                param[0],
                param[1]
              ]);
  }
  
  function addPointLight(gameObject, lightComponent, param) {
    return handleFuncWithDiff(/* array */[
                /* record */[
                  /* arguments : array */[gameObject],
                  /* type_ : GameObject */0
                ],
                /* record */[
                  /* arguments : array */[lightComponent],
                  /* type_ : PointLight */6
                ]
              ], addPointLightComponent$1, /* tuple */[
                param[0],
                param[1]
              ]);
  }
  
  
  /* LightService-WonderEditor Not a pure module */
  
  function createDirectionLight$2(editEngineState, runEngineState) {
    var match = create$69(editEngineState);
    var match$1 = create$69(runEngineState);
    return checkEditAndRunLightWithDiff(/* tuple */[
                match[1],
                match$1[1]
              ], /* DirectionLight */5, match[0], match$1[0]);
  }
  
  function disposeDirectionLight(gameObject, lightComponent, param) {
    return handleFuncWithDiff(/* array */[
                /* record */[
                  /* arguments : array */[gameObject],
                  /* type_ : GameObject */0
                ],
                /* record */[
                  /* arguments : array */[lightComponent],
                  /* type_ : DirectionLight */5
                ]
              ], disposeDirectionLightComponent, /* tuple */[
                param[0],
                param[1]
              ]);
  }
  
  function addDirectionLight(gameObject, lightComponent, param) {
    return handleFuncWithDiff(/* array */[
                /* record */[
                  /* arguments : array */[gameObject],
                  /* type_ : GameObject */0
                ],
                /* record */[
                  /* arguments : array */[lightComponent],
                  /* type_ : DirectionLight */5
                ]
              ], addDirectionLightComponent$1, /* tuple */[
                param[0],
                param[1]
              ]);
  }
  
  
  /* LightService-WonderEditor Not a pure module */
  
  function getLightOptions() {
    return /* array */[
            /* record */[
              /* key : DirectionLight */0,
              /* value */"direction_light"
            ],
            /* record */[
              /* key : PointLight */1,
              /* value */"point_light"
            ]
          ];
  }
  
  function getLightTypeByGameObject(gameObject, engineState) {
    var match = hasDirectionLightComponent$1(gameObject, engineState);
    var match$1 = hasPointLightComponent$1(gameObject, engineState);
    var exit = 0;
    if (match) {
      if (match$1) {
        exit = 1;
      } else {
        return /* DirectionLight */0;
      }
    } else if (match$1) {
      return /* PointLight */1;
    } else {
      exit = 1;
    }
    if (exit === 1) {
      return fatal(buildFatalMessage("getLightTypeByGameObject", "gameObject:" + (String(gameObject) + " should has light component"), "", "", ""));
    }
    
  }
  
  function handleSpecificFuncByLightType(lightType, param) {
    var currentSceneTreeNode = getEditorState(unsafeGetCurrentSceneTreeNode);
    if (lightType) {
      return _1(param[1], currentSceneTreeNode);
    } else {
      return _1(param[0], currentSceneTreeNode);
    }
  }
  
  function _isLightExceedMaxCountByType(targetLightType, engineState) {
    if (targetLightType) {
      return /* tuple */[
              "the point light count is exceed max count !",
              isExceedMaxCount$3(engineState)
            ];
    } else {
      return /* tuple */[
              "the point light count is exceed max count !",
              isExceedMaxCount(engineState)
            ];
    }
  }
  
  function _getOperateSourceLightFunc(lightType, gameObject, engineStateToGetData) {
    if (lightType) {
      return /* tuple */[
              getPointLightComponent$1(gameObject, engineStateToGetData),
              disposePointLight
            ];
    } else {
      return /* tuple */[
              getDirectionLightComponent$1(gameObject, engineStateToGetData),
              disposeDirectionLight
            ];
    }
  }
  
  function _getOperateTargetLightFunc(lightType, editEngineState, runEngineState) {
    if (lightType) {
      return /* tuple */[
              createPointLight$1(editEngineState, runEngineState),
              addPointLight
            ];
    } else {
      return /* tuple */[
              createDirectionLight$2(editEngineState, runEngineState),
              addDirectionLight
            ];
    }
  }
  
  function replaceLightByType(sourceLightType, targetLightType) {
    var gameObject = getEditorState(unsafeGetCurrentSceneTreeNode);
    var editEngineState = getEditEngineState(/* () */0);
    var runEngineState = getRunEngineState(/* () */0);
    var match = _isLightExceedMaxCountByType(targetLightType, runEngineState);
    if (match[1]) {
      var messageObj = index$5;
      messageObj.warn(match[0], 4);
      return /* () */0;
    } else {
      var match$1 = _getOperateSourceLightFunc(sourceLightType, gameObject, runEngineState);
      var match$2 = _getOperateTargetLightFunc(targetLightType, editEngineState, runEngineState);
      var match$3 = match$2[0];
      var match$4 = handleFuncWithDiff(/* array */[/* record */[
              /* arguments : array */[gameObject],
              /* type_ : GameObject */0
            ]], initGameObject, _3(match$2[1], gameObject, match$3[0], _3(match$1[1], gameObject, match$1[0], /* tuple */[
                    match$3[1],
                    match$3[2]
                  ])));
      setEditEngineState(loopBody(0, match$4[0]));
      setRunEngineState(loopBody(0, match$4[1]));
      reInitAllMaterials(/* () */0);
      return refreshEditAndRunEngineState(/* () */0);
    }
  }
  
  function disposeLightByLightType(lightType, currentSceneTreeNode, param) {
    var engineState = param[1];
    var editorState = param[0];
    if (lightType) {
      return disposePointLightComponent$1(currentSceneTreeNode, getPointLightComponent$1(currentSceneTreeNode, engineState), /* tuple */[
                  editorState,
                  engineState
                ]);
    } else {
      return disposeDirectionLightComponent$1(currentSceneTreeNode, getDirectionLightComponent$1(currentSceneTreeNode, engineState), /* tuple */[
                  editorState,
                  engineState
                ]);
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function createBasicMaterial$1(editEngineState, runEngineState) {
    var match = create$77(editEngineState);
    var match$1 = create$77(runEngineState);
    return checkEditAndRunMaterialWithDiff(/* tuple */[
                match[1],
                match$1[1]
              ], /* BasicMaterial */3, match[0], match$1[0]);
  }
  
  function disposeBasicMaterial(gameObject, material, param) {
    return handleFuncWithDiff(/* array */[
                /* record */[
                  /* arguments : array */[gameObject],
                  /* type_ : GameObject */0
                ],
                /* record */[
                  /* arguments : array */[material],
                  /* type_ : BasicMaterial */3
                ]
              ], disposeBasicMaterialComponent, /* tuple */[
                param[0],
                param[1]
              ]);
  }
  
  function addBasicMaterial(gameObject, material, param) {
    return handleFuncWithDiff(/* array */[
                /* record */[
                  /* arguments : array */[gameObject],
                  /* type_ : GameObject */0
                ],
                /* record */[
                  /* arguments : array */[material],
                  /* type_ : BasicMaterial */3
                ]
              ], addBasicMaterialComponent$1, /* tuple */[
                param[0],
                param[1]
              ]);
  }
  
  function setBasicMaterialColor$1(color, material, param) {
    return handleFuncWithDiff(/* array */[/* record */[
                  /* arguments : array */[material],
                  /* type_ : BasicMaterial */3
                ]], (function (param, param$1) {
                  return setColor$6(color, param, param$1);
                }), /* tuple */[
                param[0],
                param[1]
              ]);
  }
  
  function setBasicMaterialMapToEngineState(mapId, newMaterial, engineStateTuple) {
    return handleFuncWithDiff(/* array */[
                /* record */[
                  /* arguments : array */[mapId],
                  /* type_ : Texture */8
                ],
                /* record */[
                  /* arguments : array */[newMaterial],
                  /* type_ : BasicMaterial */3
                ]
              ], setMap$3, engineStateTuple);
  }
  
  
  /* MaterialService-WonderEditor Not a pure module */
  
  function getMaterialOptions() {
    return /* array */[
            /* record */[
              /* key : BasicMaterial */0,
              /* value */"basic_material"
            ],
            /* record */[
              /* key : LightMaterial */1,
              /* value */"light_material"
            ]
          ];
  }
  
  function getMaterialTypeByGameObject(gameObject, engineState) {
    var match = hasBasicMaterialComponent$1(gameObject, engineState);
    var match$1 = hasLightMaterialComponent$1(gameObject, engineState);
    var exit = 0;
    if (match) {
      if (match$1) {
        exit = 1;
      } else {
        return /* BasicMaterial */0;
      }
    } else if (match$1) {
      return /* LightMaterial */1;
    } else {
      exit = 1;
    }
    if (exit === 1) {
      return fatal(buildFatalMessage("getMaterialTypeByGameObject", "gameObject:" + (String(gameObject) + " should has material component"), "", "", ""));
    }
    
  }
  
  function handleSpecificFuncByMaterialType(materialType, param) {
    var currentSceneTreeNode = getEditorState(unsafeGetCurrentSceneTreeNode);
    if (materialType) {
      return _1(param[1], currentSceneTreeNode);
    } else {
      return _1(param[0], currentSceneTreeNode);
    }
  }
  
  function _getOperateSourceMaterialFunc(materialType, gameObject, engineStateToGetData) {
    if (materialType) {
      return /* tuple */[
              /* LightMaterial */4,
              getLightMaterialComponent$1(gameObject, engineStateToGetData),
              disposeLightMaterialComponent
            ];
    } else {
      return /* tuple */[
              /* BasicMaterial */3,
              getBasicMaterialComponent$1(gameObject, engineStateToGetData),
              disposeBasicMaterialComponent
            ];
    }
  }
  
  function _getOperateTargetMaterialFunc(materialType, editEngineState, runEngineState) {
    if (materialType) {
      return /* tuple */[
              /* LightMaterial */4,
              createLightMaterial$1(editEngineState, runEngineState),
              addLightMaterialComponent$1
            ];
    } else {
      return /* tuple */[
              /* BasicMaterial */3,
              createBasicMaterial$1(editEngineState, runEngineState),
              addBasicMaterialComponent$1
            ];
    }
  }
  
  function replaceMaterialByType(sourceMateralType, targetMaterialType) {
    var gameObject = getEditorState(unsafeGetCurrentSceneTreeNode);
    var editEngineState = getEditEngineState(/* () */0);
    var runEngineState = getRunEngineState(/* () */0);
    var match = _getOperateSourceMaterialFunc(sourceMateralType, gameObject, runEngineState);
    var match$1 = _getOperateTargetMaterialFunc(targetMaterialType, editEngineState, runEngineState);
    var match$2 = match$1[1];
    var partial_arg_000 = match[2];
    var partial_arg_001 = match$1[2];
    var partial_arg = /* tuple */[
      partial_arg_000,
      partial_arg_001
    ];
    var match$3 = handleFuncWithDiff(/* array */[
          /* record */[
            /* arguments : array */[match[1]],
            /* type_ */match[0]
          ],
          /* record */[
            /* arguments : array */[match$2[0]],
            /* type_ */match$1[0]
          ],
          /* record */[
            /* arguments : array */[gameObject],
            /* type_ : GameObject */0
          ]
        ], (function (param, param$1, param$2, param$3) {
            return replaceMaterial(partial_arg, param, param$1, param$2, param$3);
          }), /* tuple */[
          match$2[1],
          match$2[2]
        ]);
    setRunEngineState(loopBody(0, match$3[1]));
    return setEditEngineState(loopBody(0, match$3[0]));
  }
  
  function disposeMaterialByMaterialType(materialType, currentSceneTreeNode, param) {
    var engineState = param[1];
    var editorState = param[0];
    if (materialType) {
      return disposeLightMaterialComponent$1(currentSceneTreeNode, getLightMaterialComponent$1(currentSceneTreeNode, engineState), /* tuple */[
                  editorState,
                  engineState
                ]);
    } else {
      return disposeBasicMaterialComponent$1(currentSceneTreeNode, getBasicMaterialComponent$1(currentSceneTreeNode, engineState), /* tuple */[
                  editorState,
                  engineState
                ]);
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  function removeComponentByType(type_, currentSceneTreeNode, param) {
    var engineState = param[1];
    var editorState = param[0];
    var exit = 0;
    switch (type_) {
      case 1 : 
          var meshRenderer = getMeshRendererComponent$1(currentSceneTreeNode, engineState);
          return disposeMeshRendererComponent$1(currentSceneTreeNode, meshRenderer, /* tuple */[
                      editorState,
                      engineState
                    ]);
      case 3 : 
          var arcballCameraController = getArcballCameraControllerComponent$1(currentSceneTreeNode, engineState);
          return disposeArcballCameraControllerComponent$1(currentSceneTreeNode, arcballCameraController, /* tuple */[
                      editorState,
                      engineState
                    ]);
      case 4 : 
          return disposeCameraComponent(currentSceneTreeNode, /* record */[
                      /* basicCameraView */getBasicCameraViewComponent$1(currentSceneTreeNode, engineState),
                      /* perspectiveCameraProjection */getPerspectiveCameraProjectionComponent$1(currentSceneTreeNode, engineState)
                    ], /* tuple */[
                      editorState,
                      engineState
                    ]);
      case 5 : 
          var materialType = getMaterialTypeByGameObject(currentSceneTreeNode, engineState);
          return disposeMaterialByMaterialType(materialType, currentSceneTreeNode, /* tuple */[
                      editorState,
                      engineState
                    ]);
      case 6 : 
          var lightType = getLightTypeByGameObject(currentSceneTreeNode, engineState);
          return disposeLightByLightType(lightType, currentSceneTreeNode, /* tuple */[
                      editorState,
                      engineState
                    ]);
      case 0 : 
      case 2 : 
      case 7 : 
          exit = 1;
          break;
      
    }
    if (exit === 1) {
      return fatal(buildFatalMessage("removeComponentByType", "the type_:" + (String(type_) + " in InspectorComponentType is can\'t remove"), "", "", ""));
    }
    
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  var setUndoValueToCopiedEngineState$10 = EmptyEventHandler[1];
  
  function handleSelfLogic$9(param, currentSceneTreeNode, type_) {
    var editorState = getState(/* () */0);
    var match = removeComponentByType(type_, getEditEngineComponent(/* GameObject */0, currentSceneTreeNode), /* tuple */[
          undefined,
          getEditEngineState(/* () */0)
        ]);
    setEditEngineState(match[1]);
    var match$1 = removeComponentByType(type_, currentSceneTreeNode, /* tuple */[
          editorState,
          getRunEngineState(/* () */0)
        ]);
    var editorStateForComponent = match$1[0];
    setRunEngineState(match$1[1]);
    if (editorStateForComponent !== undefined) {
      setState(editorStateForComponent);
    } else {
      setState(editorState);
    }
    refreshEditAndRunEngineState(/* () */0);
    var match$2 = type_ === /* Light */6;
    if (match$2) {
      reInitAllMaterials(/* () */0);
    }
    refreshEditAndRunEngineState(/* () */0);
    _1(param[1], [
          UpdateAction,
          /* Update */[/* array */[/* Inspector */1]]
        ]);
    return /* () */0;
  }
  
  var MakeEventHandler$10 = MakeEventHandler$1([
        handleSelfLogic$9,
        setUndoValueToCopiedEngineState$10
      ]);
  
  
  /* MakeEventHandler Not a pure module */
  
  var removeComponent$1 = MakeEventHandler$10[/* pushUndoStackWithNoCopyEngineState */0];
  
  var component$21 = reducerComponent("ComponentBox");
  
  function reducer$10() {
    return (function (state) {
        var match = state[/* isShowComponent */0];
        if (match) {
          return /* Update */__(0, [/* record */[
                      /* isShowComponent */false,
                      /* triangleDirection */"triangle-right"
                    ]]);
        } else {
          return /* Update */__(0, [/* record */[
                      /* isShowComponent */true,
                      /* triangleDirection */"triangle-bottom"
                    ]]);
        }
      });
  }
  
  function render$36(reduxTuple, param, param$1, param$2) {
    var send = param$2[/* send */3];
    var state = param$2[/* state */1];
    var type_ = param$1[2];
    var gameObject = param$1[0];
    var match = state[/* isShowComponent */0];
    return react_3$1("article", {
                className: "componentBox-component"
              }, react_3$1("div", {
                    className: "header"
                  }, react_3$1("div", {
                        className: "header-triangle",
                        onClick: (function () {
                            return _1(send, /* ShowComponent */0);
                          })
                      }, react_3$1("span", {
                            className: state[/* triangleDirection */1]
                          })), react_3$1("div", {
                        className: "header-title"
                      }, textEl(param[0])), param[1] ? react_3$1("span", {
                          className: "header-close",
                          onClick: (function () {
                              return _3(removeComponent$1, reduxTuple, gameObject, type_);
                            })
                        }, textEl("x")) : null), match ? param$1[1] : null);
  }
  
  function make$27(reduxTuple, header, isClosable, gameObject, gameObjectUIComponent, type_, _) {
    return /* record */[
            /* debugName */component$21[/* debugName */0],
            /* reactClassInternal */component$21[/* reactClassInternal */1],
            /* handedOffState */component$21[/* handedOffState */2],
            /* willReceiveProps */component$21[/* willReceiveProps */3],
            /* didMount */component$21[/* didMount */4],
            /* didUpdate */component$21[/* didUpdate */5],
            /* willUnmount */component$21[/* willUnmount */6],
            /* willUpdate */component$21[/* willUpdate */7],
            /* shouldUpdate */component$21[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$36(reduxTuple, /* tuple */[
                            header,
                            isClosable
                          ], /* tuple */[
                            gameObject,
                            gameObjectUIComponent,
                            type_
                          ], self);
              }),
            /* initialState */(function () {
                return /* record */[
                        /* isShowComponent */true,
                        /* triangleDirection */"triangle-bottom"
                      ];
              }),
            /* retainedProps */component$21[/* retainedProps */11],
            /* reducer */reducer$10,
            /* subscriptions */component$21[/* subscriptions */13],
            /* jsElementWrapped */component$21[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function change$4($$event) {
    var inputVal = $$event.target.value;
    switch (inputVal) {
      case "" : 
          return /* Change */[""];
      case "-" : 
          return /* Change */["-"];
      default:
        var match = (/^-?(0|[1-9][0-9]*)(\.[0-9]{0,6})?$/).test(inputVal);
        if (match) {
          return /* Change */[inputVal];
        } else {
          return /* Change */[undefined];
        }
    }
  }
  
  function triggerOnChange$1(value, onChangeFunc) {
    if (onChangeFunc !== undefined) {
      return _1(onChangeFunc, caml_float_of_string(value));
    } else {
      return /* () */0;
    }
  }
  
  function triggerOnBlur$1(value, onBlurFunc) {
    if (onBlurFunc !== undefined) {
      return _1(onBlurFunc, caml_float_of_string(value));
    } else {
      return /* () */0;
    }
  }
  
  function handleSpecificFuncByCanBeZero(_, value, canBeZero, param) {
    var canBeZeroFunc = param[0];
    if (canBeZero !== undefined && !canBeZero) {
      return _1(param[1], value);
    } else {
      return _1(canBeZeroFunc, value);
    }
  }
  
  function handleChangeAction(state, onChangeFunc, canBeZero, value) {
    if (value !== undefined) {
      var value$1 = value;
      switch (value$1) {
        case "" : 
            return /* Update */__(0, [/* record */[
                        /* inputValue */undefined,
                        /* originValue */state[/* originValue */1]
                      ]]);
        case "-" : 
            return /* Update */__(0, [/* record */[
                        /* inputValue */"-",
                        /* originValue */state[/* originValue */1]
                      ]]);
        case "0" : 
            return handleSpecificFuncByCanBeZero(state, "0", canBeZero, /* tuple */[
                        (function (value) {
                            return updateWithSideEffects(/* record */[
                                        /* inputValue */value,
                                        /* originValue */state[/* originValue */1]
                                      ], (function () {
                                          return triggerOnChange$1(value, onChangeFunc);
                                        }));
                          }),
                        (function (value) {
                            return /* Update */__(0, [/* record */[
                                        /* inputValue */value,
                                        /* originValue */state[/* originValue */1]
                                      ]]);
                          })
                      ]);
        case "0." : 
            return handleSpecificFuncByCanBeZero(state, "0.", canBeZero, /* tuple */[
                        (function (value) {
                            return updateWithSideEffects(/* record */[
                                        /* inputValue */value,
                                        /* originValue */state[/* originValue */1]
                                      ], (function () {
                                          return triggerOnChange$1(value, onChangeFunc);
                                        }));
                          }),
                        (function (value) {
                            return /* Update */__(0, [/* record */[
                                        /* inputValue */value,
                                        /* originValue */state[/* originValue */1]
                                      ]]);
                          })
                      ]);
        default:
          return updateWithSideEffects(/* record */[
                      /* inputValue */value$1,
                      /* originValue */state[/* originValue */1]
                    ], (function () {
                        return triggerOnChange$1(value$1, onChangeFunc);
                      }));
      }
    } else {
      return /* NoUpdate */0;
    }
  }
  
  function handleBlurAction$1(state, param, canBeZero) {
    var onBlurFunc = param[1];
    var onChangeFunc = param[0];
    var match = state[/* inputValue */0];
    var exit = 0;
    if (match !== undefined) {
      var value = match;
      switch (value) {
        case "" : 
        case "-" : 
            exit = 1;
            break;
        case "0" : 
        case "0." : 
            exit = 2;
            break;
        default:
          return updateWithSideEffects(/* record */[
                      /* inputValue */state[/* inputValue */0],
                      /* originValue */value
                    ], (function () {
                        return triggerOnBlur$1(value, onBlurFunc);
                      }));
      }
    } else {
      exit = 1;
    }
    switch (exit) {
      case 1 : 
          return handleSpecificFuncByCanBeZero(state, "0", canBeZero, /* tuple */[
                      (function (value) {
                          return updateWithSideEffects(/* record */[
                                      /* inputValue */value,
                                      /* originValue */state[/* originValue */1]
                                    ], (function () {
                                        triggerOnChange$1(value, onChangeFunc);
                                        return triggerOnBlur$1(value, onBlurFunc);
                                      }));
                        }),
                      (function () {
                          return /* Update */__(0, [/* record */[
                                      /* inputValue */state[/* originValue */1],
                                      /* originValue */state[/* originValue */1]
                                    ]]);
                        })
                    ]);
      case 2 : 
          return handleSpecificFuncByCanBeZero(state, "0", canBeZero, /* tuple */[
                      (function (value) {
                          return updateWithSideEffects(/* record */[
                                      /* inputValue */value,
                                      /* originValue */state[/* originValue */1]
                                    ], (function () {
                                        return triggerOnBlur$1(value, onBlurFunc);
                                      }));
                        }),
                      (function () {
                          var messageObj = index$5;
                          messageObj.warn("the value can't be 0 !", 4);
                          return /* Update */__(0, [/* record */[
                                      /* inputValue */state[/* originValue */1],
                                      /* originValue */state[/* originValue */1]
                                    ]]);
                        })
                    ]);
      
    }
  }
  
  var component$25 = reducerComponent("FloatInput");
  
  function reducer$13(param, canBeZero, action, state) {
    var onChangeFunc = param[0];
    if (action) {
      return handleChangeAction(state, onChangeFunc, canBeZero, action[0]);
    } else {
      return handleBlurAction$1(state, /* tuple */[
                  onChangeFunc,
                  param[1]
                ], canBeZero);
    }
  }
  
  function render$40(label, _, param) {
    var send = param[/* send */3];
    var match = param[/* state */1][/* inputValue */0];
    return react_3$1("article", {
                className: "wonder-float-input"
              }, label !== undefined ? react_3$1("span", {
                      className: "component-label"
                    }, textEl(label + " : ")) : null, react_3$1("input", {
                    className: "input-component float-input",
                    type: "text",
                    value: match !== undefined ? match : "",
                    onBlur: (function () {
                        return _1(send, /* Blur */0);
                      }),
                    onChange: (function (_e) {
                        return _1(send, change$4(_e));
                      })
                  }));
  }
  
  function make$31(defaultValue, label, onChange, onBlur, canBeZero, _) {
    var partial_arg = /* tuple */[
      onChange,
      onBlur
    ];
    return /* record */[
            /* debugName */component$25[/* debugName */0],
            /* reactClassInternal */component$25[/* reactClassInternal */1],
            /* handedOffState */component$25[/* handedOffState */2],
            /* willReceiveProps */component$25[/* willReceiveProps */3],
            /* didMount */component$25[/* didMount */4],
            /* didUpdate */component$25[/* didUpdate */5],
            /* willUnmount */component$25[/* willUnmount */6],
            /* willUpdate */component$25[/* willUpdate */7],
            /* shouldUpdate */component$25[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$40(label, onBlur, self);
              }),
            /* initialState */(function () {
                if (defaultValue !== undefined) {
                  var value = defaultValue;
                  return /* record */[
                          /* inputValue */value,
                          /* originValue */value
                        ];
                } else {
                  return /* record */[
                          /* inputValue */"0",
                          /* originValue */"0"
                        ];
                }
              }),
            /* retainedProps */component$25[/* retainedProps */11],
            /* reducer */(function (param, param$1) {
                return reducer$13(partial_arg, canBeZero, param, param$1);
              }),
            /* subscriptions */component$25[/* subscriptions */13],
            /* jsElementWrapped */component$25[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function floatToString(value) {
    return String(value);
  }
  
  
  /* No side effect */
  
  function setUndoValueToCopiedEngineState$11(_, lightComponent, intensity) {
    return handleFuncWithDiff(/* array */[/* record */[
                  /* arguments : array */[lightComponent],
                  /* type_ : PointLight */6
                ]], (function (param, param$1) {
                  return setPointLightIntensity(intensity, param, param$1);
                }), /* tuple */[
                deepCopyForRestore$11(getEditEngineState(/* () */0)),
                deepCopyForRestore$11(getRunEngineState(/* () */0))
              ]);
  }
  
  var CustomEventHandler_000$1 = /* handleSelfLogic */EmptyEventHandler[0];
  
  var CustomEventHandler$10 = /* module */[
    CustomEventHandler_000$1,
    /* setUndoValueToCopiedEngineState */setUndoValueToCopiedEngineState$11
  ];
  
  var MakeEventHandler$11 = MakeEventHandler$1(CustomEventHandler$10);
  
  
  /* MakeEventHandler Not a pure module */
  
  function blurIntensityEvent(param, lightComponent, intensity) {
    var match = isValueEqual(/* Float */1, intensity, getEngineStateToGetData((function (param) {
                return getPointLightIntensity(lightComponent, param);
              })));
    if (match) {
      return /* () */0;
    } else {
      return _3(MakeEventHandler$11[/* pushUndoStackWithCopiedEngineState */1], /* tuple */[
                  param[0],
                  param[1]
                ], lightComponent, intensity);
    }
  }
  
  function changeIntensity(lightComponent, value) {
    return getAndRefreshEngineStateWithDiff(/* array */[/* record */[
                  /* arguments : array */[lightComponent],
                  /* type_ : PointLight */6
                ]], (function (param, param$1) {
                  return setPointLightIntensity(value, param, param$1);
                }));
  }
  
  var component$24 = reducerComponent("MainEditorLightIntensity");
  
  function reducer$12(param, lightComponent, action, state) {
    blurIntensityEvent(/* tuple */[
          param[0],
          param[1]
        ], lightComponent, state[/* intensityValue */0]);
    return /* Update */__(0, [/* record */[/* intensityValue */action[0]]]);
  }
  
  function render$39(_, lightComponent, param) {
    var send = param[/* send */3];
    return react_3$1("article", {
                className: "wonder-light-intensity"
              }, element(undefined, undefined, make$31(floatToString(param[/* state */1][/* intensityValue */0]), "Intensity", (function (param) {
                          return changeIntensity(lightComponent, param);
                        }), (function (value) {
                          return _1(send, /* IntensityBlur */[value]);
                        }), undefined, /* array */[])));
  }
  
  function make$30(store, dispatchFunc, lightComponent, _) {
    var partial_arg = /* tuple */[
      store,
      dispatchFunc
    ];
    return /* record */[
            /* debugName */component$24[/* debugName */0],
            /* reactClassInternal */component$24[/* reactClassInternal */1],
            /* handedOffState */component$24[/* handedOffState */2],
            /* willReceiveProps */component$24[/* willReceiveProps */3],
            /* didMount */component$24[/* didMount */4],
            /* didUpdate */component$24[/* didUpdate */5],
            /* willUnmount */component$24[/* willUnmount */6],
            /* willUpdate */component$24[/* willUpdate */7],
            /* shouldUpdate */component$24[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$39(/* tuple */[
                            store,
                            dispatchFunc
                          ], lightComponent, self);
              }),
            /* initialState */(function () {
                return /* record */[/* intensityValue */getEngineStateToGetData((function (param) {
                                return getPointLightIntensity(lightComponent, param);
                              }))];
              }),
            /* retainedProps */component$24[/* retainedProps */11],
            /* reducer */(function (param, param$1) {
                return reducer$12(partial_arg, lightComponent, param, param$1);
              }),
            /* subscriptions */component$24[/* subscriptions */13],
            /* jsElementWrapped */component$24[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function setUndoValueToCopiedEngineState$12(_, lightComponent, value) {
    var partial_arg = convert16HexToRGBArr(value);
    return handleFuncWithDiff(/* array */[/* record */[
                  /* arguments : array */[lightComponent],
                  /* type_ : PointLight */6
                ]], (function (param, param$1) {
                  return setPointLightColor(partial_arg, param, param$1);
                }), /* tuple */[
                deepCopyForRestore$11(getEditEngineState(/* () */0)),
                deepCopyForRestore$11(getRunEngineState(/* () */0))
              ]);
  }
  
  var CustomEventHandler_000$2 = /* handleSelfLogic */EmptyEventHandler[0];
  
  var CustomEventHandler$11 = /* module */[
    CustomEventHandler_000$2,
    /* setUndoValueToCopiedEngineState */setUndoValueToCopiedEngineState$12
  ];
  
  var MakeEventHandler$12 = MakeEventHandler$1(CustomEventHandler$11);
  
  
  /* MakeEventHandler Not a pure module */
  
  var component$23 = statelessComponent("MainEditorPointLight");
  
  function changeColor$1(lightComponent, value) {
    var partial_arg = getEngineColorRgbArr(convertColorObjToColorPickType(value));
    return getAndRefreshEngineStateWithDiff(/* array */[/* record */[
                  /* arguments : array */[lightComponent],
                  /* type_ : PointLight */6
                ]], (function (param, param$1) {
                  return setPointLightColor(partial_arg, param, param$1);
                }));
  }
  
  var closeColorPick$1 = MakeEventHandler$12[/* pushUndoStackWithCopiedEngineState */1];
  
  function render$38(param, lightComponent, _) {
    var dispatchFunc = param[1];
    var store = param[0];
    return react_3$1("article", {
                className: "wonder-point-light"
              }, element(undefined, undefined, make$9("color : ", (function () {
                          return getHexString(getEngineStateToGetData((function (param) {
                                            return getPointLightColor(lightComponent, param);
                                          })));
                        }), (function (param) {
                          return changeColor$1(lightComponent, param);
                        }), _2(closeColorPick$1, /* tuple */[
                            store,
                            dispatchFunc
                          ], lightComponent), /* array */[])), react_3$1("div", {
                    className: "light-intensity"
                  }, element(undefined, undefined, make$30(store, dispatchFunc, lightComponent, /* array */[]))));
  }
  
  function make$29(store, dispatchFunc, lightComponent, _) {
    return /* record */[
            /* debugName */component$23[/* debugName */0],
            /* reactClassInternal */component$23[/* reactClassInternal */1],
            /* handedOffState */component$23[/* handedOffState */2],
            /* willReceiveProps */component$23[/* willReceiveProps */3],
            /* didMount */component$23[/* didMount */4],
            /* didUpdate */component$23[/* didUpdate */5],
            /* willUnmount */component$23[/* willUnmount */6],
            /* willUpdate */component$23[/* willUpdate */7],
            /* shouldUpdate */component$23[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$38(/* tuple */[
                            store,
                            dispatchFunc
                          ], lightComponent, self);
              }),
            /* initialState */component$23[/* initialState */10],
            /* retainedProps */component$23[/* retainedProps */11],
            /* reducer */component$23[/* reducer */12],
            /* subscriptions */component$23[/* subscriptions */13],
            /* jsElementWrapped */component$23[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function setUndoValueToCopiedEngineState$13(_, lightComponent, intensity) {
    return handleFuncWithDiff(/* array */[/* record */[
                  /* arguments : array */[lightComponent],
                  /* type_ : DirectionLight */5
                ]], (function (param, param$1) {
                  return setDirectionLightIntensity(intensity, param, param$1);
                }), /* tuple */[
                deepCopyForRestore$11(getEditEngineState(/* () */0)),
                deepCopyForRestore$11(getRunEngineState(/* () */0))
              ]);
  }
  
  var CustomEventHandler_000$3 = /* handleSelfLogic */EmptyEventHandler[0];
  
  var CustomEventHandler$12 = /* module */[
    CustomEventHandler_000$3,
    /* setUndoValueToCopiedEngineState */setUndoValueToCopiedEngineState$13
  ];
  
  var MakeEventHandler$13 = MakeEventHandler$1(CustomEventHandler$12);
  
  
  /* MakeEventHandler Not a pure module */
  
  function blurIntensityEvent$1(param, lightComponent, intensity) {
    var match = isValueEqual(/* Float */1, intensity, getEngineStateToGetData((function (param) {
                return getDirectionLightIntensity(lightComponent, param);
              })));
    if (match) {
      return /* () */0;
    } else {
      return _3(MakeEventHandler$13[/* pushUndoStackWithCopiedEngineState */1], /* tuple */[
                  param[0],
                  param[1]
                ], lightComponent, intensity);
    }
  }
  
  function changeIntensity$1(lightComponent, value) {
    return getAndRefreshEngineStateWithDiff(/* array */[/* record */[
                  /* arguments : array */[lightComponent],
                  /* type_ : DirectionLight */5
                ]], (function (param, param$1) {
                  return setDirectionLightIntensity(value, param, param$1);
                }));
  }
  
  var component$27 = reducerComponent("MainEditorLightIntensity");
  
  function reducer$14(param, lightComponent, action, state) {
    blurIntensityEvent$1(/* tuple */[
          param[0],
          param[1]
        ], lightComponent, state[/* intensityValue */0]);
    return /* Update */__(0, [/* record */[/* intensityValue */action[0]]]);
  }
  
  function render$42(_, lightComponent, param) {
    var send = param[/* send */3];
    return react_3$1("article", {
                className: "wonder-light-intensity"
              }, element(undefined, undefined, make$31(floatToString(param[/* state */1][/* intensityValue */0]), "Intensity", (function (param) {
                          return changeIntensity$1(lightComponent, param);
                        }), (function (value) {
                          return _1(send, /* IntensityBlur */[value]);
                        }), undefined, /* array */[])));
  }
  
  function make$33(store, dispatchFunc, lightComponent, _) {
    var partial_arg = /* tuple */[
      store,
      dispatchFunc
    ];
    return /* record */[
            /* debugName */component$27[/* debugName */0],
            /* reactClassInternal */component$27[/* reactClassInternal */1],
            /* handedOffState */component$27[/* handedOffState */2],
            /* willReceiveProps */component$27[/* willReceiveProps */3],
            /* didMount */component$27[/* didMount */4],
            /* didUpdate */component$27[/* didUpdate */5],
            /* willUnmount */component$27[/* willUnmount */6],
            /* willUpdate */component$27[/* willUpdate */7],
            /* shouldUpdate */component$27[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$42(/* tuple */[
                            store,
                            dispatchFunc
                          ], lightComponent, self);
              }),
            /* initialState */(function () {
                return /* record */[/* intensityValue */getEngineStateToGetData((function (param) {
                                return getDirectionLightIntensity(lightComponent, param);
                              }))];
              }),
            /* retainedProps */component$27[/* retainedProps */11],
            /* reducer */(function (param, param$1) {
                return reducer$14(partial_arg, lightComponent, param, param$1);
              }),
            /* subscriptions */component$27[/* subscriptions */13],
            /* jsElementWrapped */component$27[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function setUndoValueToCopiedEngineState$14(_, lightComponent, value) {
    var partial_arg = convert16HexToRGBArr(value);
    return handleFuncWithDiff(/* array */[/* record */[
                  /* arguments : array */[lightComponent],
                  /* type_ : DirectionLight */5
                ]], (function (param, param$1) {
                  return setDirectionLightColor(partial_arg, param, param$1);
                }), /* tuple */[
                deepCopyForRestore$11(getEditEngineState(/* () */0)),
                deepCopyForRestore$11(getRunEngineState(/* () */0))
              ]);
  }
  
  var CustomEventHandler_000$4 = /* handleSelfLogic */EmptyEventHandler[0];
  
  var CustomEventHandler$13 = /* module */[
    CustomEventHandler_000$4,
    /* setUndoValueToCopiedEngineState */setUndoValueToCopiedEngineState$14
  ];
  
  var MakeEventHandler$14 = MakeEventHandler$1(CustomEventHandler$13);
  
  
  /* MakeEventHandler Not a pure module */
  
  var component$26 = statelessComponent("MainEditorDirectionLight");
  
  function changeColor$2(lightComponent, value) {
    var partial_arg = getEngineColorRgbArr(convertColorObjToColorPickType(value));
    return getAndRefreshEngineStateWithDiff(/* array */[/* record */[
                  /* arguments : array */[lightComponent],
                  /* type_ : DirectionLight */5
                ]], (function (param, param$1) {
                  return setDirectionLightColor(partial_arg, param, param$1);
                }));
  }
  
  var closeColorPick$2 = MakeEventHandler$14[/* pushUndoStackWithCopiedEngineState */1];
  
  function render$41(param, lightComponent, _) {
    var dispatchFunc = param[1];
    var store = param[0];
    return react_3$1("article", {
                className: "wonder-direction-light"
              }, element(undefined, undefined, make$9("color : ", (function () {
                          return getHexString(getEngineStateToGetData((function (param) {
                                            return getDirectionLightColor(lightComponent, param);
                                          })));
                        }), (function (param) {
                          return changeColor$2(lightComponent, param);
                        }), _2(closeColorPick$2, /* tuple */[
                            store,
                            dispatchFunc
                          ], lightComponent), /* array */[])), react_3$1("div", {
                    className: "light-intensity"
                  }, element(undefined, undefined, make$33(store, dispatchFunc, lightComponent, /* array */[]))));
  }
  
  function make$32(store, dispatchFunc, lightComponent, _) {
    return /* record */[
            /* debugName */component$26[/* debugName */0],
            /* reactClassInternal */component$26[/* reactClassInternal */1],
            /* handedOffState */component$26[/* handedOffState */2],
            /* willReceiveProps */component$26[/* willReceiveProps */3],
            /* didMount */component$26[/* didMount */4],
            /* didUpdate */component$26[/* didUpdate */5],
            /* willUnmount */component$26[/* willUnmount */6],
            /* willUpdate */component$26[/* willUpdate */7],
            /* shouldUpdate */component$26[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$41(/* tuple */[
                            store,
                            dispatchFunc
                          ], lightComponent, self);
              }),
            /* initialState */component$26[/* initialState */10],
            /* retainedProps */component$26[/* retainedProps */11],
            /* reducer */component$26[/* reducer */12],
            /* subscriptions */component$26[/* subscriptions */13],
            /* jsElementWrapped */component$26[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  var setUndoValueToCopiedEngineState$15 = EmptyEventHandler[1];
  
  function handleSelfLogic$10(_, _$1, param) {
    return replaceLightByType(param[0], param[1]);
  }
  
  var MakeEventHandler$15 = MakeEventHandler$1([
        handleSelfLogic$10,
        setUndoValueToCopiedEngineState$15
      ]);
  
  
  /* MakeEventHandler Not a pure module */
  
  var changeLight = MakeEventHandler$15[/* pushUndoStackWithNoCopyEngineState */0];
  
  function renderDirectionLight(param, gameObject) {
    return element(undefined, undefined, make$32(param[0], param[1], getEngineStateToGetData((function (param) {
                          return getDirectionLightComponent$1(gameObject, param);
                        })), /* array */[]));
  }
  
  function renderPointLight(param, gameObject) {
    return element(undefined, undefined, make$29(param[0], param[1], getEngineStateToGetData((function (param) {
                          return getPointLightComponent$1(gameObject, param);
                        })), /* array */[]));
  }
  
  var component$22 = reducerComponent("MainEditorLight");
  
  function reducer$11(param, action, state) {
    var dispatchFunc = param[1];
    var store = param[0];
    var sourceLightType = state[/* lightType */0];
    return updateWithSideEffects(/* record */[/* lightType */action[0]], (function (state) {
                  return _3(changeLight, /* tuple */[
                              store,
                              dispatchFunc
                            ], /* () */0, /* tuple */[
                              sourceLightType,
                              state[/* lightType */0]
                            ]);
                }));
  }
  
  function render$37(param, param$1) {
    var send = param$1[/* send */3];
    var state = param$1[/* state */1];
    var dispatchFunc = param[1];
    var store = param[0];
    var partial_arg = /* tuple */[
      store,
      dispatchFunc
    ];
    var partial_arg$1 = /* tuple */[
      store,
      dispatchFunc
    ];
    return react_3$1("article", {
                key: "MainEditorLight",
                className: "wonder-light"
              }, react_3$1("div", {
                    className: ""
                  }, element(undefined, undefined, make$22("type : ", getLightOptions(/* () */0), state[/* lightType */0], (function (value) {
                              return _1(send, /* ChangeLight */[value]);
                            }), /* array */[]))), react_3$1("div", {
                    className: ""
                  }, handleSpecificFuncByLightType(state[/* lightType */0], /* tuple */[
                        (function (param) {
                            return renderDirectionLight(partial_arg, param);
                          }),
                        (function (param) {
                            return renderPointLight(partial_arg$1, param);
                          })
                      ])));
  }
  
  function make$28(store, dispatchFunc, _) {
    var partial_arg = /* tuple */[
      store,
      dispatchFunc
    ];
    return /* record */[
            /* debugName */component$22[/* debugName */0],
            /* reactClassInternal */component$22[/* reactClassInternal */1],
            /* handedOffState */component$22[/* handedOffState */2],
            /* willReceiveProps */component$22[/* willReceiveProps */3],
            /* didMount */component$22[/* didMount */4],
            /* didUpdate */component$22[/* didUpdate */5],
            /* willUnmount */component$22[/* willUnmount */6],
            /* willUpdate */component$22[/* willUpdate */7],
            /* shouldUpdate */component$22[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$37(/* tuple */[
                            store,
                            dispatchFunc
                          ], self);
              }),
            /* initialState */(function () {
                var partial_arg = unsafeGetCurrentSceneTreeNode(getState(/* () */0));
                return /* record */[/* lightType */getEngineStateToGetData((function (param) {
                                return getLightTypeByGameObject(partial_arg, param);
                              }))];
              }),
            /* retainedProps */component$22[/* retainedProps */11],
            /* reducer */(function (param, param$1) {
                return reducer$11(partial_arg, param, param$1);
              }),
            /* subscriptions */component$22[/* subscriptions */13],
            /* jsElementWrapped */component$22[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function isFlag$2(startFlag) {
    if (startFlag !== undefined) {
      return startFlag === getFlag$1(/* () */0);
    } else {
      return false;
    }
  }
  
  function isTypeValid(startId, editorState) {
    if (startId !== undefined) {
      return isSome(get$3(startId, getTextureNodeMap(editorState)));
    } else {
      return false;
    }
  }
  
  function _isTriggerAction(isFlagFunc, isTypeValidFunc) {
    var match = getCurrentDragSource(getState(/* () */0));
    if (_1(isFlagFunc, match[0])) {
      return _2(isTypeValidFunc, match[1], getState(/* () */0));
    } else {
      return false;
    }
  }
  
  function handleDragEnter$1(isFlagFunc, isTypeValidFunc, _) {
    var match = _isTriggerAction(isFlagFunc, isTypeValidFunc);
    if (match) {
      return /* DragEnter */1;
    } else {
      return /* Nothing */0;
    }
  }
  
  function handleDragLeave$1(isFlagFunc, isTypeValidFunc, $$event) {
    stopPropagation($$event);
    var match = _isTriggerAction(isFlagFunc, isTypeValidFunc);
    if (match) {
      return /* DragLeave */2;
    } else {
      return /* Nothing */0;
    }
  }
  
  var handleDragOver$1 = preventDefault;
  
  function handleDrop$1(isFlagFunc, isTypeValidFunc, $$event) {
    var startId = getDragedUid($$event);
    var match = _isTriggerAction(isFlagFunc, isTypeValidFunc);
    if (match) {
      return /* DragDrop */[startId];
    } else {
      return /* DragLeave */2;
    }
  }
  
  function showMapComponent(retainedProps) {
    var match = retainedProps[/* map */0];
    if (match !== undefined) {
      return react_3$1("img", {
                  src: unsafeGet$1(match, getImageBase64Map(getState(/* () */0)))
                });
    } else {
      return react_3$1("img", {
                  src: "./public/img/null.jpg"
                });
    }
  }
  
  var component$30 = reducerComponentWithRetainedProps("MainEditorMaterialMap");
  
  function reducer$16(param, param$1, action, state) {
    var onDropFunc = param$1[1];
    var materialComponent = param$1[0];
    var dispatchFunc = param[1];
    var store = param[0];
    if (typeof action === "number") {
      switch (action) {
        case 0 : 
            return /* NoUpdate */0;
        case 1 : 
            return /* Update */__(0, [/* record */[/* style */addStyleProp("border", "2px dashed blue", state[/* style */0])]]);
        case 2 : 
            return /* Update */__(0, [/* record */[/* style */addStyleProp("border", "1px solid red", state[/* style */0])]]);
        
      }
    } else {
      var startId = action[0];
      return sideEffects((function () {
                    return _3(onDropFunc, /* tuple */[
                                store,
                                dispatchFunc
                              ], materialComponent, startId);
                  }));
    }
  }
  
  function render$45(param, param$1, removeTextureFunc, param$2) {
    var send = param$2[/* send */3];
    var materialComponent = param$1[0];
    var dispatchFunc = param[1];
    var store = param[0];
    return react_3$1("article", {
                className: "wonder-material-texture"
              }, react_3$1("div", {
                    className: "texture_ground",
                    style: param$2[/* state */1][/* style */0],
                    onDragEnter: (function (_e) {
                        return _1(send, handleDragEnter$1(isFlag$2, isTypeValid, _e));
                      }),
                    onDragLeave: (function (_e) {
                        return _1(send, handleDragLeave$1(isFlag$2, isTypeValid, _e));
                      }),
                    onDragOver: handleDragOver$1,
                    onDrop: (function (_e) {
                        return _1(send, handleDrop$1(isFlag$2, isTypeValid, _e));
                      })
                  }), react_3$1("span", {
                    className: ""
                  }, textEl(param$1[1])), showMapComponent(param$2[/* retainedProps */2]), react_3$1("button", {
                    className: "texture_remove",
                    onClick: (function () {
                        return _3(removeTextureFunc, /* tuple */[
                                    store,
                                    dispatchFunc
                                  ], /* () */0, materialComponent);
                      })
                  }, textEl("remove")));
  }
  
  function shouldUpdate$2(param) {
    var newSelf = param[/* newSelf */1];
    var oldSelf = param[/* oldSelf */0];
    if (caml_notequal(oldSelf[/* retainedProps */2], newSelf[/* retainedProps */2])) {
      return true;
    } else {
      return caml_notequal(oldSelf[/* state */1], newSelf[/* state */1]);
    }
  }
  
  function make$36(store, dispatchFunc, materialComponent, label, getMapFunc, onDropFunc, removeTextureFunc, _) {
    var partial_arg = /* tuple */[
      materialComponent,
      onDropFunc
    ];
    var partial_arg$1 = /* tuple */[
      store,
      dispatchFunc
    ];
    return /* record */[
            /* debugName */component$30[/* debugName */0],
            /* reactClassInternal */component$30[/* reactClassInternal */1],
            /* handedOffState */component$30[/* handedOffState */2],
            /* willReceiveProps */component$30[/* willReceiveProps */3],
            /* didMount */component$30[/* didMount */4],
            /* didUpdate */component$30[/* didUpdate */5],
            /* willUnmount */component$30[/* willUnmount */6],
            /* willUpdate */component$30[/* willUpdate */7],
            /* shouldUpdate */shouldUpdate$2,
            /* render */(function (self) {
                return render$45(/* tuple */[
                            store,
                            dispatchFunc
                          ], /* tuple */[
                            materialComponent,
                            label
                          ], removeTextureFunc, self);
              }),
            /* initialState */(function () {
                return /* record */[/* style */{
                          opacity: "1"
                        }];
              }),
            /* retainedProps : record */[/* map */getEngineStateToGetData(_1(getMapFunc, materialComponent))],
            /* reducer */(function (param, param$1) {
                return reducer$16(partial_arg$1, partial_arg, param, param$1);
              }),
            /* subscriptions */component$30[/* subscriptions */13],
            /* jsElementWrapped */component$30[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function hasTexCoords(texCoords) {
    return texCoords.length > 0;
  }
  
  
  /* No side effect */
  
  var setUndoValueToCopiedEngineState$16 = EmptyEventHandler[1];
  
  function _handleSetMap(gameObject, materialComponent, mapId, engineStateToGetData) {
    var match = getMap$3(materialComponent, engineStateToGetData);
    if (match !== undefined) {
      return changeTextureMapAndRereshEngineState(materialComponent, mapId, setBasicMaterialMapToEngineState);
    } else {
      return replaceMaterialComponentToHasMapOne(gameObject, materialComponent, mapId, /* tuple */[
                  disposeBasicMaterial,
                  setBasicMaterialColor$1,
                  createBasicMaterial$1,
                  addBasicMaterial
                ], setBasicMaterialMapToEngineState);
    }
  }
  
  function _handleBoxGeometryAddMap(gameObject, materialComponent, mapId, engineStateToGetData) {
    var match = hasTexCoords(getBoxGeometryTexCoords(engineStateToGetData));
    if (match) {
      return _handleSetMap(gameObject, materialComponent, mapId, engineStateToGetData);
    } else {
      return warn("the gameObject:" + (String(gameObject) + " have no texCoords"));
    }
  }
  
  function handleSelfLogic$11(param, materialComponent, dragedId) {
    var param$1 = unsafeGet$1(dragedId, getTextureNodeMap(getState(/* () */0)));
    var gameObject = getEditorState(unsafeGetCurrentSceneTreeNode);
    var engineStateToGetData = getRunEngineState(/* () */0);
    var match = hasBoxGeometryComponent$1(gameObject, engineStateToGetData);
    if (match) {
      _handleBoxGeometryAddMap(gameObject, materialComponent, param$1[/* textureIndex */0], engineStateToGetData);
    }
    _1(param[1], [
          UpdateAction,
          /* Update */[/* array */[
              /* Asset */2,
              /* Inspector */1
            ]]
        ]);
    return /* () */0;
  }
  
  var MakeEventHandler$16 = MakeEventHandler$1([
        handleSelfLogic$11,
        setUndoValueToCopiedEngineState$16
      ]);
  
  
  /* MakeEventHandler Not a pure module */
  
  var setUndoValueToCopiedEngineState$17 = EmptyEventHandler[1];
  
  function handleSelfLogic$12(param, _, materialComponent) {
    replaceMaterialComponentToNoMapOne(getEditorState(unsafeGetCurrentSceneTreeNode), materialComponent, /* tuple */[
          disposeBasicMaterial,
          setBasicMaterialColor$1,
          createBasicMaterial$1,
          addBasicMaterial
        ]);
    _1(param[1], [
          UpdateAction,
          /* Update */[/* array */[/* Inspector */1]]
        ]);
    return /* () */0;
  }
  
  var MakeEventHandler$17 = MakeEventHandler$1([
        handleSelfLogic$12,
        setUndoValueToCopiedEngineState$17
      ]);
  
  
  /* MakeEventHandler Not a pure module */
  
  function setUndoValueToCopiedEngineState$18(_, materialComponent, value) {
    var partial_arg = convert16HexToRGBArr(value);
    return handleFuncWithDiff(/* array */[/* record */[
                  /* arguments : array */[materialComponent],
                  /* type_ : BasicMaterial */3
                ]], (function (param, param$1) {
                  return setColor$6(partial_arg, param, param$1);
                }), /* tuple */[
                deepCopyForRestore$11(getEditEngineState(/* () */0)),
                deepCopyForRestore$11(getRunEngineState(/* () */0))
              ]);
  }
  
  var CustomEventHandler_000$5 = /* handleSelfLogic */EmptyEventHandler[0];
  
  var CustomEventHandler$17 = /* module */[
    CustomEventHandler_000$5,
    /* setUndoValueToCopiedEngineState */setUndoValueToCopiedEngineState$18
  ];
  
  var MakeEventHandler$18 = MakeEventHandler$1(CustomEventHandler$17);
  
  
  /* MakeEventHandler Not a pure module */
  
  var component$29 = statelessComponent("MainEditorBasicMaterial");
  
  function changeColor$3(materialComponent, value) {
    var partial_arg = getEngineColorRgbArr(convertColorObjToColorPickType(value));
    return getAndRefreshEngineStateWithDiff(/* array */[/* record */[
                  /* arguments : array */[materialComponent],
                  /* type_ : BasicMaterial */3
                ]], (function (param, param$1) {
                  return setColor$6(partial_arg, param, param$1);
                }));
  }
  
  var closeColorPick$3 = MakeEventHandler$18[/* pushUndoStackWithCopiedEngineState */1];
  
  var onDrop = MakeEventHandler$16[/* pushUndoStackWithNoCopyEngineState */0];
  
  function removeTexture(param, _, materialComponent) {
    var match = getEngineStateToGetData((function (param) {
            return getMap$3(materialComponent, param);
          }));
    if (match !== undefined) {
      return _3(MakeEventHandler$17[/* pushUndoStackWithNoCopyEngineState */0], /* tuple */[
                  param[0],
                  param[1]
                ], /* () */0, materialComponent);
    } else {
      return /* () */0;
    }
  }
  
  function render$44(param, materialComponent, _) {
    var dispatchFunc = param[1];
    var store = param[0];
    return react_3$1("article", {
                className: "wonder-basic-material"
              }, element(undefined, undefined, make$9("color : ", (function () {
                          return getHexString(getEngineStateToGetData((function (param) {
                                            return getColor$11(materialComponent, param);
                                          })));
                        }), (function (param) {
                          return changeColor$3(materialComponent, param);
                        }), _2(closeColorPick$3, /* tuple */[
                            store,
                            dispatchFunc
                          ], materialComponent), /* array */[])), element(undefined, undefined, make$36(store, dispatchFunc, materialComponent, "map : ", getMap$3, onDrop, removeTexture, /* array */[])));
  }
  
  function make$35(store, dispatchFunc, materialComponent, _) {
    return /* record */[
            /* debugName */component$29[/* debugName */0],
            /* reactClassInternal */component$29[/* reactClassInternal */1],
            /* handedOffState */component$29[/* handedOffState */2],
            /* willReceiveProps */component$29[/* willReceiveProps */3],
            /* didMount */component$29[/* didMount */4],
            /* didUpdate */component$29[/* didUpdate */5],
            /* willUnmount */component$29[/* willUnmount */6],
            /* willUpdate */component$29[/* willUpdate */7],
            /* shouldUpdate */component$29[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$44(/* tuple */[
                            store,
                            dispatchFunc
                          ], materialComponent, self);
              }),
            /* initialState */component$29[/* initialState */10],
            /* retainedProps */component$29[/* retainedProps */11],
            /* reducer */component$29[/* reducer */12],
            /* subscriptions */component$29[/* subscriptions */13],
            /* jsElementWrapped */component$29[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function setUndoValueToCopiedEngineState$19(_, materialComponent, shininessValue) {
    return handleFuncWithDiff(/* array */[/* record */[
                  /* arguments : array */[materialComponent],
                  /* type_ : LightMaterial */4
                ]], (function (param, param$1) {
                  return setLightMaterialShininess$1(shininessValue, param, param$1);
                }), /* tuple */[
                deepCopyForRestore$11(getEditEngineState(/* () */0)),
                deepCopyForRestore$11(getRunEngineState(/* () */0))
              ]);
  }
  
  var CustomEventHandler_000$6 = /* handleSelfLogic */EmptyEventHandler[0];
  
  var CustomEventHandler$18 = /* module */[
    CustomEventHandler_000$6,
    /* setUndoValueToCopiedEngineState */setUndoValueToCopiedEngineState$19
  ];
  
  var MakeEventHandler$19 = MakeEventHandler$1(CustomEventHandler$18);
  
  
  /* MakeEventHandler Not a pure module */
  
  function blurShininessEvent(param, materialComponent, shininessValue) {
    var match = isValueEqual(/* Float */1, shininessValue, getEngineStateToGetData((function (param) {
                return getLightMaterialShininess$1(materialComponent, param);
              })));
    if (match) {
      return /* () */0;
    } else {
      return _3(MakeEventHandler$19[/* pushUndoStackWithCopiedEngineState */1], /* tuple */[
                  param[0],
                  param[1]
                ], materialComponent, shininessValue);
    }
  }
  
  function changeShininess(materialComponent, value) {
    return getAndRefreshEngineStateWithDiff(/* array */[/* record */[
                  /* arguments : array */[materialComponent],
                  /* type_ : LightMaterial */4
                ]], (function (param, param$1) {
                  return setLightMaterialShininess$1(value, param, param$1);
                }));
  }
  
  var component$32 = reducerComponent("MainEditorMaterialShininess");
  
  function reducer$17(param, materialComponent, action, state) {
    blurShininessEvent(/* tuple */[
          param[0],
          param[1]
        ], materialComponent, state[/* shininessValue */0]);
    return /* Update */__(0, [/* record */[/* shininessValue */action[0]]]);
  }
  
  function render$47(_, materialComponent, param) {
    var send = param[/* send */3];
    return react_3$1("article", {
                className: "wonder-light-shininess"
              }, element(undefined, undefined, make$31(floatToString(param[/* state */1][/* shininessValue */0]), "Shininess", (function (param) {
                          return changeShininess(materialComponent, param);
                        }), (function (value) {
                          return _1(send, /* ShininessBlur */[value]);
                        }), undefined, /* array */[])));
  }
  
  function make$38(store, dispatchFunc, materialComponent, _) {
    var partial_arg = /* tuple */[
      store,
      dispatchFunc
    ];
    return /* record */[
            /* debugName */component$32[/* debugName */0],
            /* reactClassInternal */component$32[/* reactClassInternal */1],
            /* handedOffState */component$32[/* handedOffState */2],
            /* willReceiveProps */component$32[/* willReceiveProps */3],
            /* didMount */component$32[/* didMount */4],
            /* didUpdate */component$32[/* didUpdate */5],
            /* willUnmount */component$32[/* willUnmount */6],
            /* willUpdate */component$32[/* willUpdate */7],
            /* shouldUpdate */component$32[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$47(/* tuple */[
                            store,
                            dispatchFunc
                          ], materialComponent, self);
              }),
            /* initialState */(function () {
                return /* record */[/* shininessValue */getEngineStateToGetData((function (param) {
                                return getLightMaterialShininess$1(materialComponent, param);
                              }))];
              }),
            /* retainedProps */component$32[/* retainedProps */11],
            /* reducer */(function (param, param$1) {
                return reducer$17(partial_arg, materialComponent, param, param$1);
              }),
            /* subscriptions */component$32[/* subscriptions */13],
            /* jsElementWrapped */component$32[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  var setUndoValueToCopiedEngineState$20 = EmptyEventHandler[1];
  
  function _handleSetMap$1(gameObject, materialComponent, mapId, engineStateToGetData) {
    var match = getLightMaterialDiffuseMap(materialComponent, engineStateToGetData);
    if (match !== undefined) {
      return changeTextureMapAndRereshEngineState(materialComponent, mapId, setLightMaterialMapToEngineState);
    } else {
      return replaceMaterialComponentToHasMapOne(gameObject, materialComponent, mapId, /* tuple */[
                  disposeLightMaterial,
                  setLightMaterialColor,
                  createLightMaterial$1,
                  addLightMaterial
                ], setLightMaterialMapToEngineState);
    }
  }
  
  function _handleBoxGeometryAddMap$1(gameObject, materialComponent, mapId, engineStateToGetData) {
    var match = hasTexCoords(getBoxGeometryTexCoords(engineStateToGetData));
    if (match) {
      return _handleSetMap$1(gameObject, materialComponent, mapId, engineStateToGetData);
    } else {
      return warn("the gameObject:" + (String(gameObject) + " have no texCoords"));
    }
  }
  
  function handleSelfLogic$13(param, materialComponent, dragedId) {
    var param$1 = unsafeGet$1(dragedId, getTextureNodeMap(getState(/* () */0)));
    var gameObject = getEditorState(unsafeGetCurrentSceneTreeNode);
    var engineStateToGetData = getRunEngineState(/* () */0);
    var match = hasBoxGeometryComponent$1(gameObject, engineStateToGetData);
    if (match) {
      _handleBoxGeometryAddMap$1(gameObject, materialComponent, param$1[/* textureIndex */0], engineStateToGetData);
    }
    _1(param[1], [
          UpdateAction,
          /* Update */[/* array */[
              /* Asset */2,
              /* Inspector */1
            ]]
        ]);
    return /* () */0;
  }
  
  var MakeEventHandler$20 = MakeEventHandler$1([
        handleSelfLogic$13,
        setUndoValueToCopiedEngineState$20
      ]);
  
  
  /* MakeEventHandler Not a pure module */
  
  var setUndoValueToCopiedEngineState$21 = EmptyEventHandler[1];
  
  function handleSelfLogic$14(param, _, materialComponent) {
    replaceMaterialComponentToNoMapOne(getEditorState(unsafeGetCurrentSceneTreeNode), materialComponent, /* tuple */[
          disposeLightMaterial,
          setLightMaterialColor,
          createLightMaterial$1,
          addLightMaterial
        ]);
    _1(param[1], [
          UpdateAction,
          /* Update */[/* array */[/* Inspector */1]]
        ]);
    return /* () */0;
  }
  
  var MakeEventHandler$21 = MakeEventHandler$1([
        handleSelfLogic$14,
        setUndoValueToCopiedEngineState$21
      ]);
  
  
  /* MakeEventHandler Not a pure module */
  
  function setUndoValueToCopiedEngineState$22(_, materialComponent, value) {
    var partial_arg = convert16HexToRGBArr(value);
    return handleFuncWithDiff(/* array */[/* record */[
                  /* arguments : array */[materialComponent],
                  /* type_ : LightMaterial */4
                ]], (function (param, param$1) {
                  return setLightMaterialDiffuseColor$1(partial_arg, param, param$1);
                }), /* tuple */[
                deepCopyForRestore$11(getEditEngineState(/* () */0)),
                deepCopyForRestore$11(getRunEngineState(/* () */0))
              ]);
  }
  
  var CustomEventHandler_000$7 = /* handleSelfLogic */EmptyEventHandler[0];
  
  var CustomEventHandler$21 = /* module */[
    CustomEventHandler_000$7,
    /* setUndoValueToCopiedEngineState */setUndoValueToCopiedEngineState$22
  ];
  
  var MakeEventHandler$22 = MakeEventHandler$1(CustomEventHandler$21);
  
  
  /* MakeEventHandler Not a pure module */
  
  function changeColor$4(materialComponent, value) {
    var partial_arg = getEngineColorRgbArr(convertColorObjToColorPickType(value));
    return getAndRefreshEngineStateWithDiff(/* array */[/* record */[
                  /* arguments : array */[materialComponent],
                  /* type_ : LightMaterial */4
                ]], (function (param, param$1) {
                  return setLightMaterialDiffuseColor$1(partial_arg, param, param$1);
                }));
  }
  
  var closeColorPick$4 = MakeEventHandler$22[/* pushUndoStackWithCopiedEngineState */1];
  
  var onDrop$1 = MakeEventHandler$20[/* pushUndoStackWithNoCopyEngineState */0];
  
  function removeTexture$1(param, _, materialComponent) {
    var match = getEngineStateToGetData((function (param) {
            return getLightMaterialDiffuseMap(materialComponent, param);
          }));
    if (match !== undefined) {
      return _3(MakeEventHandler$21[/* pushUndoStackWithNoCopyEngineState */0], /* tuple */[
                  param[0],
                  param[1]
                ], /* () */0, materialComponent);
    } else {
      return /* () */0;
    }
  }
  
  var component$31 = statelessComponent("MainEditorLightMaterial");
  
  function render$46(param, materialComponent, _) {
    var dispatchFunc = param[1];
    var store = param[0];
    return react_3$1("article", {
                className: "wonder-light-material"
              }, element(undefined, undefined, make$9("diffcuse color : ", (function () {
                          return getHexString(getEngineStateToGetData((function (param) {
                                            return getLightMaterialDiffuseColor$1(materialComponent, param);
                                          })));
                        }), (function (param) {
                          return changeColor$4(materialComponent, param);
                        }), _2(closeColorPick$4, /* tuple */[
                            store,
                            dispatchFunc
                          ], materialComponent), /* array */[])), element(undefined, undefined, make$36(store, dispatchFunc, materialComponent, "diffuse map : ", getLightMaterialDiffuseMap, onDrop$1, removeTexture$1, /* array */[])), element(undefined, undefined, make$38(store, dispatchFunc, materialComponent, /* array */[])));
  }
  
  function make$37(store, dispatchFunc, materialComponent, _) {
    return /* record */[
            /* debugName */component$31[/* debugName */0],
            /* reactClassInternal */component$31[/* reactClassInternal */1],
            /* handedOffState */component$31[/* handedOffState */2],
            /* willReceiveProps */component$31[/* willReceiveProps */3],
            /* didMount */component$31[/* didMount */4],
            /* didUpdate */component$31[/* didUpdate */5],
            /* willUnmount */component$31[/* willUnmount */6],
            /* willUpdate */component$31[/* willUpdate */7],
            /* shouldUpdate */component$31[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$46(/* tuple */[
                            store,
                            dispatchFunc
                          ], materialComponent, self);
              }),
            /* initialState */component$31[/* initialState */10],
            /* retainedProps */component$31[/* retainedProps */11],
            /* reducer */component$31[/* reducer */12],
            /* subscriptions */component$31[/* subscriptions */13],
            /* jsElementWrapped */component$31[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  var setUndoValueToCopiedEngineState$23 = EmptyEventHandler[1];
  
  function handleSelfLogic$15(_, _$1, param) {
    return replaceMaterialByType(param[0], param[1]);
  }
  
  var MakeEventHandler$23 = MakeEventHandler$1([
        handleSelfLogic$15,
        setUndoValueToCopiedEngineState$23
      ]);
  
  
  /* MakeEventHandler Not a pure module */
  
  var changeMaterial = MakeEventHandler$23[/* pushUndoStackWithNoCopyEngineState */0];
  
  function renderBasicMaterial(param, gameObject) {
    return element(undefined, undefined, make$35(param[0], param[1], getEngineStateToGetData((function (param) {
                          return getBasicMaterialComponent$1(gameObject, param);
                        })), /* array */[]));
  }
  
  function renderLightMaterial(param, gameObject) {
    return element(undefined, undefined, make$37(param[0], param[1], getEngineStateToGetData((function (param) {
                          return getLightMaterialComponent$1(gameObject, param);
                        })), /* array */[]));
  }
  
  var component$28 = reducerComponent("MainEditorMaterial");
  
  function reducer$15(param, action, state) {
    var dispatchFunc = param[1];
    var store = param[0];
    var originMaterialType = state[/* materialType */0];
    return updateWithSideEffects(/* record */[/* materialType */action[0]], (function (state) {
                  return _3(changeMaterial, /* tuple */[
                              store,
                              dispatchFunc
                            ], /* () */0, /* tuple */[
                              originMaterialType,
                              state[/* materialType */0]
                            ]);
                }));
  }
  
  function render$43(param, param$1) {
    var send = param$1[/* send */3];
    var state = param$1[/* state */1];
    var dispatchFunc = param[1];
    var store = param[0];
    var partial_arg = /* tuple */[
      store,
      dispatchFunc
    ];
    var partial_arg$1 = /* tuple */[
      store,
      dispatchFunc
    ];
    return react_3$1("article", {
                key: "MainEditorMaterial",
                className: "wonder-material"
              }, react_3$1("div", {
                    className: ""
                  }, element(undefined, undefined, make$22("shader", getMaterialOptions(/* () */0), state[/* materialType */0], (function (value) {
                              return _1(send, /* ChangeMaterial */[value]);
                            }), /* array */[]))), react_3$1("div", {
                    className: ""
                  }, handleSpecificFuncByMaterialType(state[/* materialType */0], /* tuple */[
                        (function (param) {
                            return renderBasicMaterial(partial_arg, param);
                          }),
                        (function (param) {
                            return renderLightMaterial(partial_arg$1, param);
                          })
                      ])));
  }
  
  function make$34(store, dispatchFunc, _) {
    var partial_arg = /* tuple */[
      store,
      dispatchFunc
    ];
    return /* record */[
            /* debugName */component$28[/* debugName */0],
            /* reactClassInternal */component$28[/* reactClassInternal */1],
            /* handedOffState */component$28[/* handedOffState */2],
            /* willReceiveProps */component$28[/* willReceiveProps */3],
            /* didMount */component$28[/* didMount */4],
            /* didUpdate */component$28[/* didUpdate */5],
            /* willUnmount */component$28[/* willUnmount */6],
            /* willUpdate */component$28[/* willUpdate */7],
            /* shouldUpdate */component$28[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$43(/* tuple */[
                            store,
                            dispatchFunc
                          ], self);
              }),
            /* initialState */(function () {
                var partial_arg = unsafeGetCurrentSceneTreeNode(getState(/* () */0));
                return /* record */[/* materialType */getEngineStateToGetData((function (param) {
                                return getMaterialTypeByGameObject(partial_arg, param);
                              }))];
              }),
            /* retainedProps */component$28[/* retainedProps */11],
            /* reducer */(function (param, param$1) {
                return reducer$15(partial_arg, param, param$1);
              }),
            /* subscriptions */component$28[/* subscriptions */13],
            /* jsElementWrapped */component$28[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function truncateFloatValue(value, count) {
    return Number(value.toFixed(count));
  }
  
  
  /* No side effect */
  
  function truncateTransformValue(param) {
    return /* tuple */[
            truncateFloatValue(param[0], 5),
            truncateFloatValue(param[1], 5),
            truncateFloatValue(param[2], 5)
          ];
  }
  
  function getSceneTreeNodeLocalPosition(transformComponent) {
    return getEngineStateToGetData((function (param) {
                  return getLocalPosition(transformComponent, param);
                }));
  }
  
  function getTransformPositionData(transformComponent) {
    return truncateTransformValue(getEngineStateToGetData((function (param) {
                      return getLocalPosition(transformComponent, param);
                    })));
  }
  
  function getTransformScaleData(transformComponent) {
    return truncateTransformValue(getEngineStateToGetData((function (param) {
                      return getLocalScale(transformComponent, param);
                    })));
  }
  
  function getTransformRotateData(transformComponent) {
    return truncateTransformValue(getEngineStateToGetData((function (param) {
                      return getLocalEulerAngles(transformComponent, param);
                    })));
  }
  
  function isTransformVec3Equal(param, param$1) {
    if (isValueEqual(/* Float */1, param$1[0], param[0]) && isValueEqual(/* Float */1, param$1[1], param[1])) {
      return isValueEqual(/* Float */1, param$1[2], param[2]);
    } else {
      return false;
    }
  }
  
  
  /* StateLogicService-WonderEditor Not a pure module */
  
  var component$34 = reducerComponent("TransformTemplate");
  
  function reducer$18(param, param$1, action, state) {
    var blurEventFunc = param$1[1];
    var transformComponent = param$1[0];
    var dispatchFunc = param[1];
    var store = param[0];
    switch (action.tag | 0) {
      case 0 : 
          _3(blurEventFunc, /* tuple */[
                store,
                dispatchFunc
              ], transformComponent, /* tuple */[
                state[/* x */0],
                state[/* y */1],
                state[/* z */2]
              ]);
          return /* Update */__(0, [/* record */[
                      /* x */action[0],
                      /* y */state[/* y */1],
                      /* z */state[/* z */2]
                    ]]);
      case 1 : 
          _3(blurEventFunc, /* tuple */[
                store,
                dispatchFunc
              ], transformComponent, /* tuple */[
                state[/* x */0],
                state[/* y */1],
                state[/* z */2]
              ]);
          return /* Update */__(0, [/* record */[
                      /* x */state[/* x */0],
                      /* y */action[0],
                      /* z */state[/* z */2]
                    ]]);
      case 2 : 
          _3(blurEventFunc, /* tuple */[
                store,
                dispatchFunc
              ], transformComponent, /* tuple */[
                state[/* x */0],
                state[/* y */1],
                state[/* z */2]
              ]);
          return /* Update */__(0, [/* record */[
                      /* x */state[/* x */0],
                      /* y */state[/* y */1],
                      /* z */action[0]
                    ]]);
      
    }
  }
  
  function render$49(_, param, param$1, param$2) {
    var send = param$2[/* send */3];
    var state = param$2[/* state */1];
    var canBeZero = param[1];
    var transformComponent = param[0];
    return react_3$1("article", {
                className: "wonder-transform-template"
              }, element(undefined, undefined, make$31(floatToString(state[/* x */0]), "X", _1(param$1[0], transformComponent), (function (value) {
                          return _1(send, /* TransformBlurX */__(0, [value]));
                        }), canBeZero, /* array */[])), element(undefined, undefined, make$31(floatToString(state[/* y */1]), "Y", _1(param$1[1], transformComponent), (function (value) {
                          return _1(send, /* TransformBlurY */__(1, [value]));
                        }), canBeZero, /* array */[])), element(undefined, undefined, make$31(floatToString(state[/* z */2]), "Z", _1(param$1[2], transformComponent), (function (value) {
                          return _1(send, /* TransformBlurZ */__(2, [value]));
                        }), canBeZero, /* array */[])));
  }
  
  function make$40(store, dispatchFunc, transformComponent, changeXFunc, changeYFunc, changeZFunc, getDataFunc, blurEventFunc, canBeZero, _) {
    var partial_arg = /* tuple */[
      transformComponent,
      blurEventFunc
    ];
    var partial_arg$1 = /* tuple */[
      store,
      dispatchFunc
    ];
    return /* record */[
            /* debugName */component$34[/* debugName */0],
            /* reactClassInternal */component$34[/* reactClassInternal */1],
            /* handedOffState */component$34[/* handedOffState */2],
            /* willReceiveProps */component$34[/* willReceiveProps */3],
            /* didMount */component$34[/* didMount */4],
            /* didUpdate */component$34[/* didUpdate */5],
            /* willUnmount */component$34[/* willUnmount */6],
            /* willUpdate */component$34[/* willUpdate */7],
            /* shouldUpdate */component$34[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$49(/* tuple */[
                            store,
                            dispatchFunc
                          ], /* tuple */[
                            transformComponent,
                            canBeZero
                          ], /* tuple */[
                            changeXFunc,
                            changeYFunc,
                            changeZFunc
                          ], self);
              }),
            /* initialState */(function () {
                var match = _1(getDataFunc, transformComponent);
                return /* record */[
                        /* x */match[0],
                        /* y */match[1],
                        /* z */match[2]
                      ];
              }),
            /* retainedProps */component$34[/* retainedProps */11],
            /* reducer */(function (param, param$1) {
                return reducer$18(partial_arg$1, partial_arg, param, param$1);
              }),
            /* subscriptions */component$34[/* subscriptions */13],
            /* jsElementWrapped */component$34[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function setUndoValueToCopiedEngineState$24(_, transformComponent, param) {
    var partial_arg_000 = param[0];
    var partial_arg_001 = param[1];
    var partial_arg_002 = param[2];
    var partial_arg = /* tuple */[
      partial_arg_000,
      partial_arg_001,
      partial_arg_002
    ];
    return handleFuncWithDiff(/* array */[/* record */[
                  /* arguments : array */[transformComponent],
                  /* type_ : Transform */1
                ]], (function (param, param$1) {
                  return setLocalScale(partial_arg, param, param$1);
                }), /* tuple */[
                deepCopyForRestore$11(getEditEngineState(/* () */0)),
                deepCopyForRestore$11(getRunEngineState(/* () */0))
              ]);
  }
  
  var CustomEventHandler_000$8 = /* handleSelfLogic */EmptyEventHandler[0];
  
  var CustomEventHandler$23 = /* module */[
    CustomEventHandler_000$8,
    /* setUndoValueToCopiedEngineState */setUndoValueToCopiedEngineState$24
  ];
  
  var MakeEventHandler$24 = MakeEventHandler$1(CustomEventHandler$23);
  
  
  /* MakeEventHandler Not a pure module */
  
  function setUndoValueToCopiedEngineState$25(_, transformComponent, param) {
    var partial_arg_000 = param[0];
    var partial_arg_001 = param[1];
    var partial_arg_002 = param[2];
    var partial_arg = /* tuple */[
      partial_arg_000,
      partial_arg_001,
      partial_arg_002
    ];
    return handleFuncWithDiff(/* array */[/* record */[
                  /* arguments : array */[transformComponent],
                  /* type_ : Transform */1
                ]], (function (param, param$1) {
                  return setLocalEulerAngles(partial_arg, param, param$1);
                }), /* tuple */[
                deepCopyForRestore$11(getEditEngineState(/* () */0)),
                deepCopyForRestore$11(getRunEngineState(/* () */0))
              ]);
  }
  
  var CustomEventHandler_000$9 = /* handleSelfLogic */EmptyEventHandler[0];
  
  var CustomEventHandler$24 = /* module */[
    CustomEventHandler_000$9,
    /* setUndoValueToCopiedEngineState */setUndoValueToCopiedEngineState$25
  ];
  
  var MakeEventHandler$25 = MakeEventHandler$1(CustomEventHandler$24);
  
  
  /* MakeEventHandler Not a pure module */
  
  function setUndoValueToCopiedEngineState$26(_, transformComponent, param) {
    var partial_arg_000 = param[0];
    var partial_arg_001 = param[1];
    var partial_arg_002 = param[2];
    var partial_arg = /* tuple */[
      partial_arg_000,
      partial_arg_001,
      partial_arg_002
    ];
    return handleFuncWithDiff(/* array */[/* record */[
                  /* arguments : array */[transformComponent],
                  /* type_ : Transform */1
                ]], (function (param, param$1) {
                  return setLocalPosition(partial_arg, param, param$1);
                }), /* tuple */[
                deepCopyForRestore$11(getEditEngineState(/* () */0)),
                deepCopyForRestore$11(getRunEngineState(/* () */0))
              ]);
  }
  
  var CustomEventHandler_000$10 = /* handleSelfLogic */EmptyEventHandler[0];
  
  var CustomEventHandler$25 = /* module */[
    CustomEventHandler_000$10,
    /* setUndoValueToCopiedEngineState */setUndoValueToCopiedEngineState$26
  ];
  
  var MakeEventHandler$26 = MakeEventHandler$1(CustomEventHandler$25);
  
  
  /* MakeEventHandler Not a pure module */
  
  function blurPositionEvent(param, transformComponent, param$1) {
    var z = param$1[2];
    var y = param$1[1];
    var x = param$1[0];
    var match = getTransformPositionData(transformComponent);
    var match$1 = isTransformVec3Equal(/* tuple */[
          x,
          y,
          z
        ], /* tuple */[
          match[0],
          match[1],
          match[2]
        ]);
    if (match$1) {
      return /* () */0;
    } else {
      return _3(MakeEventHandler$26[/* pushUndoStackWithCopiedEngineState */1], /* tuple */[
                  param[0],
                  param[1]
                ], transformComponent, /* tuple */[
                  x,
                  y,
                  z
                ]);
    }
  }
  
  function blurRotateEvent(param, transformComponent, param$1) {
    var z = param$1[2];
    var y = param$1[1];
    var x = param$1[0];
    var match = getTransformRotateData(transformComponent);
    var match$1 = isTransformVec3Equal(/* tuple */[
          x,
          y,
          z
        ], /* tuple */[
          match[0],
          match[1],
          match[2]
        ]);
    if (match$1) {
      return /* () */0;
    } else {
      return _3(MakeEventHandler$25[/* pushUndoStackWithCopiedEngineState */1], /* tuple */[
                  param[0],
                  param[1]
                ], transformComponent, /* tuple */[
                  x,
                  y,
                  z
                ]);
    }
  }
  
  function blurScaleEvent(param, transformComponent, param$1) {
    var z = param$1[2];
    var y = param$1[1];
    var x = param$1[0];
    var match = getTransformScaleData(transformComponent);
    var match$1 = isTransformVec3Equal(/* tuple */[
          x,
          y,
          z
        ], /* tuple */[
          match[0],
          match[1],
          match[2]
        ]);
    if (match$1) {
      return /* () */0;
    } else {
      return _3(MakeEventHandler$24[/* pushUndoStackWithCopiedEngineState */1], /* tuple */[
                  param[0],
                  param[1]
                ], transformComponent, /* tuple */[
                  x,
                  y,
                  z
                ]);
    }
  }
  
  function _setCurrentSceneTreeNodeLocalPosition(transformComponent, param) {
    var partial_arg_000 = param[0];
    var partial_arg_001 = param[1];
    var partial_arg_002 = param[2];
    var partial_arg = /* tuple */[
      partial_arg_000,
      partial_arg_001,
      partial_arg_002
    ];
    return getAndRefreshEngineStateWithDiff(/* array */[/* record */[
                  /* arguments : array */[transformComponent],
                  /* type_ : Transform */1
                ]], (function (param, param$1) {
                  return setLocalPosition(partial_arg, param, param$1);
                }));
  }
  
  function changePositionX(transformComponent, value) {
    var match = getSceneTreeNodeLocalPosition(transformComponent);
    return _setCurrentSceneTreeNodeLocalPosition(transformComponent, /* tuple */[
                value,
                match[1],
                match[2]
              ]);
  }
  
  function changePositionY(transformComponent, value) {
    var match = getSceneTreeNodeLocalPosition(transformComponent);
    return _setCurrentSceneTreeNodeLocalPosition(transformComponent, /* tuple */[
                match[0],
                value,
                match[2]
              ]);
  }
  
  function changePositionZ(transformComponent, value) {
    var match = getSceneTreeNodeLocalPosition(transformComponent);
    return _setCurrentSceneTreeNodeLocalPosition(transformComponent, /* tuple */[
                match[0],
                match[1],
                value
              ]);
  }
  
  function _setCurrentSceneTreeNodeLocalScale(transformComponent, param) {
    var partial_arg_000 = param[0];
    var partial_arg_001 = param[1];
    var partial_arg_002 = param[2];
    var partial_arg = /* tuple */[
      partial_arg_000,
      partial_arg_001,
      partial_arg_002
    ];
    return getAndRefreshEngineStateWithDiff(/* array */[/* record */[
                  /* arguments : array */[transformComponent],
                  /* type_ : Transform */1
                ]], (function (param, param$1) {
                  return setLocalScale(partial_arg, param, param$1);
                }));
  }
  
  function changeScaleX(transformComponent, value) {
    var match = getEngineStateToGetData((function (param) {
            return getLocalScale(transformComponent, param);
          }));
    return _setCurrentSceneTreeNodeLocalScale(transformComponent, /* tuple */[
                value,
                match[1],
                match[2]
              ]);
  }
  
  function changeScaleY(transformComponent, value) {
    var match = getEngineStateToGetData((function (param) {
            return getLocalScale(transformComponent, param);
          }));
    return _setCurrentSceneTreeNodeLocalScale(transformComponent, /* tuple */[
                match[0],
                value,
                match[2]
              ]);
  }
  
  function changeScaleZ(transformComponent, value) {
    var match = getEngineStateToGetData((function (param) {
            return getLocalScale(transformComponent, param);
          }));
    return _setCurrentSceneTreeNodeLocalScale(transformComponent, /* tuple */[
                match[0],
                match[1],
                value
              ]);
  }
  
  function _setCurrentSceneTreeNodeLocalRotate(transformComponent, param) {
    var partial_arg_000 = param[0];
    var partial_arg_001 = param[1];
    var partial_arg_002 = param[2];
    var partial_arg = /* tuple */[
      partial_arg_000,
      partial_arg_001,
      partial_arg_002
    ];
    return getAndRefreshEngineStateWithDiff(/* array */[/* record */[
                  /* arguments : array */[transformComponent],
                  /* type_ : Transform */1
                ]], (function (param, param$1) {
                  return setLocalEulerAngles(partial_arg, param, param$1);
                }));
  }
  
  function changeRotateX(transformComponent, value) {
    var match = getEngineStateToGetData((function (param) {
            return getLocalEulerAngles(transformComponent, param);
          }));
    return _setCurrentSceneTreeNodeLocalRotate(transformComponent, /* tuple */[
                value,
                match[1],
                match[2]
              ]);
  }
  
  function changeRotateY(transformComponent, value) {
    var match = getEngineStateToGetData((function (param) {
            return getLocalEulerAngles(transformComponent, param);
          }));
    return _setCurrentSceneTreeNodeLocalRotate(transformComponent, /* tuple */[
                match[0],
                value,
                match[2]
              ]);
  }
  
  function changeRotateZ(transformComponent, value) {
    var match = getEngineStateToGetData((function (param) {
            return getLocalEulerAngles(transformComponent, param);
          }));
    return _setCurrentSceneTreeNodeLocalRotate(transformComponent, /* tuple */[
                match[0],
                match[1],
                value
              ]);
  }
  
  var component$33 = statelessComponent("MainEditorTransformTest");
  
  function render$48(param, transformComponent, _) {
    var dispatchFunc = param[1];
    var store = param[0];
    return react_3$1("article", {
                className: "wonder-inspector-transform"
              }, react_3$1("div", {
                    className: "transform-item"
                  }, react_3$1("div", {
                        className: ""
                      }, textEl("position : ")), element(undefined, undefined, make$40(store, dispatchFunc, transformComponent, changePositionX, changePositionY, changePositionZ, getTransformPositionData, blurPositionEvent, true, /* array */[]))), react_3$1("div", {
                    className: "transform-item"
                  }, react_3$1("div", {
                        className: ""
                      }, textEl("rotate : ")), element(undefined, undefined, make$40(store, dispatchFunc, transformComponent, changeRotateX, changeRotateY, changeRotateZ, getTransformRotateData, blurRotateEvent, true, /* array */[]))), react_3$1("div", {
                    className: "transform-item"
                  }, react_3$1("div", {
                        className: ""
                      }, textEl("scale : ")), element(undefined, undefined, make$40(store, dispatchFunc, transformComponent, changeScaleX, changeScaleY, changeScaleZ, getTransformScaleData, blurScaleEvent, false, /* array */[]))));
  }
  
  function make$39(store, dispatchFunc, transformComponent, _) {
    return /* record */[
            /* debugName */component$33[/* debugName */0],
            /* reactClassInternal */component$33[/* reactClassInternal */1],
            /* handedOffState */component$33[/* handedOffState */2],
            /* willReceiveProps */component$33[/* willReceiveProps */3],
            /* didMount */component$33[/* didMount */4],
            /* didUpdate */component$33[/* didUpdate */5],
            /* willUnmount */component$33[/* willUnmount */6],
            /* willUpdate */component$33[/* willUpdate */7],
            /* shouldUpdate */component$33[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$48(/* tuple */[
                            store,
                            dispatchFunc
                          ], transformComponent, self);
              }),
            /* initialState */component$33[/* initialState */10],
            /* retainedProps */component$33[/* retainedProps */11],
            /* reducer */component$33[/* reducer */12],
            /* subscriptions */component$33[/* subscriptions */13],
            /* jsElementWrapped */component$33[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function setUndoValueToCopiedEngineState$27(_, arcballCameraController, distance) {
    return handleFuncWithDiff(/* array */[/* record */[
                  /* arguments : array */[arcballCameraController],
                  /* type_ : ArcballCameraController */7
                ]], (function (param, param$1) {
                  return setArcballCameraControllerDistance(distance, param, param$1);
                }), /* tuple */[
                deepCopyForRestore$11(getEditEngineState(/* () */0)),
                deepCopyForRestore$11(getRunEngineState(/* () */0))
              ]);
  }
  
  var CustomEventHandler_000$11 = /* handleSelfLogic */EmptyEventHandler[0];
  
  var CustomEventHandler$26 = /* module */[
    CustomEventHandler_000$11,
    /* setUndoValueToCopiedEngineState */setUndoValueToCopiedEngineState$27
  ];
  
  var MakeEventHandler$27 = MakeEventHandler$1(CustomEventHandler$26);
  
  
  /* MakeEventHandler Not a pure module */
  
  function setUndoValueToCopiedEngineState$28(_, arcballCameraController, minDistance) {
    return handleFuncWithDiff(/* array */[/* record */[
                  /* arguments : array */[arcballCameraController],
                  /* type_ : ArcballCameraController */7
                ]], (function (param, param$1) {
                  return setArcballCameraControllerMinDistance(minDistance, param, param$1);
                }), /* tuple */[
                deepCopyForRestore$11(getEditEngineState(/* () */0)),
                deepCopyForRestore$11(getRunEngineState(/* () */0))
              ]);
  }
  
  var CustomEventHandler_000$12 = /* handleSelfLogic */EmptyEventHandler[0];
  
  var CustomEventHandler$27 = /* module */[
    CustomEventHandler_000$12,
    /* setUndoValueToCopiedEngineState */setUndoValueToCopiedEngineState$28
  ];
  
  var MakeEventHandler$28 = MakeEventHandler$1(CustomEventHandler$27);
  
  
  /* MakeEventHandler Not a pure module */
  
  function blurArcbalCameraDistance(param, arcballCameraController, distance) {
    var match = isValueEqual(/* Float */1, distance, getEngineStateToGetData((function (param) {
                return unsafeGetArcballCameraControllerDistance(arcballCameraController, param);
              })));
    if (match) {
      return /* () */0;
    } else {
      return _3(MakeEventHandler$27[/* pushUndoStackWithCopiedEngineState */1], /* tuple */[
                  param[0],
                  param[1]
                ], arcballCameraController, distance);
    }
  }
  
  function blurArcbalCameraMinDistance(param, arcballCameraController, minDistance) {
    var match = isValueEqual(/* Float */1, minDistance, getEngineStateToGetData((function (param) {
                return unsafeGetArcballCameraControllerMinDistance(arcballCameraController, param);
              })));
    if (match) {
      return /* () */0;
    } else {
      return _3(MakeEventHandler$28[/* pushUndoStackWithCopiedEngineState */1], /* tuple */[
                  param[0],
                  param[1]
                ], arcballCameraController, minDistance);
    }
  }
  
  function changeDistance(arcballCameraController, value) {
    return getAndRefreshEngineStateWithDiff(/* array */[/* record */[
                  /* arguments : array */[arcballCameraController],
                  /* type_ : ArcballCameraController */7
                ]], (function (param, param$1) {
                  return setArcballCameraControllerDistance(value, param, param$1);
                }));
  }
  
  function changeMinDistance(arcballCameraController, value) {
    return getAndRefreshEngineStateWithDiff(/* array */[/* record */[
                  /* arguments : array */[arcballCameraController],
                  /* type_ : ArcballCameraController */7
                ]], (function (param, param$1) {
                  return setArcballCameraControllerMinDistance(value, param, param$1);
                }));
  }
  
  var component$35 = reducerComponent("MainEditorTransform");
  
  function reducer$19(param, arcballCameraController, action, state) {
    var dispatchFunc = param[1];
    var store = param[0];
    if (action.tag) {
      blurArcbalCameraMinDistance(/* tuple */[
            store,
            dispatchFunc
          ], arcballCameraController, state[/* minDistance */1]);
      return /* Update */__(0, [/* record */[
                  /* distance */state[/* distance */0],
                  /* minDistance */action[0]
                ]]);
    } else {
      blurArcbalCameraDistance(/* tuple */[
            store,
            dispatchFunc
          ], arcballCameraController, state[/* distance */0]);
      return /* Update */__(0, [/* record */[
                  /* distance */action[0],
                  /* minDistance */state[/* minDistance */1]
                ]]);
    }
  }
  
  function render$50(_, arcballCameraController, param) {
    var send = param[/* send */3];
    var state = param[/* state */1];
    return react_3$1("article", {
                className: "wonder-inspector-arcballCameraController"
              }, element(undefined, undefined, make$31(floatToString(state[/* distance */0]), "distance", (function (param) {
                          return changeDistance(arcballCameraController, param);
                        }), (function (value) {
                          return _1(send, /* CameraBlurDistance */__(0, [value]));
                        }), undefined, /* array */[])), element(undefined, undefined, make$31(floatToString(state[/* minDistance */1]), "min distance", (function (param) {
                          return changeMinDistance(arcballCameraController, param);
                        }), (function (value) {
                          return _1(send, /* CameraBlurMinDistance */__(1, [value]));
                        }), undefined, /* array */[])));
  }
  
  function make$41(store, dispatchFunc, arcballCameraController, _) {
    var partial_arg = /* tuple */[
      store,
      dispatchFunc
    ];
    return /* record */[
            /* debugName */component$35[/* debugName */0],
            /* reactClassInternal */component$35[/* reactClassInternal */1],
            /* handedOffState */component$35[/* handedOffState */2],
            /* willReceiveProps */component$35[/* willReceiveProps */3],
            /* didMount */component$35[/* didMount */4],
            /* didUpdate */component$35[/* didUpdate */5],
            /* willUnmount */component$35[/* willUnmount */6],
            /* willUpdate */component$35[/* willUpdate */7],
            /* shouldUpdate */component$35[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$50(/* tuple */[
                            store,
                            dispatchFunc
                          ], arcballCameraController, self);
              }),
            /* initialState */(function () {
                var engineStateToGetData = getRunEngineState(/* () */0);
                return /* record */[
                        /* distance */unsafeGetArcballCameraControllerDistance(arcballCameraController, engineStateToGetData),
                        /* minDistance */unsafeGetArcballCameraControllerMinDistance(arcballCameraController, engineStateToGetData)
                      ];
              }),
            /* retainedProps */component$35[/* retainedProps */11],
            /* reducer */(function (param, param$1) {
                return reducer$19(partial_arg, arcballCameraController, param, param$1);
              }),
            /* subscriptions */component$35[/* subscriptions */13],
            /* jsElementWrapped */component$35[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function buildComponentBox(param, param$1, param$2, isClosable, buildComponentFunc) {
    var dispatchFunc = param$1[1];
    var store = param$1[0];
    return element(getRandomKey(/* () */0), undefined, make$27(/* tuple */[
                    store,
                    dispatchFunc
                  ], param[0], isClosable, param$2[1], _2(buildComponentFunc, /* tuple */[
                        store,
                        dispatchFunc
                      ], param[1]), param$2[0], /* array */[]));
  }
  
  function _buildTransformFunc(param, component) {
    return element(getRandomKey(/* () */0), undefined, make$39(param[0], param[1], component, /* array */[]));
  }
  
  function _buildMaterialFunc(param, _) {
    return element(getRandomKey(/* () */0), undefined, make$34(param[0], param[1], /* array */[]));
  }
  
  function _buildLightFunc(param, _) {
    return element(getRandomKey(/* () */0), undefined, make$28(param[0], param[1], /* array */[]));
  }
  
  function _buildMeshRendererFunc(_, _$1) {
    return react_3$1("div", {
                key: getRandomKey(/* () */0)
              }, textEl("simulate Mesh Renderer"));
  }
  
  function _buildGeometryFunc(_, _$1) {
    return react_3$1("div", {
                key: getRandomKey(/* () */0)
              }, textEl("simulate Geometry"));
  }
  
  function _buildCameraFunc(_, _$1) {
    return react_3$1("div", {
                key: getRandomKey(/* () */0)
              }, textEl("simulate camera component"));
  }
  
  function _buildArcballCamera(param, component) {
    return element(undefined, undefined, make$41(param[0], param[1], component, /* array */[]));
  }
  
  function buildComponentUIComponent(param, type_, gameObject) {
    var dispatchFunc = param[1];
    var store = param[0];
    var engineStateToGetData = getRunEngineState(/* () */0);
    switch (type_) {
      case 0 : 
          return buildComponentBox(/* tuple */[
                      "Transform",
                      getTransformComponent$1(gameObject, engineStateToGetData)
                    ], /* tuple */[
                      store,
                      dispatchFunc
                    ], /* tuple */[
                      type_,
                      gameObject
                    ], false, _buildTransformFunc);
      case 1 : 
          return buildComponentBox(/* tuple */[
                      "MeshRenderer",
                      getMeshRendererComponent$1(gameObject, engineStateToGetData)
                    ], /* tuple */[
                      store,
                      dispatchFunc
                    ], /* tuple */[
                      type_,
                      gameObject
                    ], true, _buildMeshRendererFunc);
      case 2 : 
          return buildComponentBox(/* tuple */[
                      "CustomGeometry",
                      getGeometryComponent(gameObject, engineStateToGetData)
                    ], /* tuple */[
                      store,
                      dispatchFunc
                    ], /* tuple */[
                      type_,
                      gameObject
                    ], false, _buildGeometryFunc);
      case 3 : 
          return buildComponentBox(/* tuple */[
                      "ArcballCameraController",
                      getArcballCameraControllerComponent$1(gameObject, engineStateToGetData)
                    ], /* tuple */[
                      store,
                      dispatchFunc
                    ], /* tuple */[
                      type_,
                      gameObject
                    ], true, _buildArcballCamera);
      case 4 : 
          return buildComponentBox(/* tuple */[
                      "Camera",
                      getBasicCameraViewComponent$1(gameObject, engineStateToGetData)
                    ], /* tuple */[
                      store,
                      dispatchFunc
                    ], /* tuple */[
                      type_,
                      gameObject
                    ], true, _buildCameraFunc);
      case 5 : 
          return buildComponentBox(/* tuple */[
                      "Material",
                      getMaterialComponent(gameObject, engineStateToGetData)
                    ], /* tuple */[
                      store,
                      dispatchFunc
                    ], /* tuple */[
                      type_,
                      gameObject
                    ], true, _buildMaterialFunc);
      case 6 : 
          return buildComponentBox(/* tuple */[
                      "Light",
                      getLightComponent(gameObject, engineStateToGetData)
                    ], /* tuple */[
                      store,
                      dispatchFunc
                    ], /* tuple */[
                      type_,
                      gameObject
                    ], true, _buildLightFunc);
      case 7 : 
          return null;
      
    }
  }
  
  
  /* react Not a pure module */
  
  var setUndoValueToCopiedEngineState$29 = EmptyEventHandler[1];
  
  function handleSelfLogic$16(param, gameObject, newName) {
    var dispatchFunc = param[1];
    getAndRefreshEngineStateWithDiff(/* array */[/* record */[
            /* arguments : array */[gameObject],
            /* type_ : GameObject */0
          ]], (function (param, param$1) {
            return setGameObjectName(newName, param, param$1);
          }));
    _1(dispatchFunc, [
          SceneTreeAction,
          /* SetSceneGraph */[renameSceneGraphData(gameObject, newName, unsafeGetSceneGraphDataFromStore(param[0]))]
        ]);
    _1(dispatchFunc, [
          UpdateAction,
          /* Update */[/* array */[/* SceneTree */3]]
        ]);
    return /* () */0;
  }
  
  var MakeEventHandler$29 = MakeEventHandler$1([
        handleSelfLogic$16,
        setUndoValueToCopiedEngineState$29
      ]);
  
  
  /* MakeEventHandler Not a pure module */
  
  function reNameGameObjectBlurEvent(param, gameObject, newName) {
    var match = isValueEqual(/* String */0, newName, getEngineStateToGetData((function (param) {
                return unsafeGetGameObjectName(gameObject, param);
              })));
    if (match) {
      return /* () */0;
    } else {
      return _3(MakeEventHandler$29[/* pushUndoStackWithNoCopyEngineState */0], /* tuple */[
                  param[0],
                  param[1]
                ], gameObject, newName);
    }
  }
  
  function _buildNameFunc(param, gameObject) {
    var partial_arg_000 = param[0];
    var partial_arg_001 = param[1];
    var partial_arg = /* tuple */[
      partial_arg_000,
      partial_arg_001
    ];
    return react_3$1("div", {
                key: getRandomKey(/* () */0)
              }, element(undefined, undefined, make$23(getEngineStateToGetData((function (param) {
                              return unsafeGetGameObjectName(gameObject, param);
                            })), "Name", undefined, (function (param) {
                          return reNameGameObjectBlurEvent(partial_arg, gameObject, param);
                        }), false, /* array */[])));
  }
  
  function _buildGameObjectAllShowComponent(param, gameObject, componentTypeArr) {
    var dispatchFunc = param[1];
    var store = param[0];
    return componentTypeArr.map((function (componentType) {
                  return buildComponentUIComponent(/* tuple */[
                              store,
                              dispatchFunc
                            ], componentType, gameObject);
                }));
  }
  
  function buildCurrentSceneTreeNodeComponent(param, addableComponentConfig, currentSceneTreeNode) {
    if (currentSceneTreeNode !== undefined) {
      var gameObject = currentSceneTreeNode;
      var dispatchFunc = param[1];
      var store = param[0];
      return unshift(_buildNameFunc(/* tuple */[
                      store,
                      dispatchFunc
                    ], gameObject), push$2(element(getRandomKey(/* () */0), undefined, make$25(/* tuple */[
                              store,
                              dispatchFunc
                            ], gameObject, addableComponentConfig, /* array */[])), _buildGameObjectAllShowComponent(/* tuple */[
                          store,
                          dispatchFunc
                        ], gameObject, unsafeGet$1(gameObject, getComponentTypeMap(getState(/* () */0))))));
    } else {
      return /* array */[];
    }
  }
  
  var component$18 = statelessComponent("SceneTreeInspector");
  
  function render$33(param, addableComponentConfig, currentSceneTreeNode, _) {
    return react_3$1("article", {
                key: "SceneTreeInspector",
                className: "wonder-inspector-sceneTree"
              }, buildCurrentSceneTreeNodeComponent(/* tuple */[
                    param[0],
                    param[1]
                  ], addableComponentConfig, currentSceneTreeNode));
  }
  
  function make$24(store, dispatchFunc, addableComponentConfig, currentSceneTreeNode, _) {
    return /* record */[
            /* debugName */component$18[/* debugName */0],
            /* reactClassInternal */component$18[/* reactClassInternal */1],
            /* handedOffState */component$18[/* handedOffState */2],
            /* willReceiveProps */component$18[/* willReceiveProps */3],
            /* didMount */component$18[/* didMount */4],
            /* didUpdate */component$18[/* didUpdate */5],
            /* willUnmount */component$18[/* willUnmount */6],
            /* willUpdate */component$18[/* willUpdate */7],
            /* shouldUpdate */component$18[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$33(/* tuple */[
                            store,
                            dispatchFunc
                          ], addableComponentConfig, currentSceneTreeNode, self);
              }),
            /* initialState */component$18[/* initialState */10],
            /* retainedProps */component$18[/* retainedProps */11],
            /* reducer */component$18[/* reducer */12],
            /* subscriptions */component$18[/* subscriptions */13],
            /* jsElementWrapped */component$18[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function showInspectorBySourceType(param, addableComponentConfig, param$1) {
    var currentSelectSource = param$1[0];
    if (currentSelectSource !== undefined) {
      var currentNodeData = param$1[2];
      var dispatchFunc = param[1];
      var store = param[0];
      if (currentSelectSource) {
        if (currentNodeData !== undefined) {
          var match = currentNodeData;
          return element(getRandomKey(/* () */0), undefined, make$20(store, dispatchFunc, match[/* currentNodeId */0], match[/* nodeType */1], /* array */[]));
        } else {
          return null;
        }
      } else {
        return element(undefined, undefined, make$24(store, dispatchFunc, addableComponentConfig, param$1[1], /* array */[]));
      }
    } else {
      return null;
    }
  }
  
  var component$13 = statelessComponentWithRetainedProps("MainEditorInspector");
  
  function render$28(param, addableComponentConfig, _) {
    var editorState = getState(/* () */0);
    return react_3$1("article", {
                key: "inspector",
                className: "wonder-inspector-component"
              }, showInspectorBySourceType(/* tuple */[
                    param[0],
                    param[1]
                  ], addableComponentConfig, /* tuple */[
                    getCurrentSelectSource(editorState),
                    getCurrentSceneTreeNode(editorState),
                    getEditorState(getCurrentNodeData)
                  ]));
  }
  
  function shouldUpdate$1(param) {
    return shouldComponentUpdate(/* Inspector */1, param[/* newSelf */1][/* retainedProps */2][/* updateTypeArr */0]);
  }
  
  function make$19(store, dispatchFunc, addableComponentConfig, _) {
    return /* record */[
            /* debugName */component$13[/* debugName */0],
            /* reactClassInternal */component$13[/* reactClassInternal */1],
            /* handedOffState */component$13[/* handedOffState */2],
            /* willReceiveProps */component$13[/* willReceiveProps */3],
            /* didMount */component$13[/* didMount */4],
            /* didUpdate */component$13[/* didUpdate */5],
            /* willUnmount */component$13[/* willUnmount */6],
            /* willUpdate */component$13[/* willUpdate */7],
            /* shouldUpdate */shouldUpdate$1,
            /* render */(function (self) {
                return render$28(/* tuple */[
                            store,
                            dispatchFunc
                          ], addableComponentConfig, self);
              }),
            /* initialState */component$13[/* initialState */10],
            /* retainedProps : record */[/* updateTypeArr */getUpdateComponentTypeArr(store)],
            /* reducer */component$13[/* reducer */12],
            /* subscriptions */component$13[/* subscriptions */13],
            /* jsElementWrapped */component$13[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function handleDragEnter$2(id, handleFlagFunc, handleRelationErrorFunc, _) {
    var match = isTriggerDragEnter(id, handleFlagFunc, handleRelationErrorFunc);
    if (match) {
      return /* DragEnter */1;
    } else {
      return /* Nothing */0;
    }
  }
  
  function handleDragLeave$2(id, handleFlagFunc, handleRelationErrorFunc, $$event) {
    stopPropagation($$event);
    var match = isTriggerDragLeave(id, handleFlagFunc, handleRelationErrorFunc);
    if (match) {
      return /* DragLeave */2;
    } else {
      return /* Nothing */0;
    }
  }
  
  function handleDrop$2(uid, handleFlagFunc, handleRelationErrorFunc, $$event) {
    var startId = getDragedUid($$event);
    var match = isTriggerDragDrop(uid, startId, handleFlagFunc, handleRelationErrorFunc);
    if (match) {
      return /* DragDrop */[
              uid,
              startId
            ];
    } else {
      return /* DragLeave */2;
    }
  }
  
  var component$37 = reducerComponent("DragTree");
  
  function reducer$20(onDrop, action, state) {
    if (typeof action === "number") {
      switch (action) {
        case 0 : 
            return /* NoUpdate */0;
        case 1 : 
            return /* Update */__(0, [/* record */[/* style */addStyleProp("backgroundColor", "rgba(0,0,1,1.0)", state[/* style */0])]]);
        case 2 : 
            return /* Update */__(0, [/* record */[/* style */addStyleProp("backgroundColor", "#c0c0c0", state[/* style */0])]]);
        
      }
    } else {
      var removedId = action[1];
      var targetId = action[0];
      return sideEffects((function () {
                    return _1(onDrop, /* tuple */[
                                targetId,
                                removedId
                              ]);
                  }));
    }
  }
  
  function render$52(treeArray, rootUid, param, param$1) {
    var send = param$1[/* send */3];
    var handleRelationErrorFunc = param[1];
    var handleFlagFunc = param[0];
    return react_3$1("article", {
                className: "wonder-drag-tree"
              }, treeArray, react_3$1("div", {
                    className: "wonder-disable-drag",
                    style: param$1[/* state */1][/* style */0],
                    onDragEnter: (function (_e) {
                        return _1(send, handleDragEnter$2(rootUid, handleFlagFunc, handleRelationErrorFunc, _e));
                      }),
                    onDragLeave: (function (_e) {
                        return _1(send, handleDragLeave$2(rootUid, handleFlagFunc, handleRelationErrorFunc, _e));
                      }),
                    onDragOver: handleDragOver,
                    onDrop: (function (_e) {
                        return _1(send, handleDrop$2(rootUid, handleFlagFunc, handleRelationErrorFunc, _e));
                      })
                  }));
  }
  
  function make$43(treeArray, rootUid, onDrop, isFlag, handleRelationError, _) {
    return /* record */[
            /* debugName */component$37[/* debugName */0],
            /* reactClassInternal */component$37[/* reactClassInternal */1],
            /* handedOffState */component$37[/* handedOffState */2],
            /* willReceiveProps */component$37[/* willReceiveProps */3],
            /* didMount */component$37[/* didMount */4],
            /* didUpdate */component$37[/* didUpdate */5],
            /* willUnmount */component$37[/* willUnmount */6],
            /* willUpdate */component$37[/* willUpdate */7],
            /* shouldUpdate */component$37[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$52(treeArray, rootUid, /* tuple */[
                            isFlag,
                            handleRelationError
                          ], self);
              }),
            /* initialState */(function () {
                return /* record */[/* style */{
                          backgroundColor: "#c0c0c0"
                        }];
              }),
            /* retainedProps */component$37[/* retainedProps */11],
            /* reducer */(function (param, param$1) {
                return reducer$20(onDrop, param, param$1);
              }),
            /* subscriptions */component$37[/* subscriptions */13],
            /* jsElementWrapped */component$37[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  var setUndoValueToCopiedEngineState$30 = EmptyEventHandler[1];
  
  function handleSelfLogic$17(param, _, param$1) {
    var dragedUid = param$1[1];
    var targetUid = param$1[0];
    var dispatchFunc = param[1];
    getAndRefreshEngineStateWithDiff(/* array */[/* record */[
            /* arguments : array */[
              targetUid,
              dragedUid
            ],
            /* type_ : GameObject */0
          ]], setParentKeepOrder);
    _1(dispatchFunc, [
          SceneTreeAction,
          /* SetSceneGraph */[getDragedSceneGraphData(targetUid, dragedUid, unsafeGetSceneGraphDataFromStore(param[0]))]
        ]);
    _1(dispatchFunc, [
          UpdateAction,
          /* Update */[/* array */[/* SceneTree */3]]
        ]);
    return /* () */0;
  }
  
  var MakeEventHandler$30 = MakeEventHandler$1([
        handleSelfLogic$17,
        setUndoValueToCopiedEngineState$30
      ]);
  
  
  /* MakeEventHandler Not a pure module */
  
  var setUndoValueToCopiedEngineState$31 = EmptyEventHandler[1];
  
  function handleSelfLogic$18(param, _, uid) {
    setState(clearCurrentNodeData(getState(/* () */0)));
    setState(setCurrentSelectSource(/* SceneTree */0, setCurrentSceneTreeNode(uid, getState(/* () */0))));
    _1(param[1], [
          UpdateAction,
          /* Update */[/* array */[
              /* SceneTree */3,
              /* Inspector */1
            ]]
        ]);
    return /* () */0;
  }
  
  var MakeEventHandler$31 = MakeEventHandler$1([
        handleSelfLogic$18,
        setUndoValueToCopiedEngineState$31
      ]);
  
  
  /* MakeEventHandler Not a pure module */
  
  function onSelect$2(param, uid) {
    var dispatchFunc = param[1];
    var store = param[0];
    var editorState = getState(/* () */0);
    var match = getCurrentSceneTreeNode(editorState);
    if (match !== undefined) {
      var match$1 = match === uid;
      if (match$1) {
        return /* () */0;
      } else {
        return _3(MakeEventHandler$31[/* pushUndoStackWithNoCopyEngineState */0], /* tuple */[
                    store,
                    dispatchFunc
                  ], /* () */0, uid);
      }
    } else {
      return _3(MakeEventHandler$31[/* pushUndoStackWithNoCopyEngineState */0], /* tuple */[
                  store,
                  dispatchFunc
                ], /* () */0, uid);
    }
  }
  
  var onDrop$2 = MakeEventHandler$30[/* pushUndoStackWithNoCopyEngineState */0];
  
  function _isSelected$2(uid, currentSceneTreeNode) {
    if (currentSceneTreeNode !== undefined) {
      return valFromOption(currentSceneTreeNode) === uid;
    } else {
      return false;
    }
  }
  
  function buildSceneTreeArray(dragImg, currentSceneTreeNode, param, sceneGraphArr) {
    var onDropFunc = param[1];
    var onSelectFunc = param[0];
    return sceneGraphArr.map((function (param) {
                  var uid = param[/* uid */1];
                  return element(getRandomKey(/* () */0), undefined, make$14(uid, param[/* name */0], _isSelected$2(uid, currentSceneTreeNode), true, dragImg, getFlag(/* () */0), undefined, undefined, onSelectFunc, onDropFunc, isFlag, isGameObjectRelationError, buildSceneTreeArray(dragImg, currentSceneTreeNode, /* tuple */[
                                      onSelectFunc,
                                      onDropFunc
                                    ], param[/* children */2]), /* array */[]));
                }));
  }
  
  var component$36 = statelessComponentWithRetainedProps("MainEditorSceneTree");
  
  function render$51(store, dispatchFunc, _) {
    var editorState = getState(/* () */0);
    var partial_arg = /* tuple */[
      store,
      dispatchFunc
    ];
    return react_3$1("article", {
                key: "sceneTree",
                className: "wonder-sceneTree-component"
              }, element(getRandomKey(/* () */0), undefined, make$43(buildSceneTreeArray(document.createElement("img"), getCurrentSceneTreeNode(editorState), /* tuple */[
                            (function (param) {
                                return onSelect$2(partial_arg, param);
                              }),
                            _2(onDrop$2, /* tuple */[
                                  store,
                                  dispatchFunc
                                ], /* () */0)
                          ], getFirst(unsafeGetSceneGraphDataFromStore(store))[/* children */2]), getEngineStateToGetData(getSceneGameObject), _2(onDrop$2, /* tuple */[
                            store,
                            dispatchFunc
                          ], /* () */0), isFlag, isGameObjectRelationError, /* array */[])));
  }
  
  function shouldUpdate$3(param) {
    return shouldComponentUpdate(/* SceneTree */3, param[/* newSelf */1][/* retainedProps */2][/* updateTypeArr */0]);
  }
  
  function make$42(store, dispatchFunc, _) {
    return /* record */[
            /* debugName */component$36[/* debugName */0],
            /* reactClassInternal */component$36[/* reactClassInternal */1],
            /* handedOffState */component$36[/* handedOffState */2],
            /* willReceiveProps */component$36[/* willReceiveProps */3],
            /* didMount */component$36[/* didMount */4],
            /* didUpdate */component$36[/* didUpdate */5],
            /* willUnmount */component$36[/* willUnmount */6],
            /* willUpdate */component$36[/* willUpdate */7],
            /* shouldUpdate */shouldUpdate$3,
            /* render */(function (self) {
                return render$51(store, dispatchFunc, self);
              }),
            /* initialState */component$36[/* initialState */10],
            /* retainedProps : record */[/* updateTypeArr */getUpdateComponentTypeArr(store)],
            /* reducer */component$36[/* reducer */12],
            /* subscriptions */component$36[/* subscriptions */13],
            /* jsElementWrapped */component$36[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  var setScreenSize$2 = setScreenSize;
  
  
  /* No side effect */
  
  var setScreenSize$1 = setScreenSize$2;
  
  
  /* No side effect */
  
  function unsafeGetGl$2(state) {
    return unsafeGetGl(state[/* deviceManagerRecord */10]);
  }
  
  
  /* DeviceManagerService-Wonderjs Not a pure module */
  
  function setViewport(viewportData, state) {
    var newrecord = caml_array_dup(state);
    newrecord[/* deviceManagerRecord */10] = setViewportData(viewportData, setViewportOfGl(unsafeGetGl(state[/* deviceManagerRecord */10]), viewportData, state[/* deviceManagerRecord */10]));
    return newrecord;
  }
  
  var unsafeGetGl$1 = unsafeGetGl$2;
  
  
  /* DeviceManagerAPI-Wonderjs Not a pure module */
  
  var gameObject_all_component_test = "\n   [\n       {\n            \"type\":\"Mesh\",\n            \"components\":[\n                { \"type\" : \"MeshRenderer\" },\n                { \"type\" : \"CustomGeometry\" }\n            ]\n       },\n       {\n            \"type\":\"Camera\",\n            \"components\":[\n                { \"type\" : \"Camera\" },\n                { \"type\" : \"ArcballCameraController\" }\n            ]\n       },\n       {\n            \"type\":\"Rendering\",\n            \"components\":[\n                { \"type\" : \"Light\" },\n                { \"type\" : \"Material\" }\n                ]\n            }\n    ]\n";
  
  
  /* No side effect */
  
  function convertDataToRecord(jsonData) {
    return array((function (json) {
                  return /* record */[
                          /* type_ */field("type", string$2, json),
                          /* components */field("components", (function (param) {
                                  return array((function (json) {
                                                return /* record */[/* type_ */field("type", string$2, json)];
                                              }), param);
                                }), json)
                        ];
                }), JSON.parse(jsonData));
  }
  
  function getGameObjectAllComponentConfig() {
    return convertDataToRecord(gameObject_all_component_test);
  }
  
  
  /* No side effect */
  
  function _getCanvasParentSize(parent) {
    return /* tuple */[
            parent.offsetWidth,
            parent.offsetHeight
          ];
  }
  
  function _setViewportAndRefresh(param, engineState) {
    return loopBody(0, setViewport(/* tuple */[
                    0,
                    0,
                    param[0],
                    param[1]
                  ], engineState));
  }
  
  function _setViewportAndSendUniformProjectionMatDataAndRefresh(param, engineState) {
    var canvasHeight = param[1];
    var canvasWidth = param[0];
    return loopBody(0, sendUniformProjectionMatData$3(unsafeGetGl$1(engineState), /* tuple */[
                    canvasWidth,
                    canvasHeight
                  ], setViewport(/* tuple */[
                        0,
                        0,
                        canvasWidth,
                        canvasHeight
                      ], engineState)));
  }
  
  function resizeCanvasAndViewPort() {
    var match = _getCanvasParentSize(document.getElementById("editCanvasParent"));
    var height = match[1];
    var width = match[0];
    setScreenSize$1(/* tuple */[
          width,
          height,
          width,
          height
        ], document.getElementById("editCanvas"));
    setScreenSize$1(/* tuple */[
          width,
          height,
          width,
          height
        ], document.getElementById("runCanvas"));
    setEditEngineState(_setViewportAndSendUniformProjectionMatDataAndRefresh(/* tuple */[
              width,
              height
            ], getEditEngineState(/* () */0)));
    return setRunEngineState(_setViewportAndRefresh(/* tuple */[
                    width,
                    height
                  ], getRunEngineState(/* () */0)));
  }
  
  var component$5 = statelessComponentWithRetainedProps("MainEditor");
  
  function _buildNotStartElement() {
    return react_3$1("article", {
                key: "mainEditor",
                className: "wonder-mainEditor-component"
              }, react_3$1("div", {
                    key: "topComponent",
                    className: "top-component"
                  }, react_3$1("div", {
                        key: "webglParent",
                        className: "webgl-parent",
                        id: "editCanvasParent"
                      }, react_3$1("canvas", {
                            key: "editWebgl",
                            id: "editCanvas"
                          })), react_3$1("div", {
                        key: "webglRun",
                        className: "webgl-parent"
                      }, react_3$1("canvas", {
                            key: "runWebgl",
                            id: "runCanvas"
                          }))), react_3$1("div", {
                    key: "bottomComponent",
                    className: "bottom-component"
                  }));
  }
  
  function _buildStartedElement(store, dispatchFunc) {
    return react_3$1("article", {
                key: "mainEditor",
                className: "wonder-mainEditor-component"
              }, react_3$1("div", {
                    key: "topComponent",
                    className: "top-component"
                  }, react_3$1("div", {
                        className: "inline-component inspector-parent"
                      }, element(undefined, undefined, make$19(store, dispatchFunc, getGameObjectAllComponentConfig(/* () */0), /* array */[]))), react_3$1("div", {
                        className: "inline-component sceneTree-parent"
                      }, element(undefined, undefined, make$42(store, dispatchFunc, /* array */[]))), react_3$1("div", {
                        key: "webglParent",
                        className: "webgl-parent",
                        id: "editCanvasParent"
                      }, react_3$1("canvas", {
                            key: "editWebgl",
                            id: "editCanvas"
                          })), react_3$1("div", {
                        key: "webglRun",
                        className: "webgl-parent"
                      }, react_3$1("canvas", {
                            key: "runWebgl",
                            id: "runCanvas"
                          }))), react_3$1("div", {
                    key: "bottomComponent",
                    className: "bottom-component"
                  }, element(undefined, undefined, make$12(store, dispatchFunc, /* array */[]))));
  }
  
  function render$20(store, dispatchFunc, _) {
    var match = store[/* isEditorAndEngineStart */0];
    if (match) {
      return _buildStartedElement(store, dispatchFunc);
    } else {
      return _buildNotStartElement(/* () */0);
    }
  }
  
  function make$11(store, dispatchFunc, _) {
    return /* record */[
            /* debugName */component$5[/* debugName */0],
            /* reactClassInternal */component$5[/* reactClassInternal */1],
            /* handedOffState */component$5[/* handedOffState */2],
            /* willReceiveProps */component$5[/* willReceiveProps */3],
            /* didMount */(function () {
                start$1(/* () */0).then((function () {
                        getAndSetEditorState((function (editorState) {
                                var match = initRootAssetTree(editorState);
                                return setAssetTreeRoot(match[0], match[1]);
                              }));
                        _1(dispatchFunc, [
                              SceneTreeAction,
                              /* SetSceneGraph */[getStateToGetData(getSceneGraphDataFromEngine)]
                            ]);
                        return Promise.resolve(_1(dispatchFunc, StartEngineAction));
                      }));
                return onresize(resizeCanvasAndViewPort);
              }),
            /* didUpdate */(function (param) {
                var match = store[/* isEditorAndEngineStart */0] && caml_notequal(param[/* oldSelf */0][/* retainedProps */2], param[/* newSelf */1][/* retainedProps */2]);
                if (match) {
                  return resizeCanvasAndViewPort(/* () */0);
                } else {
                  return /* () */0;
                }
              }),
            /* willUnmount */component$5[/* willUnmount */6],
            /* willUpdate */component$5[/* willUpdate */7],
            /* shouldUpdate */component$5[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$20(store, dispatchFunc, self);
              }),
            /* initialState */component$5[/* initialState */10],
            /* retainedProps : record */[/* isEngineStart */store[/* isEditorAndEngineStart */0]],
            /* reducer */component$5[/* reducer */12],
            /* subscriptions */component$5[/* subscriptions */13],
            /* jsElementWrapped */component$5[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function convertDataToRecord$1(jsonData) {
    return array((function (json) {
                  return /* record */[
                          /* name */field("name", string$2, json),
                          /* className */field("className", string$2, json),
                          /* props */field("props", (function (param) {
                                  return array((function (json) {
                                                return /* record */[
                                                        /* name */field("name", string$2, json),
                                                        /* value */field("value", string$2, json),
                                                        /* type_ */field("type", string$2, json)
                                                      ];
                                              }), param);
                                }), json)
                        ];
                }), JSON.parse(jsonData));
  }
  
  
  /* No side effect */
  
  function buildFloatInput(label, defaultValue, onChange) {
    return element(undefined, undefined, make$31(defaultValue, label, onChange, undefined, undefined, /* array */[]));
  }
  
  function buildButton(text, _) {
    if (text !== undefined) {
      return react_3$1("button", undefined, textEl(text));
    } else {
      error(buildErrorMessage("buildButton", "the button component: text is empty", "", "check extension->panelExtension->render->name->button should add text", "button text: null"));
      return null;
    }
  }
  
  function buildDiv(text) {
    if (text !== undefined) {
      return react_3$1("div", {
                  key: getRandomKey(/* () */0)
                }, textEl(text));
    } else {
      error(buildErrorMessage("buildDiv", "the div component: text is empty", "", "check extension->panelExtension->render->name->div should add text", "div text: null"));
      return null;
    }
  }
  
  
  /* react Not a pure module */
  
  function buildComponentByName(componentName, argumentArray) {
    switch (componentName) {
      case "button" : 
          return _2(apply, argumentArray, buildButton);
      case "div" : 
          return _2(apply, argumentArray, buildDiv);
      case "float_input" : 
          return _2(apply, argumentArray, buildFloatInput);
      default:
        error(buildErrorMessage("buildComponentByName", "the specific component: " + (String(componentName) + " is not find"), "", "check extension->panelExtension->render->name->" + (String(componentName) + " should correct"), "componentName: " + (String(componentName) + "")));
        return null;
    }
  }
  
  
  /* Log-WonderLog Not a pure module */
  
  var atom_attibute = "[\n {\n   \"name\":\"float_input\", \"existProps\":[\n      {\"name\":\"label\"},\n      {\"name\":\"defaultValue\"},\n      {\"name\":\"onChange\"}\n   ]\n },\n {\n   \"name\":\"button\", \"existProps\":[\n      {\"name\":\"text\"},\n      {\"name\":\"onClick\"}\n   ]\n },\n {\n   \"name\":\"div\", \"existProps\":[\n      {\"name\":\"text\"}\n   ]\n }\n]";
  
  
  /* No side effect */
  
  function convertDataToRecord$2(jsonData) {
    return array((function (json) {
                  return /* record */[
                          /* name */field("name", string$2, json),
                          /* existProps */field("existProps", (function (param) {
                                  return array((function (json) {
                                                return /* record */[/* name */field("name", string$2, json)];
                                              }), param);
                                }), json)
                        ];
                }), JSON.parse(jsonData));
  }
  
  function getAtomAttributeRecord() {
    return convertDataToRecord$2(atom_attibute);
  }
  
  
  /* No side effect */
  
  function _getUniqueAtomAttribute(atomName) {
    var atomAttributeArr = getAtomAttributeRecord(/* () */0).filter((function (atom) {
            return atom[/* name */0] === atomName;
          }));
    var match = atomAttributeArr.length;
    if (match !== 0) {
      return /* Match */[atomAttributeArr[0]];
    } else {
      error(buildErrorMessage("_getUniqueAtomAttribute", "the specific atom : " + (String(atomName) + " not exist"), "", "check extension->panelExtension->render->" + (String(atomName) + " should correct "), "atom name: " + (String(atomName) + "")));
      return /* NoMatch */0;
    }
  }
  
  function _findUniquePropArrayByAtomName(atomName, propArray) {
    return ensureCheck((function (r) {
                  var len = r.length;
                  return test(buildAssertMessage("propArray\'s length <= 1", "is " + (String(len) + "")), (function () {
                                return Operators[/* <= */11](len, 1);
                              }));
                }), getStateIsDebug(/* () */0), propArray.filter((function (props) {
                      return props[/* name */0] === atomName;
                    })));
  }
  
  function _getUniqueMapByComponentName(state, uiComponentName) {
    var match = state[/* mapState */2][/* componentsMap */0];
    if (match !== undefined) {
      var match$1 = get$2(uiComponentName, valFromOption(match));
      if (match$1 !== undefined) {
        return valFromOption(match$1);
      } else {
        return fatal(buildFatalMessage("_getUniqueMapByComponentName", "can\'t find " + (String(uiComponentName) + " in appState->mapState->componentsMap"), "", "", "uiComponentName:" + (String(uiComponentName) + "")));
      }
    } else {
      return fatal(buildFatalMessage("_getUniqueMapByComponentName", "appState->mapState->componentsMap is none", "", "", "uiComponentName:" + (String(uiComponentName) + "")));
    }
  }
  
  function _createArgumentArray(uiComponentName, state, prop) {
    var type_ = prop[/* type_ */2];
    var value = prop[/* value */1];
    var name = prop[/* name */0];
    switch (type_) {
      case "function" : 
          var match = get$2(value, _getUniqueMapByComponentName(state, uiComponentName));
          if (match !== undefined) {
            return some(valFromOption(match));
          } else {
            error(buildErrorMessage("_createArgumentArray", "the specific function " + (String(name) + (" : " + (String(value) + " not exist in appState->mapState->componentsMap"))), "", "check extension:" + (String(uiComponentName) + ("->panelExtension->render->(" + (String(prop) + (")->" + (String(value) + " should exist in methodExtension"))))), "name: " + (String(name) + (", value: " + (String(value) + "")))));
            return undefined;
          }
      case "string" : 
          return some(value);
      default:
        error(buildErrorMessage("_createArgumentArray", "the specific type : " + (String(type_) + " not exist in atomComponent\'s propArray"), "", "check extension:" + (String(uiComponentName) + ("->panelExtension->render->(" + (String(prop) + (")->" + (String(type_) + " should correct"))))), "type: " + (String(type_) + "")));
        return undefined;
    }
  }
  
  function _matchRecordProp(uiComponentName, state, component, atomName) {
    var propArray = _findUniquePropArrayByAtomName(atomName, component[/* props */2]);
    var match = propArray.length;
    if (match !== 0) {
      return _createArgumentArray(uiComponentName, state, getFirst(propArray));
    }
    
  }
  
  function _buildComponentArgumentArr(uiComponentName, state, component, atomAttribute) {
    if (atomAttribute) {
      return atomAttribute[0][/* existProps */1].map((function (prop) {
                    return _matchRecordProp(uiComponentName, state, component, prop[/* name */0]);
                  }));
    } else {
      return /* array */[];
    }
  }
  
  function _buildComponentWithArgument(component, argumentArray) {
    var reactElement = buildComponentByName(component[/* name */0], argumentArray);
    return react_3$1("div", {
                key: getRandomKey(/* () */0),
                className: component[/* className */1]
              }, reactElement);
  }
  
  function _parseSystem(uiComponentName, state, atomComponent) {
    return _buildComponentWithArgument(atomComponent, _buildComponentArgumentArr(uiComponentName, state, atomComponent, _getUniqueAtomAttribute(atomComponent[/* name */0])));
  }
  
  function buildSpecificComponents(jsonData, uiComponentName, state) {
    return convertDataToRecord$1(jsonData).map((function (atomComponent) {
                  return _parseSystem(uiComponentName, state, atomComponent);
                }));
  }
  
  
  /* react Not a pure module */
  
  var component$38 = statelessComponent("UserExtension");
  
  function render$53(record, name, store, _) {
    _1(record[/* willRender */4], /* () */0);
    return react_3$1("article", {
                key: "panelExtension"
              }, buildSpecificComponents(record[/* render */2], name, store));
  }
  
  function make$44(record, name, store, _) {
    return /* record */[
            /* debugName */component$38[/* debugName */0],
            /* reactClassInternal */component$38[/* reactClassInternal */1],
            /* handedOffState */component$38[/* handedOffState */2],
            /* willReceiveProps */component$38[/* willReceiveProps */3],
            /* didMount */(function () {
                return _1(record[/* didMount */5], /* () */0);
              }),
            /* didUpdate */component$38[/* didUpdate */5],
            /* willUnmount */component$38[/* willUnmount */6],
            /* willUpdate */component$38[/* willUpdate */7],
            /* shouldUpdate */component$38[/* shouldUpdate */8],
            /* render */(function (self) {
                return render$53(record, name, store, self);
              }),
            /* initialState */(function () {
                return _1(record[/* initialState */3], /* () */0);
              }),
            /* retainedProps */component$38[/* retainedProps */11],
            /* reducer */component$38[/* reducer */12],
            /* subscriptions */component$38[/* subscriptions */13],
            /* jsElementWrapped */component$38[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function createComponentMap$1() {
    return createEmpty$1(/* () */0);
  }
  
  function addExtensionMap(componentMap, extensionName, extensionMap) {
    return set(extensionName, extensionMap, componentMap);
  }
  
  
  /* HashMapService-WonderCommonlib Not a pure module */
  
  function tFromJs(param) {
    return /* record */[
            /* panelExtension */param.panelExtension,
            /* methodExtension */param.methodExtension,
            /* name */param.name
          ];
  }
  
  
  /* No side effect */
  
  function createExtensionMap(methodExtension) {
    return reduceOneParam((function (map, func) {
                  return set(func.name, func.value, map);
                }), createEmpty$1(/* () */0), methodExtension.map((function (func) {
                      return func;
                    })));
  }
  
  
  /* ArrayService-WonderCommonlib Not a pure module */
  
  var func = ( function(extensionText) {
      return (new Function(extensionText))();
    }
    );
  
  function _getExtensionName(extensionRecord) {
    requireCheck((function () {
            return test(buildAssertMessage("the extension name exist", "not"), (function () {
                          return assertFalse((extensionRecord[/* name */2] == null));
                        }));
          }), getStateIsDebug(/* () */0));
    return unsafeGet$3(nullable_to_opt(extensionRecord[/* name */2]));
  }
  
  function _getExtensionMethods(extensionRecord) {
    requireCheck((function () {
            return test(buildAssertMessage("the extension->methodExtension exist", "not"), (function () {
                          return assertFalse((extensionRecord[/* methodExtension */1] == null));
                        }));
          }), getStateIsDebug(/* () */0));
    return unsafeGet$3(nullable_to_opt(extensionRecord[/* methodExtension */1]));
  }
  
  function _getExtensionPanels(extensionRecord) {
    requireCheck((function () {
            return test(buildAssertMessage("the extension panelExtension exist", "not"), (function () {
                          return assertFalse((extensionRecord[/* methodExtension */1] == null));
                        }));
          }), getStateIsDebug(/* () */0));
    return unsafeGet$3(nullable_to_opt(extensionRecord[/* panelExtension */0]));
  }
  
  function createComponentMap(extensionText) {
    var extensionRecord = tFromJs(_1(func, extensionText));
    return addExtensionMap(createComponentMap$1(/* () */0), _getExtensionName(extensionRecord), createExtensionMap(_getExtensionMethods(extensionRecord)));
  }
  
  function extensionPanelComponent(componentName, extensionText, store) {
    var extensionRecord = tFromJs(_1(func, extensionText));
    var panelArray = _getExtensionPanels(extensionRecord).map((function (panel) {
              return panel;
            })).filter((function (panel) {
            return panel.parent === componentName;
          }));
    var len = panelArray.length;
    if (len !== 0) {
      return panelArray.map((function (panelObj) {
                      var extensionObj = panelObj;
                      return /* record */[
                              /* name */extensionObj.name,
                              /* parent */extensionObj.parent,
                              /* render */extensionObj.render,
                              /* initialState */extensionObj.initialState,
                              /* willRender */extensionObj.willRender,
                              /* didMount */extensionObj.didMount
                            ];
                    })).map((function (record) {
                    return element(getRandomKey(/* () */0), undefined, make$44(record, _getExtensionName(extensionRecord), store, /* array */[]));
                  }));
    } else {
      return /* array */[];
    }
  }
  
  
  /* func Not a pure module */
  
  function showComponent(store, dispatchFunc) {
    var value = getExtension("userExtension");
    var match = store[/* isEditorAndEngineStart */0];
    return react_3$1("article", {
                key: "app",
                className: "wonder-app-component"
              }, value !== undefined ? extensionPanelComponent("App", value, store) : null, match ? element(undefined, undefined, make$2(store, dispatchFunc, /* array */[])) : null, element(undefined, undefined, make$11(store, dispatchFunc, /* array */[])));
  }
  
  var component = statelessComponent("App");
  
  function render(param, _) {
    var store = param[0];
    var match = store[/* isDidMounted */1];
    if (match) {
      return showComponent(store, param[1]);
    } else {
      return react_3$1("article", {
                  key: "app",
                  className: "app-component"
                });
    }
  }
  
  function make$1(store, dispatch, _) {
    return /* record */[
            /* debugName */component[/* debugName */0],
            /* reactClassInternal */component[/* reactClassInternal */1],
            /* handedOffState */component[/* handedOffState */2],
            /* willReceiveProps */component[/* willReceiveProps */3],
            /* didMount */(function () {
                var value = getExtension("userExtension");
                if (value !== undefined) {
                  var componentsMap = createComponentMap(value);
                  _1(dispatch, [
                        MapAction,
                        /* StoreMap */[some(componentsMap)]
                      ]);
                }
                return _1(dispatch, IsDidMounted);
              }),
            /* didUpdate */component[/* didUpdate */5],
            /* willUnmount */component[/* willUnmount */6],
            /* willUpdate */component[/* willUpdate */7],
            /* shouldUpdate */component[/* shouldUpdate */8],
            /* render */(function (self) {
                return render(/* tuple */[
                            store,
                            dispatch
                          ], self);
              }),
            /* initialState */component[/* initialState */10],
            /* retainedProps */component[/* retainedProps */11],
            /* reducer */component[/* reducer */12],
            /* subscriptions */component[/* subscriptions */13],
            /* jsElementWrapped */component[/* jsElementWrapped */14]
          ];
  }
  
  
  /* component Not a pure module */
  
  function create$88(reducer, preloadedState, enhancer, _) {
    if (enhancer !== undefined) {
      return /* record */[
              /* state */preloadedState,
              /* reducer */reducer,
              /* listeners : [] */0,
              /* customDispatcher */enhancer
            ];
    } else {
      return /* record */[
              /* state */preloadedState,
              /* reducer */reducer,
              /* listeners : [] */0,
              /* customDispatcher */undefined
            ];
    }
  }
  
  function unsubscribe$1(store, listener, _) {
    store[/* listeners */2] = filter$2((function (l) {
              return listener !== l;
            }))(store[/* listeners */2]);
    return /* () */0;
  }
  
  function subscribe$1(store, listener) {
    store[/* listeners */2] = /* :: */[
      listener,
      store[/* listeners */2]
    ];
    return (function (param) {
        return unsubscribe$1(store, listener, param);
      });
  }
  
  function nativeDispatch(store, action) {
    store[/* state */0] = _2(store[/* reducer */1], store[/* state */0], action);
    return iter$1((function (listener) {
                  return _1(listener, /* () */0);
                }), store[/* listeners */2]);
  }
  
  function dispatch(store, action) {
    var match = store[/* customDispatcher */3];
    if (match !== undefined) {
      return _3(match, store, (function (param) {
                    return nativeDispatch(store, param);
                  }), action);
    } else {
      return nativeDispatch(store, action);
    }
  }
  
  function getState$1(store) {
    return store[/* state */0];
  }
  
  function replaceReducer(store, reducer) {
    store[/* reducer */1] = reducer;
    return /* () */0;
  }
  
  var Store = /* module */[
    /* create */create$88,
    /* unsubscribe */unsubscribe$1,
    /* subscribe */subscribe$1,
    /* nativeDispatch */nativeDispatch,
    /* dispatch */dispatch,
    /* getState */getState$1,
    /* replaceReducer */replaceReducer
  ];
  
  function createMake($staropt$star, store) {
    var name = $staropt$star !== undefined ? $staropt$star : "Provider";
    var innerComponent = reducerComponent(name);
    return (function (component, _) {
        return /* record */[
                /* debugName */innerComponent[/* debugName */0],
                /* reactClassInternal */innerComponent[/* reactClassInternal */1],
                /* handedOffState */innerComponent[/* handedOffState */2],
                /* willReceiveProps */innerComponent[/* willReceiveProps */3],
                /* didMount */(function (param) {
                    var send = param[/* send */3];
                    return _1(send, /* AddListener */[send]);
                  }),
                /* didUpdate */innerComponent[/* didUpdate */5],
                /* willUnmount */(function (param) {
                    var match = param[/* state */1][/* unsubscribe */1];
                    if (match !== undefined) {
                      return _1(match, /* () */0);
                    } else {
                      return /* () */0;
                    }
                  }),
                /* willUpdate */innerComponent[/* willUpdate */7],
                /* shouldUpdate */innerComponent[/* shouldUpdate */8],
                /* render */(function (param) {
                    var match = param[/* state */1][/* reductiveState */0];
                    if (match !== undefined) {
                      return element(undefined, undefined, _3(component, valFromOption(match), (function (param) {
                                        return dispatch(store, param);
                                      }), /* array */[]));
                    } else {
                      return null;
                    }
                  }),
                /* initialState */(function () {
                    return /* record */[
                            /* reductiveState */some(store[/* state */0]),
                            /* unsubscribe */undefined
                          ];
                  }),
                /* retainedProps */innerComponent[/* retainedProps */11],
                /* reducer */(function (action, state) {
                    if (action) {
                      var send = action[0];
                      return /* Update */__(0, [/* record */[
                                  /* reductiveState */some(store[/* state */0]),
                                  /* unsubscribe */subscribe$1(store, (function () {
                                          return _1(send, /* UpdateState */0);
                                        }))
                                ]]);
                    } else {
                      return /* Update */__(0, [/* record */[
                                  /* reductiveState */some(store[/* state */0]),
                                  /* unsubscribe */state[/* unsubscribe */1]
                                ]]);
                    }
                  }),
                /* subscriptions */innerComponent[/* subscriptions */13],
                /* jsElementWrapped */innerComponent[/* jsElementWrapped */14]
              ];
      });
  }
  
  var Provider = /* module */[/* createMake */createMake];
  
  
  /* ReasonReact Not a pure module */
  
  var Thunk = create("ReduxThunk-WonderEditor.Thunk");
  
  
  /* No side effect */
  
  function logger(_, next, action) {
    _1(next, action);
    return /* () */0;
  }
  
  function thunk(store, next, action) {
    if (action[0] === Thunk) {
      return _1(action[1], store);
    } else {
      return _1(next, action);
    }
  }
  
  
  /* No side effect */
  
  function thunkedLoggedTimeTravelLogger(store, next) {
    return (function (param) {
        return thunk(store, (function (param) {
                      return logger(store, next, param);
                    }), param);
      });
  }
  
  var store = Store[/* create */0](appReducter, state, thunkedLoggedTimeTravelLogger, /* () */0);
  
  
  /* store Not a pure module */
  
  var make = Provider[/* createMake */0](undefined, store);
  
  var IndexStoreProvider = /* module */[/* make */make];
  
  renderToElementWithId(element(undefined, undefined, _2(make, make$1, /* array */[])), "index");
  
  
  /* make Not a pure module */
  
  exports.IndexStoreProvider = IndexStoreProvider;
  
  return exports;
  
  }({}));
  